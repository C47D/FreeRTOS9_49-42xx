ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB43:
  26              		.file 1 "..\\FreeRTOS9\\tasks.c"
   1:..\FreeRTOS9/tasks.c **** /*
   2:..\FreeRTOS9/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:..\FreeRTOS9/tasks.c ****     All rights reserved
   4:..\FreeRTOS9/tasks.c **** 
   5:..\FreeRTOS9/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:..\FreeRTOS9/tasks.c **** 
   7:..\FreeRTOS9/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:..\FreeRTOS9/tasks.c **** 
   9:..\FreeRTOS9/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:..\FreeRTOS9/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:..\FreeRTOS9/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:..\FreeRTOS9/tasks.c **** 
  13:..\FreeRTOS9/tasks.c ****     ***************************************************************************
  14:..\FreeRTOS9/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:..\FreeRTOS9/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:..\FreeRTOS9/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:..\FreeRTOS9/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:..\FreeRTOS9/tasks.c ****     ***************************************************************************
  19:..\FreeRTOS9/tasks.c **** 
  20:..\FreeRTOS9/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:..\FreeRTOS9/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:..\FreeRTOS9/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:..\FreeRTOS9/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:..\FreeRTOS9/tasks.c **** 
  25:..\FreeRTOS9/tasks.c ****     ***************************************************************************
  26:..\FreeRTOS9/tasks.c ****      *                                                                       *
  27:..\FreeRTOS9/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:..\FreeRTOS9/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:..\FreeRTOS9/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:..\FreeRTOS9/tasks.c ****      *    is the industry's de facto standard.                               *
  31:..\FreeRTOS9/tasks.c ****      *                                                                       *
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 2


  32:..\FreeRTOS9/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:..\FreeRTOS9/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:..\FreeRTOS9/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:..\FreeRTOS9/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:..\FreeRTOS9/tasks.c ****      *                                                                       *
  37:..\FreeRTOS9/tasks.c ****     ***************************************************************************
  38:..\FreeRTOS9/tasks.c **** 
  39:..\FreeRTOS9/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:..\FreeRTOS9/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:..\FreeRTOS9/tasks.c ****     defined configASSERT()?
  42:..\FreeRTOS9/tasks.c **** 
  43:..\FreeRTOS9/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:..\FreeRTOS9/tasks.c ****     embedded software for free we request you assist our global community by
  45:..\FreeRTOS9/tasks.c ****     participating in the support forum.
  46:..\FreeRTOS9/tasks.c **** 
  47:..\FreeRTOS9/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:..\FreeRTOS9/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:..\FreeRTOS9/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:..\FreeRTOS9/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:..\FreeRTOS9/tasks.c **** 
  52:..\FreeRTOS9/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:..\FreeRTOS9/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:..\FreeRTOS9/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:..\FreeRTOS9/tasks.c **** 
  56:..\FreeRTOS9/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:..\FreeRTOS9/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:..\FreeRTOS9/tasks.c **** 
  59:..\FreeRTOS9/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:..\FreeRTOS9/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:..\FreeRTOS9/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:..\FreeRTOS9/tasks.c **** 
  63:..\FreeRTOS9/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:..\FreeRTOS9/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:..\FreeRTOS9/tasks.c ****     mission critical applications that require provable dependability.
  66:..\FreeRTOS9/tasks.c **** 
  67:..\FreeRTOS9/tasks.c ****     1 tab == 4 spaces!
  68:..\FreeRTOS9/tasks.c **** */
  69:..\FreeRTOS9/tasks.c **** 
  70:..\FreeRTOS9/tasks.c **** /* Standard includes. */
  71:..\FreeRTOS9/tasks.c **** #include <stdlib.h>
  72:..\FreeRTOS9/tasks.c **** #include <string.h>
  73:..\FreeRTOS9/tasks.c **** 
  74:..\FreeRTOS9/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:..\FreeRTOS9/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:..\FreeRTOS9/tasks.c **** task.h is included from an application file. */
  77:..\FreeRTOS9/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:..\FreeRTOS9/tasks.c **** 
  79:..\FreeRTOS9/tasks.c **** /* FreeRTOS includes. */
  80:..\FreeRTOS9/tasks.c **** #include "FreeRTOS.h"
  81:..\FreeRTOS9/tasks.c **** #include "task.h"
  82:..\FreeRTOS9/tasks.c **** #include "timers.h"
  83:..\FreeRTOS9/tasks.c **** #include "StackMacros.h"
  84:..\FreeRTOS9/tasks.c **** 
  85:..\FreeRTOS9/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:..\FreeRTOS9/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:..\FreeRTOS9/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:..\FreeRTOS9/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 3


  89:..\FreeRTOS9/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:..\FreeRTOS9/tasks.c **** 
  91:..\FreeRTOS9/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:..\FreeRTOS9/tasks.c **** functions but without including stdio.h here. */
  93:..\FreeRTOS9/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:..\FreeRTOS9/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:..\FreeRTOS9/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:..\FreeRTOS9/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:..\FreeRTOS9/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:..\FreeRTOS9/tasks.c **** 	#include <stdio.h>
  99:..\FreeRTOS9/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:..\FreeRTOS9/tasks.c **** 
 101:..\FreeRTOS9/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:..\FreeRTOS9/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:..\FreeRTOS9/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:..\FreeRTOS9/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:..\FreeRTOS9/tasks.c **** #else
 106:..\FreeRTOS9/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:..\FreeRTOS9/tasks.c **** #endif
 108:..\FreeRTOS9/tasks.c **** 
 109:..\FreeRTOS9/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:..\FreeRTOS9/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:..\FreeRTOS9/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:..\FreeRTOS9/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:..\FreeRTOS9/tasks.c **** 
 114:..\FreeRTOS9/tasks.c **** /*
 115:..\FreeRTOS9/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:..\FreeRTOS9/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:..\FreeRTOS9/tasks.c ****  */
 118:..\FreeRTOS9/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:..\FreeRTOS9/tasks.c **** 
 120:..\FreeRTOS9/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:..\FreeRTOS9/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:..\FreeRTOS9/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:..\FreeRTOS9/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:..\FreeRTOS9/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:..\FreeRTOS9/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:..\FreeRTOS9/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:..\FreeRTOS9/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:..\FreeRTOS9/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:..\FreeRTOS9/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:..\FreeRTOS9/tasks.c **** made to free the RAM that was allocated statically.
 131:..\FreeRTOS9/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:..\FreeRTOS9/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:..\FreeRTOS9/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:..\FreeRTOS9/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:..\FreeRTOS9/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:..\FreeRTOS9/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:..\FreeRTOS9/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:..\FreeRTOS9/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:..\FreeRTOS9/tasks.c **** 
 140:..\FreeRTOS9/tasks.c **** /*
 141:..\FreeRTOS9/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:..\FreeRTOS9/tasks.c ****  */
 143:..\FreeRTOS9/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:..\FreeRTOS9/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:..\FreeRTOS9/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 4


 146:..\FreeRTOS9/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:..\FreeRTOS9/tasks.c **** 
 148:..\FreeRTOS9/tasks.c **** /*
 149:..\FreeRTOS9/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:..\FreeRTOS9/tasks.c ****  * global, rather than file scope.
 151:..\FreeRTOS9/tasks.c ****  */
 152:..\FreeRTOS9/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:..\FreeRTOS9/tasks.c **** 	#define static
 154:..\FreeRTOS9/tasks.c **** #endif
 155:..\FreeRTOS9/tasks.c **** 
 156:..\FreeRTOS9/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:..\FreeRTOS9/tasks.c **** 
 158:..\FreeRTOS9/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:..\FreeRTOS9/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:..\FreeRTOS9/tasks.c **** 	microcontroller architecture. */
 161:..\FreeRTOS9/tasks.c **** 
 162:..\FreeRTOS9/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:..\FreeRTOS9/tasks.c **** 	state task. */
 164:..\FreeRTOS9/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:..\FreeRTOS9/tasks.c **** 	{																									\
 166:..\FreeRTOS9/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:..\FreeRTOS9/tasks.c **** 		{																								\
 168:..\FreeRTOS9/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:..\FreeRTOS9/tasks.c **** 		}																								\
 170:..\FreeRTOS9/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:..\FreeRTOS9/tasks.c **** 
 172:..\FreeRTOS9/tasks.c **** 	/*-----------------------------------------------------------*/
 173:..\FreeRTOS9/tasks.c **** 
 174:..\FreeRTOS9/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:..\FreeRTOS9/tasks.c **** 	{																									\
 176:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:..\FreeRTOS9/tasks.c **** 																										\
 178:..\FreeRTOS9/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:..\FreeRTOS9/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:..\FreeRTOS9/tasks.c **** 		{																								\
 181:..\FreeRTOS9/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:..\FreeRTOS9/tasks.c **** 			--uxTopPriority;																			\
 183:..\FreeRTOS9/tasks.c **** 		}																								\
 184:..\FreeRTOS9/tasks.c **** 																										\
 185:..\FreeRTOS9/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:..\FreeRTOS9/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:..\FreeRTOS9/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:..\FreeRTOS9/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:..\FreeRTOS9/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:..\FreeRTOS9/tasks.c **** 
 191:..\FreeRTOS9/tasks.c **** 	/*-----------------------------------------------------------*/
 192:..\FreeRTOS9/tasks.c **** 
 193:..\FreeRTOS9/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:..\FreeRTOS9/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:..\FreeRTOS9/tasks.c **** 	being used. */
 196:..\FreeRTOS9/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:..\FreeRTOS9/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:..\FreeRTOS9/tasks.c **** 
 199:..\FreeRTOS9/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:..\FreeRTOS9/tasks.c **** 
 201:..\FreeRTOS9/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:..\FreeRTOS9/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 5


 203:..\FreeRTOS9/tasks.c **** 	architecture being used. */
 204:..\FreeRTOS9/tasks.c **** 
 205:..\FreeRTOS9/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:..\FreeRTOS9/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:..\FreeRTOS9/tasks.c **** 
 208:..\FreeRTOS9/tasks.c **** 	/*-----------------------------------------------------------*/
 209:..\FreeRTOS9/tasks.c **** 
 210:..\FreeRTOS9/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:..\FreeRTOS9/tasks.c **** 	{																								\
 212:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:..\FreeRTOS9/tasks.c **** 																									\
 214:..\FreeRTOS9/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:..\FreeRTOS9/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:..\FreeRTOS9/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:..\FreeRTOS9/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:..\FreeRTOS9/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:..\FreeRTOS9/tasks.c **** 
 220:..\FreeRTOS9/tasks.c **** 	/*-----------------------------------------------------------*/
 221:..\FreeRTOS9/tasks.c **** 
 222:..\FreeRTOS9/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:..\FreeRTOS9/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:..\FreeRTOS9/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:..\FreeRTOS9/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:..\FreeRTOS9/tasks.c **** 	{																									\
 227:..\FreeRTOS9/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:..\FreeRTOS9/tasks.c **** 		{																								\
 229:..\FreeRTOS9/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:..\FreeRTOS9/tasks.c **** 		}																								\
 231:..\FreeRTOS9/tasks.c **** 	}
 232:..\FreeRTOS9/tasks.c **** 
 233:..\FreeRTOS9/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:..\FreeRTOS9/tasks.c **** 
 235:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 236:..\FreeRTOS9/tasks.c **** 
 237:..\FreeRTOS9/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:..\FreeRTOS9/tasks.c **** count overflows. */
 239:..\FreeRTOS9/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:..\FreeRTOS9/tasks.c **** {																									\
 241:..\FreeRTOS9/tasks.c **** 	List_t *pxTemp;																					\
 242:..\FreeRTOS9/tasks.c **** 																									\
 243:..\FreeRTOS9/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:..\FreeRTOS9/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:..\FreeRTOS9/tasks.c **** 																									\
 246:..\FreeRTOS9/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:..\FreeRTOS9/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:..\FreeRTOS9/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:..\FreeRTOS9/tasks.c **** 	xNumOfOverflows++;																				\
 250:..\FreeRTOS9/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:..\FreeRTOS9/tasks.c **** }
 252:..\FreeRTOS9/tasks.c **** 
 253:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 254:..\FreeRTOS9/tasks.c **** 
 255:..\FreeRTOS9/tasks.c **** /*
 256:..\FreeRTOS9/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:..\FreeRTOS9/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:..\FreeRTOS9/tasks.c ****  */
 259:..\FreeRTOS9/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 6


 260:..\FreeRTOS9/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:..\FreeRTOS9/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:..\FreeRTOS9/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:..\FreeRTOS9/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 265:..\FreeRTOS9/tasks.c **** 
 266:..\FreeRTOS9/tasks.c **** /*
 267:..\FreeRTOS9/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:..\FreeRTOS9/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:..\FreeRTOS9/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:..\FreeRTOS9/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:..\FreeRTOS9/tasks.c ****  */
 272:..\FreeRTOS9/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:..\FreeRTOS9/tasks.c **** 
 274:..\FreeRTOS9/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:..\FreeRTOS9/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:..\FreeRTOS9/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:..\FreeRTOS9/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:..\FreeRTOS9/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:..\FreeRTOS9/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:..\FreeRTOS9/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:..\FreeRTOS9/tasks.c **** to its original value when it is released. */
 282:..\FreeRTOS9/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:..\FreeRTOS9/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:..\FreeRTOS9/tasks.c **** #else
 285:..\FreeRTOS9/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:..\FreeRTOS9/tasks.c **** #endif
 287:..\FreeRTOS9/tasks.c **** 
 288:..\FreeRTOS9/tasks.c **** /*
 289:..\FreeRTOS9/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:..\FreeRTOS9/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:..\FreeRTOS9/tasks.c ****  * (the task's run time environment, including register values)
 292:..\FreeRTOS9/tasks.c ****  */
 293:..\FreeRTOS9/tasks.c **** typedef struct tskTaskControlBlock
 294:..\FreeRTOS9/tasks.c **** {
 295:..\FreeRTOS9/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:..\FreeRTOS9/tasks.c **** 
 297:..\FreeRTOS9/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:..\FreeRTOS9/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:..\FreeRTOS9/tasks.c **** 	#endif
 300:..\FreeRTOS9/tasks.c **** 
 301:..\FreeRTOS9/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:..\FreeRTOS9/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:..\FreeRTOS9/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:..\FreeRTOS9/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:..\FreeRTOS9/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:..\FreeRTOS9/tasks.c **** 
 307:..\FreeRTOS9/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:..\FreeRTOS9/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:..\FreeRTOS9/tasks.c **** 	#endif
 310:..\FreeRTOS9/tasks.c **** 
 311:..\FreeRTOS9/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:..\FreeRTOS9/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:..\FreeRTOS9/tasks.c **** 	#endif
 314:..\FreeRTOS9/tasks.c **** 
 315:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:..\FreeRTOS9/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 7


 317:..\FreeRTOS9/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:..\FreeRTOS9/tasks.c **** 	#endif
 319:..\FreeRTOS9/tasks.c **** 
 320:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:..\FreeRTOS9/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:..\FreeRTOS9/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:..\FreeRTOS9/tasks.c **** 	#endif
 324:..\FreeRTOS9/tasks.c **** 
 325:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:..\FreeRTOS9/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:..\FreeRTOS9/tasks.c **** 	#endif
 328:..\FreeRTOS9/tasks.c **** 
 329:..\FreeRTOS9/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:..\FreeRTOS9/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:..\FreeRTOS9/tasks.c **** 	#endif
 332:..\FreeRTOS9/tasks.c **** 
 333:..\FreeRTOS9/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:..\FreeRTOS9/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:..\FreeRTOS9/tasks.c **** 	#endif
 336:..\FreeRTOS9/tasks.c **** 
 337:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:..\FreeRTOS9/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:..\FreeRTOS9/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:..\FreeRTOS9/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:..\FreeRTOS9/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:..\FreeRTOS9/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:..\FreeRTOS9/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:..\FreeRTOS9/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:..\FreeRTOS9/tasks.c **** 		struct	_reent xNewLib_reent;
 346:..\FreeRTOS9/tasks.c **** 	#endif
 347:..\FreeRTOS9/tasks.c **** 
 348:..\FreeRTOS9/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:..\FreeRTOS9/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:..\FreeRTOS9/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:..\FreeRTOS9/tasks.c **** 	#endif
 352:..\FreeRTOS9/tasks.c **** 
 353:..\FreeRTOS9/tasks.c **** 	/* See the comments above the definition of
 354:..\FreeRTOS9/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:..\FreeRTOS9/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:..\FreeRTOS9/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:..\FreeRTOS9/tasks.c **** 	#endif
 358:..\FreeRTOS9/tasks.c **** 
 359:..\FreeRTOS9/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:..\FreeRTOS9/tasks.c **** 		uint8_t ucDelayAborted;
 361:..\FreeRTOS9/tasks.c **** 	#endif
 362:..\FreeRTOS9/tasks.c **** 
 363:..\FreeRTOS9/tasks.c **** } tskTCB;
 364:..\FreeRTOS9/tasks.c **** 
 365:..\FreeRTOS9/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:..\FreeRTOS9/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:..\FreeRTOS9/tasks.c **** typedef tskTCB TCB_t;
 368:..\FreeRTOS9/tasks.c **** 
 369:..\FreeRTOS9/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:..\FreeRTOS9/tasks.c **** static variables must be declared volatile. */
 371:..\FreeRTOS9/tasks.c **** 
 372:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 8


 374:..\FreeRTOS9/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:..\FreeRTOS9/tasks.c **** 
 382:..\FreeRTOS9/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:..\FreeRTOS9/tasks.c **** 
 384:..\FreeRTOS9/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:..\FreeRTOS9/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:..\FreeRTOS9/tasks.c **** 
 387:..\FreeRTOS9/tasks.c **** #endif
 388:..\FreeRTOS9/tasks.c **** 
 389:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:..\FreeRTOS9/tasks.c **** 
 391:..\FreeRTOS9/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:..\FreeRTOS9/tasks.c **** 
 393:..\FreeRTOS9/tasks.c **** #endif
 394:..\FreeRTOS9/tasks.c **** 
 395:..\FreeRTOS9/tasks.c **** /* Other file private variables. --------------------------------*/
 396:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:..\FreeRTOS9/tasks.c **** 
 407:..\FreeRTOS9/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:..\FreeRTOS9/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:..\FreeRTOS9/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:..\FreeRTOS9/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:..\FreeRTOS9/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:..\FreeRTOS9/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:..\FreeRTOS9/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:..\FreeRTOS9/tasks.c **** accessed from a critical section. */
 415:..\FreeRTOS9/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:..\FreeRTOS9/tasks.c **** 
 417:..\FreeRTOS9/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:..\FreeRTOS9/tasks.c **** 
 419:..\FreeRTOS9/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:..\FreeRTOS9/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:..\FreeRTOS9/tasks.c **** 
 422:..\FreeRTOS9/tasks.c **** #endif
 423:..\FreeRTOS9/tasks.c **** 
 424:..\FreeRTOS9/tasks.c **** /*lint +e956 */
 425:..\FreeRTOS9/tasks.c **** 
 426:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 427:..\FreeRTOS9/tasks.c **** 
 428:..\FreeRTOS9/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:..\FreeRTOS9/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:..\FreeRTOS9/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 9


 431:..\FreeRTOS9/tasks.c **** #endif
 432:..\FreeRTOS9/tasks.c **** 
 433:..\FreeRTOS9/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:..\FreeRTOS9/tasks.c **** 	extern void vApplicationTickHook( void );
 435:..\FreeRTOS9/tasks.c **** #endif
 436:..\FreeRTOS9/tasks.c **** 
 437:..\FreeRTOS9/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:..\FreeRTOS9/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:..\FreeRTOS9/tasks.c **** #endif
 440:..\FreeRTOS9/tasks.c **** 
 441:..\FreeRTOS9/tasks.c **** /* File private functions. --------------------------------*/
 442:..\FreeRTOS9/tasks.c **** 
 443:..\FreeRTOS9/tasks.c **** /**
 444:..\FreeRTOS9/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:..\FreeRTOS9/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:..\FreeRTOS9/tasks.c ****  * is in any other state.
 447:..\FreeRTOS9/tasks.c ****  */
 448:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:..\FreeRTOS9/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:..\FreeRTOS9/tasks.c **** 
 452:..\FreeRTOS9/tasks.c **** /*
 453:..\FreeRTOS9/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:..\FreeRTOS9/tasks.c ****  * automatically upon the creation of the first task.
 455:..\FreeRTOS9/tasks.c ****  */
 456:..\FreeRTOS9/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:..\FreeRTOS9/tasks.c **** 
 458:..\FreeRTOS9/tasks.c **** /*
 459:..\FreeRTOS9/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:..\FreeRTOS9/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:..\FreeRTOS9/tasks.c ****  * creation of the first user task.
 462:..\FreeRTOS9/tasks.c ****  *
 463:..\FreeRTOS9/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:..\FreeRTOS9/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:..\FreeRTOS9/tasks.c ****  *
 466:..\FreeRTOS9/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:..\FreeRTOS9/tasks.c ****  *
 468:..\FreeRTOS9/tasks.c ****  */
 469:..\FreeRTOS9/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:..\FreeRTOS9/tasks.c **** 
 471:..\FreeRTOS9/tasks.c **** /*
 472:..\FreeRTOS9/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:..\FreeRTOS9/tasks.c ****  * including the stack pointed to by the TCB.
 474:..\FreeRTOS9/tasks.c ****  *
 475:..\FreeRTOS9/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:..\FreeRTOS9/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:..\FreeRTOS9/tasks.c ****  */
 478:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:..\FreeRTOS9/tasks.c **** 
 480:..\FreeRTOS9/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:..\FreeRTOS9/tasks.c **** 
 482:..\FreeRTOS9/tasks.c **** #endif
 483:..\FreeRTOS9/tasks.c **** 
 484:..\FreeRTOS9/tasks.c **** /*
 485:..\FreeRTOS9/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:..\FreeRTOS9/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:..\FreeRTOS9/tasks.c ****  * and its TCB deleted.
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 10


 488:..\FreeRTOS9/tasks.c ****  */
 489:..\FreeRTOS9/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:..\FreeRTOS9/tasks.c **** 
 491:..\FreeRTOS9/tasks.c **** /*
 492:..\FreeRTOS9/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:..\FreeRTOS9/tasks.c ****  * either the current or the overflow delayed task list.
 494:..\FreeRTOS9/tasks.c ****  */
 495:..\FreeRTOS9/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:..\FreeRTOS9/tasks.c **** 
 497:..\FreeRTOS9/tasks.c **** /*
 498:..\FreeRTOS9/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:..\FreeRTOS9/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:..\FreeRTOS9/tasks.c ****  * a suspended list, etc.).
 501:..\FreeRTOS9/tasks.c ****  *
 502:..\FreeRTOS9/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:..\FreeRTOS9/tasks.c ****  * NORMAL APPLICATION CODE.
 504:..\FreeRTOS9/tasks.c ****  */
 505:..\FreeRTOS9/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:..\FreeRTOS9/tasks.c **** 
 507:..\FreeRTOS9/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:..\FreeRTOS9/tasks.c **** 
 509:..\FreeRTOS9/tasks.c **** #endif
 510:..\FreeRTOS9/tasks.c **** 
 511:..\FreeRTOS9/tasks.c **** /*
 512:..\FreeRTOS9/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:..\FreeRTOS9/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:..\FreeRTOS9/tasks.c ****  */
 515:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:..\FreeRTOS9/tasks.c **** 
 517:..\FreeRTOS9/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:..\FreeRTOS9/tasks.c **** 
 519:..\FreeRTOS9/tasks.c **** #endif
 520:..\FreeRTOS9/tasks.c **** 
 521:..\FreeRTOS9/tasks.c **** /*
 522:..\FreeRTOS9/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:..\FreeRTOS9/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:..\FreeRTOS9/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:..\FreeRTOS9/tasks.c ****  */
 526:..\FreeRTOS9/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:..\FreeRTOS9/tasks.c **** 
 528:..\FreeRTOS9/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:..\FreeRTOS9/tasks.c **** 
 530:..\FreeRTOS9/tasks.c **** #endif
 531:..\FreeRTOS9/tasks.c **** 
 532:..\FreeRTOS9/tasks.c **** /*
 533:..\FreeRTOS9/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:..\FreeRTOS9/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:..\FreeRTOS9/tasks.c ****  *
 536:..\FreeRTOS9/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:..\FreeRTOS9/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:..\FreeRTOS9/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:..\FreeRTOS9/tasks.c ****  * set to a value other than 1.
 540:..\FreeRTOS9/tasks.c ****  */
 541:..\FreeRTOS9/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:..\FreeRTOS9/tasks.c **** 
 543:..\FreeRTOS9/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 11


 545:..\FreeRTOS9/tasks.c **** #endif
 546:..\FreeRTOS9/tasks.c **** 
 547:..\FreeRTOS9/tasks.c **** /*
 548:..\FreeRTOS9/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:..\FreeRTOS9/tasks.c ****  * will exit the Blocked state.
 550:..\FreeRTOS9/tasks.c ****  */
 551:..\FreeRTOS9/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:..\FreeRTOS9/tasks.c **** 
 553:..\FreeRTOS9/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:..\FreeRTOS9/tasks.c **** 
 555:..\FreeRTOS9/tasks.c **** 	/*
 556:..\FreeRTOS9/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:..\FreeRTOS9/tasks.c **** 	 * human readable tables of task information.
 558:..\FreeRTOS9/tasks.c **** 	 */
 559:..\FreeRTOS9/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:..\FreeRTOS9/tasks.c **** 
 561:..\FreeRTOS9/tasks.c **** #endif
 562:..\FreeRTOS9/tasks.c **** 
 563:..\FreeRTOS9/tasks.c **** /*
 564:..\FreeRTOS9/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:..\FreeRTOS9/tasks.c ****  * dynamically to fill in the structure's members.
 566:..\FreeRTOS9/tasks.c ****  */
 567:..\FreeRTOS9/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:..\FreeRTOS9/tasks.c **** 									const char * const pcName,
 569:..\FreeRTOS9/tasks.c **** 									const uint32_t ulStackDepth,
 570:..\FreeRTOS9/tasks.c **** 									void * const pvParameters,
 571:..\FreeRTOS9/tasks.c **** 									UBaseType_t uxPriority,
 572:..\FreeRTOS9/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:..\FreeRTOS9/tasks.c **** 									TCB_t *pxNewTCB,
 574:..\FreeRTOS9/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:..\FreeRTOS9/tasks.c **** 
 576:..\FreeRTOS9/tasks.c **** /*
 577:..\FreeRTOS9/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:..\FreeRTOS9/tasks.c ****  * under the control of the scheduler.
 579:..\FreeRTOS9/tasks.c ****  */
 580:..\FreeRTOS9/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:..\FreeRTOS9/tasks.c **** 
 582:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 583:..\FreeRTOS9/tasks.c **** 
 584:..\FreeRTOS9/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:..\FreeRTOS9/tasks.c **** 
 586:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:..\FreeRTOS9/tasks.c **** 									const char * const pcName,
 588:..\FreeRTOS9/tasks.c **** 									const uint32_t ulStackDepth,
 589:..\FreeRTOS9/tasks.c **** 									void * const pvParameters,
 590:..\FreeRTOS9/tasks.c **** 									UBaseType_t uxPriority,
 591:..\FreeRTOS9/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:..\FreeRTOS9/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:..\FreeRTOS9/tasks.c **** 	{
 594:..\FreeRTOS9/tasks.c **** 	TCB_t *pxNewTCB;
 595:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xReturn;
 596:..\FreeRTOS9/tasks.c **** 
 597:..\FreeRTOS9/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:..\FreeRTOS9/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:..\FreeRTOS9/tasks.c **** 
 600:..\FreeRTOS9/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:..\FreeRTOS9/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 12


 602:..\FreeRTOS9/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:..\FreeRTOS9/tasks.c **** 			function - use them. */
 604:..\FreeRTOS9/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:..\FreeRTOS9/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:..\FreeRTOS9/tasks.c **** 
 607:..\FreeRTOS9/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:..\FreeRTOS9/tasks.c **** 			{
 609:..\FreeRTOS9/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:..\FreeRTOS9/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:..\FreeRTOS9/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:..\FreeRTOS9/tasks.c **** 			}
 613:..\FreeRTOS9/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:..\FreeRTOS9/tasks.c **** 
 615:..\FreeRTOS9/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:..\FreeRTOS9/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:..\FreeRTOS9/tasks.c **** 		}
 618:..\FreeRTOS9/tasks.c **** 		else
 619:..\FreeRTOS9/tasks.c **** 		{
 620:..\FreeRTOS9/tasks.c **** 			xReturn = NULL;
 621:..\FreeRTOS9/tasks.c **** 		}
 622:..\FreeRTOS9/tasks.c **** 
 623:..\FreeRTOS9/tasks.c **** 		return xReturn;
 624:..\FreeRTOS9/tasks.c **** 	}
 625:..\FreeRTOS9/tasks.c **** 
 626:..\FreeRTOS9/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 628:..\FreeRTOS9/tasks.c **** 
 629:..\FreeRTOS9/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:..\FreeRTOS9/tasks.c **** 
 631:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:..\FreeRTOS9/tasks.c **** 	{
 633:..\FreeRTOS9/tasks.c **** 	TCB_t *pxNewTCB;
 634:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:..\FreeRTOS9/tasks.c **** 
 636:..\FreeRTOS9/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:..\FreeRTOS9/tasks.c **** 
 638:..\FreeRTOS9/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:..\FreeRTOS9/tasks.c **** 		{
 640:..\FreeRTOS9/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:..\FreeRTOS9/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:..\FreeRTOS9/tasks.c **** 			not static allocation is being used. */
 643:..\FreeRTOS9/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:..\FreeRTOS9/tasks.c **** 
 645:..\FreeRTOS9/tasks.c **** 			if( pxNewTCB != NULL )
 646:..\FreeRTOS9/tasks.c **** 			{
 647:..\FreeRTOS9/tasks.c **** 				/* Store the stack location in the TCB. */
 648:..\FreeRTOS9/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:..\FreeRTOS9/tasks.c **** 
 650:..\FreeRTOS9/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:..\FreeRTOS9/tasks.c **** 				this task had a statically allocated stack in case it is
 652:..\FreeRTOS9/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:..\FreeRTOS9/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:..\FreeRTOS9/tasks.c **** 
 655:..\FreeRTOS9/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:..\FreeRTOS9/tasks.c **** 										pxTaskDefinition->pcName,
 657:..\FreeRTOS9/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:..\FreeRTOS9/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 13


 659:..\FreeRTOS9/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:..\FreeRTOS9/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:..\FreeRTOS9/tasks.c **** 										pxTaskDefinition->xRegions );
 662:..\FreeRTOS9/tasks.c **** 
 663:..\FreeRTOS9/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:..\FreeRTOS9/tasks.c **** 				xReturn = pdPASS;
 665:..\FreeRTOS9/tasks.c **** 			}
 666:..\FreeRTOS9/tasks.c **** 		}
 667:..\FreeRTOS9/tasks.c **** 
 668:..\FreeRTOS9/tasks.c **** 		return xReturn;
 669:..\FreeRTOS9/tasks.c **** 	}
 670:..\FreeRTOS9/tasks.c **** 
 671:..\FreeRTOS9/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 673:..\FreeRTOS9/tasks.c **** 
 674:..\FreeRTOS9/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:..\FreeRTOS9/tasks.c **** 
 676:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:..\FreeRTOS9/tasks.c **** 							const char * const pcName,
 678:..\FreeRTOS9/tasks.c **** 							const uint16_t usStackDepth,
 679:..\FreeRTOS9/tasks.c **** 							void * const pvParameters,
 680:..\FreeRTOS9/tasks.c **** 							UBaseType_t uxPriority,
 681:..\FreeRTOS9/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:..\FreeRTOS9/tasks.c **** 	{
 683:..\FreeRTOS9/tasks.c **** 	TCB_t *pxNewTCB;
 684:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
 685:..\FreeRTOS9/tasks.c **** 
 686:..\FreeRTOS9/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:..\FreeRTOS9/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:..\FreeRTOS9/tasks.c **** 		the TCB then the stack. */
 689:..\FreeRTOS9/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:..\FreeRTOS9/tasks.c **** 		{
 691:..\FreeRTOS9/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:..\FreeRTOS9/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:..\FreeRTOS9/tasks.c **** 			allocation is being used. */
 694:..\FreeRTOS9/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:..\FreeRTOS9/tasks.c **** 
 696:..\FreeRTOS9/tasks.c **** 			if( pxNewTCB != NULL )
 697:..\FreeRTOS9/tasks.c **** 			{
 698:..\FreeRTOS9/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:..\FreeRTOS9/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:..\FreeRTOS9/tasks.c **** 				be deleted later if required. */
 701:..\FreeRTOS9/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:..\FreeRTOS9/tasks.c **** 
 703:..\FreeRTOS9/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:..\FreeRTOS9/tasks.c **** 				{
 705:..\FreeRTOS9/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:..\FreeRTOS9/tasks.c **** 					vPortFree( pxNewTCB );
 707:..\FreeRTOS9/tasks.c **** 					pxNewTCB = NULL;
 708:..\FreeRTOS9/tasks.c **** 				}
 709:..\FreeRTOS9/tasks.c **** 			}
 710:..\FreeRTOS9/tasks.c **** 		}
 711:..\FreeRTOS9/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:..\FreeRTOS9/tasks.c **** 		{
 713:..\FreeRTOS9/tasks.c **** 		StackType_t *pxStack;
 714:..\FreeRTOS9/tasks.c **** 
 715:..\FreeRTOS9/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 14


 716:..\FreeRTOS9/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:..\FreeRTOS9/tasks.c **** 
 718:..\FreeRTOS9/tasks.c **** 			if( pxStack != NULL )
 719:..\FreeRTOS9/tasks.c **** 			{
 720:..\FreeRTOS9/tasks.c **** 				/* Allocate space for the TCB. */
 721:..\FreeRTOS9/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:..\FreeRTOS9/tasks.c **** 
 723:..\FreeRTOS9/tasks.c **** 				if( pxNewTCB != NULL )
 724:..\FreeRTOS9/tasks.c **** 				{
 725:..\FreeRTOS9/tasks.c **** 					/* Store the stack location in the TCB. */
 726:..\FreeRTOS9/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:..\FreeRTOS9/tasks.c **** 				}
 728:..\FreeRTOS9/tasks.c **** 				else
 729:..\FreeRTOS9/tasks.c **** 				{
 730:..\FreeRTOS9/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:..\FreeRTOS9/tasks.c **** 					it again. */
 732:..\FreeRTOS9/tasks.c **** 					vPortFree( pxStack );
 733:..\FreeRTOS9/tasks.c **** 				}
 734:..\FreeRTOS9/tasks.c **** 			}
 735:..\FreeRTOS9/tasks.c **** 			else
 736:..\FreeRTOS9/tasks.c **** 			{
 737:..\FreeRTOS9/tasks.c **** 				pxNewTCB = NULL;
 738:..\FreeRTOS9/tasks.c **** 			}
 739:..\FreeRTOS9/tasks.c **** 		}
 740:..\FreeRTOS9/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:..\FreeRTOS9/tasks.c **** 
 742:..\FreeRTOS9/tasks.c **** 		if( pxNewTCB != NULL )
 743:..\FreeRTOS9/tasks.c **** 		{
 744:..\FreeRTOS9/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:..\FreeRTOS9/tasks.c **** 			{
 746:..\FreeRTOS9/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:..\FreeRTOS9/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:..\FreeRTOS9/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:..\FreeRTOS9/tasks.c **** 			}
 750:..\FreeRTOS9/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:..\FreeRTOS9/tasks.c **** 
 752:..\FreeRTOS9/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:..\FreeRTOS9/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:..\FreeRTOS9/tasks.c **** 			xReturn = pdPASS;
 755:..\FreeRTOS9/tasks.c **** 		}
 756:..\FreeRTOS9/tasks.c **** 		else
 757:..\FreeRTOS9/tasks.c **** 		{
 758:..\FreeRTOS9/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:..\FreeRTOS9/tasks.c **** 		}
 760:..\FreeRTOS9/tasks.c **** 
 761:..\FreeRTOS9/tasks.c **** 		return xReturn;
 762:..\FreeRTOS9/tasks.c **** 	}
 763:..\FreeRTOS9/tasks.c **** 
 764:..\FreeRTOS9/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 766:..\FreeRTOS9/tasks.c **** 
 767:..\FreeRTOS9/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:..\FreeRTOS9/tasks.c **** 									const char * const pcName,
 769:..\FreeRTOS9/tasks.c **** 									const uint32_t ulStackDepth,
 770:..\FreeRTOS9/tasks.c **** 									void * const pvParameters,
 771:..\FreeRTOS9/tasks.c **** 									UBaseType_t uxPriority,
 772:..\FreeRTOS9/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 15


 773:..\FreeRTOS9/tasks.c **** 									TCB_t *pxNewTCB,
 774:..\FreeRTOS9/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:..\FreeRTOS9/tasks.c **** {
 776:..\FreeRTOS9/tasks.c **** StackType_t *pxTopOfStack;
 777:..\FreeRTOS9/tasks.c **** UBaseType_t x;
 778:..\FreeRTOS9/tasks.c **** 
 779:..\FreeRTOS9/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:..\FreeRTOS9/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:..\FreeRTOS9/tasks.c **** 		BaseType_t xRunPrivileged;
 782:..\FreeRTOS9/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:..\FreeRTOS9/tasks.c **** 		{
 784:..\FreeRTOS9/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:..\FreeRTOS9/tasks.c **** 		}
 786:..\FreeRTOS9/tasks.c **** 		else
 787:..\FreeRTOS9/tasks.c **** 		{
 788:..\FreeRTOS9/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:..\FreeRTOS9/tasks.c **** 		}
 790:..\FreeRTOS9/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:..\FreeRTOS9/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:..\FreeRTOS9/tasks.c **** 
 793:..\FreeRTOS9/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:..\FreeRTOS9/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:..\FreeRTOS9/tasks.c **** 	{
 796:..\FreeRTOS9/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:..\FreeRTOS9/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:..\FreeRTOS9/tasks.c **** 	}
 799:..\FreeRTOS9/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:..\FreeRTOS9/tasks.c **** 
 801:..\FreeRTOS9/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:..\FreeRTOS9/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:..\FreeRTOS9/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:..\FreeRTOS9/tasks.c **** 	by the port. */
 805:..\FreeRTOS9/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:..\FreeRTOS9/tasks.c **** 	{
 807:..\FreeRTOS9/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:..\FreeRTOS9/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:..\FreeRTOS9/tasks.c **** 
 810:..\FreeRTOS9/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:..\FreeRTOS9/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:..\FreeRTOS9/tasks.c **** 	}
 813:..\FreeRTOS9/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:..\FreeRTOS9/tasks.c **** 	{
 815:..\FreeRTOS9/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:..\FreeRTOS9/tasks.c **** 
 817:..\FreeRTOS9/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:..\FreeRTOS9/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:..\FreeRTOS9/tasks.c **** 
 820:..\FreeRTOS9/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:..\FreeRTOS9/tasks.c **** 		performed. */
 822:..\FreeRTOS9/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:..\FreeRTOS9/tasks.c **** 	}
 824:..\FreeRTOS9/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:..\FreeRTOS9/tasks.c **** 
 826:..\FreeRTOS9/tasks.c **** 	/* Store the task name in the TCB. */
 827:..\FreeRTOS9/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:..\FreeRTOS9/tasks.c **** 	{
 829:..\FreeRTOS9/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 16


 830:..\FreeRTOS9/tasks.c **** 
 831:..\FreeRTOS9/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:..\FreeRTOS9/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:..\FreeRTOS9/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:..\FreeRTOS9/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:..\FreeRTOS9/tasks.c **** 		{
 836:..\FreeRTOS9/tasks.c **** 			break;
 837:..\FreeRTOS9/tasks.c **** 		}
 838:..\FreeRTOS9/tasks.c **** 		else
 839:..\FreeRTOS9/tasks.c **** 		{
 840:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:..\FreeRTOS9/tasks.c **** 		}
 842:..\FreeRTOS9/tasks.c **** 	}
 843:..\FreeRTOS9/tasks.c **** 
 844:..\FreeRTOS9/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:..\FreeRTOS9/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:..\FreeRTOS9/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:..\FreeRTOS9/tasks.c **** 
 848:..\FreeRTOS9/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:..\FreeRTOS9/tasks.c **** 	remove the privilege bit if one is present. */
 850:..\FreeRTOS9/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:..\FreeRTOS9/tasks.c **** 	{
 852:..\FreeRTOS9/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:..\FreeRTOS9/tasks.c **** 	}
 854:..\FreeRTOS9/tasks.c **** 	else
 855:..\FreeRTOS9/tasks.c **** 	{
 856:..\FreeRTOS9/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:..\FreeRTOS9/tasks.c **** 	}
 858:..\FreeRTOS9/tasks.c **** 
 859:..\FreeRTOS9/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:..\FreeRTOS9/tasks.c **** 	{
 862:..\FreeRTOS9/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:..\FreeRTOS9/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:..\FreeRTOS9/tasks.c **** 	}
 865:..\FreeRTOS9/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:..\FreeRTOS9/tasks.c **** 
 867:..\FreeRTOS9/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:..\FreeRTOS9/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:..\FreeRTOS9/tasks.c **** 
 870:..\FreeRTOS9/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:..\FreeRTOS9/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:..\FreeRTOS9/tasks.c **** 
 874:..\FreeRTOS9/tasks.c **** 	/* Event lists are always in priority order. */
 875:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:..\FreeRTOS9/tasks.c **** 
 878:..\FreeRTOS9/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:..\FreeRTOS9/tasks.c **** 	{
 880:..\FreeRTOS9/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:..\FreeRTOS9/tasks.c **** 	}
 882:..\FreeRTOS9/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:..\FreeRTOS9/tasks.c **** 
 884:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:..\FreeRTOS9/tasks.c **** 	{
 886:..\FreeRTOS9/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 17


 887:..\FreeRTOS9/tasks.c **** 	}
 888:..\FreeRTOS9/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:..\FreeRTOS9/tasks.c **** 
 890:..\FreeRTOS9/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:..\FreeRTOS9/tasks.c **** 	{
 892:..\FreeRTOS9/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:..\FreeRTOS9/tasks.c **** 	}
 894:..\FreeRTOS9/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:..\FreeRTOS9/tasks.c **** 
 896:..\FreeRTOS9/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:..\FreeRTOS9/tasks.c **** 	{
 898:..\FreeRTOS9/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:..\FreeRTOS9/tasks.c **** 	}
 900:..\FreeRTOS9/tasks.c **** 	#else
 901:..\FreeRTOS9/tasks.c **** 	{
 902:..\FreeRTOS9/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:..\FreeRTOS9/tasks.c **** 		( void ) xRegions;
 904:..\FreeRTOS9/tasks.c **** 	}
 905:..\FreeRTOS9/tasks.c **** 	#endif
 906:..\FreeRTOS9/tasks.c **** 
 907:..\FreeRTOS9/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:..\FreeRTOS9/tasks.c **** 	{
 909:..\FreeRTOS9/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:..\FreeRTOS9/tasks.c **** 		{
 911:..\FreeRTOS9/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:..\FreeRTOS9/tasks.c **** 		}
 913:..\FreeRTOS9/tasks.c **** 	}
 914:..\FreeRTOS9/tasks.c **** 	#endif
 915:..\FreeRTOS9/tasks.c **** 
 916:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:..\FreeRTOS9/tasks.c **** 	{
 918:..\FreeRTOS9/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:..\FreeRTOS9/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:..\FreeRTOS9/tasks.c **** 	}
 921:..\FreeRTOS9/tasks.c **** 	#endif
 922:..\FreeRTOS9/tasks.c **** 
 923:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:..\FreeRTOS9/tasks.c **** 	{
 925:..\FreeRTOS9/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:..\FreeRTOS9/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:..\FreeRTOS9/tasks.c **** 	}
 928:..\FreeRTOS9/tasks.c **** 	#endif
 929:..\FreeRTOS9/tasks.c **** 
 930:..\FreeRTOS9/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:..\FreeRTOS9/tasks.c **** 	{
 932:..\FreeRTOS9/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:..\FreeRTOS9/tasks.c **** 	}
 934:..\FreeRTOS9/tasks.c **** 	#endif
 935:..\FreeRTOS9/tasks.c **** 
 936:..\FreeRTOS9/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:..\FreeRTOS9/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:..\FreeRTOS9/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:..\FreeRTOS9/tasks.c **** 	the	top of stack variable is updated. */
 940:..\FreeRTOS9/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:..\FreeRTOS9/tasks.c **** 	{
 942:..\FreeRTOS9/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:..\FreeRTOS9/tasks.c **** 	}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 18


 944:..\FreeRTOS9/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:..\FreeRTOS9/tasks.c **** 	{
 946:..\FreeRTOS9/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:..\FreeRTOS9/tasks.c **** 	}
 948:..\FreeRTOS9/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:..\FreeRTOS9/tasks.c **** 
 950:..\FreeRTOS9/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:..\FreeRTOS9/tasks.c **** 	{
 952:..\FreeRTOS9/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:..\FreeRTOS9/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:..\FreeRTOS9/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:..\FreeRTOS9/tasks.c **** 	}
 956:..\FreeRTOS9/tasks.c **** 	else
 957:..\FreeRTOS9/tasks.c **** 	{
 958:..\FreeRTOS9/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:..\FreeRTOS9/tasks.c **** 	}
 960:..\FreeRTOS9/tasks.c **** }
 961:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 962:..\FreeRTOS9/tasks.c **** 
 963:..\FreeRTOS9/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:..\FreeRTOS9/tasks.c **** {
 965:..\FreeRTOS9/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:..\FreeRTOS9/tasks.c **** 	updated. */
 967:..\FreeRTOS9/tasks.c **** 	taskENTER_CRITICAL();
 968:..\FreeRTOS9/tasks.c **** 	{
 969:..\FreeRTOS9/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:..\FreeRTOS9/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:..\FreeRTOS9/tasks.c **** 		{
 972:..\FreeRTOS9/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:..\FreeRTOS9/tasks.c **** 			the suspended state - make this the current task. */
 974:..\FreeRTOS9/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:..\FreeRTOS9/tasks.c **** 
 976:..\FreeRTOS9/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:..\FreeRTOS9/tasks.c **** 			{
 978:..\FreeRTOS9/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:..\FreeRTOS9/tasks.c **** 				initialisation required.  We will not recover if this call
 980:..\FreeRTOS9/tasks.c **** 				fails, but we will report the failure. */
 981:..\FreeRTOS9/tasks.c **** 				prvInitialiseTaskLists();
 982:..\FreeRTOS9/tasks.c **** 			}
 983:..\FreeRTOS9/tasks.c **** 			else
 984:..\FreeRTOS9/tasks.c **** 			{
 985:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:..\FreeRTOS9/tasks.c **** 			}
 987:..\FreeRTOS9/tasks.c **** 		}
 988:..\FreeRTOS9/tasks.c **** 		else
 989:..\FreeRTOS9/tasks.c **** 		{
 990:..\FreeRTOS9/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:..\FreeRTOS9/tasks.c **** 			current task if it is the highest priority task to be created
 992:..\FreeRTOS9/tasks.c **** 			so far. */
 993:..\FreeRTOS9/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:..\FreeRTOS9/tasks.c **** 			{
 995:..\FreeRTOS9/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:..\FreeRTOS9/tasks.c **** 				{
 997:..\FreeRTOS9/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:..\FreeRTOS9/tasks.c **** 				}
 999:..\FreeRTOS9/tasks.c **** 				else
1000:..\FreeRTOS9/tasks.c **** 				{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 19


1001:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:..\FreeRTOS9/tasks.c **** 				}
1003:..\FreeRTOS9/tasks.c **** 			}
1004:..\FreeRTOS9/tasks.c **** 			else
1005:..\FreeRTOS9/tasks.c **** 			{
1006:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:..\FreeRTOS9/tasks.c **** 			}
1008:..\FreeRTOS9/tasks.c **** 		}
1009:..\FreeRTOS9/tasks.c **** 
1010:..\FreeRTOS9/tasks.c **** 		uxTaskNumber++;
1011:..\FreeRTOS9/tasks.c **** 
1012:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:..\FreeRTOS9/tasks.c **** 		{
1014:..\FreeRTOS9/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:..\FreeRTOS9/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:..\FreeRTOS9/tasks.c **** 		}
1017:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:..\FreeRTOS9/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:..\FreeRTOS9/tasks.c **** 
1020:..\FreeRTOS9/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:..\FreeRTOS9/tasks.c **** 
1022:..\FreeRTOS9/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:..\FreeRTOS9/tasks.c **** 	}
1024:..\FreeRTOS9/tasks.c **** 	taskEXIT_CRITICAL();
1025:..\FreeRTOS9/tasks.c **** 
1026:..\FreeRTOS9/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:..\FreeRTOS9/tasks.c **** 	{
1028:..\FreeRTOS9/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:..\FreeRTOS9/tasks.c **** 		then it should run now. */
1030:..\FreeRTOS9/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:..\FreeRTOS9/tasks.c **** 		{
1032:..\FreeRTOS9/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:..\FreeRTOS9/tasks.c **** 		}
1034:..\FreeRTOS9/tasks.c **** 		else
1035:..\FreeRTOS9/tasks.c **** 		{
1036:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:..\FreeRTOS9/tasks.c **** 		}
1038:..\FreeRTOS9/tasks.c **** 	}
1039:..\FreeRTOS9/tasks.c **** 	else
1040:..\FreeRTOS9/tasks.c **** 	{
1041:..\FreeRTOS9/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:..\FreeRTOS9/tasks.c **** 	}
1043:..\FreeRTOS9/tasks.c **** }
1044:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1045:..\FreeRTOS9/tasks.c **** 
1046:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:..\FreeRTOS9/tasks.c **** 
1048:..\FreeRTOS9/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:..\FreeRTOS9/tasks.c **** 	{
1050:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
1051:..\FreeRTOS9/tasks.c **** 
1052:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
1053:..\FreeRTOS9/tasks.c **** 		{
1054:..\FreeRTOS9/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:..\FreeRTOS9/tasks.c **** 			being deleted. */
1056:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 20


1058:..\FreeRTOS9/tasks.c **** 			/* Remove task from the ready list. */
1059:..\FreeRTOS9/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:..\FreeRTOS9/tasks.c **** 			{
1061:..\FreeRTOS9/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:..\FreeRTOS9/tasks.c **** 			}
1063:..\FreeRTOS9/tasks.c **** 			else
1064:..\FreeRTOS9/tasks.c **** 			{
1065:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:..\FreeRTOS9/tasks.c **** 			}
1067:..\FreeRTOS9/tasks.c **** 
1068:..\FreeRTOS9/tasks.c **** 			/* Is the task waiting on an event also? */
1069:..\FreeRTOS9/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:..\FreeRTOS9/tasks.c **** 			{
1071:..\FreeRTOS9/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:..\FreeRTOS9/tasks.c **** 			}
1073:..\FreeRTOS9/tasks.c **** 			else
1074:..\FreeRTOS9/tasks.c **** 			{
1075:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:..\FreeRTOS9/tasks.c **** 			}
1077:..\FreeRTOS9/tasks.c **** 
1078:..\FreeRTOS9/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:..\FreeRTOS9/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:..\FreeRTOS9/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:..\FreeRTOS9/tasks.c **** 			not return. */
1082:..\FreeRTOS9/tasks.c **** 			uxTaskNumber++;
1083:..\FreeRTOS9/tasks.c **** 
1084:..\FreeRTOS9/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:..\FreeRTOS9/tasks.c **** 			{
1086:..\FreeRTOS9/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:..\FreeRTOS9/tasks.c **** 				task itself, as a context switch to another task is required.
1088:..\FreeRTOS9/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:..\FreeRTOS9/tasks.c **** 				check the termination list and free up any memory allocated by
1090:..\FreeRTOS9/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:..\FreeRTOS9/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:..\FreeRTOS9/tasks.c **** 
1093:..\FreeRTOS9/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:..\FreeRTOS9/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:..\FreeRTOS9/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:..\FreeRTOS9/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:..\FreeRTOS9/tasks.c **** 
1098:..\FreeRTOS9/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:..\FreeRTOS9/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:..\FreeRTOS9/tasks.c **** 				after which it is not possible to yield away from this task -
1101:..\FreeRTOS9/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:..\FreeRTOS9/tasks.c **** 				required. */
1103:..\FreeRTOS9/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:..\FreeRTOS9/tasks.c **** 			}
1105:..\FreeRTOS9/tasks.c **** 			else
1106:..\FreeRTOS9/tasks.c **** 			{
1107:..\FreeRTOS9/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:..\FreeRTOS9/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:..\FreeRTOS9/tasks.c **** 
1110:..\FreeRTOS9/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:..\FreeRTOS9/tasks.c **** 				the task that has just been deleted. */
1112:..\FreeRTOS9/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:..\FreeRTOS9/tasks.c **** 			}
1114:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 21


1115:..\FreeRTOS9/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:..\FreeRTOS9/tasks.c **** 		}
1117:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
1118:..\FreeRTOS9/tasks.c **** 
1119:..\FreeRTOS9/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:..\FreeRTOS9/tasks.c **** 		been deleted. */
1121:..\FreeRTOS9/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:..\FreeRTOS9/tasks.c **** 		{
1123:..\FreeRTOS9/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:..\FreeRTOS9/tasks.c **** 			{
1125:..\FreeRTOS9/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:..\FreeRTOS9/tasks.c **** 				portYIELD_WITHIN_API();
1127:..\FreeRTOS9/tasks.c **** 			}
1128:..\FreeRTOS9/tasks.c **** 			else
1129:..\FreeRTOS9/tasks.c **** 			{
1130:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:..\FreeRTOS9/tasks.c **** 			}
1132:..\FreeRTOS9/tasks.c **** 		}
1133:..\FreeRTOS9/tasks.c **** 	}
1134:..\FreeRTOS9/tasks.c **** 
1135:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1137:..\FreeRTOS9/tasks.c **** 
1138:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:..\FreeRTOS9/tasks.c **** 
1140:..\FreeRTOS9/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:..\FreeRTOS9/tasks.c **** 	{
1142:..\FreeRTOS9/tasks.c **** 	TickType_t xTimeToWake;
1143:..\FreeRTOS9/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:..\FreeRTOS9/tasks.c **** 
1145:..\FreeRTOS9/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:..\FreeRTOS9/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:..\FreeRTOS9/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:..\FreeRTOS9/tasks.c **** 
1149:..\FreeRTOS9/tasks.c **** 		vTaskSuspendAll();
1150:..\FreeRTOS9/tasks.c **** 		{
1151:..\FreeRTOS9/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:..\FreeRTOS9/tasks.c **** 			block. */
1153:..\FreeRTOS9/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:..\FreeRTOS9/tasks.c **** 
1155:..\FreeRTOS9/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:..\FreeRTOS9/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:..\FreeRTOS9/tasks.c **** 
1158:..\FreeRTOS9/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:..\FreeRTOS9/tasks.c **** 			{
1160:..\FreeRTOS9/tasks.c **** 				/* The tick count has overflowed since this function was
1161:..\FreeRTOS9/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:..\FreeRTOS9/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:..\FreeRTOS9/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:..\FreeRTOS9/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:..\FreeRTOS9/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:..\FreeRTOS9/tasks.c **** 				{
1167:..\FreeRTOS9/tasks.c **** 					xShouldDelay = pdTRUE;
1168:..\FreeRTOS9/tasks.c **** 				}
1169:..\FreeRTOS9/tasks.c **** 				else
1170:..\FreeRTOS9/tasks.c **** 				{
1171:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 22


1172:..\FreeRTOS9/tasks.c **** 				}
1173:..\FreeRTOS9/tasks.c **** 			}
1174:..\FreeRTOS9/tasks.c **** 			else
1175:..\FreeRTOS9/tasks.c **** 			{
1176:..\FreeRTOS9/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:..\FreeRTOS9/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:..\FreeRTOS9/tasks.c **** 				tick time is less than the wake time. */
1179:..\FreeRTOS9/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:..\FreeRTOS9/tasks.c **** 				{
1181:..\FreeRTOS9/tasks.c **** 					xShouldDelay = pdTRUE;
1182:..\FreeRTOS9/tasks.c **** 				}
1183:..\FreeRTOS9/tasks.c **** 				else
1184:..\FreeRTOS9/tasks.c **** 				{
1185:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:..\FreeRTOS9/tasks.c **** 				}
1187:..\FreeRTOS9/tasks.c **** 			}
1188:..\FreeRTOS9/tasks.c **** 
1189:..\FreeRTOS9/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:..\FreeRTOS9/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:..\FreeRTOS9/tasks.c **** 
1192:..\FreeRTOS9/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:..\FreeRTOS9/tasks.c **** 			{
1194:..\FreeRTOS9/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:..\FreeRTOS9/tasks.c **** 
1196:..\FreeRTOS9/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:..\FreeRTOS9/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:..\FreeRTOS9/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:..\FreeRTOS9/tasks.c **** 			}
1200:..\FreeRTOS9/tasks.c **** 			else
1201:..\FreeRTOS9/tasks.c **** 			{
1202:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:..\FreeRTOS9/tasks.c **** 			}
1204:..\FreeRTOS9/tasks.c **** 		}
1205:..\FreeRTOS9/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:..\FreeRTOS9/tasks.c **** 
1207:..\FreeRTOS9/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:..\FreeRTOS9/tasks.c **** 		have put ourselves to sleep. */
1209:..\FreeRTOS9/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:..\FreeRTOS9/tasks.c **** 		{
1211:..\FreeRTOS9/tasks.c **** 			portYIELD_WITHIN_API();
1212:..\FreeRTOS9/tasks.c **** 		}
1213:..\FreeRTOS9/tasks.c **** 		else
1214:..\FreeRTOS9/tasks.c **** 		{
1215:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:..\FreeRTOS9/tasks.c **** 		}
1217:..\FreeRTOS9/tasks.c **** 	}
1218:..\FreeRTOS9/tasks.c **** 
1219:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1221:..\FreeRTOS9/tasks.c **** 
1222:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:..\FreeRTOS9/tasks.c **** 
1224:..\FreeRTOS9/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:..\FreeRTOS9/tasks.c **** 	{
1226:..\FreeRTOS9/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:..\FreeRTOS9/tasks.c **** 
1228:..\FreeRTOS9/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 23


1229:..\FreeRTOS9/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:..\FreeRTOS9/tasks.c **** 		{
1231:..\FreeRTOS9/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:..\FreeRTOS9/tasks.c **** 			vTaskSuspendAll();
1233:..\FreeRTOS9/tasks.c **** 			{
1234:..\FreeRTOS9/tasks.c **** 				traceTASK_DELAY();
1235:..\FreeRTOS9/tasks.c **** 
1236:..\FreeRTOS9/tasks.c **** 				/* A task that is removed from the event list while the
1237:..\FreeRTOS9/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:..\FreeRTOS9/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:..\FreeRTOS9/tasks.c **** 				is resumed.
1240:..\FreeRTOS9/tasks.c **** 
1241:..\FreeRTOS9/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:..\FreeRTOS9/tasks.c **** 				executing task. */
1243:..\FreeRTOS9/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:..\FreeRTOS9/tasks.c **** 			}
1245:..\FreeRTOS9/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:..\FreeRTOS9/tasks.c **** 		}
1247:..\FreeRTOS9/tasks.c **** 		else
1248:..\FreeRTOS9/tasks.c **** 		{
1249:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:..\FreeRTOS9/tasks.c **** 		}
1251:..\FreeRTOS9/tasks.c **** 
1252:..\FreeRTOS9/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:..\FreeRTOS9/tasks.c **** 		have put ourselves to sleep. */
1254:..\FreeRTOS9/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:..\FreeRTOS9/tasks.c **** 		{
1256:..\FreeRTOS9/tasks.c **** 			portYIELD_WITHIN_API();
1257:..\FreeRTOS9/tasks.c **** 		}
1258:..\FreeRTOS9/tasks.c **** 		else
1259:..\FreeRTOS9/tasks.c **** 		{
1260:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:..\FreeRTOS9/tasks.c **** 		}
1262:..\FreeRTOS9/tasks.c **** 	}
1263:..\FreeRTOS9/tasks.c **** 
1264:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1266:..\FreeRTOS9/tasks.c **** 
1267:..\FreeRTOS9/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:..\FreeRTOS9/tasks.c **** 
1269:..\FreeRTOS9/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:..\FreeRTOS9/tasks.c **** 	{
1271:..\FreeRTOS9/tasks.c **** 	eTaskState eReturn;
1272:..\FreeRTOS9/tasks.c **** 	List_t *pxStateList;
1273:..\FreeRTOS9/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:..\FreeRTOS9/tasks.c **** 
1275:..\FreeRTOS9/tasks.c **** 		configASSERT( pxTCB );
1276:..\FreeRTOS9/tasks.c **** 
1277:..\FreeRTOS9/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:..\FreeRTOS9/tasks.c **** 		{
1279:..\FreeRTOS9/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:..\FreeRTOS9/tasks.c **** 			eReturn = eRunning;
1281:..\FreeRTOS9/tasks.c **** 		}
1282:..\FreeRTOS9/tasks.c **** 		else
1283:..\FreeRTOS9/tasks.c **** 		{
1284:..\FreeRTOS9/tasks.c **** 			taskENTER_CRITICAL();
1285:..\FreeRTOS9/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 24


1286:..\FreeRTOS9/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:..\FreeRTOS9/tasks.c **** 			}
1288:..\FreeRTOS9/tasks.c **** 			taskEXIT_CRITICAL();
1289:..\FreeRTOS9/tasks.c **** 
1290:..\FreeRTOS9/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:..\FreeRTOS9/tasks.c **** 			{
1292:..\FreeRTOS9/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:..\FreeRTOS9/tasks.c **** 				lists. */
1294:..\FreeRTOS9/tasks.c **** 				eReturn = eBlocked;
1295:..\FreeRTOS9/tasks.c **** 			}
1296:..\FreeRTOS9/tasks.c **** 
1297:..\FreeRTOS9/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:..\FreeRTOS9/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:..\FreeRTOS9/tasks.c **** 				{
1300:..\FreeRTOS9/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:..\FreeRTOS9/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:..\FreeRTOS9/tasks.c **** 					indefinitely? */
1303:..\FreeRTOS9/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:..\FreeRTOS9/tasks.c **** 					{
1305:..\FreeRTOS9/tasks.c **** 						eReturn = eSuspended;
1306:..\FreeRTOS9/tasks.c **** 					}
1307:..\FreeRTOS9/tasks.c **** 					else
1308:..\FreeRTOS9/tasks.c **** 					{
1309:..\FreeRTOS9/tasks.c **** 						eReturn = eBlocked;
1310:..\FreeRTOS9/tasks.c **** 					}
1311:..\FreeRTOS9/tasks.c **** 				}
1312:..\FreeRTOS9/tasks.c **** 			#endif
1313:..\FreeRTOS9/tasks.c **** 
1314:..\FreeRTOS9/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:..\FreeRTOS9/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:..\FreeRTOS9/tasks.c **** 				{
1317:..\FreeRTOS9/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:..\FreeRTOS9/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:..\FreeRTOS9/tasks.c **** 					all. */
1320:..\FreeRTOS9/tasks.c **** 					eReturn = eDeleted;
1321:..\FreeRTOS9/tasks.c **** 				}
1322:..\FreeRTOS9/tasks.c **** 			#endif
1323:..\FreeRTOS9/tasks.c **** 
1324:..\FreeRTOS9/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:..\FreeRTOS9/tasks.c **** 			{
1326:..\FreeRTOS9/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:..\FreeRTOS9/tasks.c **** 				Ready (including pending ready) state. */
1328:..\FreeRTOS9/tasks.c **** 				eReturn = eReady;
1329:..\FreeRTOS9/tasks.c **** 			}
1330:..\FreeRTOS9/tasks.c **** 		}
1331:..\FreeRTOS9/tasks.c **** 
1332:..\FreeRTOS9/tasks.c **** 		return eReturn;
1333:..\FreeRTOS9/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:..\FreeRTOS9/tasks.c **** 
1335:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1337:..\FreeRTOS9/tasks.c **** 
1338:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:..\FreeRTOS9/tasks.c **** 
1340:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:..\FreeRTOS9/tasks.c **** 	{
1342:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 25


1343:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxReturn;
1344:..\FreeRTOS9/tasks.c **** 
1345:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
1346:..\FreeRTOS9/tasks.c **** 		{
1347:..\FreeRTOS9/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:..\FreeRTOS9/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:..\FreeRTOS9/tasks.c **** 		}
1352:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
1353:..\FreeRTOS9/tasks.c **** 
1354:..\FreeRTOS9/tasks.c **** 		return uxReturn;
1355:..\FreeRTOS9/tasks.c **** 	}
1356:..\FreeRTOS9/tasks.c **** 
1357:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1359:..\FreeRTOS9/tasks.c **** 
1360:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:..\FreeRTOS9/tasks.c **** 
1362:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:..\FreeRTOS9/tasks.c **** 	{
1364:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
1365:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:..\FreeRTOS9/tasks.c **** 
1367:..\FreeRTOS9/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:..\FreeRTOS9/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:..\FreeRTOS9/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:..\FreeRTOS9/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:..\FreeRTOS9/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:..\FreeRTOS9/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:..\FreeRTOS9/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:..\FreeRTOS9/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:..\FreeRTOS9/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:..\FreeRTOS9/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:..\FreeRTOS9/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:..\FreeRTOS9/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:..\FreeRTOS9/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:..\FreeRTOS9/tasks.c **** 		provided on the following link:
1382:..\FreeRTOS9/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:..\FreeRTOS9/tasks.c **** 
1385:..\FreeRTOS9/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:..\FreeRTOS9/tasks.c **** 		{
1387:..\FreeRTOS9/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:..\FreeRTOS9/tasks.c **** 			task that is being queried. */
1389:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:..\FreeRTOS9/tasks.c **** 		}
1392:..\FreeRTOS9/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:..\FreeRTOS9/tasks.c **** 
1394:..\FreeRTOS9/tasks.c **** 		return uxReturn;
1395:..\FreeRTOS9/tasks.c **** 	}
1396:..\FreeRTOS9/tasks.c **** 
1397:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1399:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 26


1400:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:..\FreeRTOS9/tasks.c **** 
1402:..\FreeRTOS9/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:..\FreeRTOS9/tasks.c **** 	{
1404:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
1405:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:..\FreeRTOS9/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:..\FreeRTOS9/tasks.c **** 
1408:..\FreeRTOS9/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:..\FreeRTOS9/tasks.c **** 
1410:..\FreeRTOS9/tasks.c **** 		/* Ensure the new priority is valid. */
1411:..\FreeRTOS9/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:..\FreeRTOS9/tasks.c **** 		{
1413:..\FreeRTOS9/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:..\FreeRTOS9/tasks.c **** 		}
1415:..\FreeRTOS9/tasks.c **** 		else
1416:..\FreeRTOS9/tasks.c **** 		{
1417:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:..\FreeRTOS9/tasks.c **** 		}
1419:..\FreeRTOS9/tasks.c **** 
1420:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
1421:..\FreeRTOS9/tasks.c **** 		{
1422:..\FreeRTOS9/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:..\FreeRTOS9/tasks.c **** 			task that is being changed. */
1424:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:..\FreeRTOS9/tasks.c **** 
1426:..\FreeRTOS9/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:..\FreeRTOS9/tasks.c **** 
1428:..\FreeRTOS9/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:..\FreeRTOS9/tasks.c **** 			{
1430:..\FreeRTOS9/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:..\FreeRTOS9/tasks.c **** 			}
1432:..\FreeRTOS9/tasks.c **** 			#else
1433:..\FreeRTOS9/tasks.c **** 			{
1434:..\FreeRTOS9/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:..\FreeRTOS9/tasks.c **** 			}
1436:..\FreeRTOS9/tasks.c **** 			#endif
1437:..\FreeRTOS9/tasks.c **** 
1438:..\FreeRTOS9/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:..\FreeRTOS9/tasks.c **** 			{
1440:..\FreeRTOS9/tasks.c **** 				/* The priority change may have readied a task of higher
1441:..\FreeRTOS9/tasks.c **** 				priority than the calling task. */
1442:..\FreeRTOS9/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:..\FreeRTOS9/tasks.c **** 				{
1444:..\FreeRTOS9/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:..\FreeRTOS9/tasks.c **** 					{
1446:..\FreeRTOS9/tasks.c **** 						/* The priority of a task other than the currently
1447:..\FreeRTOS9/tasks.c **** 						running task is being raised.  Is the priority being
1448:..\FreeRTOS9/tasks.c **** 						raised above that of the running task? */
1449:..\FreeRTOS9/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:..\FreeRTOS9/tasks.c **** 						{
1451:..\FreeRTOS9/tasks.c **** 							xYieldRequired = pdTRUE;
1452:..\FreeRTOS9/tasks.c **** 						}
1453:..\FreeRTOS9/tasks.c **** 						else
1454:..\FreeRTOS9/tasks.c **** 						{
1455:..\FreeRTOS9/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:..\FreeRTOS9/tasks.c **** 						}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 27


1457:..\FreeRTOS9/tasks.c **** 					}
1458:..\FreeRTOS9/tasks.c **** 					else
1459:..\FreeRTOS9/tasks.c **** 					{
1460:..\FreeRTOS9/tasks.c **** 						/* The priority of the running task is being raised,
1461:..\FreeRTOS9/tasks.c **** 						but the running task must already be the highest
1462:..\FreeRTOS9/tasks.c **** 						priority task able to run so no yield is required. */
1463:..\FreeRTOS9/tasks.c **** 					}
1464:..\FreeRTOS9/tasks.c **** 				}
1465:..\FreeRTOS9/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:..\FreeRTOS9/tasks.c **** 				{
1467:..\FreeRTOS9/tasks.c **** 					/* Setting the priority of the running task down means
1468:..\FreeRTOS9/tasks.c **** 					there may now be another task of higher priority that
1469:..\FreeRTOS9/tasks.c **** 					is ready to execute. */
1470:..\FreeRTOS9/tasks.c **** 					xYieldRequired = pdTRUE;
1471:..\FreeRTOS9/tasks.c **** 				}
1472:..\FreeRTOS9/tasks.c **** 				else
1473:..\FreeRTOS9/tasks.c **** 				{
1474:..\FreeRTOS9/tasks.c **** 					/* Setting the priority of any other task down does not
1475:..\FreeRTOS9/tasks.c **** 					require a yield as the running task must be above the
1476:..\FreeRTOS9/tasks.c **** 					new priority of the task being modified. */
1477:..\FreeRTOS9/tasks.c **** 				}
1478:..\FreeRTOS9/tasks.c **** 
1479:..\FreeRTOS9/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:..\FreeRTOS9/tasks.c **** 				before its uxPriority member is changed so the
1481:..\FreeRTOS9/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:..\FreeRTOS9/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:..\FreeRTOS9/tasks.c **** 
1484:..\FreeRTOS9/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:..\FreeRTOS9/tasks.c **** 				{
1486:..\FreeRTOS9/tasks.c **** 					/* Only change the priority being used if the task is not
1487:..\FreeRTOS9/tasks.c **** 					currently using an inherited priority. */
1488:..\FreeRTOS9/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:..\FreeRTOS9/tasks.c **** 					{
1490:..\FreeRTOS9/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:..\FreeRTOS9/tasks.c **** 					}
1492:..\FreeRTOS9/tasks.c **** 					else
1493:..\FreeRTOS9/tasks.c **** 					{
1494:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:..\FreeRTOS9/tasks.c **** 					}
1496:..\FreeRTOS9/tasks.c **** 
1497:..\FreeRTOS9/tasks.c **** 					/* The base priority gets set whatever. */
1498:..\FreeRTOS9/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:..\FreeRTOS9/tasks.c **** 				}
1500:..\FreeRTOS9/tasks.c **** 				#else
1501:..\FreeRTOS9/tasks.c **** 				{
1502:..\FreeRTOS9/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:..\FreeRTOS9/tasks.c **** 				}
1504:..\FreeRTOS9/tasks.c **** 				#endif
1505:..\FreeRTOS9/tasks.c **** 
1506:..\FreeRTOS9/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:..\FreeRTOS9/tasks.c **** 				being used for anything else. */
1508:..\FreeRTOS9/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:..\FreeRTOS9/tasks.c **** 				{
1510:..\FreeRTOS9/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:..\FreeRTOS9/tasks.c **** 				}
1512:..\FreeRTOS9/tasks.c **** 				else
1513:..\FreeRTOS9/tasks.c **** 				{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 28


1514:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:..\FreeRTOS9/tasks.c **** 				}
1516:..\FreeRTOS9/tasks.c **** 
1517:..\FreeRTOS9/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:..\FreeRTOS9/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:..\FreeRTOS9/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:..\FreeRTOS9/tasks.c **** 				in the list appropriate to its new priority. */
1521:..\FreeRTOS9/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:..\FreeRTOS9/tasks.c **** 				{
1523:..\FreeRTOS9/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:..\FreeRTOS9/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:..\FreeRTOS9/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:..\FreeRTOS9/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:..\FreeRTOS9/tasks.c **** 					{
1528:..\FreeRTOS9/tasks.c **** 						/* It is known that the task is in its ready list so
1529:..\FreeRTOS9/tasks.c **** 						there is no need to check again and the port level
1530:..\FreeRTOS9/tasks.c **** 						reset macro can be called directly. */
1531:..\FreeRTOS9/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:..\FreeRTOS9/tasks.c **** 					}
1533:..\FreeRTOS9/tasks.c **** 					else
1534:..\FreeRTOS9/tasks.c **** 					{
1535:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:..\FreeRTOS9/tasks.c **** 					}
1537:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:..\FreeRTOS9/tasks.c **** 				}
1539:..\FreeRTOS9/tasks.c **** 				else
1540:..\FreeRTOS9/tasks.c **** 				{
1541:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:..\FreeRTOS9/tasks.c **** 				}
1543:..\FreeRTOS9/tasks.c **** 
1544:..\FreeRTOS9/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:..\FreeRTOS9/tasks.c **** 				{
1546:..\FreeRTOS9/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:..\FreeRTOS9/tasks.c **** 				}
1548:..\FreeRTOS9/tasks.c **** 				else
1549:..\FreeRTOS9/tasks.c **** 				{
1550:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:..\FreeRTOS9/tasks.c **** 				}
1552:..\FreeRTOS9/tasks.c **** 
1553:..\FreeRTOS9/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:..\FreeRTOS9/tasks.c **** 				optimised task selection is not being used. */
1555:..\FreeRTOS9/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:..\FreeRTOS9/tasks.c **** 			}
1557:..\FreeRTOS9/tasks.c **** 		}
1558:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
1559:..\FreeRTOS9/tasks.c **** 	}
1560:..\FreeRTOS9/tasks.c **** 
1561:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1563:..\FreeRTOS9/tasks.c **** 
1564:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:..\FreeRTOS9/tasks.c **** 
1566:..\FreeRTOS9/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:..\FreeRTOS9/tasks.c **** 	{
1568:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
1569:..\FreeRTOS9/tasks.c **** 
1570:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 29


1571:..\FreeRTOS9/tasks.c **** 		{
1572:..\FreeRTOS9/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:..\FreeRTOS9/tasks.c **** 			being suspended. */
1574:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:..\FreeRTOS9/tasks.c **** 
1576:..\FreeRTOS9/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:..\FreeRTOS9/tasks.c **** 
1578:..\FreeRTOS9/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:..\FreeRTOS9/tasks.c **** 			suspended list. */
1580:..\FreeRTOS9/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:..\FreeRTOS9/tasks.c **** 			{
1582:..\FreeRTOS9/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:..\FreeRTOS9/tasks.c **** 			}
1584:..\FreeRTOS9/tasks.c **** 			else
1585:..\FreeRTOS9/tasks.c **** 			{
1586:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:..\FreeRTOS9/tasks.c **** 			}
1588:..\FreeRTOS9/tasks.c **** 
1589:..\FreeRTOS9/tasks.c **** 			/* Is the task waiting on an event also? */
1590:..\FreeRTOS9/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:..\FreeRTOS9/tasks.c **** 			{
1592:..\FreeRTOS9/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:..\FreeRTOS9/tasks.c **** 			}
1594:..\FreeRTOS9/tasks.c **** 			else
1595:..\FreeRTOS9/tasks.c **** 			{
1596:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:..\FreeRTOS9/tasks.c **** 			}
1598:..\FreeRTOS9/tasks.c **** 
1599:..\FreeRTOS9/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:..\FreeRTOS9/tasks.c **** 		}
1601:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
1602:..\FreeRTOS9/tasks.c **** 
1603:..\FreeRTOS9/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:..\FreeRTOS9/tasks.c **** 		{
1605:..\FreeRTOS9/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:..\FreeRTOS9/tasks.c **** 			task that is now in the Suspended state. */
1607:..\FreeRTOS9/tasks.c **** 			taskENTER_CRITICAL();
1608:..\FreeRTOS9/tasks.c **** 			{
1609:..\FreeRTOS9/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:..\FreeRTOS9/tasks.c **** 			}
1611:..\FreeRTOS9/tasks.c **** 			taskEXIT_CRITICAL();
1612:..\FreeRTOS9/tasks.c **** 		}
1613:..\FreeRTOS9/tasks.c **** 		else
1614:..\FreeRTOS9/tasks.c **** 		{
1615:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:..\FreeRTOS9/tasks.c **** 		}
1617:..\FreeRTOS9/tasks.c **** 
1618:..\FreeRTOS9/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:..\FreeRTOS9/tasks.c **** 		{
1620:..\FreeRTOS9/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:..\FreeRTOS9/tasks.c **** 			{
1622:..\FreeRTOS9/tasks.c **** 				/* The current task has just been suspended. */
1623:..\FreeRTOS9/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:..\FreeRTOS9/tasks.c **** 				portYIELD_WITHIN_API();
1625:..\FreeRTOS9/tasks.c **** 			}
1626:..\FreeRTOS9/tasks.c **** 			else
1627:..\FreeRTOS9/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 30


1628:..\FreeRTOS9/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:..\FreeRTOS9/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:..\FreeRTOS9/tasks.c **** 				must be adjusted to point to a different task. */
1631:..\FreeRTOS9/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:..\FreeRTOS9/tasks.c **** 				{
1633:..\FreeRTOS9/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:..\FreeRTOS9/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:..\FreeRTOS9/tasks.c **** 					be set to point to it no matter what its relative priority
1636:..\FreeRTOS9/tasks.c **** 					is. */
1637:..\FreeRTOS9/tasks.c **** 					pxCurrentTCB = NULL;
1638:..\FreeRTOS9/tasks.c **** 				}
1639:..\FreeRTOS9/tasks.c **** 				else
1640:..\FreeRTOS9/tasks.c **** 				{
1641:..\FreeRTOS9/tasks.c **** 					vTaskSwitchContext();
1642:..\FreeRTOS9/tasks.c **** 				}
1643:..\FreeRTOS9/tasks.c **** 			}
1644:..\FreeRTOS9/tasks.c **** 		}
1645:..\FreeRTOS9/tasks.c **** 		else
1646:..\FreeRTOS9/tasks.c **** 		{
1647:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:..\FreeRTOS9/tasks.c **** 		}
1649:..\FreeRTOS9/tasks.c **** 	}
1650:..\FreeRTOS9/tasks.c **** 
1651:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1653:..\FreeRTOS9/tasks.c **** 
1654:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:..\FreeRTOS9/tasks.c **** 
1656:..\FreeRTOS9/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:..\FreeRTOS9/tasks.c **** 	{
  27              		.loc 1 1657 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1658:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:..\FreeRTOS9/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:..\FreeRTOS9/tasks.c **** 
1661:..\FreeRTOS9/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:..\FreeRTOS9/tasks.c **** 		section. */
1663:..\FreeRTOS9/tasks.c **** 
1664:..\FreeRTOS9/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:..\FreeRTOS9/tasks.c **** 		configASSERT( xTask );
1666:..\FreeRTOS9/tasks.c **** 
1667:..\FreeRTOS9/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:..\FreeRTOS9/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1668 0
  34 0000 0D4B     		ldr	r3, .L10
  35 0002 4269     		ldr	r2, [r0, #20]
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
  41 000c 0023     		movs	r3, #0
  42              	.L2:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 31


  43              		.loc 1 1668 0 is_stmt 0 discriminator 4
  44 000e 002B     		cmp	r3, #0
  45 0010 0BD0     		beq	.L6
1669:..\FreeRTOS9/tasks.c **** 		{
1670:..\FreeRTOS9/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:..\FreeRTOS9/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  46              		.loc 1 1671 0 is_stmt 1
  47 0012 816A     		ldr	r1, [r0, #40]
  48 0014 084A     		ldr	r2, .L10
  49 0016 1432     		adds	r2, r2, #20
  50 0018 9142     		cmp	r1, r2
  51 001a 08D0     		beq	.L7
1672:..\FreeRTOS9/tasks.c **** 			{
1673:..\FreeRTOS9/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:..\FreeRTOS9/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:..\FreeRTOS9/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  52              		.loc 1 1675 0
  53 001c 0029     		cmp	r1, #0
  54 001e 00D0     		beq	.L4
  55 0020 0023     		movs	r3, #0
  56              	.L4:
  57              		.loc 1 1675 0 is_stmt 0 discriminator 4
  58 0022 002B     		cmp	r3, #0
  59 0024 05D1     		bne	.L9
1658:..\FreeRTOS9/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  60              		.loc 1 1658 0 is_stmt 1
  61 0026 0020     		movs	r0, #0
  62              	.LVL1:
  63 0028 04E0     		b	.L3
  64              	.LVL2:
  65              	.L6:
  66 002a 0020     		movs	r0, #0
  67              	.LVL3:
  68 002c 02E0     		b	.L3
  69              	.LVL4:
  70              	.L7:
  71 002e 0020     		movs	r0, #0
  72              	.LVL5:
  73 0030 00E0     		b	.L3
  74              	.LVL6:
  75              	.L9:
1676:..\FreeRTOS9/tasks.c **** 				{
1677:..\FreeRTOS9/tasks.c **** 					xReturn = pdTRUE;
  76              		.loc 1 1677 0
  77 0032 0120     		movs	r0, #1
  78              	.LVL7:
  79              	.L3:
1678:..\FreeRTOS9/tasks.c **** 				}
1679:..\FreeRTOS9/tasks.c **** 				else
1680:..\FreeRTOS9/tasks.c **** 				{
1681:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:..\FreeRTOS9/tasks.c **** 				}
1683:..\FreeRTOS9/tasks.c **** 			}
1684:..\FreeRTOS9/tasks.c **** 			else
1685:..\FreeRTOS9/tasks.c **** 			{
1686:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:..\FreeRTOS9/tasks.c **** 			}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 32


1688:..\FreeRTOS9/tasks.c **** 		}
1689:..\FreeRTOS9/tasks.c **** 		else
1690:..\FreeRTOS9/tasks.c **** 		{
1691:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:..\FreeRTOS9/tasks.c **** 		}
1693:..\FreeRTOS9/tasks.c **** 
1694:..\FreeRTOS9/tasks.c **** 		return xReturn;
1695:..\FreeRTOS9/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1695 0
  81              		@ sp needed
  82 0034 7047     		bx	lr
  83              	.L11:
  84 0036 C046     		.align	2
  85              	.L10:
  86 0038 00000000 		.word	.LANCHOR0
  87              		.cfi_endproc
  88              	.LFE43:
  89              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  90              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  91              		.align	2
  92              		.code	16
  93              		.thumb_func
  94              		.type	prvTaskCheckFreeStackSpace, %function
  95              	prvTaskCheckFreeStackSpace:
  96              	.LFB68:
1696:..\FreeRTOS9/tasks.c **** 
1697:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1699:..\FreeRTOS9/tasks.c **** 
1700:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:..\FreeRTOS9/tasks.c **** 
1702:..\FreeRTOS9/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:..\FreeRTOS9/tasks.c **** 	{
1704:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:..\FreeRTOS9/tasks.c **** 
1706:..\FreeRTOS9/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:..\FreeRTOS9/tasks.c **** 		configASSERT( xTaskToResume );
1708:..\FreeRTOS9/tasks.c **** 
1709:..\FreeRTOS9/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:..\FreeRTOS9/tasks.c **** 		currently executing task. */
1711:..\FreeRTOS9/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:..\FreeRTOS9/tasks.c **** 		{
1713:..\FreeRTOS9/tasks.c **** 			taskENTER_CRITICAL();
1714:..\FreeRTOS9/tasks.c **** 			{
1715:..\FreeRTOS9/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:..\FreeRTOS9/tasks.c **** 				{
1717:..\FreeRTOS9/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:..\FreeRTOS9/tasks.c **** 
1719:..\FreeRTOS9/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:..\FreeRTOS9/tasks.c **** 					lists even if the scheduler is suspended. */
1721:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:..\FreeRTOS9/tasks.c **** 
1724:..\FreeRTOS9/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:..\FreeRTOS9/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:..\FreeRTOS9/tasks.c **** 					{
1727:..\FreeRTOS9/tasks.c **** 						/* This yield may not cause the task just resumed to run,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 33


1728:..\FreeRTOS9/tasks.c **** 						but will leave the lists in the correct state for the
1729:..\FreeRTOS9/tasks.c **** 						next yield. */
1730:..\FreeRTOS9/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:..\FreeRTOS9/tasks.c **** 					}
1732:..\FreeRTOS9/tasks.c **** 					else
1733:..\FreeRTOS9/tasks.c **** 					{
1734:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:..\FreeRTOS9/tasks.c **** 					}
1736:..\FreeRTOS9/tasks.c **** 				}
1737:..\FreeRTOS9/tasks.c **** 				else
1738:..\FreeRTOS9/tasks.c **** 				{
1739:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:..\FreeRTOS9/tasks.c **** 				}
1741:..\FreeRTOS9/tasks.c **** 			}
1742:..\FreeRTOS9/tasks.c **** 			taskEXIT_CRITICAL();
1743:..\FreeRTOS9/tasks.c **** 		}
1744:..\FreeRTOS9/tasks.c **** 		else
1745:..\FreeRTOS9/tasks.c **** 		{
1746:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:..\FreeRTOS9/tasks.c **** 		}
1748:..\FreeRTOS9/tasks.c **** 	}
1749:..\FreeRTOS9/tasks.c **** 
1750:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:..\FreeRTOS9/tasks.c **** 
1752:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1753:..\FreeRTOS9/tasks.c **** 
1754:..\FreeRTOS9/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:..\FreeRTOS9/tasks.c **** 
1756:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:..\FreeRTOS9/tasks.c **** 	{
1758:..\FreeRTOS9/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:..\FreeRTOS9/tasks.c **** 
1762:..\FreeRTOS9/tasks.c **** 		configASSERT( xTaskToResume );
1763:..\FreeRTOS9/tasks.c **** 
1764:..\FreeRTOS9/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:..\FreeRTOS9/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:..\FreeRTOS9/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:..\FreeRTOS9/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:..\FreeRTOS9/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:..\FreeRTOS9/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:..\FreeRTOS9/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:..\FreeRTOS9/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:..\FreeRTOS9/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:..\FreeRTOS9/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:..\FreeRTOS9/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:..\FreeRTOS9/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:..\FreeRTOS9/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:..\FreeRTOS9/tasks.c **** 		provided on the following link:
1779:..\FreeRTOS9/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:..\FreeRTOS9/tasks.c **** 
1782:..\FreeRTOS9/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:..\FreeRTOS9/tasks.c **** 		{
1784:..\FreeRTOS9/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 34


1785:..\FreeRTOS9/tasks.c **** 			{
1786:..\FreeRTOS9/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:..\FreeRTOS9/tasks.c **** 
1788:..\FreeRTOS9/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:..\FreeRTOS9/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:..\FreeRTOS9/tasks.c **** 				{
1791:..\FreeRTOS9/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:..\FreeRTOS9/tasks.c **** 					suspended list to the ready list directly. */
1793:..\FreeRTOS9/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:..\FreeRTOS9/tasks.c **** 					{
1795:..\FreeRTOS9/tasks.c **** 						xYieldRequired = pdTRUE;
1796:..\FreeRTOS9/tasks.c **** 					}
1797:..\FreeRTOS9/tasks.c **** 					else
1798:..\FreeRTOS9/tasks.c **** 					{
1799:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:..\FreeRTOS9/tasks.c **** 					}
1801:..\FreeRTOS9/tasks.c **** 
1802:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:..\FreeRTOS9/tasks.c **** 				}
1805:..\FreeRTOS9/tasks.c **** 				else
1806:..\FreeRTOS9/tasks.c **** 				{
1807:..\FreeRTOS9/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:..\FreeRTOS9/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:..\FreeRTOS9/tasks.c **** 					unsuspended. */
1810:..\FreeRTOS9/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:..\FreeRTOS9/tasks.c **** 				}
1812:..\FreeRTOS9/tasks.c **** 			}
1813:..\FreeRTOS9/tasks.c **** 			else
1814:..\FreeRTOS9/tasks.c **** 			{
1815:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:..\FreeRTOS9/tasks.c **** 			}
1817:..\FreeRTOS9/tasks.c **** 		}
1818:..\FreeRTOS9/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:..\FreeRTOS9/tasks.c **** 
1820:..\FreeRTOS9/tasks.c **** 		return xYieldRequired;
1821:..\FreeRTOS9/tasks.c **** 	}
1822:..\FreeRTOS9/tasks.c **** 
1823:..\FreeRTOS9/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1825:..\FreeRTOS9/tasks.c **** 
1826:..\FreeRTOS9/tasks.c **** void vTaskStartScheduler( void )
1827:..\FreeRTOS9/tasks.c **** {
1828:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
1829:..\FreeRTOS9/tasks.c **** 
1830:..\FreeRTOS9/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:..\FreeRTOS9/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:..\FreeRTOS9/tasks.c **** 	{
1833:..\FreeRTOS9/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:..\FreeRTOS9/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:..\FreeRTOS9/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:..\FreeRTOS9/tasks.c **** 
1837:..\FreeRTOS9/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:..\FreeRTOS9/tasks.c **** 		address of the RAM then create the idle task. */
1839:..\FreeRTOS9/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:..\FreeRTOS9/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:..\FreeRTOS9/tasks.c **** 												"IDLE",
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 35


1842:..\FreeRTOS9/tasks.c **** 												ulIdleTaskStackSize,
1843:..\FreeRTOS9/tasks.c **** 												( void * ) NULL,
1844:..\FreeRTOS9/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:..\FreeRTOS9/tasks.c **** 												pxIdleTaskStackBuffer,
1846:..\FreeRTOS9/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:..\FreeRTOS9/tasks.c **** 
1848:..\FreeRTOS9/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:..\FreeRTOS9/tasks.c **** 		{
1850:..\FreeRTOS9/tasks.c **** 			xReturn = pdPASS;
1851:..\FreeRTOS9/tasks.c **** 		}
1852:..\FreeRTOS9/tasks.c **** 		else
1853:..\FreeRTOS9/tasks.c **** 		{
1854:..\FreeRTOS9/tasks.c **** 			xReturn = pdFAIL;
1855:..\FreeRTOS9/tasks.c **** 		}
1856:..\FreeRTOS9/tasks.c **** 	}
1857:..\FreeRTOS9/tasks.c **** 	#else
1858:..\FreeRTOS9/tasks.c **** 	{
1859:..\FreeRTOS9/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:..\FreeRTOS9/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:..\FreeRTOS9/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:..\FreeRTOS9/tasks.c **** 								( void * ) NULL,
1863:..\FreeRTOS9/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:..\FreeRTOS9/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:..\FreeRTOS9/tasks.c **** 	}
1866:..\FreeRTOS9/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:..\FreeRTOS9/tasks.c **** 
1868:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:..\FreeRTOS9/tasks.c **** 	{
1870:..\FreeRTOS9/tasks.c **** 		if( xReturn == pdPASS )
1871:..\FreeRTOS9/tasks.c **** 		{
1872:..\FreeRTOS9/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:..\FreeRTOS9/tasks.c **** 		}
1874:..\FreeRTOS9/tasks.c **** 		else
1875:..\FreeRTOS9/tasks.c **** 		{
1876:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:..\FreeRTOS9/tasks.c **** 		}
1878:..\FreeRTOS9/tasks.c **** 	}
1879:..\FreeRTOS9/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:..\FreeRTOS9/tasks.c **** 
1881:..\FreeRTOS9/tasks.c **** 	if( xReturn == pdPASS )
1882:..\FreeRTOS9/tasks.c **** 	{
1883:..\FreeRTOS9/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:..\FreeRTOS9/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:..\FreeRTOS9/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:..\FreeRTOS9/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:..\FreeRTOS9/tasks.c **** 		starts to run. */
1888:..\FreeRTOS9/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:..\FreeRTOS9/tasks.c **** 
1890:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:..\FreeRTOS9/tasks.c **** 		{
1892:..\FreeRTOS9/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:..\FreeRTOS9/tasks.c **** 			structure specific to the task that will run first. */
1894:..\FreeRTOS9/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:..\FreeRTOS9/tasks.c **** 		}
1896:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:..\FreeRTOS9/tasks.c **** 
1898:..\FreeRTOS9/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 36


1899:..\FreeRTOS9/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:..\FreeRTOS9/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:..\FreeRTOS9/tasks.c **** 
1902:..\FreeRTOS9/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:..\FreeRTOS9/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:..\FreeRTOS9/tasks.c **** 		the run time counter time base. */
1905:..\FreeRTOS9/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:..\FreeRTOS9/tasks.c **** 
1907:..\FreeRTOS9/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:..\FreeRTOS9/tasks.c **** 		portable interface. */
1909:..\FreeRTOS9/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:..\FreeRTOS9/tasks.c **** 		{
1911:..\FreeRTOS9/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:..\FreeRTOS9/tasks.c **** 			function will not return. */
1913:..\FreeRTOS9/tasks.c **** 		}
1914:..\FreeRTOS9/tasks.c **** 		else
1915:..\FreeRTOS9/tasks.c **** 		{
1916:..\FreeRTOS9/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:..\FreeRTOS9/tasks.c **** 		}
1918:..\FreeRTOS9/tasks.c **** 	}
1919:..\FreeRTOS9/tasks.c **** 	else
1920:..\FreeRTOS9/tasks.c **** 	{
1921:..\FreeRTOS9/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:..\FreeRTOS9/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:..\FreeRTOS9/tasks.c **** 		or the timer task. */
1924:..\FreeRTOS9/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:..\FreeRTOS9/tasks.c **** 	}
1926:..\FreeRTOS9/tasks.c **** 
1927:..\FreeRTOS9/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:..\FreeRTOS9/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:..\FreeRTOS9/tasks.c **** 	( void ) xIdleTaskHandle;
1930:..\FreeRTOS9/tasks.c **** }
1931:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
1932:..\FreeRTOS9/tasks.c **** 
1933:..\FreeRTOS9/tasks.c **** void vTaskEndScheduler( void )
1934:..\FreeRTOS9/tasks.c **** {
1935:..\FreeRTOS9/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:..\FreeRTOS9/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:..\FreeRTOS9/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:..\FreeRTOS9/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:..\FreeRTOS9/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:..\FreeRTOS9/tasks.c **** 	vPortEndScheduler();
1941:..\FreeRTOS9/tasks.c **** }
1942:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
1943:..\FreeRTOS9/tasks.c **** 
1944:..\FreeRTOS9/tasks.c **** void vTaskSuspendAll( void )
1945:..\FreeRTOS9/tasks.c **** {
1946:..\FreeRTOS9/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:..\FreeRTOS9/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:..\FreeRTOS9/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:..\FreeRTOS9/tasks.c **** 	http://goo.gl/wu4acr */
1950:..\FreeRTOS9/tasks.c **** 	++uxSchedulerSuspended;
1951:..\FreeRTOS9/tasks.c **** }
1952:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
1953:..\FreeRTOS9/tasks.c **** 
1954:..\FreeRTOS9/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 37


1956:..\FreeRTOS9/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:..\FreeRTOS9/tasks.c **** 	{
1958:..\FreeRTOS9/tasks.c **** 	TickType_t xReturn;
1959:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:..\FreeRTOS9/tasks.c **** 
1961:..\FreeRTOS9/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:..\FreeRTOS9/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:..\FreeRTOS9/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:..\FreeRTOS9/tasks.c **** 		running. */
1965:..\FreeRTOS9/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:..\FreeRTOS9/tasks.c **** 		{
1967:..\FreeRTOS9/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:..\FreeRTOS9/tasks.c **** 			{
1969:..\FreeRTOS9/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:..\FreeRTOS9/tasks.c **** 			}
1971:..\FreeRTOS9/tasks.c **** 		}
1972:..\FreeRTOS9/tasks.c **** 		#else
1973:..\FreeRTOS9/tasks.c **** 		{
1974:..\FreeRTOS9/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:..\FreeRTOS9/tasks.c **** 
1976:..\FreeRTOS9/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:..\FreeRTOS9/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:..\FreeRTOS9/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:..\FreeRTOS9/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:..\FreeRTOS9/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:..\FreeRTOS9/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:..\FreeRTOS9/tasks.c **** 			{
1983:..\FreeRTOS9/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:..\FreeRTOS9/tasks.c **** 			}
1985:..\FreeRTOS9/tasks.c **** 		}
1986:..\FreeRTOS9/tasks.c **** 		#endif
1987:..\FreeRTOS9/tasks.c **** 
1988:..\FreeRTOS9/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:..\FreeRTOS9/tasks.c **** 		{
1990:..\FreeRTOS9/tasks.c **** 			xReturn = 0;
1991:..\FreeRTOS9/tasks.c **** 		}
1992:..\FreeRTOS9/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:..\FreeRTOS9/tasks.c **** 		{
1994:..\FreeRTOS9/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:..\FreeRTOS9/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:..\FreeRTOS9/tasks.c **** 			processed. */
1997:..\FreeRTOS9/tasks.c **** 			xReturn = 0;
1998:..\FreeRTOS9/tasks.c **** 		}
1999:..\FreeRTOS9/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:..\FreeRTOS9/tasks.c **** 		{
2001:..\FreeRTOS9/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:..\FreeRTOS9/tasks.c **** 			idle priority.  This path can only be reached if
2003:..\FreeRTOS9/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:..\FreeRTOS9/tasks.c **** 			xReturn = 0;
2005:..\FreeRTOS9/tasks.c **** 		}
2006:..\FreeRTOS9/tasks.c **** 		else
2007:..\FreeRTOS9/tasks.c **** 		{
2008:..\FreeRTOS9/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:..\FreeRTOS9/tasks.c **** 		}
2010:..\FreeRTOS9/tasks.c **** 
2011:..\FreeRTOS9/tasks.c **** 		return xReturn;
2012:..\FreeRTOS9/tasks.c **** 	}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 38


2013:..\FreeRTOS9/tasks.c **** 
2014:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
2016:..\FreeRTOS9/tasks.c **** 
2017:..\FreeRTOS9/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:..\FreeRTOS9/tasks.c **** {
2019:..\FreeRTOS9/tasks.c **** TCB_t *pxTCB = NULL;
2020:..\FreeRTOS9/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:..\FreeRTOS9/tasks.c **** 
2022:..\FreeRTOS9/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:..\FreeRTOS9/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:..\FreeRTOS9/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:..\FreeRTOS9/tasks.c **** 
2026:..\FreeRTOS9/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:..\FreeRTOS9/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:..\FreeRTOS9/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:..\FreeRTOS9/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:..\FreeRTOS9/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:..\FreeRTOS9/tasks.c **** 	taskENTER_CRITICAL();
2032:..\FreeRTOS9/tasks.c **** 	{
2033:..\FreeRTOS9/tasks.c **** 		--uxSchedulerSuspended;
2034:..\FreeRTOS9/tasks.c **** 
2035:..\FreeRTOS9/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:..\FreeRTOS9/tasks.c **** 		{
2037:..\FreeRTOS9/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:..\FreeRTOS9/tasks.c **** 			{
2039:..\FreeRTOS9/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:..\FreeRTOS9/tasks.c **** 				appropriate ready list. */
2041:..\FreeRTOS9/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:..\FreeRTOS9/tasks.c **** 				{
2043:..\FreeRTOS9/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:..\FreeRTOS9/tasks.c **** 
2048:..\FreeRTOS9/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:..\FreeRTOS9/tasks.c **** 					task then a yield must be performed. */
2050:..\FreeRTOS9/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:..\FreeRTOS9/tasks.c **** 					{
2052:..\FreeRTOS9/tasks.c **** 						xYieldPending = pdTRUE;
2053:..\FreeRTOS9/tasks.c **** 					}
2054:..\FreeRTOS9/tasks.c **** 					else
2055:..\FreeRTOS9/tasks.c **** 					{
2056:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:..\FreeRTOS9/tasks.c **** 					}
2058:..\FreeRTOS9/tasks.c **** 				}
2059:..\FreeRTOS9/tasks.c **** 
2060:..\FreeRTOS9/tasks.c **** 				if( pxTCB != NULL )
2061:..\FreeRTOS9/tasks.c **** 				{
2062:..\FreeRTOS9/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:..\FreeRTOS9/tasks.c **** 					which may have prevented the next unblock time from being
2064:..\FreeRTOS9/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:..\FreeRTOS9/tasks.c **** 					important for low power tickless implementations, where
2066:..\FreeRTOS9/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:..\FreeRTOS9/tasks.c **** 					state. */
2068:..\FreeRTOS9/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:..\FreeRTOS9/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 39


2070:..\FreeRTOS9/tasks.c **** 
2071:..\FreeRTOS9/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:..\FreeRTOS9/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:..\FreeRTOS9/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:..\FreeRTOS9/tasks.c **** 				time. */
2075:..\FreeRTOS9/tasks.c **** 				{
2076:..\FreeRTOS9/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:..\FreeRTOS9/tasks.c **** 
2078:..\FreeRTOS9/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:..\FreeRTOS9/tasks.c **** 					{
2080:..\FreeRTOS9/tasks.c **** 						do
2081:..\FreeRTOS9/tasks.c **** 						{
2082:..\FreeRTOS9/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:..\FreeRTOS9/tasks.c **** 							{
2084:..\FreeRTOS9/tasks.c **** 								xYieldPending = pdTRUE;
2085:..\FreeRTOS9/tasks.c **** 							}
2086:..\FreeRTOS9/tasks.c **** 							else
2087:..\FreeRTOS9/tasks.c **** 							{
2088:..\FreeRTOS9/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:..\FreeRTOS9/tasks.c **** 							}
2090:..\FreeRTOS9/tasks.c **** 							--uxPendedCounts;
2091:..\FreeRTOS9/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:..\FreeRTOS9/tasks.c **** 
2093:..\FreeRTOS9/tasks.c **** 						uxPendedTicks = 0;
2094:..\FreeRTOS9/tasks.c **** 					}
2095:..\FreeRTOS9/tasks.c **** 					else
2096:..\FreeRTOS9/tasks.c **** 					{
2097:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:..\FreeRTOS9/tasks.c **** 					}
2099:..\FreeRTOS9/tasks.c **** 				}
2100:..\FreeRTOS9/tasks.c **** 
2101:..\FreeRTOS9/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:..\FreeRTOS9/tasks.c **** 				{
2103:..\FreeRTOS9/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:..\FreeRTOS9/tasks.c **** 					{
2105:..\FreeRTOS9/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:..\FreeRTOS9/tasks.c **** 					}
2107:..\FreeRTOS9/tasks.c **** 					#endif
2108:..\FreeRTOS9/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:..\FreeRTOS9/tasks.c **** 				}
2110:..\FreeRTOS9/tasks.c **** 				else
2111:..\FreeRTOS9/tasks.c **** 				{
2112:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:..\FreeRTOS9/tasks.c **** 				}
2114:..\FreeRTOS9/tasks.c **** 			}
2115:..\FreeRTOS9/tasks.c **** 		}
2116:..\FreeRTOS9/tasks.c **** 		else
2117:..\FreeRTOS9/tasks.c **** 		{
2118:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:..\FreeRTOS9/tasks.c **** 		}
2120:..\FreeRTOS9/tasks.c **** 	}
2121:..\FreeRTOS9/tasks.c **** 	taskEXIT_CRITICAL();
2122:..\FreeRTOS9/tasks.c **** 
2123:..\FreeRTOS9/tasks.c **** 	return xAlreadyYielded;
2124:..\FreeRTOS9/tasks.c **** }
2125:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2126:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 40


2127:..\FreeRTOS9/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:..\FreeRTOS9/tasks.c **** {
2129:..\FreeRTOS9/tasks.c **** TickType_t xTicks;
2130:..\FreeRTOS9/tasks.c **** 
2131:..\FreeRTOS9/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:..\FreeRTOS9/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:..\FreeRTOS9/tasks.c **** 	{
2134:..\FreeRTOS9/tasks.c **** 		xTicks = xTickCount;
2135:..\FreeRTOS9/tasks.c **** 	}
2136:..\FreeRTOS9/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:..\FreeRTOS9/tasks.c **** 
2138:..\FreeRTOS9/tasks.c **** 	return xTicks;
2139:..\FreeRTOS9/tasks.c **** }
2140:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2141:..\FreeRTOS9/tasks.c **** 
2142:..\FreeRTOS9/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:..\FreeRTOS9/tasks.c **** {
2144:..\FreeRTOS9/tasks.c **** TickType_t xReturn;
2145:..\FreeRTOS9/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:..\FreeRTOS9/tasks.c **** 
2147:..\FreeRTOS9/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:..\FreeRTOS9/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:..\FreeRTOS9/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:..\FreeRTOS9/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:..\FreeRTOS9/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:..\FreeRTOS9/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:..\FreeRTOS9/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:..\FreeRTOS9/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:..\FreeRTOS9/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:..\FreeRTOS9/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:..\FreeRTOS9/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:..\FreeRTOS9/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:..\FreeRTOS9/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:..\FreeRTOS9/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:..\FreeRTOS9/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:..\FreeRTOS9/tasks.c **** 
2163:..\FreeRTOS9/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:..\FreeRTOS9/tasks.c **** 	{
2165:..\FreeRTOS9/tasks.c **** 		xReturn = xTickCount;
2166:..\FreeRTOS9/tasks.c **** 	}
2167:..\FreeRTOS9/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:..\FreeRTOS9/tasks.c **** 
2169:..\FreeRTOS9/tasks.c **** 	return xReturn;
2170:..\FreeRTOS9/tasks.c **** }
2171:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2172:..\FreeRTOS9/tasks.c **** 
2173:..\FreeRTOS9/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:..\FreeRTOS9/tasks.c **** {
2175:..\FreeRTOS9/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:..\FreeRTOS9/tasks.c **** 	BaseType_t. */
2177:..\FreeRTOS9/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:..\FreeRTOS9/tasks.c **** }
2179:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2180:..\FreeRTOS9/tasks.c **** 
2181:..\FreeRTOS9/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:..\FreeRTOS9/tasks.c **** {
2183:..\FreeRTOS9/tasks.c **** TCB_t *pxTCB;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 41


2184:..\FreeRTOS9/tasks.c **** 
2185:..\FreeRTOS9/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:..\FreeRTOS9/tasks.c **** 	queried. */
2187:..\FreeRTOS9/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTCB );
2189:..\FreeRTOS9/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:..\FreeRTOS9/tasks.c **** }
2191:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2192:..\FreeRTOS9/tasks.c **** 
2193:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:..\FreeRTOS9/tasks.c **** 
2195:..\FreeRTOS9/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:..\FreeRTOS9/tasks.c **** 	{
2197:..\FreeRTOS9/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:..\FreeRTOS9/tasks.c **** 	UBaseType_t x;
2199:..\FreeRTOS9/tasks.c **** 	char cNextChar;
2200:..\FreeRTOS9/tasks.c **** 
2201:..\FreeRTOS9/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:..\FreeRTOS9/tasks.c **** 
2203:..\FreeRTOS9/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:..\FreeRTOS9/tasks.c **** 		{
2205:..\FreeRTOS9/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:..\FreeRTOS9/tasks.c **** 
2207:..\FreeRTOS9/tasks.c **** 			do
2208:..\FreeRTOS9/tasks.c **** 			{
2209:..\FreeRTOS9/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:..\FreeRTOS9/tasks.c **** 
2211:..\FreeRTOS9/tasks.c **** 				/* Check each character in the name looking for a match or
2212:..\FreeRTOS9/tasks.c **** 				mismatch. */
2213:..\FreeRTOS9/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:..\FreeRTOS9/tasks.c **** 				{
2215:..\FreeRTOS9/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:..\FreeRTOS9/tasks.c **** 
2217:..\FreeRTOS9/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:..\FreeRTOS9/tasks.c **** 					{
2219:..\FreeRTOS9/tasks.c **** 						/* Characters didn't match. */
2220:..\FreeRTOS9/tasks.c **** 						break;
2221:..\FreeRTOS9/tasks.c **** 					}
2222:..\FreeRTOS9/tasks.c **** 					else if( cNextChar == 0x00 )
2223:..\FreeRTOS9/tasks.c **** 					{
2224:..\FreeRTOS9/tasks.c **** 						/* Both strings terminated, a match must have been
2225:..\FreeRTOS9/tasks.c **** 						found. */
2226:..\FreeRTOS9/tasks.c **** 						pxReturn = pxNextTCB;
2227:..\FreeRTOS9/tasks.c **** 						break;
2228:..\FreeRTOS9/tasks.c **** 					}
2229:..\FreeRTOS9/tasks.c **** 					else
2230:..\FreeRTOS9/tasks.c **** 					{
2231:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:..\FreeRTOS9/tasks.c **** 					}
2233:..\FreeRTOS9/tasks.c **** 				}
2234:..\FreeRTOS9/tasks.c **** 
2235:..\FreeRTOS9/tasks.c **** 				if( pxReturn != NULL )
2236:..\FreeRTOS9/tasks.c **** 				{
2237:..\FreeRTOS9/tasks.c **** 					/* The handle has been found. */
2238:..\FreeRTOS9/tasks.c **** 					break;
2239:..\FreeRTOS9/tasks.c **** 				}
2240:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 42


2241:..\FreeRTOS9/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:..\FreeRTOS9/tasks.c **** 		}
2243:..\FreeRTOS9/tasks.c **** 		else
2244:..\FreeRTOS9/tasks.c **** 		{
2245:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:..\FreeRTOS9/tasks.c **** 		}
2247:..\FreeRTOS9/tasks.c **** 
2248:..\FreeRTOS9/tasks.c **** 		return pxReturn;
2249:..\FreeRTOS9/tasks.c **** 	}
2250:..\FreeRTOS9/tasks.c **** 
2251:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2253:..\FreeRTOS9/tasks.c **** 
2254:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:..\FreeRTOS9/tasks.c **** 
2256:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:..\FreeRTOS9/tasks.c **** 	{
2258:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:..\FreeRTOS9/tasks.c **** 	TCB_t* pxTCB;
2260:..\FreeRTOS9/tasks.c **** 
2261:..\FreeRTOS9/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:..\FreeRTOS9/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:..\FreeRTOS9/tasks.c **** 
2264:..\FreeRTOS9/tasks.c **** 		vTaskSuspendAll();
2265:..\FreeRTOS9/tasks.c **** 		{
2266:..\FreeRTOS9/tasks.c **** 			/* Search the ready lists. */
2267:..\FreeRTOS9/tasks.c **** 			do
2268:..\FreeRTOS9/tasks.c **** 			{
2269:..\FreeRTOS9/tasks.c **** 				uxQueue--;
2270:..\FreeRTOS9/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:..\FreeRTOS9/tasks.c **** 
2272:..\FreeRTOS9/tasks.c **** 				if( pxTCB != NULL )
2273:..\FreeRTOS9/tasks.c **** 				{
2274:..\FreeRTOS9/tasks.c **** 					/* Found the handle. */
2275:..\FreeRTOS9/tasks.c **** 					break;
2276:..\FreeRTOS9/tasks.c **** 				}
2277:..\FreeRTOS9/tasks.c **** 
2278:..\FreeRTOS9/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:..\FreeRTOS9/tasks.c **** 
2280:..\FreeRTOS9/tasks.c **** 			/* Search the delayed lists. */
2281:..\FreeRTOS9/tasks.c **** 			if( pxTCB == NULL )
2282:..\FreeRTOS9/tasks.c **** 			{
2283:..\FreeRTOS9/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:..\FreeRTOS9/tasks.c **** 			}
2285:..\FreeRTOS9/tasks.c **** 
2286:..\FreeRTOS9/tasks.c **** 			if( pxTCB == NULL )
2287:..\FreeRTOS9/tasks.c **** 			{
2288:..\FreeRTOS9/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:..\FreeRTOS9/tasks.c **** 			}
2290:..\FreeRTOS9/tasks.c **** 
2291:..\FreeRTOS9/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:..\FreeRTOS9/tasks.c **** 			{
2293:..\FreeRTOS9/tasks.c **** 				if( pxTCB == NULL )
2294:..\FreeRTOS9/tasks.c **** 				{
2295:..\FreeRTOS9/tasks.c **** 					/* Search the suspended list. */
2296:..\FreeRTOS9/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:..\FreeRTOS9/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 43


2298:..\FreeRTOS9/tasks.c **** 			}
2299:..\FreeRTOS9/tasks.c **** 			#endif
2300:..\FreeRTOS9/tasks.c **** 
2301:..\FreeRTOS9/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:..\FreeRTOS9/tasks.c **** 			{
2303:..\FreeRTOS9/tasks.c **** 				if( pxTCB == NULL )
2304:..\FreeRTOS9/tasks.c **** 				{
2305:..\FreeRTOS9/tasks.c **** 					/* Search the deleted list. */
2306:..\FreeRTOS9/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:..\FreeRTOS9/tasks.c **** 				}
2308:..\FreeRTOS9/tasks.c **** 			}
2309:..\FreeRTOS9/tasks.c **** 			#endif
2310:..\FreeRTOS9/tasks.c **** 		}
2311:..\FreeRTOS9/tasks.c **** 		( void ) xTaskResumeAll();
2312:..\FreeRTOS9/tasks.c **** 
2313:..\FreeRTOS9/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:..\FreeRTOS9/tasks.c **** 	}
2315:..\FreeRTOS9/tasks.c **** 
2316:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2318:..\FreeRTOS9/tasks.c **** 
2319:..\FreeRTOS9/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:..\FreeRTOS9/tasks.c **** 
2321:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:..\FreeRTOS9/tasks.c **** 	{
2323:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:..\FreeRTOS9/tasks.c **** 
2325:..\FreeRTOS9/tasks.c **** 		vTaskSuspendAll();
2326:..\FreeRTOS9/tasks.c **** 		{
2327:..\FreeRTOS9/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:..\FreeRTOS9/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:..\FreeRTOS9/tasks.c **** 			{
2330:..\FreeRTOS9/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:..\FreeRTOS9/tasks.c **** 				task in the Ready state. */
2332:..\FreeRTOS9/tasks.c **** 				do
2333:..\FreeRTOS9/tasks.c **** 				{
2334:..\FreeRTOS9/tasks.c **** 					uxQueue--;
2335:..\FreeRTOS9/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:..\FreeRTOS9/tasks.c **** 
2337:..\FreeRTOS9/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:..\FreeRTOS9/tasks.c **** 
2339:..\FreeRTOS9/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:..\FreeRTOS9/tasks.c **** 				task in the Blocked state. */
2341:..\FreeRTOS9/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:..\FreeRTOS9/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:..\FreeRTOS9/tasks.c **** 
2344:..\FreeRTOS9/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:..\FreeRTOS9/tasks.c **** 				{
2346:..\FreeRTOS9/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:..\FreeRTOS9/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:..\FreeRTOS9/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:..\FreeRTOS9/tasks.c **** 				}
2350:..\FreeRTOS9/tasks.c **** 				#endif
2351:..\FreeRTOS9/tasks.c **** 
2352:..\FreeRTOS9/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:..\FreeRTOS9/tasks.c **** 				{
2354:..\FreeRTOS9/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 44


2355:..\FreeRTOS9/tasks.c **** 					each task in the Suspended state. */
2356:..\FreeRTOS9/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:..\FreeRTOS9/tasks.c **** 				}
2358:..\FreeRTOS9/tasks.c **** 				#endif
2359:..\FreeRTOS9/tasks.c **** 
2360:..\FreeRTOS9/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:..\FreeRTOS9/tasks.c **** 				{
2362:..\FreeRTOS9/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:..\FreeRTOS9/tasks.c **** 					{
2364:..\FreeRTOS9/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:..\FreeRTOS9/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:..\FreeRTOS9/tasks.c **** 						#else
2367:..\FreeRTOS9/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:..\FreeRTOS9/tasks.c **** 						#endif
2369:..\FreeRTOS9/tasks.c **** 					}
2370:..\FreeRTOS9/tasks.c **** 				}
2371:..\FreeRTOS9/tasks.c **** 				#else
2372:..\FreeRTOS9/tasks.c **** 				{
2373:..\FreeRTOS9/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:..\FreeRTOS9/tasks.c **** 					{
2375:..\FreeRTOS9/tasks.c **** 						*pulTotalRunTime = 0;
2376:..\FreeRTOS9/tasks.c **** 					}
2377:..\FreeRTOS9/tasks.c **** 				}
2378:..\FreeRTOS9/tasks.c **** 				#endif
2379:..\FreeRTOS9/tasks.c **** 			}
2380:..\FreeRTOS9/tasks.c **** 			else
2381:..\FreeRTOS9/tasks.c **** 			{
2382:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:..\FreeRTOS9/tasks.c **** 			}
2384:..\FreeRTOS9/tasks.c **** 		}
2385:..\FreeRTOS9/tasks.c **** 		( void ) xTaskResumeAll();
2386:..\FreeRTOS9/tasks.c **** 
2387:..\FreeRTOS9/tasks.c **** 		return uxTask;
2388:..\FreeRTOS9/tasks.c **** 	}
2389:..\FreeRTOS9/tasks.c **** 
2390:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
2392:..\FreeRTOS9/tasks.c **** 
2393:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:..\FreeRTOS9/tasks.c **** 
2395:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:..\FreeRTOS9/tasks.c **** 	{
2397:..\FreeRTOS9/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:..\FreeRTOS9/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:..\FreeRTOS9/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:..\FreeRTOS9/tasks.c **** 		return xIdleTaskHandle;
2401:..\FreeRTOS9/tasks.c **** 	}
2402:..\FreeRTOS9/tasks.c **** 
2403:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
2405:..\FreeRTOS9/tasks.c **** 
2406:..\FreeRTOS9/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:..\FreeRTOS9/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:..\FreeRTOS9/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:..\FreeRTOS9/tasks.c **** 1. */
2410:..\FreeRTOS9/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 45


2412:..\FreeRTOS9/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:..\FreeRTOS9/tasks.c **** 	{
2414:..\FreeRTOS9/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:..\FreeRTOS9/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:..\FreeRTOS9/tasks.c **** 		each stepped tick. */
2417:..\FreeRTOS9/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:..\FreeRTOS9/tasks.c **** 		xTickCount += xTicksToJump;
2419:..\FreeRTOS9/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:..\FreeRTOS9/tasks.c **** 	}
2421:..\FreeRTOS9/tasks.c **** 
2422:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
2424:..\FreeRTOS9/tasks.c **** 
2425:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:..\FreeRTOS9/tasks.c **** 
2427:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:..\FreeRTOS9/tasks.c **** 	{
2429:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:..\FreeRTOS9/tasks.c **** 
2432:..\FreeRTOS9/tasks.c **** 		configASSERT( pxTCB );
2433:..\FreeRTOS9/tasks.c **** 
2434:..\FreeRTOS9/tasks.c **** 		vTaskSuspendAll();
2435:..\FreeRTOS9/tasks.c **** 		{
2436:..\FreeRTOS9/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:..\FreeRTOS9/tasks.c **** 			it is actually in the Blocked state. */
2438:..\FreeRTOS9/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:..\FreeRTOS9/tasks.c **** 			{
2440:..\FreeRTOS9/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:..\FreeRTOS9/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:..\FreeRTOS9/tasks.c **** 				scheduler is suspended. */
2443:..\FreeRTOS9/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:..\FreeRTOS9/tasks.c **** 
2445:..\FreeRTOS9/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:..\FreeRTOS9/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:..\FreeRTOS9/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:..\FreeRTOS9/tasks.c **** 				is used. */
2449:..\FreeRTOS9/tasks.c **** 				taskENTER_CRITICAL();
2450:..\FreeRTOS9/tasks.c **** 				{
2451:..\FreeRTOS9/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:..\FreeRTOS9/tasks.c **** 					{
2453:..\FreeRTOS9/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:..\FreeRTOS9/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:..\FreeRTOS9/tasks.c **** 					}
2456:..\FreeRTOS9/tasks.c **** 					else
2457:..\FreeRTOS9/tasks.c **** 					{
2458:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:..\FreeRTOS9/tasks.c **** 					}
2460:..\FreeRTOS9/tasks.c **** 				}
2461:..\FreeRTOS9/tasks.c **** 				taskEXIT_CRITICAL();
2462:..\FreeRTOS9/tasks.c **** 
2463:..\FreeRTOS9/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:..\FreeRTOS9/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:..\FreeRTOS9/tasks.c **** 
2466:..\FreeRTOS9/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:..\FreeRTOS9/tasks.c **** 				switch if preemption is turned off. */
2468:..\FreeRTOS9/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 46


2469:..\FreeRTOS9/tasks.c **** 				{
2470:..\FreeRTOS9/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:..\FreeRTOS9/tasks.c **** 					performed if the unblocked task has a priority that is
2472:..\FreeRTOS9/tasks.c **** 					equal to or higher than the currently executing task. */
2473:..\FreeRTOS9/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:..\FreeRTOS9/tasks.c **** 					{
2475:..\FreeRTOS9/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:..\FreeRTOS9/tasks.c **** 						is unsuspended. */
2477:..\FreeRTOS9/tasks.c **** 						xYieldPending = pdTRUE;
2478:..\FreeRTOS9/tasks.c **** 					}
2479:..\FreeRTOS9/tasks.c **** 					else
2480:..\FreeRTOS9/tasks.c **** 					{
2481:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:..\FreeRTOS9/tasks.c **** 					}
2483:..\FreeRTOS9/tasks.c **** 				}
2484:..\FreeRTOS9/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:..\FreeRTOS9/tasks.c **** 			}
2486:..\FreeRTOS9/tasks.c **** 			else
2487:..\FreeRTOS9/tasks.c **** 			{
2488:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:..\FreeRTOS9/tasks.c **** 			}
2490:..\FreeRTOS9/tasks.c **** 		}
2491:..\FreeRTOS9/tasks.c **** 		xTaskResumeAll();
2492:..\FreeRTOS9/tasks.c **** 
2493:..\FreeRTOS9/tasks.c **** 		return xReturn;
2494:..\FreeRTOS9/tasks.c **** 	}
2495:..\FreeRTOS9/tasks.c **** 
2496:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
2498:..\FreeRTOS9/tasks.c **** 
2499:..\FreeRTOS9/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:..\FreeRTOS9/tasks.c **** {
2501:..\FreeRTOS9/tasks.c **** TCB_t * pxTCB;
2502:..\FreeRTOS9/tasks.c **** TickType_t xItemValue;
2503:..\FreeRTOS9/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:..\FreeRTOS9/tasks.c **** 
2505:..\FreeRTOS9/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:..\FreeRTOS9/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:..\FreeRTOS9/tasks.c **** 	tasks to be unblocked. */
2508:..\FreeRTOS9/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:..\FreeRTOS9/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:..\FreeRTOS9/tasks.c **** 	{
2511:..\FreeRTOS9/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:..\FreeRTOS9/tasks.c **** 		block. */
2513:..\FreeRTOS9/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:..\FreeRTOS9/tasks.c **** 
2515:..\FreeRTOS9/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:..\FreeRTOS9/tasks.c **** 		delayed lists if it wraps to 0. */
2517:..\FreeRTOS9/tasks.c **** 		xTickCount = xConstTickCount;
2518:..\FreeRTOS9/tasks.c **** 
2519:..\FreeRTOS9/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:..\FreeRTOS9/tasks.c **** 		{
2521:..\FreeRTOS9/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:..\FreeRTOS9/tasks.c **** 		}
2523:..\FreeRTOS9/tasks.c **** 		else
2524:..\FreeRTOS9/tasks.c **** 		{
2525:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 47


2526:..\FreeRTOS9/tasks.c **** 		}
2527:..\FreeRTOS9/tasks.c **** 
2528:..\FreeRTOS9/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:..\FreeRTOS9/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:..\FreeRTOS9/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:..\FreeRTOS9/tasks.c **** 		look any further down the list. */
2532:..\FreeRTOS9/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:..\FreeRTOS9/tasks.c **** 		{
2534:..\FreeRTOS9/tasks.c **** 			for( ;; )
2535:..\FreeRTOS9/tasks.c **** 			{
2536:..\FreeRTOS9/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:..\FreeRTOS9/tasks.c **** 				{
2538:..\FreeRTOS9/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:..\FreeRTOS9/tasks.c **** 					to the maximum possible value so it is extremely
2540:..\FreeRTOS9/tasks.c **** 					unlikely that the
2541:..\FreeRTOS9/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:..\FreeRTOS9/tasks.c **** 					next time through. */
2543:..\FreeRTOS9/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:..\FreeRTOS9/tasks.c **** 					break;
2545:..\FreeRTOS9/tasks.c **** 				}
2546:..\FreeRTOS9/tasks.c **** 				else
2547:..\FreeRTOS9/tasks.c **** 				{
2548:..\FreeRTOS9/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:..\FreeRTOS9/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:..\FreeRTOS9/tasks.c **** 					at which the task at the head of the delayed list must
2551:..\FreeRTOS9/tasks.c **** 					be removed from the Blocked state. */
2552:..\FreeRTOS9/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:..\FreeRTOS9/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:..\FreeRTOS9/tasks.c **** 
2555:..\FreeRTOS9/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:..\FreeRTOS9/tasks.c **** 					{
2557:..\FreeRTOS9/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:..\FreeRTOS9/tasks.c **** 						item value is the time at which the task at the head
2559:..\FreeRTOS9/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:..\FreeRTOS9/tasks.c **** 						state -	so record the item value in
2561:..\FreeRTOS9/tasks.c **** 						xNextTaskUnblockTime. */
2562:..\FreeRTOS9/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:..\FreeRTOS9/tasks.c **** 						break;
2564:..\FreeRTOS9/tasks.c **** 					}
2565:..\FreeRTOS9/tasks.c **** 					else
2566:..\FreeRTOS9/tasks.c **** 					{
2567:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:..\FreeRTOS9/tasks.c **** 					}
2569:..\FreeRTOS9/tasks.c **** 
2570:..\FreeRTOS9/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:..\FreeRTOS9/tasks.c **** 
2573:..\FreeRTOS9/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:..\FreeRTOS9/tasks.c **** 					it from the event list. */
2575:..\FreeRTOS9/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:..\FreeRTOS9/tasks.c **** 					{
2577:..\FreeRTOS9/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:..\FreeRTOS9/tasks.c **** 					}
2579:..\FreeRTOS9/tasks.c **** 					else
2580:..\FreeRTOS9/tasks.c **** 					{
2581:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:..\FreeRTOS9/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 48


2583:..\FreeRTOS9/tasks.c **** 
2584:..\FreeRTOS9/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:..\FreeRTOS9/tasks.c **** 					list. */
2586:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:..\FreeRTOS9/tasks.c **** 
2588:..\FreeRTOS9/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:..\FreeRTOS9/tasks.c **** 					context switch if preemption is turned off. */
2590:..\FreeRTOS9/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:..\FreeRTOS9/tasks.c **** 					{
2592:..\FreeRTOS9/tasks.c **** 						/* Preemption is on, but a context switch should
2593:..\FreeRTOS9/tasks.c **** 						only be performed if the unblocked task has a
2594:..\FreeRTOS9/tasks.c **** 						priority that is equal to or higher than the
2595:..\FreeRTOS9/tasks.c **** 						currently executing task. */
2596:..\FreeRTOS9/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:..\FreeRTOS9/tasks.c **** 						{
2598:..\FreeRTOS9/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:..\FreeRTOS9/tasks.c **** 						}
2600:..\FreeRTOS9/tasks.c **** 						else
2601:..\FreeRTOS9/tasks.c **** 						{
2602:..\FreeRTOS9/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:..\FreeRTOS9/tasks.c **** 						}
2604:..\FreeRTOS9/tasks.c **** 					}
2605:..\FreeRTOS9/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:..\FreeRTOS9/tasks.c **** 				}
2607:..\FreeRTOS9/tasks.c **** 			}
2608:..\FreeRTOS9/tasks.c **** 		}
2609:..\FreeRTOS9/tasks.c **** 
2610:..\FreeRTOS9/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:..\FreeRTOS9/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:..\FreeRTOS9/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:..\FreeRTOS9/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:..\FreeRTOS9/tasks.c **** 		{
2615:..\FreeRTOS9/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:..\FreeRTOS9/tasks.c **** 			{
2617:..\FreeRTOS9/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:..\FreeRTOS9/tasks.c **** 			}
2619:..\FreeRTOS9/tasks.c **** 			else
2620:..\FreeRTOS9/tasks.c **** 			{
2621:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:..\FreeRTOS9/tasks.c **** 			}
2623:..\FreeRTOS9/tasks.c **** 		}
2624:..\FreeRTOS9/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:..\FreeRTOS9/tasks.c **** 
2626:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:..\FreeRTOS9/tasks.c **** 		{
2628:..\FreeRTOS9/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:..\FreeRTOS9/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:..\FreeRTOS9/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:..\FreeRTOS9/tasks.c **** 			{
2632:..\FreeRTOS9/tasks.c **** 				vApplicationTickHook();
2633:..\FreeRTOS9/tasks.c **** 			}
2634:..\FreeRTOS9/tasks.c **** 			else
2635:..\FreeRTOS9/tasks.c **** 			{
2636:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:..\FreeRTOS9/tasks.c **** 			}
2638:..\FreeRTOS9/tasks.c **** 		}
2639:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 49


2640:..\FreeRTOS9/tasks.c **** 	}
2641:..\FreeRTOS9/tasks.c **** 	else
2642:..\FreeRTOS9/tasks.c **** 	{
2643:..\FreeRTOS9/tasks.c **** 		++uxPendedTicks;
2644:..\FreeRTOS9/tasks.c **** 
2645:..\FreeRTOS9/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:..\FreeRTOS9/tasks.c **** 		scheduler is locked. */
2647:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:..\FreeRTOS9/tasks.c **** 		{
2649:..\FreeRTOS9/tasks.c **** 			vApplicationTickHook();
2650:..\FreeRTOS9/tasks.c **** 		}
2651:..\FreeRTOS9/tasks.c **** 		#endif
2652:..\FreeRTOS9/tasks.c **** 	}
2653:..\FreeRTOS9/tasks.c **** 
2654:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:..\FreeRTOS9/tasks.c **** 	{
2656:..\FreeRTOS9/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:..\FreeRTOS9/tasks.c **** 		{
2658:..\FreeRTOS9/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:..\FreeRTOS9/tasks.c **** 		}
2660:..\FreeRTOS9/tasks.c **** 		else
2661:..\FreeRTOS9/tasks.c **** 		{
2662:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:..\FreeRTOS9/tasks.c **** 		}
2664:..\FreeRTOS9/tasks.c **** 	}
2665:..\FreeRTOS9/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:..\FreeRTOS9/tasks.c **** 
2667:..\FreeRTOS9/tasks.c **** 	return xSwitchRequired;
2668:..\FreeRTOS9/tasks.c **** }
2669:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2670:..\FreeRTOS9/tasks.c **** 
2671:..\FreeRTOS9/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:..\FreeRTOS9/tasks.c **** 
2673:..\FreeRTOS9/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:..\FreeRTOS9/tasks.c **** 	{
2675:..\FreeRTOS9/tasks.c **** 	TCB_t *xTCB;
2676:..\FreeRTOS9/tasks.c **** 
2677:..\FreeRTOS9/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:..\FreeRTOS9/tasks.c **** 		getting set. */
2679:..\FreeRTOS9/tasks.c **** 		if( xTask == NULL )
2680:..\FreeRTOS9/tasks.c **** 		{
2681:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:..\FreeRTOS9/tasks.c **** 		}
2683:..\FreeRTOS9/tasks.c **** 		else
2684:..\FreeRTOS9/tasks.c **** 		{
2685:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:..\FreeRTOS9/tasks.c **** 		}
2687:..\FreeRTOS9/tasks.c **** 
2688:..\FreeRTOS9/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:..\FreeRTOS9/tasks.c **** 		the value can be accessed from an interrupt. */
2690:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
2691:..\FreeRTOS9/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
2693:..\FreeRTOS9/tasks.c **** 	}
2694:..\FreeRTOS9/tasks.c **** 
2695:..\FreeRTOS9/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 50


2697:..\FreeRTOS9/tasks.c **** 
2698:..\FreeRTOS9/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:..\FreeRTOS9/tasks.c **** 
2700:..\FreeRTOS9/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:..\FreeRTOS9/tasks.c **** 	{
2702:..\FreeRTOS9/tasks.c **** 	TCB_t *xTCB;
2703:..\FreeRTOS9/tasks.c **** 	TaskHookFunction_t xReturn;
2704:..\FreeRTOS9/tasks.c **** 
2705:..\FreeRTOS9/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:..\FreeRTOS9/tasks.c **** 		if( xTask == NULL )
2707:..\FreeRTOS9/tasks.c **** 		{
2708:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:..\FreeRTOS9/tasks.c **** 		}
2710:..\FreeRTOS9/tasks.c **** 		else
2711:..\FreeRTOS9/tasks.c **** 		{
2712:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:..\FreeRTOS9/tasks.c **** 		}
2714:..\FreeRTOS9/tasks.c **** 
2715:..\FreeRTOS9/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:..\FreeRTOS9/tasks.c **** 		the value can be accessed from an interrupt. */
2717:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
2718:..\FreeRTOS9/tasks.c **** 		{
2719:..\FreeRTOS9/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:..\FreeRTOS9/tasks.c **** 		}
2721:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
2722:..\FreeRTOS9/tasks.c **** 
2723:..\FreeRTOS9/tasks.c **** 		return xReturn;
2724:..\FreeRTOS9/tasks.c **** 	}
2725:..\FreeRTOS9/tasks.c **** 
2726:..\FreeRTOS9/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2728:..\FreeRTOS9/tasks.c **** 
2729:..\FreeRTOS9/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:..\FreeRTOS9/tasks.c **** 
2731:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:..\FreeRTOS9/tasks.c **** 	{
2733:..\FreeRTOS9/tasks.c **** 	TCB_t *xTCB;
2734:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
2735:..\FreeRTOS9/tasks.c **** 
2736:..\FreeRTOS9/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:..\FreeRTOS9/tasks.c **** 		if( xTask == NULL )
2738:..\FreeRTOS9/tasks.c **** 		{
2739:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:..\FreeRTOS9/tasks.c **** 		}
2741:..\FreeRTOS9/tasks.c **** 		else
2742:..\FreeRTOS9/tasks.c **** 		{
2743:..\FreeRTOS9/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:..\FreeRTOS9/tasks.c **** 		}
2745:..\FreeRTOS9/tasks.c **** 
2746:..\FreeRTOS9/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:..\FreeRTOS9/tasks.c **** 		{
2748:..\FreeRTOS9/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:..\FreeRTOS9/tasks.c **** 		}
2750:..\FreeRTOS9/tasks.c **** 		else
2751:..\FreeRTOS9/tasks.c **** 		{
2752:..\FreeRTOS9/tasks.c **** 			xReturn = pdFAIL;
2753:..\FreeRTOS9/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 51


2754:..\FreeRTOS9/tasks.c **** 
2755:..\FreeRTOS9/tasks.c **** 		return xReturn;
2756:..\FreeRTOS9/tasks.c **** 	}
2757:..\FreeRTOS9/tasks.c **** 
2758:..\FreeRTOS9/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2760:..\FreeRTOS9/tasks.c **** 
2761:..\FreeRTOS9/tasks.c **** void vTaskSwitchContext( void )
2762:..\FreeRTOS9/tasks.c **** {
2763:..\FreeRTOS9/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:..\FreeRTOS9/tasks.c **** 	{
2765:..\FreeRTOS9/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:..\FreeRTOS9/tasks.c **** 		switch. */
2767:..\FreeRTOS9/tasks.c **** 		xYieldPending = pdTRUE;
2768:..\FreeRTOS9/tasks.c **** 	}
2769:..\FreeRTOS9/tasks.c **** 	else
2770:..\FreeRTOS9/tasks.c **** 	{
2771:..\FreeRTOS9/tasks.c **** 		xYieldPending = pdFALSE;
2772:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:..\FreeRTOS9/tasks.c **** 
2774:..\FreeRTOS9/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:..\FreeRTOS9/tasks.c **** 		{
2776:..\FreeRTOS9/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:..\FreeRTOS9/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:..\FreeRTOS9/tasks.c **** 				#else
2779:..\FreeRTOS9/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:..\FreeRTOS9/tasks.c **** 				#endif
2781:..\FreeRTOS9/tasks.c **** 
2782:..\FreeRTOS9/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:..\FreeRTOS9/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:..\FreeRTOS9/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:..\FreeRTOS9/tasks.c **** 				protection here so count values are only valid until the timer
2786:..\FreeRTOS9/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:..\FreeRTOS9/tasks.c **** 				against suspect run time stat counter implementations - which
2788:..\FreeRTOS9/tasks.c **** 				are provided by the application, not the kernel. */
2789:..\FreeRTOS9/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:..\FreeRTOS9/tasks.c **** 				{
2791:..\FreeRTOS9/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:..\FreeRTOS9/tasks.c **** 				}
2793:..\FreeRTOS9/tasks.c **** 				else
2794:..\FreeRTOS9/tasks.c **** 				{
2795:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:..\FreeRTOS9/tasks.c **** 				}
2797:..\FreeRTOS9/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:..\FreeRTOS9/tasks.c **** 		}
2799:..\FreeRTOS9/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:..\FreeRTOS9/tasks.c **** 
2801:..\FreeRTOS9/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:..\FreeRTOS9/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:..\FreeRTOS9/tasks.c **** 
2804:..\FreeRTOS9/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:..\FreeRTOS9/tasks.c **** 		optimised asm code. */
2806:..\FreeRTOS9/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:..\FreeRTOS9/tasks.c **** 
2809:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:..\FreeRTOS9/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 52


2811:..\FreeRTOS9/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:..\FreeRTOS9/tasks.c **** 			structure specific to this task. */
2813:..\FreeRTOS9/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:..\FreeRTOS9/tasks.c **** 		}
2815:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:..\FreeRTOS9/tasks.c **** 	}
2817:..\FreeRTOS9/tasks.c **** }
2818:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2819:..\FreeRTOS9/tasks.c **** 
2820:..\FreeRTOS9/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:..\FreeRTOS9/tasks.c **** {
2822:..\FreeRTOS9/tasks.c **** 	configASSERT( pxEventList );
2823:..\FreeRTOS9/tasks.c **** 
2824:..\FreeRTOS9/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:..\FreeRTOS9/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:..\FreeRTOS9/tasks.c **** 
2827:..\FreeRTOS9/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:..\FreeRTOS9/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:..\FreeRTOS9/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:..\FreeRTOS9/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:..\FreeRTOS9/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:..\FreeRTOS9/tasks.c **** 
2833:..\FreeRTOS9/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:..\FreeRTOS9/tasks.c **** }
2835:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2836:..\FreeRTOS9/tasks.c **** 
2837:..\FreeRTOS9/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:..\FreeRTOS9/tasks.c **** {
2839:..\FreeRTOS9/tasks.c **** 	configASSERT( pxEventList );
2840:..\FreeRTOS9/tasks.c **** 
2841:..\FreeRTOS9/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:..\FreeRTOS9/tasks.c **** 	the event groups implementation. */
2843:..\FreeRTOS9/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:..\FreeRTOS9/tasks.c **** 
2845:..\FreeRTOS9/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:..\FreeRTOS9/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:..\FreeRTOS9/tasks.c **** 	task that is not in the Blocked state. */
2848:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:..\FreeRTOS9/tasks.c **** 
2850:..\FreeRTOS9/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:..\FreeRTOS9/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:..\FreeRTOS9/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:..\FreeRTOS9/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:..\FreeRTOS9/tasks.c **** 	the task level). */
2855:..\FreeRTOS9/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:..\FreeRTOS9/tasks.c **** 
2857:..\FreeRTOS9/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:..\FreeRTOS9/tasks.c **** }
2859:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2860:..\FreeRTOS9/tasks.c **** 
2861:..\FreeRTOS9/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:..\FreeRTOS9/tasks.c **** 
2863:..\FreeRTOS9/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:..\FreeRTOS9/tasks.c **** 	{
2865:..\FreeRTOS9/tasks.c **** 		configASSERT( pxEventList );
2866:..\FreeRTOS9/tasks.c **** 
2867:..\FreeRTOS9/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 53


2868:..\FreeRTOS9/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:..\FreeRTOS9/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:..\FreeRTOS9/tasks.c **** 		it should be called with the scheduler suspended. */
2871:..\FreeRTOS9/tasks.c **** 
2872:..\FreeRTOS9/tasks.c **** 
2873:..\FreeRTOS9/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:..\FreeRTOS9/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:..\FreeRTOS9/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:..\FreeRTOS9/tasks.c **** 		can be used in place of vListInsert. */
2877:..\FreeRTOS9/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:..\FreeRTOS9/tasks.c **** 
2879:..\FreeRTOS9/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:..\FreeRTOS9/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:..\FreeRTOS9/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:..\FreeRTOS9/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:..\FreeRTOS9/tasks.c **** 		{
2884:..\FreeRTOS9/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:..\FreeRTOS9/tasks.c **** 		}
2886:..\FreeRTOS9/tasks.c **** 
2887:..\FreeRTOS9/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:..\FreeRTOS9/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:..\FreeRTOS9/tasks.c **** 	}
2890:..\FreeRTOS9/tasks.c **** 
2891:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TIMERS */
2892:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2893:..\FreeRTOS9/tasks.c **** 
2894:..\FreeRTOS9/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:..\FreeRTOS9/tasks.c **** {
2896:..\FreeRTOS9/tasks.c **** TCB_t *pxUnblockedTCB;
2897:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
2898:..\FreeRTOS9/tasks.c **** 
2899:..\FreeRTOS9/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:..\FreeRTOS9/tasks.c **** 	called from a critical section within an ISR. */
2901:..\FreeRTOS9/tasks.c **** 
2902:..\FreeRTOS9/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:..\FreeRTOS9/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:..\FreeRTOS9/tasks.c **** 	the delayed list, and add it to the ready list.
2905:..\FreeRTOS9/tasks.c **** 
2906:..\FreeRTOS9/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:..\FreeRTOS9/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:..\FreeRTOS9/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:..\FreeRTOS9/tasks.c **** 
2910:..\FreeRTOS9/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:..\FreeRTOS9/tasks.c **** 	pxEventList is not empty. */
2912:..\FreeRTOS9/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:..\FreeRTOS9/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:..\FreeRTOS9/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:..\FreeRTOS9/tasks.c **** 
2916:..\FreeRTOS9/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:..\FreeRTOS9/tasks.c **** 	{
2918:..\FreeRTOS9/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:..\FreeRTOS9/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:..\FreeRTOS9/tasks.c **** 	}
2921:..\FreeRTOS9/tasks.c **** 	else
2922:..\FreeRTOS9/tasks.c **** 	{
2923:..\FreeRTOS9/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:..\FreeRTOS9/tasks.c **** 		pending until the scheduler is resumed. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 54


2925:..\FreeRTOS9/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:..\FreeRTOS9/tasks.c **** 	}
2927:..\FreeRTOS9/tasks.c **** 
2928:..\FreeRTOS9/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:..\FreeRTOS9/tasks.c **** 	{
2930:..\FreeRTOS9/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:..\FreeRTOS9/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:..\FreeRTOS9/tasks.c **** 		it should force a context switch now. */
2933:..\FreeRTOS9/tasks.c **** 		xReturn = pdTRUE;
2934:..\FreeRTOS9/tasks.c **** 
2935:..\FreeRTOS9/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:..\FreeRTOS9/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:..\FreeRTOS9/tasks.c **** 		xYieldPending = pdTRUE;
2938:..\FreeRTOS9/tasks.c **** 	}
2939:..\FreeRTOS9/tasks.c **** 	else
2940:..\FreeRTOS9/tasks.c **** 	{
2941:..\FreeRTOS9/tasks.c **** 		xReturn = pdFALSE;
2942:..\FreeRTOS9/tasks.c **** 	}
2943:..\FreeRTOS9/tasks.c **** 
2944:..\FreeRTOS9/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:..\FreeRTOS9/tasks.c **** 	{
2946:..\FreeRTOS9/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:..\FreeRTOS9/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:..\FreeRTOS9/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:..\FreeRTOS9/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:..\FreeRTOS9/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:..\FreeRTOS9/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:..\FreeRTOS9/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:..\FreeRTOS9/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:..\FreeRTOS9/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:..\FreeRTOS9/tasks.c **** 	}
2956:..\FreeRTOS9/tasks.c **** 	#endif
2957:..\FreeRTOS9/tasks.c **** 
2958:..\FreeRTOS9/tasks.c **** 	return xReturn;
2959:..\FreeRTOS9/tasks.c **** }
2960:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
2961:..\FreeRTOS9/tasks.c **** 
2962:..\FreeRTOS9/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:..\FreeRTOS9/tasks.c **** {
2964:..\FreeRTOS9/tasks.c **** TCB_t *pxUnblockedTCB;
2965:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
2966:..\FreeRTOS9/tasks.c **** 
2967:..\FreeRTOS9/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:..\FreeRTOS9/tasks.c **** 	the event flags implementation. */
2969:..\FreeRTOS9/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:..\FreeRTOS9/tasks.c **** 
2971:..\FreeRTOS9/tasks.c **** 	/* Store the new item value in the event list. */
2972:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:..\FreeRTOS9/tasks.c **** 
2974:..\FreeRTOS9/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:..\FreeRTOS9/tasks.c **** 	event flags. */
2976:..\FreeRTOS9/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:..\FreeRTOS9/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:..\FreeRTOS9/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:..\FreeRTOS9/tasks.c **** 
2980:..\FreeRTOS9/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:..\FreeRTOS9/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 55


2982:..\FreeRTOS9/tasks.c **** 	lists. */
2983:..\FreeRTOS9/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:..\FreeRTOS9/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:..\FreeRTOS9/tasks.c **** 
2986:..\FreeRTOS9/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:..\FreeRTOS9/tasks.c **** 	{
2988:..\FreeRTOS9/tasks.c **** 		/* Return true if the task removed from the event list has
2989:..\FreeRTOS9/tasks.c **** 		a higher priority than the calling task.  This allows
2990:..\FreeRTOS9/tasks.c **** 		the calling task to know if it should force a context
2991:..\FreeRTOS9/tasks.c **** 		switch now. */
2992:..\FreeRTOS9/tasks.c **** 		xReturn = pdTRUE;
2993:..\FreeRTOS9/tasks.c **** 
2994:..\FreeRTOS9/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:..\FreeRTOS9/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:..\FreeRTOS9/tasks.c **** 		xYieldPending = pdTRUE;
2997:..\FreeRTOS9/tasks.c **** 	}
2998:..\FreeRTOS9/tasks.c **** 	else
2999:..\FreeRTOS9/tasks.c **** 	{
3000:..\FreeRTOS9/tasks.c **** 		xReturn = pdFALSE;
3001:..\FreeRTOS9/tasks.c **** 	}
3002:..\FreeRTOS9/tasks.c **** 
3003:..\FreeRTOS9/tasks.c **** 	return xReturn;
3004:..\FreeRTOS9/tasks.c **** }
3005:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3006:..\FreeRTOS9/tasks.c **** 
3007:..\FreeRTOS9/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:..\FreeRTOS9/tasks.c **** {
3009:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTimeOut );
3010:..\FreeRTOS9/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:..\FreeRTOS9/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:..\FreeRTOS9/tasks.c **** }
3013:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3014:..\FreeRTOS9/tasks.c **** 
3015:..\FreeRTOS9/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:..\FreeRTOS9/tasks.c **** {
3017:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
3018:..\FreeRTOS9/tasks.c **** 
3019:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTimeOut );
3020:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTicksToWait );
3021:..\FreeRTOS9/tasks.c **** 
3022:..\FreeRTOS9/tasks.c **** 	taskENTER_CRITICAL();
3023:..\FreeRTOS9/tasks.c **** 	{
3024:..\FreeRTOS9/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:..\FreeRTOS9/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:..\FreeRTOS9/tasks.c **** 
3027:..\FreeRTOS9/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:..\FreeRTOS9/tasks.c **** 			{
3030:..\FreeRTOS9/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:..\FreeRTOS9/tasks.c **** 				but has the same result. */
3032:..\FreeRTOS9/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:..\FreeRTOS9/tasks.c **** 				xReturn = pdTRUE;
3034:..\FreeRTOS9/tasks.c **** 			}
3035:..\FreeRTOS9/tasks.c **** 			else
3036:..\FreeRTOS9/tasks.c **** 		#endif
3037:..\FreeRTOS9/tasks.c **** 
3038:..\FreeRTOS9/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 56


3039:..\FreeRTOS9/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:..\FreeRTOS9/tasks.c **** 			{
3041:..\FreeRTOS9/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:..\FreeRTOS9/tasks.c **** 				specified is the maximum block time then the task should block
3043:..\FreeRTOS9/tasks.c **** 				indefinitely, and therefore never time out. */
3044:..\FreeRTOS9/tasks.c **** 				xReturn = pdFALSE;
3045:..\FreeRTOS9/tasks.c **** 			}
3046:..\FreeRTOS9/tasks.c **** 			else
3047:..\FreeRTOS9/tasks.c **** 		#endif
3048:..\FreeRTOS9/tasks.c **** 
3049:..\FreeRTOS9/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:..\FreeRTOS9/tasks.c **** 		{
3051:..\FreeRTOS9/tasks.c **** 			/* The tick count is greater than the time at which
3052:..\FreeRTOS9/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:..\FreeRTOS9/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:..\FreeRTOS9/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:..\FreeRTOS9/tasks.c **** 			was called. */
3056:..\FreeRTOS9/tasks.c **** 			xReturn = pdTRUE;
3057:..\FreeRTOS9/tasks.c **** 		}
3058:..\FreeRTOS9/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:..\FreeRTOS9/tasks.c **** 		{
3060:..\FreeRTOS9/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:..\FreeRTOS9/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:..\FreeRTOS9/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:..\FreeRTOS9/tasks.c **** 			xReturn = pdFALSE;
3064:..\FreeRTOS9/tasks.c **** 		}
3065:..\FreeRTOS9/tasks.c **** 		else
3066:..\FreeRTOS9/tasks.c **** 		{
3067:..\FreeRTOS9/tasks.c **** 			xReturn = pdTRUE;
3068:..\FreeRTOS9/tasks.c **** 		}
3069:..\FreeRTOS9/tasks.c **** 	}
3070:..\FreeRTOS9/tasks.c **** 	taskEXIT_CRITICAL();
3071:..\FreeRTOS9/tasks.c **** 
3072:..\FreeRTOS9/tasks.c **** 	return xReturn;
3073:..\FreeRTOS9/tasks.c **** }
3074:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3075:..\FreeRTOS9/tasks.c **** 
3076:..\FreeRTOS9/tasks.c **** void vTaskMissedYield( void )
3077:..\FreeRTOS9/tasks.c **** {
3078:..\FreeRTOS9/tasks.c **** 	xYieldPending = pdTRUE;
3079:..\FreeRTOS9/tasks.c **** }
3080:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3081:..\FreeRTOS9/tasks.c **** 
3082:..\FreeRTOS9/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:..\FreeRTOS9/tasks.c **** 
3084:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:..\FreeRTOS9/tasks.c **** 	{
3086:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxReturn;
3087:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3088:..\FreeRTOS9/tasks.c **** 
3089:..\FreeRTOS9/tasks.c **** 		if( xTask != NULL )
3090:..\FreeRTOS9/tasks.c **** 		{
3091:..\FreeRTOS9/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:..\FreeRTOS9/tasks.c **** 		}
3094:..\FreeRTOS9/tasks.c **** 		else
3095:..\FreeRTOS9/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 57


3096:..\FreeRTOS9/tasks.c **** 			uxReturn = 0U;
3097:..\FreeRTOS9/tasks.c **** 		}
3098:..\FreeRTOS9/tasks.c **** 
3099:..\FreeRTOS9/tasks.c **** 		return uxReturn;
3100:..\FreeRTOS9/tasks.c **** 	}
3101:..\FreeRTOS9/tasks.c **** 
3102:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3104:..\FreeRTOS9/tasks.c **** 
3105:..\FreeRTOS9/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:..\FreeRTOS9/tasks.c **** 
3107:..\FreeRTOS9/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:..\FreeRTOS9/tasks.c **** 	{
3109:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3110:..\FreeRTOS9/tasks.c **** 
3111:..\FreeRTOS9/tasks.c **** 		if( xTask != NULL )
3112:..\FreeRTOS9/tasks.c **** 		{
3113:..\FreeRTOS9/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:..\FreeRTOS9/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:..\FreeRTOS9/tasks.c **** 		}
3116:..\FreeRTOS9/tasks.c **** 	}
3117:..\FreeRTOS9/tasks.c **** 
3118:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:..\FreeRTOS9/tasks.c **** 
3120:..\FreeRTOS9/tasks.c **** /*
3121:..\FreeRTOS9/tasks.c ****  * -----------------------------------------------------------
3122:..\FreeRTOS9/tasks.c ****  * The Idle task.
3123:..\FreeRTOS9/tasks.c ****  * ----------------------------------------------------------
3124:..\FreeRTOS9/tasks.c ****  *
3125:..\FreeRTOS9/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:..\FreeRTOS9/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:..\FreeRTOS9/tasks.c ****  *
3128:..\FreeRTOS9/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:..\FreeRTOS9/tasks.c ****  *
3130:..\FreeRTOS9/tasks.c ****  */
3131:..\FreeRTOS9/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:..\FreeRTOS9/tasks.c **** {
3133:..\FreeRTOS9/tasks.c **** 	/* Stop warnings. */
3134:..\FreeRTOS9/tasks.c **** 	( void ) pvParameters;
3135:..\FreeRTOS9/tasks.c **** 
3136:..\FreeRTOS9/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:..\FreeRTOS9/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:..\FreeRTOS9/tasks.c **** 
3139:..\FreeRTOS9/tasks.c **** 	for( ;; )
3140:..\FreeRTOS9/tasks.c **** 	{
3141:..\FreeRTOS9/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:..\FreeRTOS9/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:..\FreeRTOS9/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:..\FreeRTOS9/tasks.c **** 
3145:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:..\FreeRTOS9/tasks.c **** 		{
3147:..\FreeRTOS9/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:..\FreeRTOS9/tasks.c **** 			see if any other task has become available.  If we are using
3149:..\FreeRTOS9/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:..\FreeRTOS9/tasks.c **** 			will automatically get the processor anyway. */
3151:..\FreeRTOS9/tasks.c **** 			taskYIELD();
3152:..\FreeRTOS9/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 58


3153:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:..\FreeRTOS9/tasks.c **** 
3155:..\FreeRTOS9/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:..\FreeRTOS9/tasks.c **** 		{
3157:..\FreeRTOS9/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:..\FreeRTOS9/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:..\FreeRTOS9/tasks.c **** 			to run then the idle task should yield before the end of the
3160:..\FreeRTOS9/tasks.c **** 			timeslice.
3161:..\FreeRTOS9/tasks.c **** 
3162:..\FreeRTOS9/tasks.c **** 			A critical region is not required here as we are just reading from
3163:..\FreeRTOS9/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:..\FreeRTOS9/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:..\FreeRTOS9/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:..\FreeRTOS9/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:..\FreeRTOS9/tasks.c **** 			{
3168:..\FreeRTOS9/tasks.c **** 				taskYIELD();
3169:..\FreeRTOS9/tasks.c **** 			}
3170:..\FreeRTOS9/tasks.c **** 			else
3171:..\FreeRTOS9/tasks.c **** 			{
3172:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:..\FreeRTOS9/tasks.c **** 			}
3174:..\FreeRTOS9/tasks.c **** 		}
3175:..\FreeRTOS9/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:..\FreeRTOS9/tasks.c **** 
3177:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:..\FreeRTOS9/tasks.c **** 		{
3179:..\FreeRTOS9/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:..\FreeRTOS9/tasks.c **** 
3181:..\FreeRTOS9/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:..\FreeRTOS9/tasks.c **** 			allows the application designer to add background functionality
3183:..\FreeRTOS9/tasks.c **** 			without the overhead of a separate task.
3184:..\FreeRTOS9/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:..\FreeRTOS9/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:..\FreeRTOS9/tasks.c **** 			vApplicationIdleHook();
3187:..\FreeRTOS9/tasks.c **** 		}
3188:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:..\FreeRTOS9/tasks.c **** 
3190:..\FreeRTOS9/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:..\FreeRTOS9/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:..\FreeRTOS9/tasks.c **** 		user defined low power mode	implementations require
3193:..\FreeRTOS9/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:..\FreeRTOS9/tasks.c **** 		{
3196:..\FreeRTOS9/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:..\FreeRTOS9/tasks.c **** 
3198:..\FreeRTOS9/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:..\FreeRTOS9/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:..\FreeRTOS9/tasks.c **** 			test of the expected idle time is performed without the
3201:..\FreeRTOS9/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:..\FreeRTOS9/tasks.c **** 			valid. */
3203:..\FreeRTOS9/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:..\FreeRTOS9/tasks.c **** 
3205:..\FreeRTOS9/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:..\FreeRTOS9/tasks.c **** 			{
3207:..\FreeRTOS9/tasks.c **** 				vTaskSuspendAll();
3208:..\FreeRTOS9/tasks.c **** 				{
3209:..\FreeRTOS9/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 59


3210:..\FreeRTOS9/tasks.c **** 					time can be sampled again, and this time its value can
3211:..\FreeRTOS9/tasks.c **** 					be used. */
3212:..\FreeRTOS9/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:..\FreeRTOS9/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:..\FreeRTOS9/tasks.c **** 
3215:..\FreeRTOS9/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:..\FreeRTOS9/tasks.c **** 					{
3217:..\FreeRTOS9/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:..\FreeRTOS9/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:..\FreeRTOS9/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:..\FreeRTOS9/tasks.c **** 					}
3221:..\FreeRTOS9/tasks.c **** 					else
3222:..\FreeRTOS9/tasks.c **** 					{
3223:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:..\FreeRTOS9/tasks.c **** 					}
3225:..\FreeRTOS9/tasks.c **** 				}
3226:..\FreeRTOS9/tasks.c **** 				( void ) xTaskResumeAll();
3227:..\FreeRTOS9/tasks.c **** 			}
3228:..\FreeRTOS9/tasks.c **** 			else
3229:..\FreeRTOS9/tasks.c **** 			{
3230:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:..\FreeRTOS9/tasks.c **** 			}
3232:..\FreeRTOS9/tasks.c **** 		}
3233:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:..\FreeRTOS9/tasks.c **** 	}
3235:..\FreeRTOS9/tasks.c **** }
3236:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3237:..\FreeRTOS9/tasks.c **** 
3238:..\FreeRTOS9/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:..\FreeRTOS9/tasks.c **** 
3240:..\FreeRTOS9/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:..\FreeRTOS9/tasks.c **** 	{
3242:..\FreeRTOS9/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:..\FreeRTOS9/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:..\FreeRTOS9/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:..\FreeRTOS9/tasks.c **** 
3246:..\FreeRTOS9/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:..\FreeRTOS9/tasks.c **** 		{
3248:..\FreeRTOS9/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:..\FreeRTOS9/tasks.c **** 			eReturn = eAbortSleep;
3250:..\FreeRTOS9/tasks.c **** 		}
3251:..\FreeRTOS9/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:..\FreeRTOS9/tasks.c **** 		{
3253:..\FreeRTOS9/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:..\FreeRTOS9/tasks.c **** 			eReturn = eAbortSleep;
3255:..\FreeRTOS9/tasks.c **** 		}
3256:..\FreeRTOS9/tasks.c **** 		else
3257:..\FreeRTOS9/tasks.c **** 		{
3258:..\FreeRTOS9/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:..\FreeRTOS9/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:..\FreeRTOS9/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:..\FreeRTOS9/tasks.c **** 			interrupts. */
3262:..\FreeRTOS9/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:..\FreeRTOS9/tasks.c **** 			{
3264:..\FreeRTOS9/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:..\FreeRTOS9/tasks.c **** 			}
3266:..\FreeRTOS9/tasks.c **** 			else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 60


3267:..\FreeRTOS9/tasks.c **** 			{
3268:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:..\FreeRTOS9/tasks.c **** 			}
3270:..\FreeRTOS9/tasks.c **** 		}
3271:..\FreeRTOS9/tasks.c **** 
3272:..\FreeRTOS9/tasks.c **** 		return eReturn;
3273:..\FreeRTOS9/tasks.c **** 	}
3274:..\FreeRTOS9/tasks.c **** 
3275:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3277:..\FreeRTOS9/tasks.c **** 
3278:..\FreeRTOS9/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:..\FreeRTOS9/tasks.c **** 
3280:..\FreeRTOS9/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:..\FreeRTOS9/tasks.c **** 	{
3282:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3283:..\FreeRTOS9/tasks.c **** 
3284:..\FreeRTOS9/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:..\FreeRTOS9/tasks.c **** 		{
3286:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:..\FreeRTOS9/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:..\FreeRTOS9/tasks.c **** 		}
3289:..\FreeRTOS9/tasks.c **** 	}
3290:..\FreeRTOS9/tasks.c **** 
3291:..\FreeRTOS9/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3293:..\FreeRTOS9/tasks.c **** 
3294:..\FreeRTOS9/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:..\FreeRTOS9/tasks.c **** 
3296:..\FreeRTOS9/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:..\FreeRTOS9/tasks.c **** 	{
3298:..\FreeRTOS9/tasks.c **** 	void *pvReturn = NULL;
3299:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3300:..\FreeRTOS9/tasks.c **** 
3301:..\FreeRTOS9/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:..\FreeRTOS9/tasks.c **** 		{
3303:..\FreeRTOS9/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:..\FreeRTOS9/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:..\FreeRTOS9/tasks.c **** 		}
3306:..\FreeRTOS9/tasks.c **** 		else
3307:..\FreeRTOS9/tasks.c **** 		{
3308:..\FreeRTOS9/tasks.c **** 			pvReturn = NULL;
3309:..\FreeRTOS9/tasks.c **** 		}
3310:..\FreeRTOS9/tasks.c **** 
3311:..\FreeRTOS9/tasks.c **** 		return pvReturn;
3312:..\FreeRTOS9/tasks.c **** 	}
3313:..\FreeRTOS9/tasks.c **** 
3314:..\FreeRTOS9/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3316:..\FreeRTOS9/tasks.c **** 
3317:..\FreeRTOS9/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:..\FreeRTOS9/tasks.c **** 
3319:..\FreeRTOS9/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:..\FreeRTOS9/tasks.c **** 	{
3321:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3322:..\FreeRTOS9/tasks.c **** 
3323:..\FreeRTOS9/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 61


3324:..\FreeRTOS9/tasks.c **** 		the calling task. */
3325:..\FreeRTOS9/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:..\FreeRTOS9/tasks.c **** 
3327:..\FreeRTOS9/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:..\FreeRTOS9/tasks.c **** 	}
3329:..\FreeRTOS9/tasks.c **** 
3330:..\FreeRTOS9/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3332:..\FreeRTOS9/tasks.c **** 
3333:..\FreeRTOS9/tasks.c **** static void prvInitialiseTaskLists( void )
3334:..\FreeRTOS9/tasks.c **** {
3335:..\FreeRTOS9/tasks.c **** UBaseType_t uxPriority;
3336:..\FreeRTOS9/tasks.c **** 
3337:..\FreeRTOS9/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:..\FreeRTOS9/tasks.c **** 	{
3339:..\FreeRTOS9/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:..\FreeRTOS9/tasks.c **** 	}
3341:..\FreeRTOS9/tasks.c **** 
3342:..\FreeRTOS9/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:..\FreeRTOS9/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:..\FreeRTOS9/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:..\FreeRTOS9/tasks.c **** 
3346:..\FreeRTOS9/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:..\FreeRTOS9/tasks.c **** 	{
3348:..\FreeRTOS9/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:..\FreeRTOS9/tasks.c **** 	}
3350:..\FreeRTOS9/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:..\FreeRTOS9/tasks.c **** 
3352:..\FreeRTOS9/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:..\FreeRTOS9/tasks.c **** 	{
3354:..\FreeRTOS9/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:..\FreeRTOS9/tasks.c **** 	}
3356:..\FreeRTOS9/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:..\FreeRTOS9/tasks.c **** 
3358:..\FreeRTOS9/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:..\FreeRTOS9/tasks.c **** 	using list2. */
3360:..\FreeRTOS9/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:..\FreeRTOS9/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:..\FreeRTOS9/tasks.c **** }
3363:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3364:..\FreeRTOS9/tasks.c **** 
3365:..\FreeRTOS9/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:..\FreeRTOS9/tasks.c **** {
3367:..\FreeRTOS9/tasks.c **** 
3368:..\FreeRTOS9/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:..\FreeRTOS9/tasks.c **** 
3370:..\FreeRTOS9/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:..\FreeRTOS9/tasks.c **** 	{
3372:..\FreeRTOS9/tasks.c **** 		BaseType_t xListIsEmpty;
3373:..\FreeRTOS9/tasks.c **** 
3374:..\FreeRTOS9/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:..\FreeRTOS9/tasks.c **** 		too often in the idle task. */
3376:..\FreeRTOS9/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:..\FreeRTOS9/tasks.c **** 		{
3378:..\FreeRTOS9/tasks.c **** 			vTaskSuspendAll();
3379:..\FreeRTOS9/tasks.c **** 			{
3380:..\FreeRTOS9/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 62


3381:..\FreeRTOS9/tasks.c **** 			}
3382:..\FreeRTOS9/tasks.c **** 			( void ) xTaskResumeAll();
3383:..\FreeRTOS9/tasks.c **** 
3384:..\FreeRTOS9/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:..\FreeRTOS9/tasks.c **** 			{
3386:..\FreeRTOS9/tasks.c **** 				TCB_t *pxTCB;
3387:..\FreeRTOS9/tasks.c **** 
3388:..\FreeRTOS9/tasks.c **** 				taskENTER_CRITICAL();
3389:..\FreeRTOS9/tasks.c **** 				{
3390:..\FreeRTOS9/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:..\FreeRTOS9/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:..\FreeRTOS9/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:..\FreeRTOS9/tasks.c **** 				}
3395:..\FreeRTOS9/tasks.c **** 				taskEXIT_CRITICAL();
3396:..\FreeRTOS9/tasks.c **** 
3397:..\FreeRTOS9/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:..\FreeRTOS9/tasks.c **** 			}
3399:..\FreeRTOS9/tasks.c **** 			else
3400:..\FreeRTOS9/tasks.c **** 			{
3401:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:..\FreeRTOS9/tasks.c **** 			}
3403:..\FreeRTOS9/tasks.c **** 		}
3404:..\FreeRTOS9/tasks.c **** 	}
3405:..\FreeRTOS9/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:..\FreeRTOS9/tasks.c **** }
3407:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3408:..\FreeRTOS9/tasks.c **** 
3409:..\FreeRTOS9/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:..\FreeRTOS9/tasks.c **** 
3411:..\FreeRTOS9/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:..\FreeRTOS9/tasks.c **** 	{
3413:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3414:..\FreeRTOS9/tasks.c **** 
3415:..\FreeRTOS9/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:..\FreeRTOS9/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:..\FreeRTOS9/tasks.c **** 
3418:..\FreeRTOS9/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:..\FreeRTOS9/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:..\FreeRTOS9/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:..\FreeRTOS9/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:..\FreeRTOS9/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:..\FreeRTOS9/tasks.c **** 
3424:..\FreeRTOS9/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:..\FreeRTOS9/tasks.c **** 		{
3426:..\FreeRTOS9/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:..\FreeRTOS9/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:..\FreeRTOS9/tasks.c **** 			being in the Blocked state. */
3429:..\FreeRTOS9/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:..\FreeRTOS9/tasks.c **** 			{
3431:..\FreeRTOS9/tasks.c **** 				vTaskSuspendAll();
3432:..\FreeRTOS9/tasks.c **** 				{
3433:..\FreeRTOS9/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:..\FreeRTOS9/tasks.c **** 					{
3435:..\FreeRTOS9/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:..\FreeRTOS9/tasks.c **** 					}
3437:..\FreeRTOS9/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 63


3438:..\FreeRTOS9/tasks.c **** 				xTaskResumeAll();
3439:..\FreeRTOS9/tasks.c **** 			}
3440:..\FreeRTOS9/tasks.c **** 		}
3441:..\FreeRTOS9/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:..\FreeRTOS9/tasks.c **** 
3443:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:..\FreeRTOS9/tasks.c **** 		{
3445:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:..\FreeRTOS9/tasks.c **** 		}
3447:..\FreeRTOS9/tasks.c **** 		#else
3448:..\FreeRTOS9/tasks.c **** 		{
3449:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:..\FreeRTOS9/tasks.c **** 		}
3451:..\FreeRTOS9/tasks.c **** 		#endif
3452:..\FreeRTOS9/tasks.c **** 
3453:..\FreeRTOS9/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:..\FreeRTOS9/tasks.c **** 		{
3455:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:..\FreeRTOS9/tasks.c **** 		}
3457:..\FreeRTOS9/tasks.c **** 		#else
3458:..\FreeRTOS9/tasks.c **** 		{
3459:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:..\FreeRTOS9/tasks.c **** 		}
3461:..\FreeRTOS9/tasks.c **** 		#endif
3462:..\FreeRTOS9/tasks.c **** 
3463:..\FreeRTOS9/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:..\FreeRTOS9/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:..\FreeRTOS9/tasks.c **** 		just set to whatever is passed in. */
3466:..\FreeRTOS9/tasks.c **** 		if( eState != eInvalid )
3467:..\FreeRTOS9/tasks.c **** 		{
3468:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:..\FreeRTOS9/tasks.c **** 		}
3470:..\FreeRTOS9/tasks.c **** 		else
3471:..\FreeRTOS9/tasks.c **** 		{
3472:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:..\FreeRTOS9/tasks.c **** 		}
3474:..\FreeRTOS9/tasks.c **** 
3475:..\FreeRTOS9/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:..\FreeRTOS9/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:..\FreeRTOS9/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:..\FreeRTOS9/tasks.c **** 		{
3479:..\FreeRTOS9/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:..\FreeRTOS9/tasks.c **** 			{
3481:..\FreeRTOS9/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:..\FreeRTOS9/tasks.c **** 			}
3483:..\FreeRTOS9/tasks.c **** 			#else
3484:..\FreeRTOS9/tasks.c **** 			{
3485:..\FreeRTOS9/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:..\FreeRTOS9/tasks.c **** 			}
3487:..\FreeRTOS9/tasks.c **** 			#endif
3488:..\FreeRTOS9/tasks.c **** 		}
3489:..\FreeRTOS9/tasks.c **** 		else
3490:..\FreeRTOS9/tasks.c **** 		{
3491:..\FreeRTOS9/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:..\FreeRTOS9/tasks.c **** 		}
3493:..\FreeRTOS9/tasks.c **** 	}
3494:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 64


3495:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3497:..\FreeRTOS9/tasks.c **** 
3498:..\FreeRTOS9/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:..\FreeRTOS9/tasks.c **** 
3500:..\FreeRTOS9/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:..\FreeRTOS9/tasks.c **** 	{
3502:..\FreeRTOS9/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTask = 0;
3504:..\FreeRTOS9/tasks.c **** 
3505:..\FreeRTOS9/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:..\FreeRTOS9/tasks.c **** 		{
3507:..\FreeRTOS9/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:..\FreeRTOS9/tasks.c **** 
3509:..\FreeRTOS9/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:..\FreeRTOS9/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:..\FreeRTOS9/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:..\FreeRTOS9/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:..\FreeRTOS9/tasks.c **** 			do
3514:..\FreeRTOS9/tasks.c **** 			{
3515:..\FreeRTOS9/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:..\FreeRTOS9/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:..\FreeRTOS9/tasks.c **** 				uxTask++;
3518:..\FreeRTOS9/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:..\FreeRTOS9/tasks.c **** 		}
3520:..\FreeRTOS9/tasks.c **** 		else
3521:..\FreeRTOS9/tasks.c **** 		{
3522:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:..\FreeRTOS9/tasks.c **** 		}
3524:..\FreeRTOS9/tasks.c **** 
3525:..\FreeRTOS9/tasks.c **** 		return uxTask;
3526:..\FreeRTOS9/tasks.c **** 	}
3527:..\FreeRTOS9/tasks.c **** 
3528:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3530:..\FreeRTOS9/tasks.c **** 
3531:..\FreeRTOS9/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:..\FreeRTOS9/tasks.c **** 
3533:..\FreeRTOS9/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:..\FreeRTOS9/tasks.c **** 	{
  97              		.loc 1 3534 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL8:
3535:..\FreeRTOS9/tasks.c **** 	uint32_t ulCount = 0U;
 103              		.loc 1 3535 0
 104 0000 0023     		movs	r3, #0
3536:..\FreeRTOS9/tasks.c **** 
3537:..\FreeRTOS9/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 105              		.loc 1 3537 0
 106 0002 01E0     		b	.L13
 107              	.LVL9:
 108              	.L14:
3538:..\FreeRTOS9/tasks.c **** 		{
3539:..\FreeRTOS9/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 65


 109              		.loc 1 3539 0
 110 0004 0130     		adds	r0, r0, #1
 111              	.LVL10:
3540:..\FreeRTOS9/tasks.c **** 			ulCount++;
 112              		.loc 1 3540 0
 113 0006 0133     		adds	r3, r3, #1
 114              	.LVL11:
 115              	.L13:
3537:..\FreeRTOS9/tasks.c **** 		{
 116              		.loc 1 3537 0
 117 0008 0278     		ldrb	r2, [r0]
 118 000a A52A     		cmp	r2, #165
 119 000c FAD0     		beq	.L14
3541:..\FreeRTOS9/tasks.c **** 		}
3542:..\FreeRTOS9/tasks.c **** 
3543:..\FreeRTOS9/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 120              		.loc 1 3543 0
 121 000e 9B08     		lsrs	r3, r3, #2
 122              	.LVL12:
3544:..\FreeRTOS9/tasks.c **** 
3545:..\FreeRTOS9/tasks.c **** 		return ( uint16_t ) ulCount;
 123              		.loc 1 3545 0
 124 0010 98B2     		uxth	r0, r3
 125              	.LVL13:
3546:..\FreeRTOS9/tasks.c **** 	}
 126              		.loc 1 3546 0
 127              		@ sp needed
 128 0012 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE68:
 131              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 132              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 133              		.align	2
 134              		.code	16
 135              		.thumb_func
 136              		.type	prvResetNextTaskUnblockTime, %function
 137              	prvResetNextTaskUnblockTime:
 138              	.LFB71:
3547:..\FreeRTOS9/tasks.c **** 
3548:..\FreeRTOS9/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3550:..\FreeRTOS9/tasks.c **** 
3551:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:..\FreeRTOS9/tasks.c **** 
3553:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:..\FreeRTOS9/tasks.c **** 	{
3555:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
3556:..\FreeRTOS9/tasks.c **** 	uint8_t *pucEndOfStack;
3557:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxReturn;
3558:..\FreeRTOS9/tasks.c **** 
3559:..\FreeRTOS9/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:..\FreeRTOS9/tasks.c **** 
3561:..\FreeRTOS9/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:..\FreeRTOS9/tasks.c **** 		{
3563:..\FreeRTOS9/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:..\FreeRTOS9/tasks.c **** 		}
3565:..\FreeRTOS9/tasks.c **** 		#else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 66


3566:..\FreeRTOS9/tasks.c **** 		{
3567:..\FreeRTOS9/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:..\FreeRTOS9/tasks.c **** 		}
3569:..\FreeRTOS9/tasks.c **** 		#endif
3570:..\FreeRTOS9/tasks.c **** 
3571:..\FreeRTOS9/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:..\FreeRTOS9/tasks.c **** 
3573:..\FreeRTOS9/tasks.c **** 		return uxReturn;
3574:..\FreeRTOS9/tasks.c **** 	}
3575:..\FreeRTOS9/tasks.c **** 
3576:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3578:..\FreeRTOS9/tasks.c **** 
3579:..\FreeRTOS9/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:..\FreeRTOS9/tasks.c **** 
3581:..\FreeRTOS9/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:..\FreeRTOS9/tasks.c **** 	{
3583:..\FreeRTOS9/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:..\FreeRTOS9/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:..\FreeRTOS9/tasks.c **** 		want to allocate and clean RAM statically. */
3586:..\FreeRTOS9/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:..\FreeRTOS9/tasks.c **** 
3588:..\FreeRTOS9/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:..\FreeRTOS9/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:..\FreeRTOS9/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:..\FreeRTOS9/tasks.c **** 		{
3592:..\FreeRTOS9/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:..\FreeRTOS9/tasks.c **** 		}
3594:..\FreeRTOS9/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:..\FreeRTOS9/tasks.c **** 
3596:..\FreeRTOS9/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:..\FreeRTOS9/tasks.c **** 		{
3598:..\FreeRTOS9/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:..\FreeRTOS9/tasks.c **** 			the stack and TCB. */
3600:..\FreeRTOS9/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:..\FreeRTOS9/tasks.c **** 			vPortFree( pxTCB );
3602:..\FreeRTOS9/tasks.c **** 		}
3603:..\FreeRTOS9/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:..\FreeRTOS9/tasks.c **** 		{
3605:..\FreeRTOS9/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:..\FreeRTOS9/tasks.c **** 			check what was statically allocated before trying to free the
3607:..\FreeRTOS9/tasks.c **** 			memory. */
3608:..\FreeRTOS9/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:..\FreeRTOS9/tasks.c **** 			{
3610:..\FreeRTOS9/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:..\FreeRTOS9/tasks.c **** 				must be freed. */
3612:..\FreeRTOS9/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:..\FreeRTOS9/tasks.c **** 				vPortFree( pxTCB );
3614:..\FreeRTOS9/tasks.c **** 			}
3615:..\FreeRTOS9/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:..\FreeRTOS9/tasks.c **** 			{
3617:..\FreeRTOS9/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:..\FreeRTOS9/tasks.c **** 				only memory that must be freed. */
3619:..\FreeRTOS9/tasks.c **** 				vPortFree( pxTCB );
3620:..\FreeRTOS9/tasks.c **** 			}
3621:..\FreeRTOS9/tasks.c **** 			else
3622:..\FreeRTOS9/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 67


3623:..\FreeRTOS9/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:..\FreeRTOS9/tasks.c **** 				nothing needs to be freed. */
3625:..\FreeRTOS9/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:..\FreeRTOS9/tasks.c **** 			}
3628:..\FreeRTOS9/tasks.c **** 		}
3629:..\FreeRTOS9/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:..\FreeRTOS9/tasks.c **** 	}
3631:..\FreeRTOS9/tasks.c **** 
3632:..\FreeRTOS9/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3634:..\FreeRTOS9/tasks.c **** 
3635:..\FreeRTOS9/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:..\FreeRTOS9/tasks.c **** {
 139              		.loc 1 3636 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
3637:..\FreeRTOS9/tasks.c **** TCB_t *pxTCB;
3638:..\FreeRTOS9/tasks.c **** 
3639:..\FreeRTOS9/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 144              		.loc 1 3639 0
 145 0000 0A4B     		ldr	r3, .L20
 146 0002 9B6A     		ldr	r3, [r3, #40]
 147 0004 1B68     		ldr	r3, [r3]
 148 0006 002B     		cmp	r3, #0
 149 0008 01D1     		bne	.L19
 150 000a 0133     		adds	r3, r3, #1
 151 000c 00E0     		b	.L16
 152              	.L19:
 153 000e 0023     		movs	r3, #0
 154              	.L16:
 155              		.loc 1 3639 0 is_stmt 0 discriminator 4
 156 0010 002B     		cmp	r3, #0
 157 0012 04D0     		beq	.L17
3640:..\FreeRTOS9/tasks.c **** 	{
3641:..\FreeRTOS9/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:..\FreeRTOS9/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:..\FreeRTOS9/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:..\FreeRTOS9/tasks.c **** 		there is an item in the delayed list. */
3645:..\FreeRTOS9/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 158              		.loc 1 3645 0 is_stmt 1
 159 0014 0122     		movs	r2, #1
 160 0016 5242     		rsbs	r2, r2, #0
 161 0018 044B     		ldr	r3, .L20
 162 001a DA62     		str	r2, [r3, #44]
 163 001c 05E0     		b	.L15
 164              	.L17:
3646:..\FreeRTOS9/tasks.c **** 	}
3647:..\FreeRTOS9/tasks.c **** 	else
3648:..\FreeRTOS9/tasks.c **** 	{
3649:..\FreeRTOS9/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:..\FreeRTOS9/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:..\FreeRTOS9/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:..\FreeRTOS9/tasks.c **** 		from the Blocked state. */
3653:..\FreeRTOS9/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 68


 165              		.loc 1 3653 0
 166 001e 034B     		ldr	r3, .L20
 167 0020 9A6A     		ldr	r2, [r3, #40]
 168 0022 D268     		ldr	r2, [r2, #12]
 169 0024 D268     		ldr	r2, [r2, #12]
 170              	.LVL14:
3654:..\FreeRTOS9/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 171              		.loc 1 3654 0
 172 0026 5268     		ldr	r2, [r2, #4]
 173              	.LVL15:
 174 0028 DA62     		str	r2, [r3, #44]
 175              	.L15:
3655:..\FreeRTOS9/tasks.c **** 	}
3656:..\FreeRTOS9/tasks.c **** }
 176              		.loc 1 3656 0
 177              		@ sp needed
 178 002a 7047     		bx	lr
 179              	.L21:
 180              		.align	2
 181              	.L20:
 182 002c 00000000 		.word	.LANCHOR0
 183              		.cfi_endproc
 184              	.LFE71:
 185              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 186              		.section	.text.prvDeleteTCB,"ax",%progbits
 187              		.align	2
 188              		.code	16
 189              		.thumb_func
 190              		.type	prvDeleteTCB, %function
 191              	prvDeleteTCB:
 192              	.LFB70:
3582:..\FreeRTOS9/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 193              		.loc 1 3582 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL16:
 198 0000 10B5     		push	{r4, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 0400     		movs	r4, r0
3600:..\FreeRTOS9/tasks.c **** 			vPortFree( pxTCB );
 203              		.loc 1 3600 0
 204 0004 006B     		ldr	r0, [r0, #48]
 205              	.LVL17:
 206 0006 FFF7FEFF 		bl	vPortFree
 207              	.LVL18:
3601:..\FreeRTOS9/tasks.c **** 		}
 208              		.loc 1 3601 0
 209 000a 2000     		movs	r0, r4
 210 000c FFF7FEFF 		bl	vPortFree
 211              	.LVL19:
3630:..\FreeRTOS9/tasks.c **** 
 212              		.loc 1 3630 0
 213              		@ sp needed
 214              	.LVL20:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 69


 215 0010 10BD     		pop	{r4, pc}
 216              		.cfi_endproc
 217              	.LFE70:
 218              		.size	prvDeleteTCB, .-prvDeleteTCB
 219 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 220              		.align	2
 221              		.code	16
 222              		.thumb_func
 223              		.type	prvInitialiseNewTask, %function
 224              	prvInitialiseNewTask:
 225              	.LFB33:
 775:..\FreeRTOS9/tasks.c **** StackType_t *pxTopOfStack;
 226              		.loc 1 775 0
 227              		.cfi_startproc
 228              		@ args = 16, pretend = 0, frame = 8
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL21:
 231 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 232              		.cfi_def_cfa_offset 20
 233              		.cfi_offset 4, -20
 234              		.cfi_offset 5, -16
 235              		.cfi_offset 6, -12
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 83B0     		sub	sp, sp, #12
 239              		.cfi_def_cfa_offset 32
 240 0004 0090     		str	r0, [sp]
 241 0006 0D00     		movs	r5, r1
 242 0008 1700     		movs	r7, r2
 243 000a 0193     		str	r3, [sp, #4]
 244 000c 089C     		ldr	r4, [sp, #32]
 245 000e 0A9E     		ldr	r6, [sp, #40]
 797:..\FreeRTOS9/tasks.c **** 	}
 246              		.loc 1 797 0
 247 0010 9200     		lsls	r2, r2, #2
 248              	.LVL22:
 249 0012 A521     		movs	r1, #165
 250              	.LVL23:
 251 0014 306B     		ldr	r0, [r6, #48]
 252              	.LVL24:
 253 0016 FFF7FEFF 		bl	memset
 254              	.LVL25:
 807:..\FreeRTOS9/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 255              		.loc 1 807 0
 256 001a 234B     		ldr	r3, .L32
 257 001c FB18     		adds	r3, r7, r3
 258 001e 9B00     		lsls	r3, r3, #2
 259 0020 326B     		ldr	r2, [r6, #48]
 260 0022 9446     		mov	ip, r2
 261 0024 6344     		add	r3, r3, ip
 262              	.LVL26:
 808:..\FreeRTOS9/tasks.c **** 
 263              		.loc 1 808 0
 264 0026 0722     		movs	r2, #7
 265 0028 9343     		bics	r3, r2
 266              	.LVL27:
 267 002a 1F00     		movs	r7, r3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 70


 268              	.LVL28:
 827:..\FreeRTOS9/tasks.c **** 	{
 269              		.loc 1 827 0
 270 002c 0023     		movs	r3, #0
 271              	.LVL29:
 272 002e 08E0     		b	.L24
 273              	.LVL30:
 274              	.L26:
 829:..\FreeRTOS9/tasks.c **** 
 275              		.loc 1 829 0
 276 0030 E918     		adds	r1, r5, r3
 277 0032 0878     		ldrb	r0, [r1]
 278 0034 F218     		adds	r2, r6, r3
 279 0036 3432     		adds	r2, r2, #52
 280 0038 1070     		strb	r0, [r2]
 834:..\FreeRTOS9/tasks.c **** 		{
 281              		.loc 1 834 0
 282 003a 0A78     		ldrb	r2, [r1]
 283 003c 002A     		cmp	r2, #0
 284 003e 02D0     		beq	.L25
 827:..\FreeRTOS9/tasks.c **** 	{
 285              		.loc 1 827 0 discriminator 2
 286 0040 0133     		adds	r3, r3, #1
 287              	.LVL31:
 288              	.L24:
 827:..\FreeRTOS9/tasks.c **** 	{
 289              		.loc 1 827 0 is_stmt 0 discriminator 1
 290 0042 0F2B     		cmp	r3, #15
 291 0044 F4D9     		bls	.L26
 292              	.L25:
 846:..\FreeRTOS9/tasks.c **** 
 293              		.loc 1 846 0 is_stmt 1
 294 0046 0022     		movs	r2, #0
 295 0048 4323     		movs	r3, #67
 296              	.LVL32:
 297 004a F254     		strb	r2, [r6, r3]
 850:..\FreeRTOS9/tasks.c **** 	{
 298              		.loc 1 850 0
 299 004c 042C     		cmp	r4, #4
 300 004e 00D9     		bls	.L27
 852:..\FreeRTOS9/tasks.c **** 	}
 301              		.loc 1 852 0
 302 0050 0424     		movs	r4, #4
 303              	.L27:
 304              	.LVL33:
 859:..\FreeRTOS9/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 305              		.loc 1 859 0
 306 0052 F462     		str	r4, [r6, #44]
 862:..\FreeRTOS9/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 307              		.loc 1 862 0
 308 0054 7464     		str	r4, [r6, #68]
 863:..\FreeRTOS9/tasks.c **** 	}
 309              		.loc 1 863 0
 310 0056 0023     		movs	r3, #0
 311 0058 B364     		str	r3, [r6, #72]
 867:..\FreeRTOS9/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 312              		.loc 1 867 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 71


 313 005a 301D     		adds	r0, r6, #4
 314 005c FFF7FEFF 		bl	vListInitialiseItem
 315              	.LVL34:
 868:..\FreeRTOS9/tasks.c **** 
 316              		.loc 1 868 0
 317 0060 3000     		movs	r0, r6
 318 0062 1830     		adds	r0, r0, #24
 319 0064 FFF7FEFF 		bl	vListInitialiseItem
 320              	.LVL35:
 872:..\FreeRTOS9/tasks.c **** 
 321              		.loc 1 872 0
 322 0068 3661     		str	r6, [r6, #16]
 875:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 323              		.loc 1 875 0
 324 006a 0523     		movs	r3, #5
 325 006c 1C1B     		subs	r4, r3, r4
 326              	.LVL36:
 327 006e B461     		str	r4, [r6, #24]
 876:..\FreeRTOS9/tasks.c **** 
 328              		.loc 1 876 0
 329 0070 7662     		str	r6, [r6, #36]
 330              	.LVL37:
 909:..\FreeRTOS9/tasks.c **** 		{
 331              		.loc 1 909 0
 332 0072 0022     		movs	r2, #0
 333 0074 06E0     		b	.L28
 334              	.LVL38:
 335              	.L29:
 911:..\FreeRTOS9/tasks.c **** 		}
 336              		.loc 1 911 0 discriminator 3
 337 0076 1300     		movs	r3, r2
 338 0078 1233     		adds	r3, r3, #18
 339 007a 9B00     		lsls	r3, r3, #2
 340 007c F318     		adds	r3, r6, r3
 341 007e 0021     		movs	r1, #0
 342 0080 5960     		str	r1, [r3, #4]
 909:..\FreeRTOS9/tasks.c **** 		{
 343              		.loc 1 909 0 discriminator 3
 344 0082 0132     		adds	r2, r2, #1
 345              	.LVL39:
 346              	.L28:
 909:..\FreeRTOS9/tasks.c **** 		{
 347              		.loc 1 909 0 is_stmt 0 discriminator 1
 348 0084 042A     		cmp	r2, #4
 349 0086 F6D9     		bls	.L29
 918:..\FreeRTOS9/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 350              		.loc 1 918 0 is_stmt 1
 351 0088 0023     		movs	r3, #0
 352 008a 3366     		str	r3, [r6, #96]
 919:..\FreeRTOS9/tasks.c **** 	}
 353              		.loc 1 919 0
 354 008c 6422     		movs	r2, #100
 355              	.LVL40:
 356 008e B354     		strb	r3, [r6, r2]
 946:..\FreeRTOS9/tasks.c **** 	}
 357              		.loc 1 946 0
 358 0090 019A     		ldr	r2, [sp, #4]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 72


 359 0092 0099     		ldr	r1, [sp]
 360 0094 3800     		movs	r0, r7
 361 0096 FFF7FEFF 		bl	pxPortInitialiseStack
 362              	.LVL41:
 363 009a 3060     		str	r0, [r6]
 950:..\FreeRTOS9/tasks.c **** 	{
 364              		.loc 1 950 0
 365 009c 099B     		ldr	r3, [sp, #36]
 366 009e 002B     		cmp	r3, #0
 367 00a0 00D0     		beq	.L23
 954:..\FreeRTOS9/tasks.c **** 	}
 368              		.loc 1 954 0
 369 00a2 1E60     		str	r6, [r3]
 370              	.L23:
 960:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 371              		.loc 1 960 0
 372 00a4 03B0     		add	sp, sp, #12
 373              	.LVL42:
 374              		@ sp needed
 375              	.LVL43:
 376              	.LVL44:
 377 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 378              	.L33:
 379              		.align	2
 380              	.L32:
 381 00a8 FFFFFF3F 		.word	1073741823
 382              		.cfi_endproc
 383              	.LFE33:
 384              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 385              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 386              		.align	2
 387              		.code	16
 388              		.thumb_func
 389              		.type	prvInitialiseTaskLists, %function
 390              	prvInitialiseTaskLists:
 391              	.LFB66:
3334:..\FreeRTOS9/tasks.c **** UBaseType_t uxPriority;
 392              		.loc 1 3334 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 397              		.cfi_def_cfa_offset 24
 398              		.cfi_offset 3, -24
 399              		.cfi_offset 4, -20
 400              		.cfi_offset 5, -16
 401              		.cfi_offset 6, -12
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404              	.LVL45:
3337:..\FreeRTOS9/tasks.c **** 	{
 405              		.loc 1 3337 0
 406 0002 0024     		movs	r4, #0
 407 0004 08E0     		b	.L35
 408              	.LVL46:
 409              	.L36:
3339:..\FreeRTOS9/tasks.c **** 	}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 73


 410              		.loc 1 3339 0 discriminator 3
 411 0006 A200     		lsls	r2, r4, #2
 412 0008 1219     		adds	r2, r2, r4
 413 000a 9300     		lsls	r3, r2, #2
 414 000c 1048     		ldr	r0, .L37
 415 000e 3030     		adds	r0, r0, #48
 416 0010 C018     		adds	r0, r0, r3
 417 0012 FFF7FEFF 		bl	vListInitialise
 418              	.LVL47:
3337:..\FreeRTOS9/tasks.c **** 	{
 419              		.loc 1 3337 0 discriminator 3
 420 0016 0134     		adds	r4, r4, #1
 421              	.LVL48:
 422              	.L35:
3337:..\FreeRTOS9/tasks.c **** 	{
 423              		.loc 1 3337 0 is_stmt 0 discriminator 1
 424 0018 042C     		cmp	r4, #4
 425 001a F4D9     		bls	.L36
3342:..\FreeRTOS9/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 426              		.loc 1 3342 0 is_stmt 1
 427 001c 0D4C     		ldr	r4, .L37+4
 428              	.LVL49:
 429 001e 2700     		movs	r7, r4
 430 0020 1437     		adds	r7, r7, #20
 431 0022 3800     		movs	r0, r7
 432 0024 FFF7FEFF 		bl	vListInitialise
 433              	.LVL50:
3343:..\FreeRTOS9/tasks.c **** 	vListInitialise( &xPendingReadyList );
 434              		.loc 1 3343 0
 435 0028 2600     		movs	r6, r4
 436 002a 2836     		adds	r6, r6, #40
 437 002c 3000     		movs	r0, r6
 438 002e FFF7FEFF 		bl	vListInitialise
 439              	.LVL51:
3344:..\FreeRTOS9/tasks.c **** 
 440              		.loc 1 3344 0
 441 0032 074D     		ldr	r5, .L37
 442 0034 2800     		movs	r0, r5
 443 0036 1430     		adds	r0, r0, #20
 444 0038 FFF7FEFF 		bl	vListInitialise
 445              	.LVL52:
3348:..\FreeRTOS9/tasks.c **** 	}
 446              		.loc 1 3348 0
 447 003c 2000     		movs	r0, r4
 448 003e 3C30     		adds	r0, r0, #60
 449 0040 FFF7FEFF 		bl	vListInitialise
 450              	.LVL53:
3354:..\FreeRTOS9/tasks.c **** 	}
 451              		.loc 1 3354 0
 452 0044 2800     		movs	r0, r5
 453 0046 FFF7FEFF 		bl	vListInitialise
 454              	.LVL54:
3360:..\FreeRTOS9/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 455              		.loc 1 3360 0
 456 004a AF62     		str	r7, [r5, #40]
3361:..\FreeRTOS9/tasks.c **** }
 457              		.loc 1 3361 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 74


 458 004c 2665     		str	r6, [r4, #80]
3362:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 459              		.loc 1 3362 0
 460              		@ sp needed
 461 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 462              	.L38:
 463              		.align	2
 464              	.L37:
 465 0050 00000000 		.word	.LANCHOR0
 466 0054 80000000 		.word	.LANCHOR1
 467              		.cfi_endproc
 468              	.LFE66:
 469              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 470              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 471              		.align	2
 472              		.code	16
 473              		.thumb_func
 474              		.type	prvAddNewTaskToReadyList, %function
 475              	prvAddNewTaskToReadyList:
 476              	.LFB34:
 964:..\FreeRTOS9/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 477              		.loc 1 964 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL55:
 482 0000 10B5     		push	{r4, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 4, -8
 485              		.cfi_offset 14, -4
 486 0002 0400     		movs	r4, r0
 967:..\FreeRTOS9/tasks.c **** 	{
 487              		.loc 1 967 0
 488 0004 FFF7FEFF 		bl	vPortEnterCritical
 489              	.LVL56:
 969:..\FreeRTOS9/tasks.c **** 		if( pxCurrentTCB == NULL )
 490              		.loc 1 969 0
 491 0008 1E4B     		ldr	r3, .L44
 492 000a 5A6D     		ldr	r2, [r3, #84]
 493 000c 0132     		adds	r2, r2, #1
 494 000e 5A65     		str	r2, [r3, #84]
 970:..\FreeRTOS9/tasks.c **** 		{
 495              		.loc 1 970 0
 496 0010 9B6D     		ldr	r3, [r3, #88]
 497 0012 002B     		cmp	r3, #0
 498 0014 07D1     		bne	.L40
 974:..\FreeRTOS9/tasks.c **** 
 499              		.loc 1 974 0
 500 0016 1B4B     		ldr	r3, .L44
 501 0018 9C65     		str	r4, [r3, #88]
 976:..\FreeRTOS9/tasks.c **** 			{
 502              		.loc 1 976 0
 503 001a 5B6D     		ldr	r3, [r3, #84]
 504 001c 012B     		cmp	r3, #1
 505 001e 0ED1     		bne	.L41
 981:..\FreeRTOS9/tasks.c **** 			}
 506              		.loc 1 981 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 75


 507 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 508              	.LVL57:
 509 0024 0BE0     		b	.L41
 510              	.L40:
 993:..\FreeRTOS9/tasks.c **** 			{
 511              		.loc 1 993 0
 512 0026 174B     		ldr	r3, .L44
 513 0028 DB6D     		ldr	r3, [r3, #92]
 514 002a 002B     		cmp	r3, #0
 515 002c 07D1     		bne	.L41
 995:..\FreeRTOS9/tasks.c **** 				{
 516              		.loc 1 995 0
 517 002e 154B     		ldr	r3, .L44
 518 0030 9B6D     		ldr	r3, [r3, #88]
 519 0032 DB6A     		ldr	r3, [r3, #44]
 520 0034 E26A     		ldr	r2, [r4, #44]
 521 0036 9342     		cmp	r3, r2
 522 0038 01D8     		bhi	.L41
 997:..\FreeRTOS9/tasks.c **** 				}
 523              		.loc 1 997 0
 524 003a 124B     		ldr	r3, .L44
 525 003c 9C65     		str	r4, [r3, #88]
 526              	.L41:
1010:..\FreeRTOS9/tasks.c **** 
 527              		.loc 1 1010 0
 528 003e 114A     		ldr	r2, .L44
 529 0040 136E     		ldr	r3, [r2, #96]
 530 0042 0133     		adds	r3, r3, #1
 531 0044 1366     		str	r3, [r2, #96]
1020:..\FreeRTOS9/tasks.c **** 
 532              		.loc 1 1020 0
 533 0046 E36A     		ldr	r3, [r4, #44]
 534 0048 526E     		ldr	r2, [r2, #100]
 535 004a 9342     		cmp	r3, r2
 536 004c 01D9     		bls	.L42
1020:..\FreeRTOS9/tasks.c **** 
 537              		.loc 1 1020 0 is_stmt 0 discriminator 1
 538 004e 0D4A     		ldr	r2, .L44
 539 0050 5366     		str	r3, [r2, #100]
 540              	.L42:
1020:..\FreeRTOS9/tasks.c **** 
 541              		.loc 1 1020 0 discriminator 3
 542 0052 211D     		adds	r1, r4, #4
 543 0054 9A00     		lsls	r2, r3, #2
 544 0056 D318     		adds	r3, r2, r3
 545 0058 9A00     		lsls	r2, r3, #2
 546 005a 0B48     		ldr	r0, .L44+4
 547 005c 3030     		adds	r0, r0, #48
 548 005e 8018     		adds	r0, r0, r2
 549 0060 FFF7FEFF 		bl	vListInsertEnd
 550              	.LVL58:
1024:..\FreeRTOS9/tasks.c **** 
 551              		.loc 1 1024 0 is_stmt 1 discriminator 3
 552 0064 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL59:
1026:..\FreeRTOS9/tasks.c **** 	{
 554              		.loc 1 1026 0 discriminator 3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 76


 555 0068 064B     		ldr	r3, .L44
 556 006a DB6D     		ldr	r3, [r3, #92]
 557 006c 002B     		cmp	r3, #0
 558 006e 07D0     		beq	.L39
1030:..\FreeRTOS9/tasks.c **** 		{
 559              		.loc 1 1030 0
 560 0070 044B     		ldr	r3, .L44
 561 0072 9B6D     		ldr	r3, [r3, #88]
 562 0074 DA6A     		ldr	r2, [r3, #44]
 563 0076 E36A     		ldr	r3, [r4, #44]
 564 0078 9A42     		cmp	r2, r3
 565 007a 01D2     		bcs	.L39
1032:..\FreeRTOS9/tasks.c **** 		}
 566              		.loc 1 1032 0
 567 007c FFF7FEFF 		bl	vPortYield
 568              	.LVL60:
 569              	.L39:
1043:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 570              		.loc 1 1043 0
 571              		@ sp needed
 572              	.LVL61:
 573 0080 10BD     		pop	{r4, pc}
 574              	.L45:
 575 0082 C046     		.align	2
 576              	.L44:
 577 0084 80000000 		.word	.LANCHOR1
 578 0088 00000000 		.word	.LANCHOR0
 579              		.cfi_endproc
 580              	.LFE34:
 581              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 582              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 583              		.align	2
 584              		.code	16
 585              		.thumb_func
 586              		.type	prvAddCurrentTaskToDelayedList, %function
 587              	prvAddCurrentTaskToDelayedList:
 588              	.LFB84:
3657:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3658:..\FreeRTOS9/tasks.c **** 
3659:..\FreeRTOS9/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:..\FreeRTOS9/tasks.c **** 
3661:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:..\FreeRTOS9/tasks.c **** 	{
3663:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xReturn;
3664:..\FreeRTOS9/tasks.c **** 
3665:..\FreeRTOS9/tasks.c **** 		/* A critical section is not required as this is not called from
3666:..\FreeRTOS9/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:..\FreeRTOS9/tasks.c **** 		individual execution thread. */
3668:..\FreeRTOS9/tasks.c **** 		xReturn = pxCurrentTCB;
3669:..\FreeRTOS9/tasks.c **** 
3670:..\FreeRTOS9/tasks.c **** 		return xReturn;
3671:..\FreeRTOS9/tasks.c **** 	}
3672:..\FreeRTOS9/tasks.c **** 
3673:..\FreeRTOS9/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3675:..\FreeRTOS9/tasks.c **** 
3676:..\FreeRTOS9/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 77


3677:..\FreeRTOS9/tasks.c **** 
3678:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:..\FreeRTOS9/tasks.c **** 	{
3680:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
3681:..\FreeRTOS9/tasks.c **** 
3682:..\FreeRTOS9/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:..\FreeRTOS9/tasks.c **** 		{
3684:..\FreeRTOS9/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:..\FreeRTOS9/tasks.c **** 		}
3686:..\FreeRTOS9/tasks.c **** 		else
3687:..\FreeRTOS9/tasks.c **** 		{
3688:..\FreeRTOS9/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:..\FreeRTOS9/tasks.c **** 			{
3690:..\FreeRTOS9/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:..\FreeRTOS9/tasks.c **** 			}
3692:..\FreeRTOS9/tasks.c **** 			else
3693:..\FreeRTOS9/tasks.c **** 			{
3694:..\FreeRTOS9/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:..\FreeRTOS9/tasks.c **** 			}
3696:..\FreeRTOS9/tasks.c **** 		}
3697:..\FreeRTOS9/tasks.c **** 
3698:..\FreeRTOS9/tasks.c **** 		return xReturn;
3699:..\FreeRTOS9/tasks.c **** 	}
3700:..\FreeRTOS9/tasks.c **** 
3701:..\FreeRTOS9/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3703:..\FreeRTOS9/tasks.c **** 
3704:..\FreeRTOS9/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:..\FreeRTOS9/tasks.c **** 
3706:..\FreeRTOS9/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:..\FreeRTOS9/tasks.c **** 	{
3708:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:..\FreeRTOS9/tasks.c **** 
3710:..\FreeRTOS9/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:..\FreeRTOS9/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:..\FreeRTOS9/tasks.c **** 		if( pxMutexHolder != NULL )
3713:..\FreeRTOS9/tasks.c **** 		{
3714:..\FreeRTOS9/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:..\FreeRTOS9/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:..\FreeRTOS9/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:..\FreeRTOS9/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:..\FreeRTOS9/tasks.c **** 			{
3719:..\FreeRTOS9/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:..\FreeRTOS9/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:..\FreeRTOS9/tasks.c **** 				not	being used for anything else. */
3722:..\FreeRTOS9/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:..\FreeRTOS9/tasks.c **** 				{
3724:..\FreeRTOS9/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:..\FreeRTOS9/tasks.c **** 				}
3726:..\FreeRTOS9/tasks.c **** 				else
3727:..\FreeRTOS9/tasks.c **** 				{
3728:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:..\FreeRTOS9/tasks.c **** 				}
3730:..\FreeRTOS9/tasks.c **** 
3731:..\FreeRTOS9/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:..\FreeRTOS9/tasks.c **** 				to be moved into a new list. */
3733:..\FreeRTOS9/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 78


3734:..\FreeRTOS9/tasks.c **** 				{
3735:..\FreeRTOS9/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:..\FreeRTOS9/tasks.c **** 					{
3737:..\FreeRTOS9/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:..\FreeRTOS9/tasks.c **** 					}
3739:..\FreeRTOS9/tasks.c **** 					else
3740:..\FreeRTOS9/tasks.c **** 					{
3741:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:..\FreeRTOS9/tasks.c **** 					}
3743:..\FreeRTOS9/tasks.c **** 
3744:..\FreeRTOS9/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:..\FreeRTOS9/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:..\FreeRTOS9/tasks.c **** 				}
3748:..\FreeRTOS9/tasks.c **** 				else
3749:..\FreeRTOS9/tasks.c **** 				{
3750:..\FreeRTOS9/tasks.c **** 					/* Just inherit the priority. */
3751:..\FreeRTOS9/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:..\FreeRTOS9/tasks.c **** 				}
3753:..\FreeRTOS9/tasks.c **** 
3754:..\FreeRTOS9/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:..\FreeRTOS9/tasks.c **** 			}
3756:..\FreeRTOS9/tasks.c **** 			else
3757:..\FreeRTOS9/tasks.c **** 			{
3758:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:..\FreeRTOS9/tasks.c **** 			}
3760:..\FreeRTOS9/tasks.c **** 		}
3761:..\FreeRTOS9/tasks.c **** 		else
3762:..\FreeRTOS9/tasks.c **** 		{
3763:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:..\FreeRTOS9/tasks.c **** 		}
3765:..\FreeRTOS9/tasks.c **** 	}
3766:..\FreeRTOS9/tasks.c **** 
3767:..\FreeRTOS9/tasks.c **** #endif /* configUSE_MUTEXES */
3768:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3769:..\FreeRTOS9/tasks.c **** 
3770:..\FreeRTOS9/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:..\FreeRTOS9/tasks.c **** 
3772:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:..\FreeRTOS9/tasks.c **** 	{
3774:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:..\FreeRTOS9/tasks.c **** 
3777:..\FreeRTOS9/tasks.c **** 		if( pxMutexHolder != NULL )
3778:..\FreeRTOS9/tasks.c **** 		{
3779:..\FreeRTOS9/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:..\FreeRTOS9/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:..\FreeRTOS9/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:..\FreeRTOS9/tasks.c **** 			be the running state task. */
3783:..\FreeRTOS9/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:..\FreeRTOS9/tasks.c **** 
3785:..\FreeRTOS9/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:..\FreeRTOS9/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:..\FreeRTOS9/tasks.c **** 
3788:..\FreeRTOS9/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:..\FreeRTOS9/tasks.c **** 			task? */
3790:..\FreeRTOS9/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 79


3791:..\FreeRTOS9/tasks.c **** 			{
3792:..\FreeRTOS9/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:..\FreeRTOS9/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:..\FreeRTOS9/tasks.c **** 				{
3795:..\FreeRTOS9/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:..\FreeRTOS9/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:..\FreeRTOS9/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:..\FreeRTOS9/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:..\FreeRTOS9/tasks.c **** 					the	holding task from the ready	list. */
3800:..\FreeRTOS9/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:..\FreeRTOS9/tasks.c **** 					{
3802:..\FreeRTOS9/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:..\FreeRTOS9/tasks.c **** 					}
3804:..\FreeRTOS9/tasks.c **** 					else
3805:..\FreeRTOS9/tasks.c **** 					{
3806:..\FreeRTOS9/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:..\FreeRTOS9/tasks.c **** 					}
3808:..\FreeRTOS9/tasks.c **** 
3809:..\FreeRTOS9/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:..\FreeRTOS9/tasks.c **** 					new	ready list. */
3811:..\FreeRTOS9/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:..\FreeRTOS9/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:..\FreeRTOS9/tasks.c **** 
3814:..\FreeRTOS9/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:..\FreeRTOS9/tasks.c **** 					any other purpose if this task is running, and it must be
3816:..\FreeRTOS9/tasks.c **** 					running to give back the mutex. */
3817:..\FreeRTOS9/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:..\FreeRTOS9/tasks.c **** 
3820:..\FreeRTOS9/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:..\FreeRTOS9/tasks.c **** 					This is only actually required in the corner case whereby
3822:..\FreeRTOS9/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:..\FreeRTOS9/tasks.c **** 					in an order different to that in which they were taken.
3824:..\FreeRTOS9/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:..\FreeRTOS9/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:..\FreeRTOS9/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:..\FreeRTOS9/tasks.c **** 					a task is waiting on it or not. */
3828:..\FreeRTOS9/tasks.c **** 					xReturn = pdTRUE;
3829:..\FreeRTOS9/tasks.c **** 				}
3830:..\FreeRTOS9/tasks.c **** 				else
3831:..\FreeRTOS9/tasks.c **** 				{
3832:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:..\FreeRTOS9/tasks.c **** 				}
3834:..\FreeRTOS9/tasks.c **** 			}
3835:..\FreeRTOS9/tasks.c **** 			else
3836:..\FreeRTOS9/tasks.c **** 			{
3837:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:..\FreeRTOS9/tasks.c **** 			}
3839:..\FreeRTOS9/tasks.c **** 		}
3840:..\FreeRTOS9/tasks.c **** 		else
3841:..\FreeRTOS9/tasks.c **** 		{
3842:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:..\FreeRTOS9/tasks.c **** 		}
3844:..\FreeRTOS9/tasks.c **** 
3845:..\FreeRTOS9/tasks.c **** 		return xReturn;
3846:..\FreeRTOS9/tasks.c **** 	}
3847:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 80


3848:..\FreeRTOS9/tasks.c **** #endif /* configUSE_MUTEXES */
3849:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3850:..\FreeRTOS9/tasks.c **** 
3851:..\FreeRTOS9/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:..\FreeRTOS9/tasks.c **** 
3853:..\FreeRTOS9/tasks.c **** 	void vTaskEnterCritical( void )
3854:..\FreeRTOS9/tasks.c **** 	{
3855:..\FreeRTOS9/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:..\FreeRTOS9/tasks.c **** 
3857:..\FreeRTOS9/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:..\FreeRTOS9/tasks.c **** 		{
3859:..\FreeRTOS9/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:..\FreeRTOS9/tasks.c **** 
3861:..\FreeRTOS9/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:..\FreeRTOS9/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:..\FreeRTOS9/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:..\FreeRTOS9/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:..\FreeRTOS9/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:..\FreeRTOS9/tasks.c **** 			critical section. */
3867:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:..\FreeRTOS9/tasks.c **** 			{
3869:..\FreeRTOS9/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:..\FreeRTOS9/tasks.c **** 			}
3871:..\FreeRTOS9/tasks.c **** 		}
3872:..\FreeRTOS9/tasks.c **** 		else
3873:..\FreeRTOS9/tasks.c **** 		{
3874:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:..\FreeRTOS9/tasks.c **** 		}
3876:..\FreeRTOS9/tasks.c **** 	}
3877:..\FreeRTOS9/tasks.c **** 
3878:..\FreeRTOS9/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3880:..\FreeRTOS9/tasks.c **** 
3881:..\FreeRTOS9/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:..\FreeRTOS9/tasks.c **** 
3883:..\FreeRTOS9/tasks.c **** 	void vTaskExitCritical( void )
3884:..\FreeRTOS9/tasks.c **** 	{
3885:..\FreeRTOS9/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:..\FreeRTOS9/tasks.c **** 		{
3887:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:..\FreeRTOS9/tasks.c **** 			{
3889:..\FreeRTOS9/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:..\FreeRTOS9/tasks.c **** 
3891:..\FreeRTOS9/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:..\FreeRTOS9/tasks.c **** 				{
3893:..\FreeRTOS9/tasks.c **** 					portENABLE_INTERRUPTS();
3894:..\FreeRTOS9/tasks.c **** 				}
3895:..\FreeRTOS9/tasks.c **** 				else
3896:..\FreeRTOS9/tasks.c **** 				{
3897:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:..\FreeRTOS9/tasks.c **** 				}
3899:..\FreeRTOS9/tasks.c **** 			}
3900:..\FreeRTOS9/tasks.c **** 			else
3901:..\FreeRTOS9/tasks.c **** 			{
3902:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:..\FreeRTOS9/tasks.c **** 			}
3904:..\FreeRTOS9/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 81


3905:..\FreeRTOS9/tasks.c **** 		else
3906:..\FreeRTOS9/tasks.c **** 		{
3907:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:..\FreeRTOS9/tasks.c **** 		}
3909:..\FreeRTOS9/tasks.c **** 	}
3910:..\FreeRTOS9/tasks.c **** 
3911:..\FreeRTOS9/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3913:..\FreeRTOS9/tasks.c **** 
3914:..\FreeRTOS9/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:..\FreeRTOS9/tasks.c **** 
3916:..\FreeRTOS9/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:..\FreeRTOS9/tasks.c **** 	{
3918:..\FreeRTOS9/tasks.c **** 	size_t x;
3919:..\FreeRTOS9/tasks.c **** 
3920:..\FreeRTOS9/tasks.c **** 		/* Start by copying the entire string. */
3921:..\FreeRTOS9/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:..\FreeRTOS9/tasks.c **** 
3923:..\FreeRTOS9/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:..\FreeRTOS9/tasks.c **** 		printed out. */
3925:..\FreeRTOS9/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:..\FreeRTOS9/tasks.c **** 		{
3927:..\FreeRTOS9/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:..\FreeRTOS9/tasks.c **** 		}
3929:..\FreeRTOS9/tasks.c **** 
3930:..\FreeRTOS9/tasks.c **** 		/* Terminate. */
3931:..\FreeRTOS9/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:..\FreeRTOS9/tasks.c **** 
3933:..\FreeRTOS9/tasks.c **** 		/* Return the new end of string. */
3934:..\FreeRTOS9/tasks.c **** 		return &( pcBuffer[ x ] );
3935:..\FreeRTOS9/tasks.c **** 	}
3936:..\FreeRTOS9/tasks.c **** 
3937:..\FreeRTOS9/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
3939:..\FreeRTOS9/tasks.c **** 
3940:..\FreeRTOS9/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:..\FreeRTOS9/tasks.c **** 
3942:..\FreeRTOS9/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:..\FreeRTOS9/tasks.c **** 	{
3944:..\FreeRTOS9/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:..\FreeRTOS9/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:..\FreeRTOS9/tasks.c **** 	char cStatus;
3947:..\FreeRTOS9/tasks.c **** 
3948:..\FreeRTOS9/tasks.c **** 		/*
3949:..\FreeRTOS9/tasks.c **** 		 * PLEASE NOTE:
3950:..\FreeRTOS9/tasks.c **** 		 *
3951:..\FreeRTOS9/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:..\FreeRTOS9/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:..\FreeRTOS9/tasks.c **** 		 * scheduler.
3954:..\FreeRTOS9/tasks.c **** 		 *
3955:..\FreeRTOS9/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:..\FreeRTOS9/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:..\FreeRTOS9/tasks.c **** 		 * displays task names, states and stack usage.
3958:..\FreeRTOS9/tasks.c **** 		 *
3959:..\FreeRTOS9/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:..\FreeRTOS9/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:..\FreeRTOS9/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 82


3962:..\FreeRTOS9/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:..\FreeRTOS9/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:..\FreeRTOS9/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:..\FreeRTOS9/tasks.c **** 		 * snprintf() implementation!).
3966:..\FreeRTOS9/tasks.c **** 		 *
3967:..\FreeRTOS9/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:..\FreeRTOS9/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:..\FreeRTOS9/tasks.c **** 		 * through a call to vTaskList().
3970:..\FreeRTOS9/tasks.c **** 		 */
3971:..\FreeRTOS9/tasks.c **** 
3972:..\FreeRTOS9/tasks.c **** 
3973:..\FreeRTOS9/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:..\FreeRTOS9/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:..\FreeRTOS9/tasks.c **** 
3976:..\FreeRTOS9/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:..\FreeRTOS9/tasks.c **** 		function is executing. */
3978:..\FreeRTOS9/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:..\FreeRTOS9/tasks.c **** 
3980:..\FreeRTOS9/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:..\FreeRTOS9/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:..\FreeRTOS9/tasks.c **** 		equate to NULL. */
3983:..\FreeRTOS9/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:..\FreeRTOS9/tasks.c **** 
3985:..\FreeRTOS9/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:..\FreeRTOS9/tasks.c **** 		{
3987:..\FreeRTOS9/tasks.c **** 			/* Generate the (binary) data. */
3988:..\FreeRTOS9/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:..\FreeRTOS9/tasks.c **** 
3990:..\FreeRTOS9/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:..\FreeRTOS9/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:..\FreeRTOS9/tasks.c **** 			{
3993:..\FreeRTOS9/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:..\FreeRTOS9/tasks.c **** 				{
3995:..\FreeRTOS9/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:..\FreeRTOS9/tasks.c **** 										break;
3997:..\FreeRTOS9/tasks.c **** 
3998:..\FreeRTOS9/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:..\FreeRTOS9/tasks.c **** 										break;
4000:..\FreeRTOS9/tasks.c **** 
4001:..\FreeRTOS9/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:..\FreeRTOS9/tasks.c **** 										break;
4003:..\FreeRTOS9/tasks.c **** 
4004:..\FreeRTOS9/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:..\FreeRTOS9/tasks.c **** 										break;
4006:..\FreeRTOS9/tasks.c **** 
4007:..\FreeRTOS9/tasks.c **** 					default:			/* Should not get here, but it is included
4008:..\FreeRTOS9/tasks.c **** 										to prevent static checking errors. */
4009:..\FreeRTOS9/tasks.c **** 										cStatus = 0x00;
4010:..\FreeRTOS9/tasks.c **** 										break;
4011:..\FreeRTOS9/tasks.c **** 				}
4012:..\FreeRTOS9/tasks.c **** 
4013:..\FreeRTOS9/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:..\FreeRTOS9/tasks.c **** 				can be printed in tabular form more easily. */
4015:..\FreeRTOS9/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:..\FreeRTOS9/tasks.c **** 
4017:..\FreeRTOS9/tasks.c **** 				/* Write the rest of the string. */
4018:..\FreeRTOS9/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 83


4019:..\FreeRTOS9/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:..\FreeRTOS9/tasks.c **** 			}
4021:..\FreeRTOS9/tasks.c **** 
4022:..\FreeRTOS9/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:..\FreeRTOS9/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:..\FreeRTOS9/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:..\FreeRTOS9/tasks.c **** 		}
4026:..\FreeRTOS9/tasks.c **** 		else
4027:..\FreeRTOS9/tasks.c **** 		{
4028:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:..\FreeRTOS9/tasks.c **** 		}
4030:..\FreeRTOS9/tasks.c **** 	}
4031:..\FreeRTOS9/tasks.c **** 
4032:..\FreeRTOS9/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
4034:..\FreeRTOS9/tasks.c **** 
4035:..\FreeRTOS9/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:..\FreeRTOS9/tasks.c **** 
4037:..\FreeRTOS9/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:..\FreeRTOS9/tasks.c **** 	{
4039:..\FreeRTOS9/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:..\FreeRTOS9/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:..\FreeRTOS9/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:..\FreeRTOS9/tasks.c **** 
4043:..\FreeRTOS9/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:..\FreeRTOS9/tasks.c **** 		{
4045:..\FreeRTOS9/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:..\FreeRTOS9/tasks.c **** 		}
4047:..\FreeRTOS9/tasks.c **** 		#endif
4048:..\FreeRTOS9/tasks.c **** 
4049:..\FreeRTOS9/tasks.c **** 		/*
4050:..\FreeRTOS9/tasks.c **** 		 * PLEASE NOTE:
4051:..\FreeRTOS9/tasks.c **** 		 *
4052:..\FreeRTOS9/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:..\FreeRTOS9/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:..\FreeRTOS9/tasks.c **** 		 * scheduler.
4055:..\FreeRTOS9/tasks.c **** 		 *
4056:..\FreeRTOS9/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:..\FreeRTOS9/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:..\FreeRTOS9/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:..\FreeRTOS9/tasks.c **** 		 * in both absolute and percentage terms.
4060:..\FreeRTOS9/tasks.c **** 		 *
4061:..\FreeRTOS9/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:..\FreeRTOS9/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:..\FreeRTOS9/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:..\FreeRTOS9/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:..\FreeRTOS9/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:..\FreeRTOS9/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:..\FreeRTOS9/tasks.c **** 		 * a full snprintf() implementation!).
4068:..\FreeRTOS9/tasks.c **** 		 *
4069:..\FreeRTOS9/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:..\FreeRTOS9/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:..\FreeRTOS9/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:..\FreeRTOS9/tasks.c **** 		 */
4073:..\FreeRTOS9/tasks.c **** 
4074:..\FreeRTOS9/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:..\FreeRTOS9/tasks.c **** 		*pcWriteBuffer = 0x00;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 84


4076:..\FreeRTOS9/tasks.c **** 
4077:..\FreeRTOS9/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:..\FreeRTOS9/tasks.c **** 		function is executing. */
4079:..\FreeRTOS9/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:..\FreeRTOS9/tasks.c **** 
4081:..\FreeRTOS9/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:..\FreeRTOS9/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:..\FreeRTOS9/tasks.c **** 		equate to NULL. */
4084:..\FreeRTOS9/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:..\FreeRTOS9/tasks.c **** 
4086:..\FreeRTOS9/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:..\FreeRTOS9/tasks.c **** 		{
4088:..\FreeRTOS9/tasks.c **** 			/* Generate the (binary) data. */
4089:..\FreeRTOS9/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:..\FreeRTOS9/tasks.c **** 
4091:..\FreeRTOS9/tasks.c **** 			/* For percentage calculations. */
4092:..\FreeRTOS9/tasks.c **** 			ulTotalTime /= 100UL;
4093:..\FreeRTOS9/tasks.c **** 
4094:..\FreeRTOS9/tasks.c **** 			/* Avoid divide by zero errors. */
4095:..\FreeRTOS9/tasks.c **** 			if( ulTotalTime > 0 )
4096:..\FreeRTOS9/tasks.c **** 			{
4097:..\FreeRTOS9/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:..\FreeRTOS9/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:..\FreeRTOS9/tasks.c **** 				{
4100:..\FreeRTOS9/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:..\FreeRTOS9/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:..\FreeRTOS9/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:..\FreeRTOS9/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:..\FreeRTOS9/tasks.c **** 
4105:..\FreeRTOS9/tasks.c **** 					/* Write the task name to the string, padding with
4106:..\FreeRTOS9/tasks.c **** 					spaces so it can be printed in tabular form more
4107:..\FreeRTOS9/tasks.c **** 					easily. */
4108:..\FreeRTOS9/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:..\FreeRTOS9/tasks.c **** 
4110:..\FreeRTOS9/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:..\FreeRTOS9/tasks.c **** 					{
4112:..\FreeRTOS9/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:..\FreeRTOS9/tasks.c **** 						{
4114:..\FreeRTOS9/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:..\FreeRTOS9/tasks.c **** 						}
4116:..\FreeRTOS9/tasks.c **** 						#else
4117:..\FreeRTOS9/tasks.c **** 						{
4118:..\FreeRTOS9/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:..\FreeRTOS9/tasks.c **** 							printf() library can be used. */
4120:..\FreeRTOS9/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:..\FreeRTOS9/tasks.c **** 						}
4122:..\FreeRTOS9/tasks.c **** 						#endif
4123:..\FreeRTOS9/tasks.c **** 					}
4124:..\FreeRTOS9/tasks.c **** 					else
4125:..\FreeRTOS9/tasks.c **** 					{
4126:..\FreeRTOS9/tasks.c **** 						/* If the percentage is zero here then the task has
4127:..\FreeRTOS9/tasks.c **** 						consumed less than 1% of the total run time. */
4128:..\FreeRTOS9/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:..\FreeRTOS9/tasks.c **** 						{
4130:..\FreeRTOS9/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:..\FreeRTOS9/tasks.c **** 						}
4132:..\FreeRTOS9/tasks.c **** 						#else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 85


4133:..\FreeRTOS9/tasks.c **** 						{
4134:..\FreeRTOS9/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:..\FreeRTOS9/tasks.c **** 							printf() library can be used. */
4136:..\FreeRTOS9/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:..\FreeRTOS9/tasks.c **** 						}
4138:..\FreeRTOS9/tasks.c **** 						#endif
4139:..\FreeRTOS9/tasks.c **** 					}
4140:..\FreeRTOS9/tasks.c **** 
4141:..\FreeRTOS9/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:..\FreeRTOS9/tasks.c **** 				}
4143:..\FreeRTOS9/tasks.c **** 			}
4144:..\FreeRTOS9/tasks.c **** 			else
4145:..\FreeRTOS9/tasks.c **** 			{
4146:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:..\FreeRTOS9/tasks.c **** 			}
4148:..\FreeRTOS9/tasks.c **** 
4149:..\FreeRTOS9/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:..\FreeRTOS9/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:..\FreeRTOS9/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:..\FreeRTOS9/tasks.c **** 		}
4153:..\FreeRTOS9/tasks.c **** 		else
4154:..\FreeRTOS9/tasks.c **** 		{
4155:..\FreeRTOS9/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:..\FreeRTOS9/tasks.c **** 		}
4157:..\FreeRTOS9/tasks.c **** 	}
4158:..\FreeRTOS9/tasks.c **** 
4159:..\FreeRTOS9/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4161:..\FreeRTOS9/tasks.c **** 
4162:..\FreeRTOS9/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:..\FreeRTOS9/tasks.c **** {
4164:..\FreeRTOS9/tasks.c **** TickType_t uxReturn;
4165:..\FreeRTOS9/tasks.c **** 
4166:..\FreeRTOS9/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:..\FreeRTOS9/tasks.c **** 
4168:..\FreeRTOS9/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:..\FreeRTOS9/tasks.c **** 	queues and semaphores. */
4170:..\FreeRTOS9/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:..\FreeRTOS9/tasks.c **** 
4172:..\FreeRTOS9/tasks.c **** 	return uxReturn;
4173:..\FreeRTOS9/tasks.c **** }
4174:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4175:..\FreeRTOS9/tasks.c **** 
4176:..\FreeRTOS9/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:..\FreeRTOS9/tasks.c **** 
4178:..\FreeRTOS9/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:..\FreeRTOS9/tasks.c **** 	{
4180:..\FreeRTOS9/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:..\FreeRTOS9/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:..\FreeRTOS9/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:..\FreeRTOS9/tasks.c **** 		{
4184:..\FreeRTOS9/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:..\FreeRTOS9/tasks.c **** 		}
4186:..\FreeRTOS9/tasks.c **** 
4187:..\FreeRTOS9/tasks.c **** 		return pxCurrentTCB;
4188:..\FreeRTOS9/tasks.c **** 	}
4189:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 86


4190:..\FreeRTOS9/tasks.c **** #endif /* configUSE_MUTEXES */
4191:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4192:..\FreeRTOS9/tasks.c **** 
4193:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:..\FreeRTOS9/tasks.c **** 
4195:..\FreeRTOS9/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:..\FreeRTOS9/tasks.c **** 	{
4197:..\FreeRTOS9/tasks.c **** 	uint32_t ulReturn;
4198:..\FreeRTOS9/tasks.c **** 
4199:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
4200:..\FreeRTOS9/tasks.c **** 		{
4201:..\FreeRTOS9/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:..\FreeRTOS9/tasks.c **** 			{
4204:..\FreeRTOS9/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:..\FreeRTOS9/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:..\FreeRTOS9/tasks.c **** 
4207:..\FreeRTOS9/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:..\FreeRTOS9/tasks.c **** 				{
4209:..\FreeRTOS9/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:..\FreeRTOS9/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:..\FreeRTOS9/tasks.c **** 
4212:..\FreeRTOS9/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:..\FreeRTOS9/tasks.c **** 					section (some will yield immediately, others wait until the
4214:..\FreeRTOS9/tasks.c **** 					critical section exits) - but it is not something that
4215:..\FreeRTOS9/tasks.c **** 					application code should ever do. */
4216:..\FreeRTOS9/tasks.c **** 					portYIELD_WITHIN_API();
4217:..\FreeRTOS9/tasks.c **** 				}
4218:..\FreeRTOS9/tasks.c **** 				else
4219:..\FreeRTOS9/tasks.c **** 				{
4220:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:..\FreeRTOS9/tasks.c **** 				}
4222:..\FreeRTOS9/tasks.c **** 			}
4223:..\FreeRTOS9/tasks.c **** 			else
4224:..\FreeRTOS9/tasks.c **** 			{
4225:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:..\FreeRTOS9/tasks.c **** 			}
4227:..\FreeRTOS9/tasks.c **** 		}
4228:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4229:..\FreeRTOS9/tasks.c **** 
4230:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
4231:..\FreeRTOS9/tasks.c **** 		{
4232:..\FreeRTOS9/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:..\FreeRTOS9/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:..\FreeRTOS9/tasks.c **** 
4235:..\FreeRTOS9/tasks.c **** 			if( ulReturn != 0UL )
4236:..\FreeRTOS9/tasks.c **** 			{
4237:..\FreeRTOS9/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:..\FreeRTOS9/tasks.c **** 				{
4239:..\FreeRTOS9/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:..\FreeRTOS9/tasks.c **** 				}
4241:..\FreeRTOS9/tasks.c **** 				else
4242:..\FreeRTOS9/tasks.c **** 				{
4243:..\FreeRTOS9/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:..\FreeRTOS9/tasks.c **** 				}
4245:..\FreeRTOS9/tasks.c **** 			}
4246:..\FreeRTOS9/tasks.c **** 			else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 87


4247:..\FreeRTOS9/tasks.c **** 			{
4248:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:..\FreeRTOS9/tasks.c **** 			}
4250:..\FreeRTOS9/tasks.c **** 
4251:..\FreeRTOS9/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:..\FreeRTOS9/tasks.c **** 		}
4253:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4254:..\FreeRTOS9/tasks.c **** 
4255:..\FreeRTOS9/tasks.c **** 		return ulReturn;
4256:..\FreeRTOS9/tasks.c **** 	}
4257:..\FreeRTOS9/tasks.c **** 
4258:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4260:..\FreeRTOS9/tasks.c **** 
4261:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:..\FreeRTOS9/tasks.c **** 
4263:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:..\FreeRTOS9/tasks.c **** 	{
4265:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
4266:..\FreeRTOS9/tasks.c **** 
4267:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
4268:..\FreeRTOS9/tasks.c **** 		{
4269:..\FreeRTOS9/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:..\FreeRTOS9/tasks.c **** 			{
4272:..\FreeRTOS9/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:..\FreeRTOS9/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:..\FreeRTOS9/tasks.c **** 				clear the value to zero. */
4275:..\FreeRTOS9/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:..\FreeRTOS9/tasks.c **** 
4277:..\FreeRTOS9/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:..\FreeRTOS9/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:..\FreeRTOS9/tasks.c **** 
4280:..\FreeRTOS9/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:..\FreeRTOS9/tasks.c **** 				{
4282:..\FreeRTOS9/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:..\FreeRTOS9/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:..\FreeRTOS9/tasks.c **** 
4285:..\FreeRTOS9/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:..\FreeRTOS9/tasks.c **** 					section (some will yield immediately, others wait until the
4287:..\FreeRTOS9/tasks.c **** 					critical section exits) - but it is not something that
4288:..\FreeRTOS9/tasks.c **** 					application code should ever do. */
4289:..\FreeRTOS9/tasks.c **** 					portYIELD_WITHIN_API();
4290:..\FreeRTOS9/tasks.c **** 				}
4291:..\FreeRTOS9/tasks.c **** 				else
4292:..\FreeRTOS9/tasks.c **** 				{
4293:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:..\FreeRTOS9/tasks.c **** 				}
4295:..\FreeRTOS9/tasks.c **** 			}
4296:..\FreeRTOS9/tasks.c **** 			else
4297:..\FreeRTOS9/tasks.c **** 			{
4298:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:..\FreeRTOS9/tasks.c **** 			}
4300:..\FreeRTOS9/tasks.c **** 		}
4301:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4302:..\FreeRTOS9/tasks.c **** 
4303:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 88


4304:..\FreeRTOS9/tasks.c **** 		{
4305:..\FreeRTOS9/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:..\FreeRTOS9/tasks.c **** 
4307:..\FreeRTOS9/tasks.c **** 			if( pulNotificationValue != NULL )
4308:..\FreeRTOS9/tasks.c **** 			{
4309:..\FreeRTOS9/tasks.c **** 				/* Output the current notification value, which may or may not
4310:..\FreeRTOS9/tasks.c **** 				have changed. */
4311:..\FreeRTOS9/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:..\FreeRTOS9/tasks.c **** 			}
4313:..\FreeRTOS9/tasks.c **** 
4314:..\FreeRTOS9/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:..\FreeRTOS9/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:..\FreeRTOS9/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:..\FreeRTOS9/tasks.c **** 			unblocked because of a timeout. */
4318:..\FreeRTOS9/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:..\FreeRTOS9/tasks.c **** 			{
4320:..\FreeRTOS9/tasks.c **** 				/* A notification was not received. */
4321:..\FreeRTOS9/tasks.c **** 				xReturn = pdFALSE;
4322:..\FreeRTOS9/tasks.c **** 			}
4323:..\FreeRTOS9/tasks.c **** 			else
4324:..\FreeRTOS9/tasks.c **** 			{
4325:..\FreeRTOS9/tasks.c **** 				/* A notification was already pending or a notification was
4326:..\FreeRTOS9/tasks.c **** 				received while the task was waiting. */
4327:..\FreeRTOS9/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:..\FreeRTOS9/tasks.c **** 				xReturn = pdTRUE;
4329:..\FreeRTOS9/tasks.c **** 			}
4330:..\FreeRTOS9/tasks.c **** 
4331:..\FreeRTOS9/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:..\FreeRTOS9/tasks.c **** 		}
4333:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4334:..\FreeRTOS9/tasks.c **** 
4335:..\FreeRTOS9/tasks.c **** 		return xReturn;
4336:..\FreeRTOS9/tasks.c **** 	}
4337:..\FreeRTOS9/tasks.c **** 
4338:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4340:..\FreeRTOS9/tasks.c **** 
4341:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:..\FreeRTOS9/tasks.c **** 
4343:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:..\FreeRTOS9/tasks.c **** 	{
4345:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
4346:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:..\FreeRTOS9/tasks.c **** 
4349:..\FreeRTOS9/tasks.c **** 		configASSERT( xTaskToNotify );
4350:..\FreeRTOS9/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:..\FreeRTOS9/tasks.c **** 
4352:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
4353:..\FreeRTOS9/tasks.c **** 		{
4354:..\FreeRTOS9/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:..\FreeRTOS9/tasks.c **** 			{
4356:..\FreeRTOS9/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:..\FreeRTOS9/tasks.c **** 			}
4358:..\FreeRTOS9/tasks.c **** 
4359:..\FreeRTOS9/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 89


4361:..\FreeRTOS9/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:..\FreeRTOS9/tasks.c **** 
4363:..\FreeRTOS9/tasks.c **** 			switch( eAction )
4364:..\FreeRTOS9/tasks.c **** 			{
4365:..\FreeRTOS9/tasks.c **** 				case eSetBits	:
4366:..\FreeRTOS9/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:..\FreeRTOS9/tasks.c **** 					break;
4368:..\FreeRTOS9/tasks.c **** 
4369:..\FreeRTOS9/tasks.c **** 				case eIncrement	:
4370:..\FreeRTOS9/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:..\FreeRTOS9/tasks.c **** 					break;
4372:..\FreeRTOS9/tasks.c **** 
4373:..\FreeRTOS9/tasks.c **** 				case eSetValueWithOverwrite	:
4374:..\FreeRTOS9/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:..\FreeRTOS9/tasks.c **** 					break;
4376:..\FreeRTOS9/tasks.c **** 
4377:..\FreeRTOS9/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:..\FreeRTOS9/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:..\FreeRTOS9/tasks.c **** 					{
4380:..\FreeRTOS9/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:..\FreeRTOS9/tasks.c **** 					}
4382:..\FreeRTOS9/tasks.c **** 					else
4383:..\FreeRTOS9/tasks.c **** 					{
4384:..\FreeRTOS9/tasks.c **** 						/* The value could not be written to the task. */
4385:..\FreeRTOS9/tasks.c **** 						xReturn = pdFAIL;
4386:..\FreeRTOS9/tasks.c **** 					}
4387:..\FreeRTOS9/tasks.c **** 					break;
4388:..\FreeRTOS9/tasks.c **** 
4389:..\FreeRTOS9/tasks.c **** 				case eNoAction:
4390:..\FreeRTOS9/tasks.c **** 					/* The task is being notified without its notify value being
4391:..\FreeRTOS9/tasks.c **** 					updated. */
4392:..\FreeRTOS9/tasks.c **** 					break;
4393:..\FreeRTOS9/tasks.c **** 			}
4394:..\FreeRTOS9/tasks.c **** 
4395:..\FreeRTOS9/tasks.c **** 			traceTASK_NOTIFY();
4396:..\FreeRTOS9/tasks.c **** 
4397:..\FreeRTOS9/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:..\FreeRTOS9/tasks.c **** 			notification then unblock it now. */
4399:..\FreeRTOS9/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:..\FreeRTOS9/tasks.c **** 			{
4401:..\FreeRTOS9/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:..\FreeRTOS9/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:..\FreeRTOS9/tasks.c **** 
4404:..\FreeRTOS9/tasks.c **** 				/* The task should not have been on an event list. */
4405:..\FreeRTOS9/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:..\FreeRTOS9/tasks.c **** 
4407:..\FreeRTOS9/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:..\FreeRTOS9/tasks.c **** 				{
4409:..\FreeRTOS9/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:..\FreeRTOS9/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:..\FreeRTOS9/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:..\FreeRTOS9/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:..\FreeRTOS9/tasks.c **** 					because it will automatically get reset to a new value when
4414:..\FreeRTOS9/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:..\FreeRTOS9/tasks.c **** 					tickless idling is used it might be more important to enter
4416:..\FreeRTOS9/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:..\FreeRTOS9/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 90


4418:..\FreeRTOS9/tasks.c **** 					earliest possible time. */
4419:..\FreeRTOS9/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:..\FreeRTOS9/tasks.c **** 				}
4421:..\FreeRTOS9/tasks.c **** 				#endif
4422:..\FreeRTOS9/tasks.c **** 
4423:..\FreeRTOS9/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:..\FreeRTOS9/tasks.c **** 				{
4425:..\FreeRTOS9/tasks.c **** 					/* The notified task has a priority above the currently
4426:..\FreeRTOS9/tasks.c **** 					executing task so a yield is required. */
4427:..\FreeRTOS9/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:..\FreeRTOS9/tasks.c **** 				}
4429:..\FreeRTOS9/tasks.c **** 				else
4430:..\FreeRTOS9/tasks.c **** 				{
4431:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:..\FreeRTOS9/tasks.c **** 				}
4433:..\FreeRTOS9/tasks.c **** 			}
4434:..\FreeRTOS9/tasks.c **** 			else
4435:..\FreeRTOS9/tasks.c **** 			{
4436:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:..\FreeRTOS9/tasks.c **** 			}
4438:..\FreeRTOS9/tasks.c **** 		}
4439:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4440:..\FreeRTOS9/tasks.c **** 
4441:..\FreeRTOS9/tasks.c **** 		return xReturn;
4442:..\FreeRTOS9/tasks.c **** 	}
4443:..\FreeRTOS9/tasks.c **** 
4444:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4446:..\FreeRTOS9/tasks.c **** 
4447:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:..\FreeRTOS9/tasks.c **** 
4449:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:..\FreeRTOS9/tasks.c **** 	{
4451:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
4452:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:..\FreeRTOS9/tasks.c **** 
4456:..\FreeRTOS9/tasks.c **** 		configASSERT( xTaskToNotify );
4457:..\FreeRTOS9/tasks.c **** 
4458:..\FreeRTOS9/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:..\FreeRTOS9/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:..\FreeRTOS9/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:..\FreeRTOS9/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:..\FreeRTOS9/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:..\FreeRTOS9/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:..\FreeRTOS9/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:..\FreeRTOS9/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:..\FreeRTOS9/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:..\FreeRTOS9/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:..\FreeRTOS9/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:..\FreeRTOS9/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:..\FreeRTOS9/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:..\FreeRTOS9/tasks.c **** 		provided on the following link:
4473:..\FreeRTOS9/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 91


4475:..\FreeRTOS9/tasks.c **** 
4476:..\FreeRTOS9/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:..\FreeRTOS9/tasks.c **** 
4478:..\FreeRTOS9/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:..\FreeRTOS9/tasks.c **** 		{
4480:..\FreeRTOS9/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:..\FreeRTOS9/tasks.c **** 			{
4482:..\FreeRTOS9/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:..\FreeRTOS9/tasks.c **** 			}
4484:..\FreeRTOS9/tasks.c **** 
4485:..\FreeRTOS9/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:..\FreeRTOS9/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:..\FreeRTOS9/tasks.c **** 
4488:..\FreeRTOS9/tasks.c **** 			switch( eAction )
4489:..\FreeRTOS9/tasks.c **** 			{
4490:..\FreeRTOS9/tasks.c **** 				case eSetBits	:
4491:..\FreeRTOS9/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:..\FreeRTOS9/tasks.c **** 					break;
4493:..\FreeRTOS9/tasks.c **** 
4494:..\FreeRTOS9/tasks.c **** 				case eIncrement	:
4495:..\FreeRTOS9/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:..\FreeRTOS9/tasks.c **** 					break;
4497:..\FreeRTOS9/tasks.c **** 
4498:..\FreeRTOS9/tasks.c **** 				case eSetValueWithOverwrite	:
4499:..\FreeRTOS9/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:..\FreeRTOS9/tasks.c **** 					break;
4501:..\FreeRTOS9/tasks.c **** 
4502:..\FreeRTOS9/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:..\FreeRTOS9/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:..\FreeRTOS9/tasks.c **** 					{
4505:..\FreeRTOS9/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:..\FreeRTOS9/tasks.c **** 					}
4507:..\FreeRTOS9/tasks.c **** 					else
4508:..\FreeRTOS9/tasks.c **** 					{
4509:..\FreeRTOS9/tasks.c **** 						/* The value could not be written to the task. */
4510:..\FreeRTOS9/tasks.c **** 						xReturn = pdFAIL;
4511:..\FreeRTOS9/tasks.c **** 					}
4512:..\FreeRTOS9/tasks.c **** 					break;
4513:..\FreeRTOS9/tasks.c **** 
4514:..\FreeRTOS9/tasks.c **** 				case eNoAction :
4515:..\FreeRTOS9/tasks.c **** 					/* The task is being notified without its notify value being
4516:..\FreeRTOS9/tasks.c **** 					updated. */
4517:..\FreeRTOS9/tasks.c **** 					break;
4518:..\FreeRTOS9/tasks.c **** 			}
4519:..\FreeRTOS9/tasks.c **** 
4520:..\FreeRTOS9/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:..\FreeRTOS9/tasks.c **** 
4522:..\FreeRTOS9/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:..\FreeRTOS9/tasks.c **** 			notification then unblock it now. */
4524:..\FreeRTOS9/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:..\FreeRTOS9/tasks.c **** 			{
4526:..\FreeRTOS9/tasks.c **** 				/* The task should not have been on an event list. */
4527:..\FreeRTOS9/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:..\FreeRTOS9/tasks.c **** 
4529:..\FreeRTOS9/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:..\FreeRTOS9/tasks.c **** 				{
4531:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 92


4532:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:..\FreeRTOS9/tasks.c **** 				}
4534:..\FreeRTOS9/tasks.c **** 				else
4535:..\FreeRTOS9/tasks.c **** 				{
4536:..\FreeRTOS9/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:..\FreeRTOS9/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:..\FreeRTOS9/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:..\FreeRTOS9/tasks.c **** 				}
4540:..\FreeRTOS9/tasks.c **** 
4541:..\FreeRTOS9/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:..\FreeRTOS9/tasks.c **** 				{
4543:..\FreeRTOS9/tasks.c **** 					/* The notified task has a priority above the currently
4544:..\FreeRTOS9/tasks.c **** 					executing task so a yield is required. */
4545:..\FreeRTOS9/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:..\FreeRTOS9/tasks.c **** 					{
4547:..\FreeRTOS9/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:..\FreeRTOS9/tasks.c **** 					}
4549:..\FreeRTOS9/tasks.c **** 					else
4550:..\FreeRTOS9/tasks.c **** 					{
4551:..\FreeRTOS9/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:..\FreeRTOS9/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:..\FreeRTOS9/tasks.c **** 						safe FreeRTOS function. */
4554:..\FreeRTOS9/tasks.c **** 						xYieldPending = pdTRUE;
4555:..\FreeRTOS9/tasks.c **** 					}
4556:..\FreeRTOS9/tasks.c **** 				}
4557:..\FreeRTOS9/tasks.c **** 				else
4558:..\FreeRTOS9/tasks.c **** 				{
4559:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:..\FreeRTOS9/tasks.c **** 				}
4561:..\FreeRTOS9/tasks.c **** 			}
4562:..\FreeRTOS9/tasks.c **** 		}
4563:..\FreeRTOS9/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:..\FreeRTOS9/tasks.c **** 
4565:..\FreeRTOS9/tasks.c **** 		return xReturn;
4566:..\FreeRTOS9/tasks.c **** 	}
4567:..\FreeRTOS9/tasks.c **** 
4568:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4570:..\FreeRTOS9/tasks.c **** 
4571:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:..\FreeRTOS9/tasks.c **** 
4573:..\FreeRTOS9/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:..\FreeRTOS9/tasks.c **** 	{
4575:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
4576:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:..\FreeRTOS9/tasks.c **** 
4579:..\FreeRTOS9/tasks.c **** 		configASSERT( xTaskToNotify );
4580:..\FreeRTOS9/tasks.c **** 
4581:..\FreeRTOS9/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:..\FreeRTOS9/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:..\FreeRTOS9/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:..\FreeRTOS9/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:..\FreeRTOS9/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:..\FreeRTOS9/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:..\FreeRTOS9/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 93


4589:..\FreeRTOS9/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:..\FreeRTOS9/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:..\FreeRTOS9/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:..\FreeRTOS9/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:..\FreeRTOS9/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:..\FreeRTOS9/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:..\FreeRTOS9/tasks.c **** 		provided on the following link:
4596:..\FreeRTOS9/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:..\FreeRTOS9/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:..\FreeRTOS9/tasks.c **** 
4599:..\FreeRTOS9/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:..\FreeRTOS9/tasks.c **** 
4601:..\FreeRTOS9/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:..\FreeRTOS9/tasks.c **** 		{
4603:..\FreeRTOS9/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:..\FreeRTOS9/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:..\FreeRTOS9/tasks.c **** 
4606:..\FreeRTOS9/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:..\FreeRTOS9/tasks.c **** 			semaphore. */
4608:..\FreeRTOS9/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:..\FreeRTOS9/tasks.c **** 
4610:..\FreeRTOS9/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:..\FreeRTOS9/tasks.c **** 
4612:..\FreeRTOS9/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:..\FreeRTOS9/tasks.c **** 			notification then unblock it now. */
4614:..\FreeRTOS9/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:..\FreeRTOS9/tasks.c **** 			{
4616:..\FreeRTOS9/tasks.c **** 				/* The task should not have been on an event list. */
4617:..\FreeRTOS9/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:..\FreeRTOS9/tasks.c **** 
4619:..\FreeRTOS9/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:..\FreeRTOS9/tasks.c **** 				{
4621:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:..\FreeRTOS9/tasks.c **** 				}
4624:..\FreeRTOS9/tasks.c **** 				else
4625:..\FreeRTOS9/tasks.c **** 				{
4626:..\FreeRTOS9/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:..\FreeRTOS9/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:..\FreeRTOS9/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:..\FreeRTOS9/tasks.c **** 				}
4630:..\FreeRTOS9/tasks.c **** 
4631:..\FreeRTOS9/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:..\FreeRTOS9/tasks.c **** 				{
4633:..\FreeRTOS9/tasks.c **** 					/* The notified task has a priority above the currently
4634:..\FreeRTOS9/tasks.c **** 					executing task so a yield is required. */
4635:..\FreeRTOS9/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:..\FreeRTOS9/tasks.c **** 					{
4637:..\FreeRTOS9/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:..\FreeRTOS9/tasks.c **** 					}
4639:..\FreeRTOS9/tasks.c **** 					else
4640:..\FreeRTOS9/tasks.c **** 					{
4641:..\FreeRTOS9/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:..\FreeRTOS9/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:..\FreeRTOS9/tasks.c **** 						safe FreeRTOS function. */
4644:..\FreeRTOS9/tasks.c **** 						xYieldPending = pdTRUE;
4645:..\FreeRTOS9/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 94


4646:..\FreeRTOS9/tasks.c **** 				}
4647:..\FreeRTOS9/tasks.c **** 				else
4648:..\FreeRTOS9/tasks.c **** 				{
4649:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:..\FreeRTOS9/tasks.c **** 				}
4651:..\FreeRTOS9/tasks.c **** 			}
4652:..\FreeRTOS9/tasks.c **** 		}
4653:..\FreeRTOS9/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:..\FreeRTOS9/tasks.c **** 	}
4655:..\FreeRTOS9/tasks.c **** 
4656:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:..\FreeRTOS9/tasks.c **** 
4658:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4659:..\FreeRTOS9/tasks.c **** 
4660:..\FreeRTOS9/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:..\FreeRTOS9/tasks.c **** 
4662:..\FreeRTOS9/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:..\FreeRTOS9/tasks.c **** 	{
4664:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
4665:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
4666:..\FreeRTOS9/tasks.c **** 
4667:..\FreeRTOS9/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:..\FreeRTOS9/tasks.c **** 		its notification state cleared. */
4669:..\FreeRTOS9/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:..\FreeRTOS9/tasks.c **** 
4671:..\FreeRTOS9/tasks.c **** 		taskENTER_CRITICAL();
4672:..\FreeRTOS9/tasks.c **** 		{
4673:..\FreeRTOS9/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:..\FreeRTOS9/tasks.c **** 			{
4675:..\FreeRTOS9/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:..\FreeRTOS9/tasks.c **** 				xReturn = pdPASS;
4677:..\FreeRTOS9/tasks.c **** 			}
4678:..\FreeRTOS9/tasks.c **** 			else
4679:..\FreeRTOS9/tasks.c **** 			{
4680:..\FreeRTOS9/tasks.c **** 				xReturn = pdFAIL;
4681:..\FreeRTOS9/tasks.c **** 			}
4682:..\FreeRTOS9/tasks.c **** 		}
4683:..\FreeRTOS9/tasks.c **** 		taskEXIT_CRITICAL();
4684:..\FreeRTOS9/tasks.c **** 
4685:..\FreeRTOS9/tasks.c **** 		return xReturn;
4686:..\FreeRTOS9/tasks.c **** 	}
4687:..\FreeRTOS9/tasks.c **** 
4688:..\FreeRTOS9/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
4690:..\FreeRTOS9/tasks.c **** 
4691:..\FreeRTOS9/tasks.c **** 
4692:..\FreeRTOS9/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:..\FreeRTOS9/tasks.c **** {
 589              		.loc 1 4693 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593              	.LVL62:
 594 0000 70B5     		push	{r4, r5, r6, lr}
 595              		.cfi_def_cfa_offset 16
 596              		.cfi_offset 4, -16
 597              		.cfi_offset 5, -12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 95


 598              		.cfi_offset 6, -8
 599              		.cfi_offset 14, -4
 600 0002 0400     		movs	r4, r0
 601 0004 0D00     		movs	r5, r1
4694:..\FreeRTOS9/tasks.c **** TickType_t xTimeToWake;
4695:..\FreeRTOS9/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 602              		.loc 1 4695 0
 603 0006 154B     		ldr	r3, .L50
 604 0008 9E6E     		ldr	r6, [r3, #104]
 605              	.LVL63:
4696:..\FreeRTOS9/tasks.c **** 
4697:..\FreeRTOS9/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:..\FreeRTOS9/tasks.c **** 	{
4699:..\FreeRTOS9/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:..\FreeRTOS9/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:..\FreeRTOS9/tasks.c **** 		when the task leaves the Blocked state. */
4702:..\FreeRTOS9/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:..\FreeRTOS9/tasks.c **** 	}
4704:..\FreeRTOS9/tasks.c **** 	#endif
4705:..\FreeRTOS9/tasks.c **** 
4706:..\FreeRTOS9/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:..\FreeRTOS9/tasks.c **** 	as the same list item is used for both lists. */
4708:..\FreeRTOS9/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 606              		.loc 1 4708 0
 607 000a 986D     		ldr	r0, [r3, #88]
 608              	.LVL64:
 609 000c 0430     		adds	r0, r0, #4
 610 000e FFF7FEFF 		bl	uxListRemove
 611              	.LVL65:
4709:..\FreeRTOS9/tasks.c **** 	{
4710:..\FreeRTOS9/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:..\FreeRTOS9/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:..\FreeRTOS9/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4713:..\FreeRTOS9/tasks.c **** 	}
4714:..\FreeRTOS9/tasks.c **** 	else
4715:..\FreeRTOS9/tasks.c **** 	{
4716:..\FreeRTOS9/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:..\FreeRTOS9/tasks.c **** 	}
4718:..\FreeRTOS9/tasks.c **** 
4719:..\FreeRTOS9/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:..\FreeRTOS9/tasks.c **** 	{
4721:..\FreeRTOS9/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 612              		.loc 1 4721 0
 613 0012 631C     		adds	r3, r4, #1
 614 0014 08D1     		bne	.L47
 615              		.loc 1 4721 0 is_stmt 0 discriminator 1
 616 0016 002D     		cmp	r5, #0
 617 0018 06D0     		beq	.L47
4722:..\FreeRTOS9/tasks.c **** 		{
4723:..\FreeRTOS9/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:..\FreeRTOS9/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:..\FreeRTOS9/tasks.c **** 			indefinitely. */
4726:..\FreeRTOS9/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 618              		.loc 1 4726 0 is_stmt 1
 619 001a 104B     		ldr	r3, .L50
 620 001c 996D     		ldr	r1, [r3, #88]
 621 001e 0431     		adds	r1, r1, #4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 96


 622 0020 0F48     		ldr	r0, .L50+4
 623 0022 FFF7FEFF 		bl	vListInsertEnd
 624              	.LVL66:
 625 0026 18E0     		b	.L46
 626              	.L47:
4727:..\FreeRTOS9/tasks.c **** 		}
4728:..\FreeRTOS9/tasks.c **** 		else
4729:..\FreeRTOS9/tasks.c **** 		{
4730:..\FreeRTOS9/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:..\FreeRTOS9/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:..\FreeRTOS9/tasks.c **** 			kernel will manage it correctly. */
4733:..\FreeRTOS9/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 627              		.loc 1 4733 0
 628 0028 3419     		adds	r4, r6, r4
 629              	.LVL67:
4734:..\FreeRTOS9/tasks.c **** 
4735:..\FreeRTOS9/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:..\FreeRTOS9/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 630              		.loc 1 4736 0
 631 002a 0C4B     		ldr	r3, .L50
 632 002c 9B6D     		ldr	r3, [r3, #88]
 633 002e 5C60     		str	r4, [r3, #4]
4737:..\FreeRTOS9/tasks.c **** 
4738:..\FreeRTOS9/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 634              		.loc 1 4738 0
 635 0030 A642     		cmp	r6, r4
 636 0032 06D9     		bls	.L49
4739:..\FreeRTOS9/tasks.c **** 			{
4740:..\FreeRTOS9/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:..\FreeRTOS9/tasks.c **** 				list. */
4742:..\FreeRTOS9/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 637              		.loc 1 4742 0
 638 0034 094B     		ldr	r3, .L50
 639 0036 186D     		ldr	r0, [r3, #80]
 640 0038 996D     		ldr	r1, [r3, #88]
 641 003a 0431     		adds	r1, r1, #4
 642 003c FFF7FEFF 		bl	vListInsert
 643              	.LVL68:
 644 0040 0BE0     		b	.L46
 645              	.L49:
4743:..\FreeRTOS9/tasks.c **** 			}
4744:..\FreeRTOS9/tasks.c **** 			else
4745:..\FreeRTOS9/tasks.c **** 			{
4746:..\FreeRTOS9/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:..\FreeRTOS9/tasks.c **** 				is used. */
4748:..\FreeRTOS9/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 646              		.loc 1 4748 0
 647 0042 074D     		ldr	r5, .L50+4
 648              	.LVL69:
 649 0044 A86A     		ldr	r0, [r5, #40]
 650 0046 054B     		ldr	r3, .L50
 651 0048 996D     		ldr	r1, [r3, #88]
 652 004a 0431     		adds	r1, r1, #4
 653 004c FFF7FEFF 		bl	vListInsert
 654              	.LVL70:
4749:..\FreeRTOS9/tasks.c **** 
4750:..\FreeRTOS9/tasks.c **** 				/* If the task entering the blocked state was placed at the
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 97


4751:..\FreeRTOS9/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:..\FreeRTOS9/tasks.c **** 				needs to be updated too. */
4753:..\FreeRTOS9/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 655              		.loc 1 4753 0
 656 0050 EB6A     		ldr	r3, [r5, #44]
 657 0052 9C42     		cmp	r4, r3
 658 0054 01D2     		bcs	.L46
4754:..\FreeRTOS9/tasks.c **** 				{
4755:..\FreeRTOS9/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 659              		.loc 1 4755 0
 660 0056 024B     		ldr	r3, .L50+4
 661 0058 DC62     		str	r4, [r3, #44]
 662              	.LVL71:
 663              	.L46:
4756:..\FreeRTOS9/tasks.c **** 				}
4757:..\FreeRTOS9/tasks.c **** 				else
4758:..\FreeRTOS9/tasks.c **** 				{
4759:..\FreeRTOS9/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:..\FreeRTOS9/tasks.c **** 				}
4761:..\FreeRTOS9/tasks.c **** 			}
4762:..\FreeRTOS9/tasks.c **** 		}
4763:..\FreeRTOS9/tasks.c **** 	}
4764:..\FreeRTOS9/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:..\FreeRTOS9/tasks.c **** 	{
4766:..\FreeRTOS9/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:..\FreeRTOS9/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:..\FreeRTOS9/tasks.c **** 		will manage it correctly. */
4769:..\FreeRTOS9/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:..\FreeRTOS9/tasks.c **** 
4771:..\FreeRTOS9/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:..\FreeRTOS9/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:..\FreeRTOS9/tasks.c **** 
4774:..\FreeRTOS9/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:..\FreeRTOS9/tasks.c **** 		{
4776:..\FreeRTOS9/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:..\FreeRTOS9/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:..\FreeRTOS9/tasks.c **** 		}
4779:..\FreeRTOS9/tasks.c **** 		else
4780:..\FreeRTOS9/tasks.c **** 		{
4781:..\FreeRTOS9/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:..\FreeRTOS9/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:..\FreeRTOS9/tasks.c **** 
4784:..\FreeRTOS9/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:..\FreeRTOS9/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:..\FreeRTOS9/tasks.c **** 			too. */
4787:..\FreeRTOS9/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:..\FreeRTOS9/tasks.c **** 			{
4789:..\FreeRTOS9/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:..\FreeRTOS9/tasks.c **** 			}
4791:..\FreeRTOS9/tasks.c **** 			else
4792:..\FreeRTOS9/tasks.c **** 			{
4793:..\FreeRTOS9/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:..\FreeRTOS9/tasks.c **** 			}
4795:..\FreeRTOS9/tasks.c **** 		}
4796:..\FreeRTOS9/tasks.c **** 
4797:..\FreeRTOS9/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:..\FreeRTOS9/tasks.c **** 		( void ) xCanBlockIndefinitely;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 98


4799:..\FreeRTOS9/tasks.c **** 	}
4800:..\FreeRTOS9/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:..\FreeRTOS9/tasks.c **** }
 664              		.loc 1 4801 0
 665              		@ sp needed
 666              	.LVL72:
 667 005a 70BD     		pop	{r4, r5, r6, pc}
 668              	.L51:
 669              		.align	2
 670              	.L50:
 671 005c 80000000 		.word	.LANCHOR1
 672 0060 00000000 		.word	.LANCHOR0
 673              		.cfi_endproc
 674              	.LFE84:
 675              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 676              		.section	.text.xTaskCreate,"ax",%progbits
 677              		.align	2
 678              		.global	xTaskCreate
 679              		.code	16
 680              		.thumb_func
 681              		.type	xTaskCreate, %function
 682              	xTaskCreate:
 683              	.LFB32:
 682:..\FreeRTOS9/tasks.c **** 	TCB_t *pxNewTCB;
 684              		.loc 1 682 0
 685              		.cfi_startproc
 686              		@ args = 8, pretend = 0, frame = 8
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL73:
 689 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 690              		.cfi_def_cfa_offset 20
 691              		.cfi_offset 4, -20
 692              		.cfi_offset 5, -16
 693              		.cfi_offset 6, -12
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 696 0002 87B0     		sub	sp, sp, #28
 697              		.cfi_def_cfa_offset 48
 698 0004 0490     		str	r0, [sp, #16]
 699 0006 0591     		str	r1, [sp, #20]
 700 0008 1400     		movs	r4, r2
 701 000a 1F00     		movs	r7, r3
 702              	.LBB2:
 716:..\FreeRTOS9/tasks.c **** 
 703              		.loc 1 716 0
 704 000c 9000     		lsls	r0, r2, #2
 705              	.LVL74:
 706 000e FFF7FEFF 		bl	pvPortMalloc
 707              	.LVL75:
 708 0012 061E     		subs	r6, r0, #0
 709              	.LVL76:
 718:..\FreeRTOS9/tasks.c **** 			{
 710              		.loc 1 718 0
 711 0014 0AD0     		beq	.L56
 721:..\FreeRTOS9/tasks.c **** 
 712              		.loc 1 721 0
 713 0016 6820     		movs	r0, #104
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 99


 714              	.LVL77:
 715 0018 FFF7FEFF 		bl	pvPortMalloc
 716              	.LVL78:
 717 001c 051E     		subs	r5, r0, #0
 718              	.LVL79:
 723:..\FreeRTOS9/tasks.c **** 				{
 719              		.loc 1 723 0
 720 001e 01D0     		beq	.L54
 726:..\FreeRTOS9/tasks.c **** 				}
 721              		.loc 1 726 0
 722 0020 0663     		str	r6, [r0, #48]
 723 0022 04E0     		b	.L53
 724              	.L54:
 732:..\FreeRTOS9/tasks.c **** 				}
 725              		.loc 1 732 0
 726 0024 3000     		movs	r0, r6
 727              	.LVL80:
 728 0026 FFF7FEFF 		bl	vPortFree
 729              	.LVL81:
 730 002a 00E0     		b	.L53
 731              	.LVL82:
 732              	.L56:
 737:..\FreeRTOS9/tasks.c **** 			}
 733              		.loc 1 737 0
 734 002c 0025     		movs	r5, #0
 735              	.LVL83:
 736              	.L53:
 737              	.LBE2:
 742:..\FreeRTOS9/tasks.c **** 		{
 738              		.loc 1 742 0
 739 002e 002D     		cmp	r5, #0
 740 0030 11D0     		beq	.L57
 752:..\FreeRTOS9/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 741              		.loc 1 752 0
 742 0032 0023     		movs	r3, #0
 743 0034 0393     		str	r3, [sp, #12]
 744 0036 0295     		str	r5, [sp, #8]
 745 0038 0D9B     		ldr	r3, [sp, #52]
 746 003a 0193     		str	r3, [sp, #4]
 747 003c 0C9B     		ldr	r3, [sp, #48]
 748 003e 0093     		str	r3, [sp]
 749 0040 3B00     		movs	r3, r7
 750 0042 2200     		movs	r2, r4
 751 0044 0599     		ldr	r1, [sp, #20]
 752 0046 0498     		ldr	r0, [sp, #16]
 753 0048 FFF7FEFF 		bl	prvInitialiseNewTask
 754              	.LVL84:
 753:..\FreeRTOS9/tasks.c **** 			xReturn = pdPASS;
 755              		.loc 1 753 0
 756 004c 2800     		movs	r0, r5
 757 004e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 758              	.LVL85:
 754:..\FreeRTOS9/tasks.c **** 		}
 759              		.loc 1 754 0
 760 0052 0120     		movs	r0, #1
 761 0054 01E0     		b	.L55
 762              	.LVL86:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 100


 763              	.L57:
 758:..\FreeRTOS9/tasks.c **** 		}
 764              		.loc 1 758 0
 765 0056 0120     		movs	r0, #1
 766 0058 4042     		rsbs	r0, r0, #0
 767              	.L55:
 768              	.LVL87:
 762:..\FreeRTOS9/tasks.c **** 
 769              		.loc 1 762 0
 770 005a 07B0     		add	sp, sp, #28
 771              		@ sp needed
 772              	.LVL88:
 773              	.LVL89:
 774              	.LVL90:
 775 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 776              		.cfi_endproc
 777              	.LFE32:
 778              		.size	xTaskCreate, .-xTaskCreate
 779 005e C046     		.section	.text.vTaskDelete,"ax",%progbits
 780              		.align	2
 781              		.global	vTaskDelete
 782              		.code	16
 783              		.thumb_func
 784              		.type	vTaskDelete, %function
 785              	vTaskDelete:
 786              	.LFB35:
1049:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 787              		.loc 1 1049 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              	.LVL91:
 792 0000 70B5     		push	{r4, r5, r6, lr}
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 6, -8
 797              		.cfi_offset 14, -4
 798 0002 0400     		movs	r4, r0
1052:..\FreeRTOS9/tasks.c **** 		{
 799              		.loc 1 1052 0
 800 0004 FFF7FEFF 		bl	vPortEnterCritical
 801              	.LVL92:
1056:..\FreeRTOS9/tasks.c **** 
 802              		.loc 1 1056 0
 803 0008 002C     		cmp	r4, #0
 804 000a 01D1     		bne	.L59
1056:..\FreeRTOS9/tasks.c **** 
 805              		.loc 1 1056 0 is_stmt 0 discriminator 1
 806 000c 194B     		ldr	r3, .L64
 807 000e 9C6D     		ldr	r4, [r3, #88]
 808              	.LVL93:
 809              	.L59:
1059:..\FreeRTOS9/tasks.c **** 			{
 810              		.loc 1 1059 0 is_stmt 1 discriminator 4
 811 0010 251D     		adds	r5, r4, #4
 812 0012 2800     		movs	r0, r5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 101


 813 0014 FFF7FEFF 		bl	uxListRemove
 814              	.LVL94:
1069:..\FreeRTOS9/tasks.c **** 			{
 815              		.loc 1 1069 0 discriminator 4
 816 0018 A36A     		ldr	r3, [r4, #40]
 817 001a 002B     		cmp	r3, #0
 818 001c 03D0     		beq	.L60
1071:..\FreeRTOS9/tasks.c **** 			}
 819              		.loc 1 1071 0
 820 001e 2000     		movs	r0, r4
 821 0020 1830     		adds	r0, r0, #24
 822 0022 FFF7FEFF 		bl	uxListRemove
 823              	.LVL95:
 824              	.L60:
1082:..\FreeRTOS9/tasks.c **** 
 825              		.loc 1 1082 0
 826 0026 134B     		ldr	r3, .L64
 827 0028 1A6E     		ldr	r2, [r3, #96]
 828 002a 0132     		adds	r2, r2, #1
 829 002c 1A66     		str	r2, [r3, #96]
1084:..\FreeRTOS9/tasks.c **** 			{
 830              		.loc 1 1084 0
 831 002e 9B6D     		ldr	r3, [r3, #88]
 832 0030 9C42     		cmp	r4, r3
 833 0032 09D1     		bne	.L61
1091:..\FreeRTOS9/tasks.c **** 
 834              		.loc 1 1091 0
 835 0034 0F4E     		ldr	r6, .L64
 836 0036 3000     		movs	r0, r6
 837 0038 3C30     		adds	r0, r0, #60
 838 003a 2900     		movs	r1, r5
 839 003c FFF7FEFF 		bl	vListInsertEnd
 840              	.LVL96:
1096:..\FreeRTOS9/tasks.c **** 
 841              		.loc 1 1096 0
 842 0040 F36E     		ldr	r3, [r6, #108]
 843 0042 0133     		adds	r3, r3, #1
 844 0044 F366     		str	r3, [r6, #108]
 845 0046 08E0     		b	.L62
 846              	.L61:
1107:..\FreeRTOS9/tasks.c **** 				prvDeleteTCB( pxTCB );
 847              		.loc 1 1107 0
 848 0048 0A4A     		ldr	r2, .L64
 849 004a 536D     		ldr	r3, [r2, #84]
 850 004c 013B     		subs	r3, r3, #1
 851 004e 5365     		str	r3, [r2, #84]
1108:..\FreeRTOS9/tasks.c **** 
 852              		.loc 1 1108 0
 853 0050 2000     		movs	r0, r4
 854 0052 FFF7FEFF 		bl	prvDeleteTCB
 855              	.LVL97:
1112:..\FreeRTOS9/tasks.c **** 			}
 856              		.loc 1 1112 0
 857 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 858              	.LVL98:
 859              	.L62:
1117:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 102


 860              		.loc 1 1117 0
 861 005a FFF7FEFF 		bl	vPortExitCritical
 862              	.LVL99:
1121:..\FreeRTOS9/tasks.c **** 		{
 863              		.loc 1 1121 0
 864 005e 054B     		ldr	r3, .L64
 865 0060 DB6D     		ldr	r3, [r3, #92]
 866 0062 002B     		cmp	r3, #0
 867 0064 05D0     		beq	.L58
1123:..\FreeRTOS9/tasks.c **** 			{
 868              		.loc 1 1123 0
 869 0066 034B     		ldr	r3, .L64
 870 0068 9B6D     		ldr	r3, [r3, #88]
 871 006a 9C42     		cmp	r4, r3
 872 006c 01D1     		bne	.L58
1126:..\FreeRTOS9/tasks.c **** 			}
 873              		.loc 1 1126 0
 874 006e FFF7FEFF 		bl	vPortYield
 875              	.LVL100:
 876              	.L58:
1133:..\FreeRTOS9/tasks.c **** 
 877              		.loc 1 1133 0
 878              		@ sp needed
 879              	.LVL101:
 880              	.LVL102:
 881 0072 70BD     		pop	{r4, r5, r6, pc}
 882              	.L65:
 883              		.align	2
 884              	.L64:
 885 0074 80000000 		.word	.LANCHOR1
 886              		.cfi_endproc
 887              	.LFE35:
 888              		.size	vTaskDelete, .-vTaskDelete
 889              		.section	.text.eTaskGetState,"ax",%progbits
 890              		.align	2
 891              		.global	eTaskGetState
 892              		.code	16
 893              		.thumb_func
 894              		.type	eTaskGetState, %function
 895              	eTaskGetState:
 896              	.LFB38:
1270:..\FreeRTOS9/tasks.c **** 	eTaskState eReturn;
 897              		.loc 1 1270 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901              	.LVL103:
 902 0000 70B5     		push	{r4, r5, r6, lr}
 903              		.cfi_def_cfa_offset 16
 904              		.cfi_offset 4, -16
 905              		.cfi_offset 5, -12
 906              		.cfi_offset 6, -8
 907              		.cfi_offset 14, -4
 908 0002 0500     		movs	r5, r0
 909              	.LVL104:
1277:..\FreeRTOS9/tasks.c **** 		{
 910              		.loc 1 1277 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 103


 911 0004 164B     		ldr	r3, .L75
 912 0006 9B6D     		ldr	r3, [r3, #88]
 913 0008 9842     		cmp	r0, r3
 914 000a 1CD0     		beq	.L69
1284:..\FreeRTOS9/tasks.c **** 			{
 915              		.loc 1 1284 0
 916 000c FFF7FEFF 		bl	vPortEnterCritical
 917              	.LVL105:
1286:..\FreeRTOS9/tasks.c **** 			}
 918              		.loc 1 1286 0
 919 0010 6C69     		ldr	r4, [r5, #20]
 920              	.LVL106:
1288:..\FreeRTOS9/tasks.c **** 
 921              		.loc 1 1288 0
 922 0012 FFF7FEFF 		bl	vPortExitCritical
 923              	.LVL107:
1290:..\FreeRTOS9/tasks.c **** 			{
 924              		.loc 1 1290 0
 925 0016 134B     		ldr	r3, .L75+4
 926 0018 9B6A     		ldr	r3, [r3, #40]
 927 001a 9C42     		cmp	r4, r3
 928 001c 15D0     		beq	.L70
1290:..\FreeRTOS9/tasks.c **** 			{
 929              		.loc 1 1290 0 is_stmt 0 discriminator 1
 930 001e 104B     		ldr	r3, .L75
 931 0020 1B6D     		ldr	r3, [r3, #80]
 932 0022 9C42     		cmp	r4, r3
 933 0024 13D0     		beq	.L71
1298:..\FreeRTOS9/tasks.c **** 				{
 934              		.loc 1 1298 0 is_stmt 1
 935 0026 0F4B     		ldr	r3, .L75+4
 936 0028 9C42     		cmp	r4, r3
 937 002a 04D1     		bne	.L68
1303:..\FreeRTOS9/tasks.c **** 					{
 938              		.loc 1 1303 0
 939 002c AB6A     		ldr	r3, [r5, #40]
 940 002e 002B     		cmp	r3, #0
 941 0030 0FD1     		bne	.L72
1305:..\FreeRTOS9/tasks.c **** 					}
 942              		.loc 1 1305 0
 943 0032 0320     		movs	r0, #3
 944 0034 12E0     		b	.L67
 945              	.L68:
1315:..\FreeRTOS9/tasks.c **** 				{
 946              		.loc 1 1315 0
 947 0036 0A4B     		ldr	r3, .L75
 948 0038 3C33     		adds	r3, r3, #60
 949 003a 9C42     		cmp	r4, r3
 950 003c 0BD0     		beq	.L73
1315:..\FreeRTOS9/tasks.c **** 				{
 951              		.loc 1 1315 0 is_stmt 0 discriminator 1
 952 003e 002C     		cmp	r4, #0
 953 0040 0BD1     		bne	.L74
1320:..\FreeRTOS9/tasks.c **** 				}
 954              		.loc 1 1320 0 is_stmt 1
 955 0042 0420     		movs	r0, #4
 956 0044 0AE0     		b	.L67
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 104


 957              	.LVL108:
 958              	.L69:
1280:..\FreeRTOS9/tasks.c **** 		}
 959              		.loc 1 1280 0
 960 0046 0020     		movs	r0, #0
 961              	.LVL109:
 962 0048 08E0     		b	.L67
 963              	.LVL110:
 964              	.L70:
1294:..\FreeRTOS9/tasks.c **** 			}
 965              		.loc 1 1294 0
 966 004a 0220     		movs	r0, #2
 967 004c 06E0     		b	.L67
 968              	.L71:
 969 004e 0220     		movs	r0, #2
 970 0050 04E0     		b	.L67
 971              	.L72:
1309:..\FreeRTOS9/tasks.c **** 					}
 972              		.loc 1 1309 0
 973 0052 0220     		movs	r0, #2
 974 0054 02E0     		b	.L67
 975              	.L73:
1320:..\FreeRTOS9/tasks.c **** 				}
 976              		.loc 1 1320 0
 977 0056 0420     		movs	r0, #4
 978 0058 00E0     		b	.L67
 979              	.L74:
1328:..\FreeRTOS9/tasks.c **** 			}
 980              		.loc 1 1328 0
 981 005a 0120     		movs	r0, #1
 982              	.LVL111:
 983              	.L67:
1333:..\FreeRTOS9/tasks.c **** 
 984              		.loc 1 1333 0
 985              		@ sp needed
 986              	.LVL112:
 987 005c 70BD     		pop	{r4, r5, r6, pc}
 988              	.L76:
 989 005e C046     		.align	2
 990              	.L75:
 991 0060 80000000 		.word	.LANCHOR1
 992 0064 00000000 		.word	.LANCHOR0
 993              		.cfi_endproc
 994              	.LFE38:
 995              		.size	eTaskGetState, .-eTaskGetState
 996              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 997              		.align	2
 998              		.global	uxTaskPriorityGet
 999              		.code	16
 1000              		.thumb_func
 1001              		.type	uxTaskPriorityGet, %function
 1002              	uxTaskPriorityGet:
 1003              	.LFB39:
1341:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 1004              		.loc 1 1341 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 105


 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008              	.LVL113:
 1009 0000 10B5     		push	{r4, lr}
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 1013 0002 0400     		movs	r4, r0
1345:..\FreeRTOS9/tasks.c **** 		{
 1014              		.loc 1 1345 0
 1015 0004 FFF7FEFF 		bl	vPortEnterCritical
 1016              	.LVL114:
1349:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1017              		.loc 1 1349 0
 1018 0008 002C     		cmp	r4, #0
 1019 000a 01D1     		bne	.L78
1349:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1020              		.loc 1 1349 0 is_stmt 0 discriminator 1
 1021 000c 034B     		ldr	r3, .L79
 1022 000e 9C6D     		ldr	r4, [r3, #88]
 1023              	.LVL115:
 1024              	.L78:
1350:..\FreeRTOS9/tasks.c **** 		}
 1025              		.loc 1 1350 0 is_stmt 1 discriminator 4
 1026 0010 E46A     		ldr	r4, [r4, #44]
 1027              	.LVL116:
1352:..\FreeRTOS9/tasks.c **** 
 1028              		.loc 1 1352 0 discriminator 4
 1029 0012 FFF7FEFF 		bl	vPortExitCritical
 1030              	.LVL117:
1355:..\FreeRTOS9/tasks.c **** 
 1031              		.loc 1 1355 0 discriminator 4
 1032 0016 2000     		movs	r0, r4
 1033              		@ sp needed
 1034              	.LVL118:
 1035 0018 10BD     		pop	{r4, pc}
 1036              	.L80:
 1037 001a C046     		.align	2
 1038              	.L79:
 1039 001c 80000000 		.word	.LANCHOR1
 1040              		.cfi_endproc
 1041              	.LFE39:
 1042              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1043              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1044              		.align	2
 1045              		.global	uxTaskPriorityGetFromISR
 1046              		.code	16
 1047              		.thumb_func
 1048              		.type	uxTaskPriorityGetFromISR, %function
 1049              	uxTaskPriorityGetFromISR:
 1050              	.LFB40:
1363:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 1051              		.loc 1 1363 0
 1052              		.cfi_startproc
 1053              		@ args = 0, pretend = 0, frame = 0
 1054              		@ frame_needed = 0, uses_anonymous_args = 0
 1055              	.LVL119:
 1056 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 106


 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 4, -8
 1059              		.cfi_offset 14, -4
 1060 0002 0400     		movs	r4, r0
1385:..\FreeRTOS9/tasks.c **** 		{
 1061              		.loc 1 1385 0
 1062 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1063              	.LVL120:
1389:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1064              		.loc 1 1389 0
 1065 0008 002C     		cmp	r4, #0
 1066 000a 01D1     		bne	.L82
1389:..\FreeRTOS9/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1067              		.loc 1 1389 0 is_stmt 0 discriminator 1
 1068 000c 034B     		ldr	r3, .L83
 1069 000e 9C6D     		ldr	r4, [r3, #88]
 1070              	.LVL121:
 1071              	.L82:
1390:..\FreeRTOS9/tasks.c **** 		}
 1072              		.loc 1 1390 0 is_stmt 1 discriminator 4
 1073 0010 E46A     		ldr	r4, [r4, #44]
 1074              	.LVL122:
1392:..\FreeRTOS9/tasks.c **** 
 1075              		.loc 1 1392 0 discriminator 4
 1076 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1077              	.LVL123:
1395:..\FreeRTOS9/tasks.c **** 
 1078              		.loc 1 1395 0 discriminator 4
 1079 0016 2000     		movs	r0, r4
 1080              		@ sp needed
 1081              	.LVL124:
 1082 0018 10BD     		pop	{r4, pc}
 1083              	.L84:
 1084 001a C046     		.align	2
 1085              	.L83:
 1086 001c 80000000 		.word	.LANCHOR1
 1087              		.cfi_endproc
 1088              	.LFE40:
 1089              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1090              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1091              		.align	2
 1092              		.global	vTaskPrioritySet
 1093              		.code	16
 1094              		.thumb_func
 1095              		.type	vTaskPrioritySet, %function
 1096              	vTaskPrioritySet:
 1097              	.LFB41:
1403:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 1098              		.loc 1 1403 0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              	.LVL125:
 1103 0000 70B5     		push	{r4, r5, r6, lr}
 1104              		.cfi_def_cfa_offset 16
 1105              		.cfi_offset 4, -16
 1106              		.cfi_offset 5, -12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 107


 1107              		.cfi_offset 6, -8
 1108              		.cfi_offset 14, -4
 1109 0002 0400     		movs	r4, r0
 1110 0004 0D00     		movs	r5, r1
 1111              	.LVL126:
1411:..\FreeRTOS9/tasks.c **** 		{
 1112              		.loc 1 1411 0
 1113 0006 0429     		cmp	r1, #4
 1114 0008 00D9     		bls	.L86
1413:..\FreeRTOS9/tasks.c **** 		}
 1115              		.loc 1 1413 0
 1116 000a 0425     		movs	r5, #4
 1117              	.L86:
 1118              	.LVL127:
1420:..\FreeRTOS9/tasks.c **** 		{
 1119              		.loc 1 1420 0
 1120 000c FFF7FEFF 		bl	vPortEnterCritical
 1121              	.LVL128:
1424:..\FreeRTOS9/tasks.c **** 
 1122              		.loc 1 1424 0
 1123 0010 002C     		cmp	r4, #0
 1124 0012 01D1     		bne	.L87
1424:..\FreeRTOS9/tasks.c **** 
 1125              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1126 0014 274B     		ldr	r3, .L101
 1127 0016 9C6D     		ldr	r4, [r3, #88]
 1128              	.LVL129:
 1129              	.L87:
1430:..\FreeRTOS9/tasks.c **** 			}
 1130              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1131 0018 626C     		ldr	r2, [r4, #68]
 1132              	.LVL130:
1438:..\FreeRTOS9/tasks.c **** 			{
 1133              		.loc 1 1438 0 discriminator 4
 1134 001a 9542     		cmp	r5, r2
 1135 001c 47D0     		beq	.L88
1442:..\FreeRTOS9/tasks.c **** 				{
 1136              		.loc 1 1442 0
 1137 001e 0AD9     		bls	.L89
1444:..\FreeRTOS9/tasks.c **** 					{
 1138              		.loc 1 1444 0
 1139 0020 244B     		ldr	r3, .L101
 1140 0022 9B6D     		ldr	r3, [r3, #88]
 1141 0024 9C42     		cmp	r4, r3
 1142 0026 0CD0     		beq	.L97
1449:..\FreeRTOS9/tasks.c **** 						{
 1143              		.loc 1 1449 0
 1144 0028 224B     		ldr	r3, .L101
 1145 002a 9B6D     		ldr	r3, [r3, #88]
 1146 002c DB6A     		ldr	r3, [r3, #44]
 1147 002e 9D42     		cmp	r5, r3
 1148 0030 09D2     		bcs	.L98
1406:..\FreeRTOS9/tasks.c **** 
 1149              		.loc 1 1406 0
 1150 0032 0026     		movs	r6, #0
 1151 0034 0AE0     		b	.L90
 1152              	.L89:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 108


1465:..\FreeRTOS9/tasks.c **** 				{
 1153              		.loc 1 1465 0
 1154 0036 1F4B     		ldr	r3, .L101
 1155 0038 9B6D     		ldr	r3, [r3, #88]
 1156 003a 9C42     		cmp	r4, r3
 1157 003c 05D0     		beq	.L99
1406:..\FreeRTOS9/tasks.c **** 
 1158              		.loc 1 1406 0
 1159 003e 0026     		movs	r6, #0
 1160 0040 04E0     		b	.L90
 1161              	.L97:
 1162 0042 0026     		movs	r6, #0
 1163 0044 02E0     		b	.L90
 1164              	.L98:
1451:..\FreeRTOS9/tasks.c **** 						}
 1165              		.loc 1 1451 0
 1166 0046 0126     		movs	r6, #1
 1167 0048 00E0     		b	.L90
 1168              	.L99:
1470:..\FreeRTOS9/tasks.c **** 				}
 1169              		.loc 1 1470 0
 1170 004a 0126     		movs	r6, #1
 1171              	.L90:
 1172              	.LVL131:
1482:..\FreeRTOS9/tasks.c **** 
 1173              		.loc 1 1482 0
 1174 004c E36A     		ldr	r3, [r4, #44]
 1175              	.LVL132:
1488:..\FreeRTOS9/tasks.c **** 					{
 1176              		.loc 1 1488 0
 1177 004e 9A42     		cmp	r2, r3
 1178 0050 00D1     		bne	.L91
1490:..\FreeRTOS9/tasks.c **** 					}
 1179              		.loc 1 1490 0
 1180 0052 E562     		str	r5, [r4, #44]
 1181              	.L91:
1498:..\FreeRTOS9/tasks.c **** 				}
 1182              		.loc 1 1498 0
 1183 0054 6564     		str	r5, [r4, #68]
1508:..\FreeRTOS9/tasks.c **** 				{
 1184              		.loc 1 1508 0
 1185 0056 A269     		ldr	r2, [r4, #24]
 1186              	.LVL133:
 1187 0058 002A     		cmp	r2, #0
 1188 005a 02DB     		blt	.L92
1510:..\FreeRTOS9/tasks.c **** 				}
 1189              		.loc 1 1510 0
 1190 005c 0522     		movs	r2, #5
 1191 005e 551B     		subs	r5, r2, r5
 1192              	.LVL134:
 1193 0060 A561     		str	r5, [r4, #24]
 1194              	.L92:
1521:..\FreeRTOS9/tasks.c **** 				{
 1195              		.loc 1 1521 0
 1196 0062 9A00     		lsls	r2, r3, #2
 1197 0064 D318     		adds	r3, r2, r3
 1198              	.LVL135:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 109


 1199 0066 9A00     		lsls	r2, r3, #2
 1200 0068 134B     		ldr	r3, .L101+4
 1201 006a 3033     		adds	r3, r3, #48
 1202 006c 9A18     		adds	r2, r3, r2
 1203 006e 6369     		ldr	r3, [r4, #20]
 1204 0070 9342     		cmp	r3, r2
 1205 0072 01D1     		bne	.L100
 1206 0074 0123     		movs	r3, #1
 1207 0076 00E0     		b	.L93
 1208              	.L100:
 1209 0078 0023     		movs	r3, #0
 1210              	.L93:
1521:..\FreeRTOS9/tasks.c **** 				{
 1211              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1212 007a 002B     		cmp	r3, #0
 1213 007c 13D0     		beq	.L94
1526:..\FreeRTOS9/tasks.c **** 					{
 1214              		.loc 1 1526 0 is_stmt 1
 1215 007e 251D     		adds	r5, r4, #4
 1216 0080 2800     		movs	r0, r5
 1217 0082 FFF7FEFF 		bl	uxListRemove
 1218              	.LVL136:
1537:..\FreeRTOS9/tasks.c **** 				}
 1219              		.loc 1 1537 0
 1220 0086 E36A     		ldr	r3, [r4, #44]
 1221 0088 0A4A     		ldr	r2, .L101
 1222 008a 526E     		ldr	r2, [r2, #100]
 1223 008c 9342     		cmp	r3, r2
 1224 008e 01D9     		bls	.L95
1537:..\FreeRTOS9/tasks.c **** 				}
 1225              		.loc 1 1537 0 is_stmt 0 discriminator 1
 1226 0090 084A     		ldr	r2, .L101
 1227 0092 5366     		str	r3, [r2, #100]
 1228              	.L95:
1537:..\FreeRTOS9/tasks.c **** 				}
 1229              		.loc 1 1537 0 discriminator 3
 1230 0094 9A00     		lsls	r2, r3, #2
 1231 0096 D318     		adds	r3, r2, r3
 1232 0098 9A00     		lsls	r2, r3, #2
 1233 009a 0748     		ldr	r0, .L101+4
 1234 009c 3030     		adds	r0, r0, #48
 1235 009e 8018     		adds	r0, r0, r2
 1236 00a0 2900     		movs	r1, r5
 1237 00a2 FFF7FEFF 		bl	vListInsertEnd
 1238              	.LVL137:
 1239              	.L94:
1544:..\FreeRTOS9/tasks.c **** 				{
 1240              		.loc 1 1544 0 is_stmt 1
 1241 00a6 002E     		cmp	r6, #0
 1242 00a8 01D0     		beq	.L88
1546:..\FreeRTOS9/tasks.c **** 				}
 1243              		.loc 1 1546 0
 1244 00aa FFF7FEFF 		bl	vPortYield
 1245              	.LVL138:
 1246              	.L88:
1558:..\FreeRTOS9/tasks.c **** 	}
 1247              		.loc 1 1558 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 110


 1248 00ae FFF7FEFF 		bl	vPortExitCritical
 1249              	.LVL139:
1559:..\FreeRTOS9/tasks.c **** 
 1250              		.loc 1 1559 0
 1251              		@ sp needed
 1252              	.LVL140:
 1253 00b2 70BD     		pop	{r4, r5, r6, pc}
 1254              	.L102:
 1255              		.align	2
 1256              	.L101:
 1257 00b4 80000000 		.word	.LANCHOR1
 1258 00b8 00000000 		.word	.LANCHOR0
 1259              		.cfi_endproc
 1260              	.LFE41:
 1261              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1262              		.section	.text.vTaskResume,"ax",%progbits
 1263              		.align	2
 1264              		.global	vTaskResume
 1265              		.code	16
 1266              		.thumb_func
 1267              		.type	vTaskResume, %function
 1268              	vTaskResume:
 1269              	.LFB44:
1703:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1270              		.loc 1 1703 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 1274              	.LVL141:
 1275 0000 70B5     		push	{r4, r5, r6, lr}
 1276              		.cfi_def_cfa_offset 16
 1277              		.cfi_offset 4, -16
 1278              		.cfi_offset 5, -12
 1279              		.cfi_offset 6, -8
 1280              		.cfi_offset 14, -4
 1281 0002 041E     		subs	r4, r0, #0
 1282              	.LVL142:
1711:..\FreeRTOS9/tasks.c **** 		{
 1283              		.loc 1 1711 0
 1284 0004 28D0     		beq	.L103
1711:..\FreeRTOS9/tasks.c **** 		{
 1285              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1286 0006 154B     		ldr	r3, .L107
 1287 0008 9B6D     		ldr	r3, [r3, #88]
 1288 000a 9842     		cmp	r0, r3
 1289 000c 24D0     		beq	.L103
1713:..\FreeRTOS9/tasks.c **** 			{
 1290              		.loc 1 1713 0 is_stmt 1
 1291 000e FFF7FEFF 		bl	vPortEnterCritical
 1292              	.LVL143:
1715:..\FreeRTOS9/tasks.c **** 				{
 1293              		.loc 1 1715 0
 1294 0012 2000     		movs	r0, r4
 1295 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1296              	.LVL144:
 1297 0018 0028     		cmp	r0, #0
 1298 001a 1BD0     		beq	.L105
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 111


1721:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1299              		.loc 1 1721 0
 1300 001c 251D     		adds	r5, r4, #4
 1301 001e 2800     		movs	r0, r5
 1302 0020 FFF7FEFF 		bl	uxListRemove
 1303              	.LVL145:
1722:..\FreeRTOS9/tasks.c **** 
 1304              		.loc 1 1722 0
 1305 0024 E36A     		ldr	r3, [r4, #44]
 1306 0026 0D4A     		ldr	r2, .L107
 1307 0028 526E     		ldr	r2, [r2, #100]
 1308 002a 9342     		cmp	r3, r2
 1309 002c 01D9     		bls	.L106
1722:..\FreeRTOS9/tasks.c **** 
 1310              		.loc 1 1722 0 is_stmt 0 discriminator 1
 1311 002e 0B4A     		ldr	r2, .L107
 1312 0030 5366     		str	r3, [r2, #100]
 1313              	.L106:
1722:..\FreeRTOS9/tasks.c **** 
 1314              		.loc 1 1722 0 discriminator 3
 1315 0032 9A00     		lsls	r2, r3, #2
 1316 0034 D318     		adds	r3, r2, r3
 1317 0036 9A00     		lsls	r2, r3, #2
 1318 0038 0948     		ldr	r0, .L107+4
 1319 003a 3030     		adds	r0, r0, #48
 1320 003c 8018     		adds	r0, r0, r2
 1321 003e 2900     		movs	r1, r5
 1322 0040 FFF7FEFF 		bl	vListInsertEnd
 1323              	.LVL146:
1725:..\FreeRTOS9/tasks.c **** 					{
 1324              		.loc 1 1725 0 is_stmt 1 discriminator 3
 1325 0044 E26A     		ldr	r2, [r4, #44]
 1326 0046 054B     		ldr	r3, .L107
 1327 0048 9B6D     		ldr	r3, [r3, #88]
 1328 004a DB6A     		ldr	r3, [r3, #44]
 1329 004c 9A42     		cmp	r2, r3
 1330 004e 01D3     		bcc	.L105
1730:..\FreeRTOS9/tasks.c **** 					}
 1331              		.loc 1 1730 0
 1332 0050 FFF7FEFF 		bl	vPortYield
 1333              	.LVL147:
 1334              	.L105:
1742:..\FreeRTOS9/tasks.c **** 		}
 1335              		.loc 1 1742 0
 1336 0054 FFF7FEFF 		bl	vPortExitCritical
 1337              	.LVL148:
 1338              	.L103:
1748:..\FreeRTOS9/tasks.c **** 
 1339              		.loc 1 1748 0
 1340              		@ sp needed
 1341              	.LVL149:
 1342 0058 70BD     		pop	{r4, r5, r6, pc}
 1343              	.L108:
 1344 005a C046     		.align	2
 1345              	.L107:
 1346 005c 80000000 		.word	.LANCHOR1
 1347 0060 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 112


 1348              		.cfi_endproc
 1349              	.LFE44:
 1350              		.size	vTaskResume, .-vTaskResume
 1351              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1352              		.align	2
 1353              		.global	xTaskResumeFromISR
 1354              		.code	16
 1355              		.thumb_func
 1356              		.type	xTaskResumeFromISR, %function
 1357              	xTaskResumeFromISR:
 1358              	.LFB45:
1757:..\FreeRTOS9/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1359              		.loc 1 1757 0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              	.LVL150:
 1364 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1365              		.cfi_def_cfa_offset 24
 1366              		.cfi_offset 3, -24
 1367              		.cfi_offset 4, -20
 1368              		.cfi_offset 5, -16
 1369              		.cfi_offset 6, -12
 1370              		.cfi_offset 7, -8
 1371              		.cfi_offset 14, -4
 1372 0002 0400     		movs	r4, r0
 1373              	.LVL151:
1782:..\FreeRTOS9/tasks.c **** 		{
 1374              		.loc 1 1782 0
 1375 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1376              	.LVL152:
 1377 0008 0500     		movs	r5, r0
 1378              	.LVL153:
1784:..\FreeRTOS9/tasks.c **** 			{
 1379              		.loc 1 1784 0
 1380 000a 2000     		movs	r0, r4
 1381              	.LVL154:
 1382 000c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1383              	.LVL155:
 1384 0010 0028     		cmp	r0, #0
 1385 0012 29D0     		beq	.L114
1789:..\FreeRTOS9/tasks.c **** 				{
 1386              		.loc 1 1789 0
 1387 0014 174B     		ldr	r3, .L116
 1388 0016 1B6F     		ldr	r3, [r3, #112]
 1389 0018 002B     		cmp	r3, #0
 1390 001a 1DD1     		bne	.L111
1793:..\FreeRTOS9/tasks.c **** 					{
 1391              		.loc 1 1793 0
 1392 001c 154B     		ldr	r3, .L116
 1393 001e 9B6D     		ldr	r3, [r3, #88]
 1394 0020 DB6A     		ldr	r3, [r3, #44]
 1395 0022 E26A     		ldr	r2, [r4, #44]
 1396 0024 9A42     		cmp	r2, r3
 1397 0026 01D2     		bcs	.L115
1758:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1398              		.loc 1 1758 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 113


 1399 0028 0026     		movs	r6, #0
 1400 002a 00E0     		b	.L112
 1401              	.L115:
1795:..\FreeRTOS9/tasks.c **** 					}
 1402              		.loc 1 1795 0
 1403 002c 0126     		movs	r6, #1
 1404              	.L112:
 1405              	.LVL156:
1802:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1406              		.loc 1 1802 0
 1407 002e 271D     		adds	r7, r4, #4
 1408 0030 3800     		movs	r0, r7
 1409 0032 FFF7FEFF 		bl	uxListRemove
 1410              	.LVL157:
1803:..\FreeRTOS9/tasks.c **** 				}
 1411              		.loc 1 1803 0
 1412 0036 E36A     		ldr	r3, [r4, #44]
 1413 0038 0E4A     		ldr	r2, .L116
 1414 003a 526E     		ldr	r2, [r2, #100]
 1415 003c 9342     		cmp	r3, r2
 1416 003e 01D9     		bls	.L113
1803:..\FreeRTOS9/tasks.c **** 				}
 1417              		.loc 1 1803 0 is_stmt 0 discriminator 1
 1418 0040 0C4A     		ldr	r2, .L116
 1419 0042 5366     		str	r3, [r2, #100]
 1420              	.L113:
1803:..\FreeRTOS9/tasks.c **** 				}
 1421              		.loc 1 1803 0 discriminator 3
 1422 0044 9A00     		lsls	r2, r3, #2
 1423 0046 D318     		adds	r3, r2, r3
 1424 0048 9A00     		lsls	r2, r3, #2
 1425 004a 0B48     		ldr	r0, .L116+4
 1426 004c 3030     		adds	r0, r0, #48
 1427 004e 8018     		adds	r0, r0, r2
 1428 0050 3900     		movs	r1, r7
 1429 0052 FFF7FEFF 		bl	vListInsertEnd
 1430              	.LVL158:
 1431 0056 08E0     		b	.L110
 1432              	.LVL159:
 1433              	.L111:
1810:..\FreeRTOS9/tasks.c **** 				}
 1434              		.loc 1 1810 0 is_stmt 1
 1435 0058 2100     		movs	r1, r4
 1436 005a 1831     		adds	r1, r1, #24
 1437 005c 0648     		ldr	r0, .L116+4
 1438 005e 1430     		adds	r0, r0, #20
 1439 0060 FFF7FEFF 		bl	vListInsertEnd
 1440              	.LVL160:
1758:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1441              		.loc 1 1758 0
 1442 0064 0026     		movs	r6, #0
 1443 0066 00E0     		b	.L110
 1444              	.L114:
 1445 0068 0026     		movs	r6, #0
 1446              	.LVL161:
 1447              	.L110:
1818:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 114


 1448              		.loc 1 1818 0
 1449 006a 2800     		movs	r0, r5
 1450 006c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1451              	.LVL162:
1821:..\FreeRTOS9/tasks.c **** 
 1452              		.loc 1 1821 0
 1453 0070 3000     		movs	r0, r6
 1454              		@ sp needed
 1455              	.LVL163:
 1456              	.LVL164:
 1457              	.LVL165:
 1458 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1459              	.L117:
 1460              		.align	2
 1461              	.L116:
 1462 0074 80000000 		.word	.LANCHOR1
 1463 0078 00000000 		.word	.LANCHOR0
 1464              		.cfi_endproc
 1465              	.LFE45:
 1466              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1467              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1468              		.align	2
 1469              		.global	vTaskStartScheduler
 1470              		.code	16
 1471              		.thumb_func
 1472              		.type	vTaskStartScheduler, %function
 1473              	vTaskStartScheduler:
 1474              	.LFB46:
1827:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
 1475              		.loc 1 1827 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479 0000 00B5     		push	{lr}
 1480              		.cfi_def_cfa_offset 4
 1481              		.cfi_offset 14, -4
 1482 0002 83B0     		sub	sp, sp, #12
 1483              		.cfi_def_cfa_offset 16
1860:..\FreeRTOS9/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1484              		.loc 1 1860 0
 1485 0004 0C4B     		ldr	r3, .L120
 1486 0006 7433     		adds	r3, r3, #116
 1487 0008 0193     		str	r3, [sp, #4]
 1488 000a 0023     		movs	r3, #0
 1489 000c 0093     		str	r3, [sp]
 1490 000e 3222     		movs	r2, #50
 1491 0010 0A49     		ldr	r1, .L120+4
 1492 0012 0B48     		ldr	r0, .L120+8
 1493 0014 FFF7FEFF 		bl	xTaskCreate
 1494              	.LVL166:
1881:..\FreeRTOS9/tasks.c **** 	{
 1495              		.loc 1 1881 0
 1496 0018 0128     		cmp	r0, #1
 1497 001a 0BD1     		bne	.L118
1888:..\FreeRTOS9/tasks.c **** 
 1498              		.loc 1 1888 0
 1499              		.syntax divided
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 115


 1500              	@ 1888 "..\FreeRTOS9\tasks.c" 1
 1501 001c 72B6     		 cpsid i 
 1502              	@ 0 "" 2
1898:..\FreeRTOS9/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1503              		.loc 1 1898 0
 1504              		.thumb
 1505              		.syntax unified
 1506 001e 0122     		movs	r2, #1
 1507 0020 5242     		rsbs	r2, r2, #0
 1508 0022 084B     		ldr	r3, .L120+12
 1509 0024 DA62     		str	r2, [r3, #44]
1899:..\FreeRTOS9/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1510              		.loc 1 1899 0
 1511 0026 044B     		ldr	r3, .L120
 1512 0028 0232     		adds	r2, r2, #2
 1513 002a DA65     		str	r2, [r3, #92]
1900:..\FreeRTOS9/tasks.c **** 
 1514              		.loc 1 1900 0
 1515 002c 0022     		movs	r2, #0
 1516 002e 9A66     		str	r2, [r3, #104]
1909:..\FreeRTOS9/tasks.c **** 		{
 1517              		.loc 1 1909 0
 1518 0030 FFF7FEFF 		bl	xPortStartScheduler
 1519              	.LVL167:
 1520              	.L118:
1930:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1521              		.loc 1 1930 0
 1522 0034 03B0     		add	sp, sp, #12
 1523              		@ sp needed
 1524 0036 00BD     		pop	{pc}
 1525              	.L121:
 1526              		.align	2
 1527              	.L120:
 1528 0038 80000000 		.word	.LANCHOR1
 1529 003c 00000000 		.word	.LC31
 1530 0040 00000000 		.word	prvIdleTask
 1531 0044 00000000 		.word	.LANCHOR0
 1532              		.cfi_endproc
 1533              	.LFE46:
 1534              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1535              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1536              		.align	2
 1537              		.global	vTaskEndScheduler
 1538              		.code	16
 1539              		.thumb_func
 1540              		.type	vTaskEndScheduler, %function
 1541              	vTaskEndScheduler:
 1542              	.LFB47:
1934:..\FreeRTOS9/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1543              		.loc 1 1934 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547 0000 10B5     		push	{r4, lr}
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 4, -8
 1550              		.cfi_offset 14, -4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 116


1938:..\FreeRTOS9/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1551              		.loc 1 1938 0
 1552              		.syntax divided
 1553              	@ 1938 "..\FreeRTOS9\tasks.c" 1
 1554 0002 72B6     		 cpsid i 
 1555              	@ 0 "" 2
1939:..\FreeRTOS9/tasks.c **** 	vPortEndScheduler();
 1556              		.loc 1 1939 0
 1557              		.thumb
 1558              		.syntax unified
 1559 0004 0022     		movs	r2, #0
 1560 0006 024B     		ldr	r3, .L123
 1561 0008 DA65     		str	r2, [r3, #92]
1940:..\FreeRTOS9/tasks.c **** }
 1562              		.loc 1 1940 0
 1563 000a FFF7FEFF 		bl	vPortEndScheduler
 1564              	.LVL168:
1941:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
 1565              		.loc 1 1941 0
 1566              		@ sp needed
 1567 000e 10BD     		pop	{r4, pc}
 1568              	.L124:
 1569              		.align	2
 1570              	.L123:
 1571 0010 80000000 		.word	.LANCHOR1
 1572              		.cfi_endproc
 1573              	.LFE47:
 1574              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1575              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1576              		.align	2
 1577              		.global	vTaskSuspendAll
 1578              		.code	16
 1579              		.thumb_func
 1580              		.type	vTaskSuspendAll, %function
 1581              	vTaskSuspendAll:
 1582              	.LFB48:
1945:..\FreeRTOS9/tasks.c **** 	/* A critical section is not required as the variable is of type
 1583              		.loc 1 1945 0
 1584              		.cfi_startproc
 1585              		@ args = 0, pretend = 0, frame = 0
 1586              		@ frame_needed = 0, uses_anonymous_args = 0
 1587              		@ link register save eliminated.
1950:..\FreeRTOS9/tasks.c **** }
 1588              		.loc 1 1950 0
 1589 0000 024A     		ldr	r2, .L126
 1590 0002 136F     		ldr	r3, [r2, #112]
 1591 0004 0133     		adds	r3, r3, #1
 1592 0006 1367     		str	r3, [r2, #112]
1951:..\FreeRTOS9/tasks.c **** /*----------------------------------------------------------*/
 1593              		.loc 1 1951 0
 1594              		@ sp needed
 1595 0008 7047     		bx	lr
 1596              	.L127:
 1597 000a C046     		.align	2
 1598              	.L126:
 1599 000c 80000000 		.word	.LANCHOR1
 1600              		.cfi_endproc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 117


 1601              	.LFE48:
 1602              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1603              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1604              		.align	2
 1605              		.global	xTaskGetTickCount
 1606              		.code	16
 1607              		.thumb_func
 1608              		.type	xTaskGetTickCount, %function
 1609              	xTaskGetTickCount:
 1610              	.LFB50:
2128:..\FreeRTOS9/tasks.c **** TickType_t xTicks;
 1611              		.loc 1 2128 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              		@ link register save eliminated.
2134:..\FreeRTOS9/tasks.c **** 	}
 1616              		.loc 1 2134 0
 1617 0000 014B     		ldr	r3, .L129
 1618 0002 986E     		ldr	r0, [r3, #104]
 1619              	.LVL169:
2139:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1620              		.loc 1 2139 0
 1621              		@ sp needed
 1622 0004 7047     		bx	lr
 1623              	.L130:
 1624 0006 C046     		.align	2
 1625              	.L129:
 1626 0008 80000000 		.word	.LANCHOR1
 1627              		.cfi_endproc
 1628              	.LFE50:
 1629              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1630              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1631              		.align	2
 1632              		.global	xTaskGetTickCountFromISR
 1633              		.code	16
 1634              		.thumb_func
 1635              		.type	xTaskGetTickCountFromISR, %function
 1636              	xTaskGetTickCountFromISR:
 1637              	.LFB51:
2143:..\FreeRTOS9/tasks.c **** TickType_t xReturn;
 1638              		.loc 1 2143 0
 1639              		.cfi_startproc
 1640              		@ args = 0, pretend = 0, frame = 0
 1641              		@ frame_needed = 0, uses_anonymous_args = 0
 1642              		@ link register save eliminated.
 1643              	.LVL170:
2165:..\FreeRTOS9/tasks.c **** 	}
 1644              		.loc 1 2165 0
 1645 0000 014B     		ldr	r3, .L132
 1646 0002 986E     		ldr	r0, [r3, #104]
 1647              	.LVL171:
2170:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1648              		.loc 1 2170 0
 1649              		@ sp needed
 1650 0004 7047     		bx	lr
 1651              	.L133:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 118


 1652 0006 C046     		.align	2
 1653              	.L132:
 1654 0008 80000000 		.word	.LANCHOR1
 1655              		.cfi_endproc
 1656              	.LFE51:
 1657              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1658              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1659              		.align	2
 1660              		.global	uxTaskGetNumberOfTasks
 1661              		.code	16
 1662              		.thumb_func
 1663              		.type	uxTaskGetNumberOfTasks, %function
 1664              	uxTaskGetNumberOfTasks:
 1665              	.LFB52:
2174:..\FreeRTOS9/tasks.c **** 	/* A critical section is not required because the variables are of type
 1666              		.loc 1 2174 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
2177:..\FreeRTOS9/tasks.c **** }
 1671              		.loc 1 2177 0
 1672 0000 014B     		ldr	r3, .L135
 1673 0002 586D     		ldr	r0, [r3, #84]
2178:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1674              		.loc 1 2178 0
 1675              		@ sp needed
 1676 0004 7047     		bx	lr
 1677              	.L136:
 1678 0006 C046     		.align	2
 1679              	.L135:
 1680 0008 80000000 		.word	.LANCHOR1
 1681              		.cfi_endproc
 1682              	.LFE52:
 1683              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1684              		.section	.text.pcTaskGetName,"ax",%progbits
 1685              		.align	2
 1686              		.global	pcTaskGetName
 1687              		.code	16
 1688              		.thumb_func
 1689              		.type	pcTaskGetName, %function
 1690              	pcTaskGetName:
 1691              	.LFB53:
2182:..\FreeRTOS9/tasks.c **** TCB_t *pxTCB;
 1692              		.loc 1 2182 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696              		@ link register save eliminated.
 1697              	.LVL172:
2187:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTCB );
 1698              		.loc 1 2187 0
 1699 0000 0028     		cmp	r0, #0
 1700 0002 01D1     		bne	.L138
2187:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTCB );
 1701              		.loc 1 2187 0 is_stmt 0 discriminator 1
 1702 0004 014B     		ldr	r3, .L139
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 119


 1703 0006 986D     		ldr	r0, [r3, #88]
 1704              	.LVL173:
 1705              	.L138:
2189:..\FreeRTOS9/tasks.c **** }
 1706              		.loc 1 2189 0 is_stmt 1 discriminator 4
 1707 0008 3430     		adds	r0, r0, #52
 1708              	.LVL174:
2190:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1709              		.loc 1 2190 0 discriminator 4
 1710              		@ sp needed
 1711 000a 7047     		bx	lr
 1712              	.L140:
 1713              		.align	2
 1714              	.L139:
 1715 000c 80000000 		.word	.LANCHOR1
 1716              		.cfi_endproc
 1717              	.LFE53:
 1718              		.size	pcTaskGetName, .-pcTaskGetName
 1719              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1720              		.align	2
 1721              		.global	xTaskIncrementTick
 1722              		.code	16
 1723              		.thumb_func
 1724              		.type	xTaskIncrementTick, %function
 1725              	xTaskIncrementTick:
 1726              	.LFB54:
2500:..\FreeRTOS9/tasks.c **** TCB_t * pxTCB;
 1727              		.loc 1 2500 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1732              		.cfi_def_cfa_offset 24
 1733              		.cfi_offset 3, -24
 1734              		.cfi_offset 4, -20
 1735              		.cfi_offset 5, -16
 1736              		.cfi_offset 6, -12
 1737              		.cfi_offset 7, -8
 1738              		.cfi_offset 14, -4
 1739              	.LVL175:
2509:..\FreeRTOS9/tasks.c **** 	{
 1740              		.loc 1 2509 0
 1741 0002 324B     		ldr	r3, .L158
 1742 0004 1B6F     		ldr	r3, [r3, #112]
 1743 0006 002B     		cmp	r3, #0
 1744 0008 53D1     		bne	.L142
 1745              	.LBB3:
2513:..\FreeRTOS9/tasks.c **** 
 1746              		.loc 1 2513 0
 1747 000a 304B     		ldr	r3, .L158
 1748 000c 9F6E     		ldr	r7, [r3, #104]
 1749 000e 0137     		adds	r7, r7, #1
 1750              	.LVL176:
2517:..\FreeRTOS9/tasks.c **** 
 1751              		.loc 1 2517 0
 1752 0010 9F66     		str	r7, [r3, #104]
2519:..\FreeRTOS9/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 120


 1753              		.loc 1 2519 0
 1754 0012 002F     		cmp	r7, #0
 1755 0014 09D1     		bne	.L143
 1756              	.LBB4:
2521:..\FreeRTOS9/tasks.c **** 		}
 1757              		.loc 1 2521 0
 1758 0016 2E4A     		ldr	r2, .L158+4
 1759 0018 916A     		ldr	r1, [r2, #40]
 1760              	.LVL177:
 1761 001a 186D     		ldr	r0, [r3, #80]
 1762 001c 9062     		str	r0, [r2, #40]
 1763 001e 1965     		str	r1, [r3, #80]
 1764 0020 9A6F     		ldr	r2, [r3, #120]
 1765 0022 0132     		adds	r2, r2, #1
 1766 0024 9A67     		str	r2, [r3, #120]
 1767 0026 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1768              	.LVL178:
 1769              	.L143:
 1770              	.LBE4:
2532:..\FreeRTOS9/tasks.c **** 		{
 1771              		.loc 1 2532 0
 1772 002a 294B     		ldr	r3, .L158+4
 1773 002c DB6A     		ldr	r3, [r3, #44]
 1774 002e 9F42     		cmp	r7, r3
 1775 0030 03D2     		bcs	.L154
 1776              	.LBE3:
2503:..\FreeRTOS9/tasks.c **** 
 1777              		.loc 1 2503 0
 1778 0032 0025     		movs	r5, #0
 1779 0034 42E0     		b	.L145
 1780              	.LVL179:
 1781              	.L156:
 1782              	.LBB5:
2598:..\FreeRTOS9/tasks.c **** 						}
 1783              		.loc 1 2598 0
 1784 0036 0125     		movs	r5, #1
 1785              	.LVL180:
 1786 0038 00E0     		b	.L144
 1787              	.LVL181:
 1788              	.L154:
 1789 003a 0025     		movs	r5, #0
 1790              	.LVL182:
 1791              	.L144:
2536:..\FreeRTOS9/tasks.c **** 				{
 1792              		.loc 1 2536 0
 1793 003c 244B     		ldr	r3, .L158+4
 1794 003e 9B6A     		ldr	r3, [r3, #40]
 1795 0040 1B68     		ldr	r3, [r3]
 1796 0042 002B     		cmp	r3, #0
 1797 0044 01D1     		bne	.L155
 1798 0046 0133     		adds	r3, r3, #1
 1799 0048 00E0     		b	.L146
 1800              	.L155:
 1801 004a 0023     		movs	r3, #0
 1802              	.L146:
2536:..\FreeRTOS9/tasks.c **** 				{
 1803              		.loc 1 2536 0 is_stmt 0 discriminator 4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 121


 1804 004c 002B     		cmp	r3, #0
 1805 004e 04D0     		beq	.L147
2543:..\FreeRTOS9/tasks.c **** 					break;
 1806              		.loc 1 2543 0 is_stmt 1
 1807 0050 0122     		movs	r2, #1
 1808 0052 5242     		rsbs	r2, r2, #0
 1809 0054 1E4B     		ldr	r3, .L158+4
 1810 0056 DA62     		str	r2, [r3, #44]
2544:..\FreeRTOS9/tasks.c **** 				}
 1811              		.loc 1 2544 0
 1812 0058 30E0     		b	.L145
 1813              	.L147:
2552:..\FreeRTOS9/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1814              		.loc 1 2552 0
 1815 005a 1D4B     		ldr	r3, .L158+4
 1816 005c 9B6A     		ldr	r3, [r3, #40]
 1817 005e DB68     		ldr	r3, [r3, #12]
 1818 0060 DE68     		ldr	r6, [r3, #12]
 1819              	.LVL183:
2553:..\FreeRTOS9/tasks.c **** 
 1820              		.loc 1 2553 0
 1821 0062 7368     		ldr	r3, [r6, #4]
 1822              	.LVL184:
2555:..\FreeRTOS9/tasks.c **** 					{
 1823              		.loc 1 2555 0
 1824 0064 9F42     		cmp	r7, r3
 1825 0066 02D2     		bcs	.L148
2562:..\FreeRTOS9/tasks.c **** 						break;
 1826              		.loc 1 2562 0
 1827 0068 194A     		ldr	r2, .L158+4
 1828 006a D362     		str	r3, [r2, #44]
2563:..\FreeRTOS9/tasks.c **** 					}
 1829              		.loc 1 2563 0
 1830 006c 26E0     		b	.L145
 1831              	.L148:
2571:..\FreeRTOS9/tasks.c **** 
 1832              		.loc 1 2571 0
 1833 006e 341D     		adds	r4, r6, #4
 1834 0070 2000     		movs	r0, r4
 1835 0072 FFF7FEFF 		bl	uxListRemove
 1836              	.LVL185:
2575:..\FreeRTOS9/tasks.c **** 					{
 1837              		.loc 1 2575 0
 1838 0076 B36A     		ldr	r3, [r6, #40]
 1839 0078 002B     		cmp	r3, #0
 1840 007a 03D0     		beq	.L149
2577:..\FreeRTOS9/tasks.c **** 					}
 1841              		.loc 1 2577 0
 1842 007c 3000     		movs	r0, r6
 1843 007e 1830     		adds	r0, r0, #24
 1844 0080 FFF7FEFF 		bl	uxListRemove
 1845              	.LVL186:
 1846              	.L149:
2586:..\FreeRTOS9/tasks.c **** 
 1847              		.loc 1 2586 0
 1848 0084 F36A     		ldr	r3, [r6, #44]
 1849 0086 114A     		ldr	r2, .L158
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 122


 1850 0088 526E     		ldr	r2, [r2, #100]
 1851 008a 9342     		cmp	r3, r2
 1852 008c 01D9     		bls	.L150
2586:..\FreeRTOS9/tasks.c **** 
 1853              		.loc 1 2586 0 is_stmt 0 discriminator 1
 1854 008e 0F4A     		ldr	r2, .L158
 1855 0090 5366     		str	r3, [r2, #100]
 1856              	.L150:
2586:..\FreeRTOS9/tasks.c **** 
 1857              		.loc 1 2586 0 discriminator 3
 1858 0092 9A00     		lsls	r2, r3, #2
 1859 0094 D318     		adds	r3, r2, r3
 1860 0096 9A00     		lsls	r2, r3, #2
 1861 0098 0D48     		ldr	r0, .L158+4
 1862 009a 3030     		adds	r0, r0, #48
 1863 009c 8018     		adds	r0, r0, r2
 1864 009e 2100     		movs	r1, r4
 1865 00a0 FFF7FEFF 		bl	vListInsertEnd
 1866              	.LVL187:
2596:..\FreeRTOS9/tasks.c **** 						{
 1867              		.loc 1 2596 0 is_stmt 1 discriminator 3
 1868 00a4 F26A     		ldr	r2, [r6, #44]
 1869 00a6 094B     		ldr	r3, .L158
 1870 00a8 9B6D     		ldr	r3, [r3, #88]
 1871 00aa DB6A     		ldr	r3, [r3, #44]
 1872 00ac 9A42     		cmp	r2, r3
 1873 00ae C2D2     		bcs	.L156
 1874 00b0 C4E7     		b	.L144
 1875              	.LVL188:
 1876              	.L142:
 1877              	.LBE5:
2643:..\FreeRTOS9/tasks.c **** 
 1878              		.loc 1 2643 0
 1879 00b2 064A     		ldr	r2, .L158
 1880 00b4 D36F     		ldr	r3, [r2, #124]
 1881 00b6 0133     		adds	r3, r3, #1
 1882 00b8 D367     		str	r3, [r2, #124]
2503:..\FreeRTOS9/tasks.c **** 
 1883              		.loc 1 2503 0
 1884 00ba 0025     		movs	r5, #0
 1885              	.LVL189:
 1886              	.L145:
2656:..\FreeRTOS9/tasks.c **** 		{
 1887              		.loc 1 2656 0
 1888 00bc 054B     		ldr	r3, .L158+8
 1889 00be 1B68     		ldr	r3, [r3]
 1890 00c0 002B     		cmp	r3, #0
 1891 00c2 00D0     		beq	.L153
2658:..\FreeRTOS9/tasks.c **** 		}
 1892              		.loc 1 2658 0
 1893 00c4 0125     		movs	r5, #1
 1894              	.LVL190:
 1895              	.L153:
2668:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 1896              		.loc 1 2668 0
 1897 00c6 2800     		movs	r0, r5
 1898              		@ sp needed
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 123


 1899              	.LVL191:
 1900 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1901              	.L159:
 1902 00ca C046     		.align	2
 1903              	.L158:
 1904 00cc 80000000 		.word	.LANCHOR1
 1905 00d0 00000000 		.word	.LANCHOR0
 1906 00d4 00010000 		.word	.LANCHOR2
 1907              		.cfi_endproc
 1908              	.LFE54:
 1909              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 1910              		.section	.text.xTaskResumeAll,"ax",%progbits
 1911              		.align	2
 1912              		.global	xTaskResumeAll
 1913              		.code	16
 1914              		.thumb_func
 1915              		.type	xTaskResumeAll, %function
 1916              	xTaskResumeAll:
 1917              	.LFB49:
2018:..\FreeRTOS9/tasks.c **** TCB_t *pxTCB = NULL;
 1918              		.loc 1 2018 0
 1919              		.cfi_startproc
 1920              		@ args = 0, pretend = 0, frame = 0
 1921              		@ frame_needed = 0, uses_anonymous_args = 0
 1922 0000 70B5     		push	{r4, r5, r6, lr}
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 4, -16
 1925              		.cfi_offset 5, -12
 1926              		.cfi_offset 6, -8
 1927              		.cfi_offset 14, -4
 1928              	.LVL192:
2031:..\FreeRTOS9/tasks.c **** 	{
 1929              		.loc 1 2031 0
 1930 0002 FFF7FEFF 		bl	vPortEnterCritical
 1931              	.LVL193:
2033:..\FreeRTOS9/tasks.c **** 
 1932              		.loc 1 2033 0
 1933 0006 2D4B     		ldr	r3, .L173
 1934 0008 1A6F     		ldr	r2, [r3, #112]
 1935 000a 013A     		subs	r2, r2, #1
 1936 000c 1A67     		str	r2, [r3, #112]
2035:..\FreeRTOS9/tasks.c **** 		{
 1937              		.loc 1 2035 0
 1938 000e 1B6F     		ldr	r3, [r3, #112]
 1939 0010 002B     		cmp	r3, #0
 1940 0012 4CD1     		bne	.L170
2037:..\FreeRTOS9/tasks.c **** 			{
 1941              		.loc 1 2037 0
 1942 0014 294B     		ldr	r3, .L173
 1943 0016 5B6D     		ldr	r3, [r3, #84]
 1944 0018 002B     		cmp	r3, #0
 1945 001a 26D1     		bne	.L171
2020:..\FreeRTOS9/tasks.c **** 
 1946              		.loc 1 2020 0
 1947 001c 0024     		movs	r4, #0
 1948 001e 49E0     		b	.L161
 1949              	.LVL194:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 124


 1950              	.L165:
2043:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1951              		.loc 1 2043 0
 1952 0020 274B     		ldr	r3, .L173+4
 1953 0022 1B6A     		ldr	r3, [r3, #32]
 1954 0024 DC68     		ldr	r4, [r3, #12]
 1955              	.LVL195:
2044:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1956              		.loc 1 2044 0
 1957 0026 2000     		movs	r0, r4
 1958 0028 1830     		adds	r0, r0, #24
 1959 002a FFF7FEFF 		bl	uxListRemove
 1960              	.LVL196:
2045:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1961              		.loc 1 2045 0
 1962 002e 251D     		adds	r5, r4, #4
 1963 0030 2800     		movs	r0, r5
 1964 0032 FFF7FEFF 		bl	uxListRemove
 1965              	.LVL197:
2046:..\FreeRTOS9/tasks.c **** 
 1966              		.loc 1 2046 0
 1967 0036 E36A     		ldr	r3, [r4, #44]
 1968 0038 204A     		ldr	r2, .L173
 1969 003a 526E     		ldr	r2, [r2, #100]
 1970 003c 9342     		cmp	r3, r2
 1971 003e 01D9     		bls	.L163
2046:..\FreeRTOS9/tasks.c **** 
 1972              		.loc 1 2046 0 is_stmt 0 discriminator 1
 1973 0040 1E4A     		ldr	r2, .L173
 1974 0042 5366     		str	r3, [r2, #100]
 1975              	.L163:
2046:..\FreeRTOS9/tasks.c **** 
 1976              		.loc 1 2046 0 discriminator 3
 1977 0044 9A00     		lsls	r2, r3, #2
 1978 0046 D318     		adds	r3, r2, r3
 1979 0048 9A00     		lsls	r2, r3, #2
 1980 004a 1D48     		ldr	r0, .L173+4
 1981 004c 3030     		adds	r0, r0, #48
 1982 004e 8018     		adds	r0, r0, r2
 1983 0050 2900     		movs	r1, r5
 1984 0052 FFF7FEFF 		bl	vListInsertEnd
 1985              	.LVL198:
2050:..\FreeRTOS9/tasks.c **** 					{
 1986              		.loc 1 2050 0 is_stmt 1 discriminator 3
 1987 0056 194B     		ldr	r3, .L173
 1988 0058 9B6D     		ldr	r3, [r3, #88]
 1989 005a DB6A     		ldr	r3, [r3, #44]
 1990 005c E26A     		ldr	r2, [r4, #44]
 1991 005e 9A42     		cmp	r2, r3
 1992 0060 04D3     		bcc	.L162
2052:..\FreeRTOS9/tasks.c **** 					}
 1993              		.loc 1 2052 0
 1994 0062 0122     		movs	r2, #1
 1995 0064 174B     		ldr	r3, .L173+8
 1996 0066 1A60     		str	r2, [r3]
 1997 0068 00E0     		b	.L162
 1998              	.LVL199:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 125


 1999              	.L171:
 2000 006a 0024     		movs	r4, #0
 2001              	.LVL200:
 2002              	.L162:
2041:..\FreeRTOS9/tasks.c **** 				{
 2003              		.loc 1 2041 0
 2004 006c 144B     		ldr	r3, .L173+4
 2005 006e 5B69     		ldr	r3, [r3, #20]
 2006 0070 002B     		cmp	r3, #0
 2007 0072 D5D1     		bne	.L165
2060:..\FreeRTOS9/tasks.c **** 				{
 2008              		.loc 1 2060 0
 2009 0074 002C     		cmp	r4, #0
 2010 0076 01D0     		beq	.L166
2068:..\FreeRTOS9/tasks.c **** 				}
 2011              		.loc 1 2068 0
 2012 0078 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2013              	.LVL201:
 2014              	.L166:
 2015              	.LBB6:
2076:..\FreeRTOS9/tasks.c **** 
 2016              		.loc 1 2076 0
 2017 007c 0F4B     		ldr	r3, .L173
 2018 007e DC6F     		ldr	r4, [r3, #124]
 2019              	.LVL202:
2078:..\FreeRTOS9/tasks.c **** 					{
 2020              		.loc 1 2078 0
 2021 0080 002C     		cmp	r4, #0
 2022 0082 0CD0     		beq	.L167
 2023              	.L169:
2082:..\FreeRTOS9/tasks.c **** 							{
 2024              		.loc 1 2082 0
 2025 0084 FFF7FEFF 		bl	xTaskIncrementTick
 2026              	.LVL203:
 2027 0088 0028     		cmp	r0, #0
 2028 008a 02D0     		beq	.L168
2084:..\FreeRTOS9/tasks.c **** 							}
 2029              		.loc 1 2084 0
 2030 008c 0122     		movs	r2, #1
 2031 008e 0D4B     		ldr	r3, .L173+8
 2032 0090 1A60     		str	r2, [r3]
 2033              	.L168:
2090:..\FreeRTOS9/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2034              		.loc 1 2090 0
 2035 0092 013C     		subs	r4, r4, #1
 2036              	.LVL204:
2091:..\FreeRTOS9/tasks.c **** 
 2037              		.loc 1 2091 0
 2038 0094 002C     		cmp	r4, #0
 2039 0096 F5D1     		bne	.L169
2093:..\FreeRTOS9/tasks.c **** 					}
 2040              		.loc 1 2093 0
 2041 0098 0022     		movs	r2, #0
 2042 009a 084B     		ldr	r3, .L173
 2043 009c DA67     		str	r2, [r3, #124]
 2044              	.L167:
 2045              	.LBE6:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 126


2101:..\FreeRTOS9/tasks.c **** 				{
 2046              		.loc 1 2101 0
 2047 009e 094B     		ldr	r3, .L173+8
 2048 00a0 1B68     		ldr	r3, [r3]
 2049 00a2 002B     		cmp	r3, #0
 2050 00a4 05D0     		beq	.L172
 2051              	.LVL205:
2108:..\FreeRTOS9/tasks.c **** 				}
 2052              		.loc 1 2108 0
 2053 00a6 FFF7FEFF 		bl	vPortYield
 2054              	.LVL206:
2105:..\FreeRTOS9/tasks.c **** 					}
 2055              		.loc 1 2105 0
 2056 00aa 0124     		movs	r4, #1
 2057              	.LVL207:
 2058 00ac 02E0     		b	.L161
 2059              	.LVL208:
 2060              	.L170:
2020:..\FreeRTOS9/tasks.c **** 
 2061              		.loc 1 2020 0
 2062 00ae 0024     		movs	r4, #0
 2063 00b0 00E0     		b	.L161
 2064              	.LVL209:
 2065              	.L172:
 2066 00b2 0024     		movs	r4, #0
 2067              	.LVL210:
 2068              	.L161:
2121:..\FreeRTOS9/tasks.c **** 
 2069              		.loc 1 2121 0
 2070 00b4 FFF7FEFF 		bl	vPortExitCritical
 2071              	.LVL211:
2124:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2072              		.loc 1 2124 0
 2073 00b8 2000     		movs	r0, r4
 2074              		@ sp needed
 2075              	.LVL212:
 2076 00ba 70BD     		pop	{r4, r5, r6, pc}
 2077              	.L174:
 2078              		.align	2
 2079              	.L173:
 2080 00bc 80000000 		.word	.LANCHOR1
 2081 00c0 00000000 		.word	.LANCHOR0
 2082 00c4 00010000 		.word	.LANCHOR2
 2083              		.cfi_endproc
 2084              	.LFE49:
 2085              		.size	xTaskResumeAll, .-xTaskResumeAll
 2086              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2087              		.align	2
 2088              		.global	vTaskDelayUntil
 2089              		.code	16
 2090              		.thumb_func
 2091              		.type	vTaskDelayUntil, %function
 2092              	vTaskDelayUntil:
 2093              	.LFB36:
1141:..\FreeRTOS9/tasks.c **** 	TickType_t xTimeToWake;
 2094              		.loc 1 1141 0
 2095              		.cfi_startproc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 127


 2096              		@ args = 0, pretend = 0, frame = 0
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098              	.LVL213:
 2099 0000 70B5     		push	{r4, r5, r6, lr}
 2100              		.cfi_def_cfa_offset 16
 2101              		.cfi_offset 4, -16
 2102              		.cfi_offset 5, -12
 2103              		.cfi_offset 6, -8
 2104              		.cfi_offset 14, -4
 2105 0002 0500     		movs	r5, r0
 2106 0004 0C00     		movs	r4, r1
 2107              	.LVL214:
1149:..\FreeRTOS9/tasks.c **** 		{
 2108              		.loc 1 1149 0
 2109 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2110              	.LVL215:
 2111              	.LBB7:
1153:..\FreeRTOS9/tasks.c **** 
 2112              		.loc 1 1153 0
 2113 000a 134B     		ldr	r3, .L184
 2114 000c 986E     		ldr	r0, [r3, #104]
 2115              	.LVL216:
1156:..\FreeRTOS9/tasks.c **** 
 2116              		.loc 1 1156 0
 2117 000e 2B68     		ldr	r3, [r5]
 2118 0010 1919     		adds	r1, r3, r4
 2119              	.LVL217:
1158:..\FreeRTOS9/tasks.c **** 			{
 2120              		.loc 1 1158 0
 2121 0012 9842     		cmp	r0, r3
 2122 0014 05D2     		bcs	.L176
1165:..\FreeRTOS9/tasks.c **** 				{
 2123              		.loc 1 1165 0
 2124 0016 8B42     		cmp	r3, r1
 2125 0018 09D9     		bls	.L180
1165:..\FreeRTOS9/tasks.c **** 				{
 2126              		.loc 1 1165 0 is_stmt 0 discriminator 1
 2127 001a 8842     		cmp	r0, r1
 2128 001c 09D3     		bcc	.L181
 2129              	.LBE7:
1143:..\FreeRTOS9/tasks.c **** 
 2130              		.loc 1 1143 0 is_stmt 1
 2131 001e 0023     		movs	r3, #0
 2132 0020 0CE0     		b	.L177
 2133              	.L176:
 2134              	.LBB8:
1179:..\FreeRTOS9/tasks.c **** 				{
 2135              		.loc 1 1179 0
 2136 0022 8B42     		cmp	r3, r1
 2137 0024 07D8     		bhi	.L182
1179:..\FreeRTOS9/tasks.c **** 				{
 2138              		.loc 1 1179 0 is_stmt 0 discriminator 1
 2139 0026 8842     		cmp	r0, r1
 2140 0028 07D3     		bcc	.L183
 2141              	.LBE8:
1143:..\FreeRTOS9/tasks.c **** 
 2142              		.loc 1 1143 0 is_stmt 1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 128


 2143 002a 0023     		movs	r3, #0
 2144 002c 06E0     		b	.L177
 2145              	.L180:
 2146 002e 0023     		movs	r3, #0
 2147 0030 04E0     		b	.L177
 2148              	.L181:
 2149              	.LBB9:
1167:..\FreeRTOS9/tasks.c **** 				}
 2150              		.loc 1 1167 0
 2151 0032 0123     		movs	r3, #1
 2152 0034 02E0     		b	.L177
 2153              	.L182:
1181:..\FreeRTOS9/tasks.c **** 				}
 2154              		.loc 1 1181 0
 2155 0036 0123     		movs	r3, #1
 2156 0038 00E0     		b	.L177
 2157              	.L183:
 2158 003a 0123     		movs	r3, #1
 2159              	.L177:
 2160              	.LVL218:
1190:..\FreeRTOS9/tasks.c **** 
 2161              		.loc 1 1190 0
 2162 003c 2960     		str	r1, [r5]
1192:..\FreeRTOS9/tasks.c **** 			{
 2163              		.loc 1 1192 0
 2164 003e 002B     		cmp	r3, #0
 2165 0040 03D0     		beq	.L178
1198:..\FreeRTOS9/tasks.c **** 			}
 2166              		.loc 1 1198 0
 2167 0042 081A     		subs	r0, r1, r0
 2168              	.LVL219:
 2169 0044 0021     		movs	r1, #0
 2170              	.LVL220:
 2171 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2172              	.LVL221:
 2173              	.L178:
 2174              	.LBE9:
1205:..\FreeRTOS9/tasks.c **** 
 2175              		.loc 1 1205 0
 2176 004a FFF7FEFF 		bl	xTaskResumeAll
 2177              	.LVL222:
1209:..\FreeRTOS9/tasks.c **** 		{
 2178              		.loc 1 1209 0
 2179 004e 0028     		cmp	r0, #0
 2180 0050 01D1     		bne	.L175
1211:..\FreeRTOS9/tasks.c **** 		}
 2181              		.loc 1 1211 0
 2182 0052 FFF7FEFF 		bl	vPortYield
 2183              	.LVL223:
 2184              	.L175:
1217:..\FreeRTOS9/tasks.c **** 
 2185              		.loc 1 1217 0
 2186              		@ sp needed
 2187              	.LVL224:
 2188              	.LVL225:
 2189 0056 70BD     		pop	{r4, r5, r6, pc}
 2190              	.L185:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 129


 2191              		.align	2
 2192              	.L184:
 2193 0058 80000000 		.word	.LANCHOR1
 2194              		.cfi_endproc
 2195              	.LFE36:
 2196              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2197              		.section	.text.vTaskDelay,"ax",%progbits
 2198              		.align	2
 2199              		.global	vTaskDelay
 2200              		.code	16
 2201              		.thumb_func
 2202              		.type	vTaskDelay, %function
 2203              	vTaskDelay:
 2204              	.LFB37:
1225:..\FreeRTOS9/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2205              		.loc 1 1225 0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              	.LVL226:
 2210 0000 10B5     		push	{r4, lr}
 2211              		.cfi_def_cfa_offset 8
 2212              		.cfi_offset 4, -8
 2213              		.cfi_offset 14, -4
 2214 0002 041E     		subs	r4, r0, #0
 2215              	.LVL227:
1229:..\FreeRTOS9/tasks.c **** 		{
 2216              		.loc 1 1229 0
 2217 0004 08D0     		beq	.L189
1232:..\FreeRTOS9/tasks.c **** 			{
 2218              		.loc 1 1232 0
 2219 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2220              	.LVL228:
1243:..\FreeRTOS9/tasks.c **** 			}
 2221              		.loc 1 1243 0
 2222 000a 0021     		movs	r1, #0
 2223 000c 2000     		movs	r0, r4
 2224 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2225              	.LVL229:
1245:..\FreeRTOS9/tasks.c **** 		}
 2226              		.loc 1 1245 0
 2227 0012 FFF7FEFF 		bl	xTaskResumeAll
 2228              	.LVL230:
 2229 0016 00E0     		b	.L187
 2230              	.LVL231:
 2231              	.L189:
1226:..\FreeRTOS9/tasks.c **** 
 2232              		.loc 1 1226 0
 2233 0018 0020     		movs	r0, #0
 2234              	.LVL232:
 2235              	.L187:
1254:..\FreeRTOS9/tasks.c **** 		{
 2236              		.loc 1 1254 0
 2237 001a 0028     		cmp	r0, #0
 2238 001c 01D1     		bne	.L186
1256:..\FreeRTOS9/tasks.c **** 		}
 2239              		.loc 1 1256 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 130


 2240 001e FFF7FEFF 		bl	vPortYield
 2241              	.LVL233:
 2242              	.L186:
1262:..\FreeRTOS9/tasks.c **** 
 2243              		.loc 1 1262 0
 2244              		@ sp needed
 2245              	.LVL234:
 2246 0022 10BD     		pop	{r4, pc}
 2247              		.cfi_endproc
 2248              	.LFE37:
 2249              		.size	vTaskDelay, .-vTaskDelay
 2250              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2251              		.align	2
 2252              		.code	16
 2253              		.thumb_func
 2254              		.type	prvCheckTasksWaitingTermination, %function
 2255              	prvCheckTasksWaitingTermination:
 2256              	.LFB67:
3366:..\FreeRTOS9/tasks.c **** 
 2257              		.loc 1 3366 0
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 0
 2260              		@ frame_needed = 0, uses_anonymous_args = 0
 2261 0000 70B5     		push	{r4, r5, r6, lr}
 2262              		.cfi_def_cfa_offset 16
 2263              		.cfi_offset 4, -16
 2264              		.cfi_offset 5, -12
 2265              		.cfi_offset 6, -8
 2266              		.cfi_offset 14, -4
 2267              	.LBB10:
3376:..\FreeRTOS9/tasks.c **** 		{
 2268              		.loc 1 3376 0
 2269 0002 1AE0     		b	.L192
 2270              	.L193:
3378:..\FreeRTOS9/tasks.c **** 			{
 2271              		.loc 1 3378 0
 2272 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2273              	.LVL235:
3380:..\FreeRTOS9/tasks.c **** 			}
 2274              		.loc 1 3380 0
 2275 0008 0E4B     		ldr	r3, .L194
 2276 000a DC6B     		ldr	r4, [r3, #60]
 2277              	.LVL236:
3382:..\FreeRTOS9/tasks.c **** 
 2278              		.loc 1 3382 0
 2279 000c FFF7FEFF 		bl	xTaskResumeAll
 2280              	.LVL237:
3384:..\FreeRTOS9/tasks.c **** 			{
 2281              		.loc 1 3384 0
 2282 0010 002C     		cmp	r4, #0
 2283 0012 12D0     		beq	.L192
 2284              	.LBB11:
3388:..\FreeRTOS9/tasks.c **** 				{
 2285              		.loc 1 3388 0
 2286 0014 FFF7FEFF 		bl	vPortEnterCritical
 2287              	.LVL238:
3390:..\FreeRTOS9/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 131


 2288              		.loc 1 3390 0
 2289 0018 0A4C     		ldr	r4, .L194
 2290              	.LVL239:
 2291 001a A36C     		ldr	r3, [r4, #72]
 2292 001c DD68     		ldr	r5, [r3, #12]
 2293              	.LVL240:
3391:..\FreeRTOS9/tasks.c **** 					--uxCurrentNumberOfTasks;
 2294              		.loc 1 3391 0
 2295 001e 281D     		adds	r0, r5, #4
 2296 0020 FFF7FEFF 		bl	uxListRemove
 2297              	.LVL241:
3392:..\FreeRTOS9/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2298              		.loc 1 3392 0
 2299 0024 636D     		ldr	r3, [r4, #84]
 2300 0026 013B     		subs	r3, r3, #1
 2301 0028 6365     		str	r3, [r4, #84]
3393:..\FreeRTOS9/tasks.c **** 				}
 2302              		.loc 1 3393 0
 2303 002a E36E     		ldr	r3, [r4, #108]
 2304 002c 013B     		subs	r3, r3, #1
 2305 002e E366     		str	r3, [r4, #108]
3395:..\FreeRTOS9/tasks.c **** 
 2306              		.loc 1 3395 0
 2307 0030 FFF7FEFF 		bl	vPortExitCritical
 2308              	.LVL242:
3397:..\FreeRTOS9/tasks.c **** 			}
 2309              		.loc 1 3397 0
 2310 0034 2800     		movs	r0, r5
 2311 0036 FFF7FEFF 		bl	prvDeleteTCB
 2312              	.LVL243:
 2313              	.L192:
 2314              	.LBE11:
3376:..\FreeRTOS9/tasks.c **** 		{
 2315              		.loc 1 3376 0
 2316 003a 024B     		ldr	r3, .L194
 2317 003c DB6E     		ldr	r3, [r3, #108]
 2318 003e 002B     		cmp	r3, #0
 2319 0040 E0D1     		bne	.L193
 2320              	.LBE10:
3406:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2321              		.loc 1 3406 0
 2322              		@ sp needed
 2323 0042 70BD     		pop	{r4, r5, r6, pc}
 2324              	.L195:
 2325              		.align	2
 2326              	.L194:
 2327 0044 80000000 		.word	.LANCHOR1
 2328              		.cfi_endproc
 2329              	.LFE67:
 2330              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 2331              		.section	.text.prvIdleTask,"ax",%progbits
 2332              		.align	2
 2333              		.code	16
 2334              		.thumb_func
 2335              		.type	prvIdleTask, %function
 2336              	prvIdleTask:
 2337              	.LFB63:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 132


3132:..\FreeRTOS9/tasks.c **** 	/* Stop warnings. */
 2338              		.loc 1 3132 0
 2339              		.cfi_startproc
 2340              		@ Volatile: function does not return.
 2341              		@ args = 0, pretend = 0, frame = 0
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 2343              	.LVL244:
 2344 0000 10B5     		push	{r4, lr}
 2345              		.cfi_def_cfa_offset 8
 2346              		.cfi_offset 4, -8
 2347              		.cfi_offset 14, -4
 2348              	.LVL245:
 2349              	.L197:
3143:..\FreeRTOS9/tasks.c **** 
 2350              		.loc 1 3143 0 discriminator 1
 2351 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2352              	.LVL246:
 2353 0006 FCE7     		b	.L197
 2354              		.cfi_endproc
 2355              	.LFE63:
 2356              		.size	prvIdleTask, .-prvIdleTask
 2357              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2358              		.align	2
 2359              		.global	vTaskSwitchContext
 2360              		.code	16
 2361              		.thumb_func
 2362              		.type	vTaskSwitchContext, %function
 2363              	vTaskSwitchContext:
 2364              	.LFB55:
2762:..\FreeRTOS9/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2365              		.loc 1 2762 0
 2366              		.cfi_startproc
 2367              		@ args = 0, pretend = 0, frame = 0
 2368              		@ frame_needed = 0, uses_anonymous_args = 0
 2369 0000 10B5     		push	{r4, lr}
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 4, -8
 2372              		.cfi_offset 14, -4
2763:..\FreeRTOS9/tasks.c **** 	{
 2373              		.loc 1 2763 0
 2374 0002 284B     		ldr	r3, .L206
 2375 0004 1B6F     		ldr	r3, [r3, #112]
 2376 0006 002B     		cmp	r3, #0
 2377 0008 03D0     		beq	.L199
2767:..\FreeRTOS9/tasks.c **** 	}
 2378              		.loc 1 2767 0
 2379 000a 0122     		movs	r2, #1
 2380 000c 264B     		ldr	r3, .L206+4
 2381 000e 1A60     		str	r2, [r3]
 2382 0010 46E0     		b	.L198
 2383              	.L199:
2771:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2384              		.loc 1 2771 0
 2385 0012 0022     		movs	r2, #0
 2386 0014 244B     		ldr	r3, .L206+4
 2387 0016 1A60     		str	r2, [r3]
 2388              	.LBB12:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 133


2802:..\FreeRTOS9/tasks.c **** 
 2389              		.loc 1 2802 0
 2390 0018 224B     		ldr	r3, .L206
 2391 001a 9B6D     		ldr	r3, [r3, #88]
 2392 001c 1B6B     		ldr	r3, [r3, #48]
 2393              	.LVL247:
 2394 001e 234A     		ldr	r2, .L206+8
 2395 0020 1968     		ldr	r1, [r3]
 2396 0022 9142     		cmp	r1, r2
 2397 0024 09D1     		bne	.L201
2802:..\FreeRTOS9/tasks.c **** 
 2398              		.loc 1 2802 0 is_stmt 0 discriminator 2
 2399 0026 5968     		ldr	r1, [r3, #4]
 2400 0028 9142     		cmp	r1, r2
 2401 002a 06D1     		bne	.L201
2802:..\FreeRTOS9/tasks.c **** 
 2402              		.loc 1 2802 0 discriminator 4
 2403 002c 9968     		ldr	r1, [r3, #8]
 2404 002e 9142     		cmp	r1, r2
 2405 0030 03D1     		bne	.L201
2802:..\FreeRTOS9/tasks.c **** 
 2406              		.loc 1 2802 0 discriminator 6
 2407 0032 DA68     		ldr	r2, [r3, #12]
 2408 0034 1D4B     		ldr	r3, .L206+8
 2409              	.LVL248:
 2410 0036 9A42     		cmp	r2, r3
 2411 0038 05D0     		beq	.L202
 2412              	.L201:
2802:..\FreeRTOS9/tasks.c **** 
 2413              		.loc 1 2802 0 discriminator 7
 2414 003a 1A4B     		ldr	r3, .L206
 2415 003c 986D     		ldr	r0, [r3, #88]
 2416 003e 996D     		ldr	r1, [r3, #88]
 2417 0040 3431     		adds	r1, r1, #52
 2418 0042 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2419              	.LVL249:
 2420              	.L202:
 2421              	.LBE12:
 2422              	.LBB13:
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2423              		.loc 1 2806 0 is_stmt 1
 2424 0046 174B     		ldr	r3, .L206
 2425 0048 5B6E     		ldr	r3, [r3, #100]
 2426              	.LVL250:
 2427 004a 00E0     		b	.L203
 2428              	.L204:
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2429              		.loc 1 2806 0 is_stmt 0 discriminator 3
 2430 004c 013B     		subs	r3, r3, #1
 2431              	.LVL251:
 2432              	.L203:
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2433              		.loc 1 2806 0 discriminator 1
 2434 004e 9900     		lsls	r1, r3, #2
 2435 0050 C918     		adds	r1, r1, r3
 2436 0052 8A00     		lsls	r2, r1, #2
 2437 0054 1649     		ldr	r1, .L206+12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 134


 2438 0056 8A18     		adds	r2, r1, r2
 2439 0058 126B     		ldr	r2, [r2, #48]
 2440 005a 002A     		cmp	r2, #0
 2441 005c F6D0     		beq	.L204
 2442              	.LVL252:
 2443              	.LBB14:
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2444              		.loc 1 2806 0 discriminator 4
 2445 005e 0A00     		movs	r2, r1
 2446 0060 9900     		lsls	r1, r3, #2
 2447 0062 CC18     		adds	r4, r1, r3
 2448 0064 A000     		lsls	r0, r4, #2
 2449 0066 1018     		adds	r0, r2, r0
 2450 0068 446B     		ldr	r4, [r0, #52]
 2451 006a 6468     		ldr	r4, [r4, #4]
 2452 006c 4463     		str	r4, [r0, #52]
 2453 006e 3032     		adds	r2, r2, #48
 2454 0070 1000     		movs	r0, r2
 2455 0072 C918     		adds	r1, r1, r3
 2456 0074 8A00     		lsls	r2, r1, #2
 2457 0076 0832     		adds	r2, r2, #8
 2458 0078 8218     		adds	r2, r0, r2
 2459 007a 9442     		cmp	r4, r2
 2460 007c 06D1     		bne	.L205
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2461              		.loc 1 2806 0 discriminator 5
 2462 007e 6068     		ldr	r0, [r4, #4]
 2463 0080 9900     		lsls	r1, r3, #2
 2464 0082 C918     		adds	r1, r1, r3
 2465 0084 8A00     		lsls	r2, r1, #2
 2466 0086 0A49     		ldr	r1, .L206+12
 2467 0088 8A18     		adds	r2, r1, r2
 2468 008a 5063     		str	r0, [r2, #52]
 2469              	.L205:
2806:..\FreeRTOS9/tasks.c **** 		traceTASK_SWITCHED_IN();
 2470              		.loc 1 2806 0 discriminator 7
 2471 008c 9900     		lsls	r1, r3, #2
 2472 008e C918     		adds	r1, r1, r3
 2473 0090 8A00     		lsls	r2, r1, #2
 2474 0092 0749     		ldr	r1, .L206+12
 2475 0094 8A18     		adds	r2, r1, r2
 2476 0096 526B     		ldr	r2, [r2, #52]
 2477 0098 D168     		ldr	r1, [r2, #12]
 2478 009a 024A     		ldr	r2, .L206
 2479 009c 9165     		str	r1, [r2, #88]
 2480              	.LBE14:
 2481 009e 5366     		str	r3, [r2, #100]
 2482              	.LVL253:
 2483              	.L198:
 2484              	.LBE13:
2817:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2485              		.loc 1 2817 0 is_stmt 1
 2486              		@ sp needed
 2487 00a0 10BD     		pop	{r4, pc}
 2488              	.L207:
 2489 00a2 C046     		.align	2
 2490              	.L206:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 135


 2491 00a4 80000000 		.word	.LANCHOR1
 2492 00a8 00010000 		.word	.LANCHOR2
 2493 00ac A5A5A5A5 		.word	-1515870811
 2494 00b0 00000000 		.word	.LANCHOR0
 2495              		.cfi_endproc
 2496              	.LFE55:
 2497              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2498              		.section	.text.vTaskSuspend,"ax",%progbits
 2499              		.align	2
 2500              		.global	vTaskSuspend
 2501              		.code	16
 2502              		.thumb_func
 2503              		.type	vTaskSuspend, %function
 2504              	vTaskSuspend:
 2505              	.LFB42:
1567:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 2506              		.loc 1 1567 0
 2507              		.cfi_startproc
 2508              		@ args = 0, pretend = 0, frame = 0
 2509              		@ frame_needed = 0, uses_anonymous_args = 0
 2510              	.LVL254:
 2511 0000 70B5     		push	{r4, r5, r6, lr}
 2512              		.cfi_def_cfa_offset 16
 2513              		.cfi_offset 4, -16
 2514              		.cfi_offset 5, -12
 2515              		.cfi_offset 6, -8
 2516              		.cfi_offset 14, -4
 2517 0002 0400     		movs	r4, r0
1570:..\FreeRTOS9/tasks.c **** 		{
 2518              		.loc 1 1570 0
 2519 0004 FFF7FEFF 		bl	vPortEnterCritical
 2520              	.LVL255:
1574:..\FreeRTOS9/tasks.c **** 
 2521              		.loc 1 1574 0
 2522 0008 002C     		cmp	r4, #0
 2523 000a 01D1     		bne	.L209
1574:..\FreeRTOS9/tasks.c **** 
 2524              		.loc 1 1574 0 is_stmt 0 discriminator 1
 2525 000c 1A4B     		ldr	r3, .L215
 2526 000e 9C6D     		ldr	r4, [r3, #88]
 2527              	.LVL256:
 2528              	.L209:
1580:..\FreeRTOS9/tasks.c **** 			{
 2529              		.loc 1 1580 0 is_stmt 1 discriminator 4
 2530 0010 251D     		adds	r5, r4, #4
 2531 0012 2800     		movs	r0, r5
 2532 0014 FFF7FEFF 		bl	uxListRemove
 2533              	.LVL257:
1590:..\FreeRTOS9/tasks.c **** 			{
 2534              		.loc 1 1590 0 discriminator 4
 2535 0018 A36A     		ldr	r3, [r4, #40]
 2536 001a 002B     		cmp	r3, #0
 2537 001c 03D0     		beq	.L210
1592:..\FreeRTOS9/tasks.c **** 			}
 2538              		.loc 1 1592 0
 2539 001e 2000     		movs	r0, r4
 2540 0020 1830     		adds	r0, r0, #24
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 136


 2541 0022 FFF7FEFF 		bl	uxListRemove
 2542              	.LVL258:
 2543              	.L210:
1599:..\FreeRTOS9/tasks.c **** 		}
 2544              		.loc 1 1599 0
 2545 0026 2900     		movs	r1, r5
 2546 0028 1448     		ldr	r0, .L215+4
 2547 002a FFF7FEFF 		bl	vListInsertEnd
 2548              	.LVL259:
1601:..\FreeRTOS9/tasks.c **** 
 2549              		.loc 1 1601 0
 2550 002e FFF7FEFF 		bl	vPortExitCritical
 2551              	.LVL260:
1603:..\FreeRTOS9/tasks.c **** 		{
 2552              		.loc 1 1603 0
 2553 0032 114B     		ldr	r3, .L215
 2554 0034 DB6D     		ldr	r3, [r3, #92]
 2555 0036 002B     		cmp	r3, #0
 2556 0038 05D0     		beq	.L211
1607:..\FreeRTOS9/tasks.c **** 			{
 2557              		.loc 1 1607 0
 2558 003a FFF7FEFF 		bl	vPortEnterCritical
 2559              	.LVL261:
1609:..\FreeRTOS9/tasks.c **** 			}
 2560              		.loc 1 1609 0
 2561 003e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2562              	.LVL262:
1611:..\FreeRTOS9/tasks.c **** 		}
 2563              		.loc 1 1611 0
 2564 0042 FFF7FEFF 		bl	vPortExitCritical
 2565              	.LVL263:
 2566              	.L211:
1618:..\FreeRTOS9/tasks.c **** 		{
 2567              		.loc 1 1618 0
 2568 0046 0C4B     		ldr	r3, .L215
 2569 0048 9B6D     		ldr	r3, [r3, #88]
 2570 004a 9C42     		cmp	r4, r3
 2571 004c 12D1     		bne	.L208
1620:..\FreeRTOS9/tasks.c **** 			{
 2572              		.loc 1 1620 0
 2573 004e 0A4B     		ldr	r3, .L215
 2574 0050 DB6D     		ldr	r3, [r3, #92]
 2575 0052 002B     		cmp	r3, #0
 2576 0054 02D0     		beq	.L213
1624:..\FreeRTOS9/tasks.c **** 			}
 2577              		.loc 1 1624 0
 2578 0056 FFF7FEFF 		bl	vPortYield
 2579              	.LVL264:
 2580 005a 0BE0     		b	.L208
 2581              	.L213:
1631:..\FreeRTOS9/tasks.c **** 				{
 2582              		.loc 1 1631 0
 2583 005c 074B     		ldr	r3, .L215+4
 2584 005e 1A68     		ldr	r2, [r3]
 2585 0060 054B     		ldr	r3, .L215
 2586 0062 5B6D     		ldr	r3, [r3, #84]
 2587 0064 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 137


 2588 0066 03D1     		bne	.L214
1637:..\FreeRTOS9/tasks.c **** 				}
 2589              		.loc 1 1637 0
 2590 0068 0022     		movs	r2, #0
 2591 006a 034B     		ldr	r3, .L215
 2592 006c 9A65     		str	r2, [r3, #88]
 2593 006e 01E0     		b	.L208
 2594              	.L214:
1641:..\FreeRTOS9/tasks.c **** 				}
 2595              		.loc 1 1641 0
 2596 0070 FFF7FEFF 		bl	vTaskSwitchContext
 2597              	.LVL265:
 2598              	.L208:
1649:..\FreeRTOS9/tasks.c **** 
 2599              		.loc 1 1649 0
 2600              		@ sp needed
 2601              	.LVL266:
 2602              	.LVL267:
 2603 0074 70BD     		pop	{r4, r5, r6, pc}
 2604              	.L216:
 2605 0076 C046     		.align	2
 2606              	.L215:
 2607 0078 80000000 		.word	.LANCHOR1
 2608 007c 00000000 		.word	.LANCHOR0
 2609              		.cfi_endproc
 2610              	.LFE42:
 2611              		.size	vTaskSuspend, .-vTaskSuspend
 2612              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2613              		.align	2
 2614              		.global	vTaskPlaceOnEventList
 2615              		.code	16
 2616              		.thumb_func
 2617              		.type	vTaskPlaceOnEventList, %function
 2618              	vTaskPlaceOnEventList:
 2619              	.LFB56:
2821:..\FreeRTOS9/tasks.c **** 	configASSERT( pxEventList );
 2620              		.loc 1 2821 0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              	.LVL268:
 2625 0000 10B5     		push	{r4, lr}
 2626              		.cfi_def_cfa_offset 8
 2627              		.cfi_offset 4, -8
 2628              		.cfi_offset 14, -4
 2629 0002 0C00     		movs	r4, r1
2831:..\FreeRTOS9/tasks.c **** 
 2630              		.loc 1 2831 0
 2631 0004 044B     		ldr	r3, .L218
 2632 0006 996D     		ldr	r1, [r3, #88]
 2633              	.LVL269:
 2634 0008 1831     		adds	r1, r1, #24
 2635 000a FFF7FEFF 		bl	vListInsert
 2636              	.LVL270:
2833:..\FreeRTOS9/tasks.c **** }
 2637              		.loc 1 2833 0
 2638 000e 0121     		movs	r1, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 138


 2639 0010 2000     		movs	r0, r4
 2640 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2641              	.LVL271:
2834:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2642              		.loc 1 2834 0
 2643              		@ sp needed
 2644              	.LVL272:
 2645 0016 10BD     		pop	{r4, pc}
 2646              	.L219:
 2647              		.align	2
 2648              	.L218:
 2649 0018 80000000 		.word	.LANCHOR1
 2650              		.cfi_endproc
 2651              	.LFE56:
 2652              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2653              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2654              		.align	2
 2655              		.global	vTaskPlaceOnUnorderedEventList
 2656              		.code	16
 2657              		.thumb_func
 2658              		.type	vTaskPlaceOnUnorderedEventList, %function
 2659              	vTaskPlaceOnUnorderedEventList:
 2660              	.LFB57:
2838:..\FreeRTOS9/tasks.c **** 	configASSERT( pxEventList );
 2661              		.loc 1 2838 0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 0
 2664              		@ frame_needed = 0, uses_anonymous_args = 0
 2665              	.LVL273:
 2666 0000 70B5     		push	{r4, r5, r6, lr}
 2667              		.cfi_def_cfa_offset 16
 2668              		.cfi_offset 4, -16
 2669              		.cfi_offset 5, -12
 2670              		.cfi_offset 6, -8
 2671              		.cfi_offset 14, -4
 2672 0002 1400     		movs	r4, r2
2848:..\FreeRTOS9/tasks.c **** 
 2673              		.loc 1 2848 0
 2674 0004 074B     		ldr	r3, .L221
 2675 0006 9A6D     		ldr	r2, [r3, #88]
 2676              	.LVL274:
 2677 0008 8025     		movs	r5, #128
 2678 000a 2D06     		lsls	r5, r5, #24
 2679 000c 2943     		orrs	r1, r5
 2680              	.LVL275:
 2681 000e 9161     		str	r1, [r2, #24]
2855:..\FreeRTOS9/tasks.c **** 
 2682              		.loc 1 2855 0
 2683 0010 996D     		ldr	r1, [r3, #88]
 2684 0012 1831     		adds	r1, r1, #24
 2685 0014 FFF7FEFF 		bl	vListInsertEnd
 2686              	.LVL276:
2857:..\FreeRTOS9/tasks.c **** }
 2687              		.loc 1 2857 0
 2688 0018 0121     		movs	r1, #1
 2689 001a 2000     		movs	r0, r4
 2690 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 139


 2691              	.LVL277:
2858:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2692              		.loc 1 2858 0
 2693              		@ sp needed
 2694              	.LVL278:
 2695 0020 70BD     		pop	{r4, r5, r6, pc}
 2696              	.L222:
 2697 0022 C046     		.align	2
 2698              	.L221:
 2699 0024 80000000 		.word	.LANCHOR1
 2700              		.cfi_endproc
 2701              	.LFE57:
 2702              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2703              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2704              		.align	2
 2705              		.global	xTaskRemoveFromEventList
 2706              		.code	16
 2707              		.thumb_func
 2708              		.type	xTaskRemoveFromEventList, %function
 2709              	xTaskRemoveFromEventList:
 2710              	.LFB58:
2895:..\FreeRTOS9/tasks.c **** TCB_t *pxUnblockedTCB;
 2711              		.loc 1 2895 0
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 0
 2714              		@ frame_needed = 0, uses_anonymous_args = 0
 2715              	.LVL279:
 2716 0000 70B5     		push	{r4, r5, r6, lr}
 2717              		.cfi_def_cfa_offset 16
 2718              		.cfi_offset 4, -16
 2719              		.cfi_offset 5, -12
 2720              		.cfi_offset 6, -8
 2721              		.cfi_offset 14, -4
2912:..\FreeRTOS9/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2722              		.loc 1 2912 0
 2723 0002 C368     		ldr	r3, [r0, #12]
 2724 0004 DC68     		ldr	r4, [r3, #12]
 2725              	.LVL280:
2914:..\FreeRTOS9/tasks.c **** 
 2726              		.loc 1 2914 0
 2727 0006 2500     		movs	r5, r4
 2728 0008 1835     		adds	r5, r5, #24
 2729 000a 2800     		movs	r0, r5
 2730              	.LVL281:
 2731 000c FFF7FEFF 		bl	uxListRemove
 2732              	.LVL282:
2916:..\FreeRTOS9/tasks.c **** 	{
 2733              		.loc 1 2916 0
 2734 0010 154B     		ldr	r3, .L229
 2735 0012 1B6F     		ldr	r3, [r3, #112]
 2736 0014 002B     		cmp	r3, #0
 2737 0016 14D1     		bne	.L224
2918:..\FreeRTOS9/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2738              		.loc 1 2918 0
 2739 0018 251D     		adds	r5, r4, #4
 2740 001a 2800     		movs	r0, r5
 2741 001c FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 140


 2742              	.LVL283:
2919:..\FreeRTOS9/tasks.c **** 	}
 2743              		.loc 1 2919 0
 2744 0020 E36A     		ldr	r3, [r4, #44]
 2745 0022 114A     		ldr	r2, .L229
 2746 0024 526E     		ldr	r2, [r2, #100]
 2747 0026 9342     		cmp	r3, r2
 2748 0028 01D9     		bls	.L225
2919:..\FreeRTOS9/tasks.c **** 	}
 2749              		.loc 1 2919 0 is_stmt 0 discriminator 1
 2750 002a 0F4A     		ldr	r2, .L229
 2751 002c 5366     		str	r3, [r2, #100]
 2752              	.L225:
2919:..\FreeRTOS9/tasks.c **** 	}
 2753              		.loc 1 2919 0 discriminator 3
 2754 002e 9A00     		lsls	r2, r3, #2
 2755 0030 D318     		adds	r3, r2, r3
 2756 0032 9A00     		lsls	r2, r3, #2
 2757 0034 0D48     		ldr	r0, .L229+4
 2758 0036 3030     		adds	r0, r0, #48
 2759 0038 8018     		adds	r0, r0, r2
 2760 003a 2900     		movs	r1, r5
 2761 003c FFF7FEFF 		bl	vListInsertEnd
 2762              	.LVL284:
 2763 0040 04E0     		b	.L226
 2764              	.L224:
2925:..\FreeRTOS9/tasks.c **** 	}
 2765              		.loc 1 2925 0 is_stmt 1
 2766 0042 2900     		movs	r1, r5
 2767 0044 0948     		ldr	r0, .L229+4
 2768 0046 1430     		adds	r0, r0, #20
 2769 0048 FFF7FEFF 		bl	vListInsertEnd
 2770              	.LVL285:
 2771              	.L226:
2928:..\FreeRTOS9/tasks.c **** 	{
 2772              		.loc 1 2928 0
 2773 004c E26A     		ldr	r2, [r4, #44]
 2774 004e 064B     		ldr	r3, .L229
 2775 0050 9B6D     		ldr	r3, [r3, #88]
 2776 0052 DB6A     		ldr	r3, [r3, #44]
 2777 0054 9A42     		cmp	r2, r3
 2778 0056 04D9     		bls	.L228
 2779              	.LVL286:
2937:..\FreeRTOS9/tasks.c **** 	}
 2780              		.loc 1 2937 0
 2781 0058 0122     		movs	r2, #1
 2782 005a 054B     		ldr	r3, .L229+8
 2783 005c 1A60     		str	r2, [r3]
2933:..\FreeRTOS9/tasks.c **** 
 2784              		.loc 1 2933 0
 2785 005e 0120     		movs	r0, #1
 2786 0060 00E0     		b	.L227
 2787              	.LVL287:
 2788              	.L228:
2941:..\FreeRTOS9/tasks.c **** 	}
 2789              		.loc 1 2941 0
 2790 0062 0020     		movs	r0, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 141


 2791              	.L227:
 2792              	.LVL288:
2959:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2793              		.loc 1 2959 0
 2794              		@ sp needed
 2795              	.LVL289:
 2796 0064 70BD     		pop	{r4, r5, r6, pc}
 2797              	.L230:
 2798 0066 C046     		.align	2
 2799              	.L229:
 2800 0068 80000000 		.word	.LANCHOR1
 2801 006c 00000000 		.word	.LANCHOR0
 2802 0070 00010000 		.word	.LANCHOR2
 2803              		.cfi_endproc
 2804              	.LFE58:
 2805              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2806              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2807              		.align	2
 2808              		.global	xTaskRemoveFromUnorderedEventList
 2809              		.code	16
 2810              		.thumb_func
 2811              		.type	xTaskRemoveFromUnorderedEventList, %function
 2812              	xTaskRemoveFromUnorderedEventList:
 2813              	.LFB59:
2963:..\FreeRTOS9/tasks.c **** TCB_t *pxUnblockedTCB;
 2814              		.loc 1 2963 0
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 2818              	.LVL290:
 2819 0000 70B5     		push	{r4, r5, r6, lr}
 2820              		.cfi_def_cfa_offset 16
 2821              		.cfi_offset 4, -16
 2822              		.cfi_offset 5, -12
 2823              		.cfi_offset 6, -8
 2824              		.cfi_offset 14, -4
2972:..\FreeRTOS9/tasks.c **** 
 2825              		.loc 1 2972 0
 2826 0002 8023     		movs	r3, #128
 2827 0004 1B06     		lsls	r3, r3, #24
 2828 0006 1943     		orrs	r1, r3
 2829              	.LVL291:
 2830 0008 0160     		str	r1, [r0]
2976:..\FreeRTOS9/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2831              		.loc 1 2976 0
 2832 000a C568     		ldr	r5, [r0, #12]
 2833              	.LVL292:
2978:..\FreeRTOS9/tasks.c **** 
 2834              		.loc 1 2978 0
 2835 000c FFF7FEFF 		bl	uxListRemove
 2836              	.LVL293:
2983:..\FreeRTOS9/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2837              		.loc 1 2983 0
 2838 0010 2C1D     		adds	r4, r5, #4
 2839 0012 2000     		movs	r0, r4
 2840 0014 FFF7FEFF 		bl	uxListRemove
 2841              	.LVL294:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 142


2984:..\FreeRTOS9/tasks.c **** 
 2842              		.loc 1 2984 0
 2843 0018 EB6A     		ldr	r3, [r5, #44]
 2844 001a 0E4A     		ldr	r2, .L235
 2845 001c 526E     		ldr	r2, [r2, #100]
 2846 001e 9342     		cmp	r3, r2
 2847 0020 01D9     		bls	.L232
2984:..\FreeRTOS9/tasks.c **** 
 2848              		.loc 1 2984 0 is_stmt 0 discriminator 1
 2849 0022 0C4A     		ldr	r2, .L235
 2850 0024 5366     		str	r3, [r2, #100]
 2851              	.L232:
2984:..\FreeRTOS9/tasks.c **** 
 2852              		.loc 1 2984 0 discriminator 3
 2853 0026 9A00     		lsls	r2, r3, #2
 2854 0028 D318     		adds	r3, r2, r3
 2855 002a 9A00     		lsls	r2, r3, #2
 2856 002c 0A48     		ldr	r0, .L235+4
 2857 002e 3030     		adds	r0, r0, #48
 2858 0030 8018     		adds	r0, r0, r2
 2859 0032 2100     		movs	r1, r4
 2860 0034 FFF7FEFF 		bl	vListInsertEnd
 2861              	.LVL295:
2986:..\FreeRTOS9/tasks.c **** 	{
 2862              		.loc 1 2986 0 is_stmt 1 discriminator 3
 2863 0038 EA6A     		ldr	r2, [r5, #44]
 2864 003a 064B     		ldr	r3, .L235
 2865 003c 9B6D     		ldr	r3, [r3, #88]
 2866 003e DB6A     		ldr	r3, [r3, #44]
 2867 0040 9A42     		cmp	r2, r3
 2868 0042 04D9     		bls	.L234
 2869              	.LVL296:
2996:..\FreeRTOS9/tasks.c **** 	}
 2870              		.loc 1 2996 0
 2871 0044 0122     		movs	r2, #1
 2872 0046 054B     		ldr	r3, .L235+8
 2873 0048 1A60     		str	r2, [r3]
2992:..\FreeRTOS9/tasks.c **** 
 2874              		.loc 1 2992 0
 2875 004a 0120     		movs	r0, #1
 2876 004c 00E0     		b	.L233
 2877              	.LVL297:
 2878              	.L234:
3000:..\FreeRTOS9/tasks.c **** 	}
 2879              		.loc 1 3000 0
 2880 004e 0020     		movs	r0, #0
 2881              	.L233:
 2882              	.LVL298:
3004:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2883              		.loc 1 3004 0
 2884              		@ sp needed
 2885              	.LVL299:
 2886 0050 70BD     		pop	{r4, r5, r6, pc}
 2887              	.L236:
 2888 0052 C046     		.align	2
 2889              	.L235:
 2890 0054 80000000 		.word	.LANCHOR1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 143


 2891 0058 00000000 		.word	.LANCHOR0
 2892 005c 00010000 		.word	.LANCHOR2
 2893              		.cfi_endproc
 2894              	.LFE59:
 2895              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 2896              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2897              		.align	2
 2898              		.global	vTaskSetTimeOutState
 2899              		.code	16
 2900              		.thumb_func
 2901              		.type	vTaskSetTimeOutState, %function
 2902              	vTaskSetTimeOutState:
 2903              	.LFB60:
3008:..\FreeRTOS9/tasks.c **** 	configASSERT( pxTimeOut );
 2904              		.loc 1 3008 0
 2905              		.cfi_startproc
 2906              		@ args = 0, pretend = 0, frame = 0
 2907              		@ frame_needed = 0, uses_anonymous_args = 0
 2908              		@ link register save eliminated.
 2909              	.LVL300:
3010:..\FreeRTOS9/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2910              		.loc 1 3010 0
 2911 0000 024B     		ldr	r3, .L238
 2912 0002 9A6F     		ldr	r2, [r3, #120]
 2913 0004 0260     		str	r2, [r0]
3011:..\FreeRTOS9/tasks.c **** }
 2914              		.loc 1 3011 0
 2915 0006 9B6E     		ldr	r3, [r3, #104]
 2916 0008 4360     		str	r3, [r0, #4]
3012:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 2917              		.loc 1 3012 0
 2918              		@ sp needed
 2919 000a 7047     		bx	lr
 2920              	.L239:
 2921              		.align	2
 2922              	.L238:
 2923 000c 80000000 		.word	.LANCHOR1
 2924              		.cfi_endproc
 2925              	.LFE60:
 2926              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2927              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2928              		.align	2
 2929              		.global	xTaskCheckForTimeOut
 2930              		.code	16
 2931              		.thumb_func
 2932              		.type	xTaskCheckForTimeOut, %function
 2933              	xTaskCheckForTimeOut:
 2934              	.LFB61:
3016:..\FreeRTOS9/tasks.c **** BaseType_t xReturn;
 2935              		.loc 1 3016 0
 2936              		.cfi_startproc
 2937              		@ args = 0, pretend = 0, frame = 0
 2938              		@ frame_needed = 0, uses_anonymous_args = 0
 2939              	.LVL301:
 2940 0000 70B5     		push	{r4, r5, r6, lr}
 2941              		.cfi_def_cfa_offset 16
 2942              		.cfi_offset 4, -16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 144


 2943              		.cfi_offset 5, -12
 2944              		.cfi_offset 6, -8
 2945              		.cfi_offset 14, -4
 2946 0002 0400     		movs	r4, r0
 2947 0004 0D00     		movs	r5, r1
3022:..\FreeRTOS9/tasks.c **** 	{
 2948              		.loc 1 3022 0
 2949 0006 FFF7FEFF 		bl	vPortEnterCritical
 2950              	.LVL302:
 2951              	.LBB15:
3025:..\FreeRTOS9/tasks.c **** 
 2952              		.loc 1 3025 0
 2953 000a 114B     		ldr	r3, .L246
 2954 000c 9A6E     		ldr	r2, [r3, #104]
 2955              	.LVL303:
3039:..\FreeRTOS9/tasks.c **** 			{
 2956              		.loc 1 3039 0
 2957 000e 2B68     		ldr	r3, [r5]
 2958 0010 591C     		adds	r1, r3, #1
 2959 0012 13D0     		beq	.L243
3049:..\FreeRTOS9/tasks.c **** 		{
 2960              		.loc 1 3049 0
 2961 0014 0E49     		ldr	r1, .L246
 2962 0016 896F     		ldr	r1, [r1, #120]
 2963 0018 2068     		ldr	r0, [r4]
 2964 001a 8842     		cmp	r0, r1
 2965 001c 02D0     		beq	.L242
3049:..\FreeRTOS9/tasks.c **** 		{
 2966              		.loc 1 3049 0 is_stmt 0 discriminator 1
 2967 001e 6168     		ldr	r1, [r4, #4]
 2968 0020 8A42     		cmp	r2, r1
 2969 0022 0DD2     		bcs	.L244
 2970              	.L242:
3058:..\FreeRTOS9/tasks.c **** 		{
 2971              		.loc 1 3058 0 is_stmt 1
 2972 0024 6168     		ldr	r1, [r4, #4]
 2973 0026 501A     		subs	r0, r2, r1
 2974 0028 8342     		cmp	r3, r0
 2975 002a 0BD9     		bls	.L245
3061:..\FreeRTOS9/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2976              		.loc 1 3061 0
 2977 002c 8A1A     		subs	r2, r1, r2
 2978              	.LVL304:
 2979 002e 9B18     		adds	r3, r3, r2
 2980 0030 2B60     		str	r3, [r5]
3062:..\FreeRTOS9/tasks.c **** 			xReturn = pdFALSE;
 2981              		.loc 1 3062 0
 2982 0032 2000     		movs	r0, r4
 2983 0034 FFF7FEFF 		bl	vTaskSetTimeOutState
 2984              	.LVL305:
3063:..\FreeRTOS9/tasks.c **** 		}
 2985              		.loc 1 3063 0
 2986 0038 0024     		movs	r4, #0
 2987              	.LVL306:
 2988 003a 04E0     		b	.L241
 2989              	.LVL307:
 2990              	.L243:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 145


3044:..\FreeRTOS9/tasks.c **** 			}
 2991              		.loc 1 3044 0
 2992 003c 0024     		movs	r4, #0
 2993              	.LVL308:
 2994 003e 02E0     		b	.L241
 2995              	.LVL309:
 2996              	.L244:
3056:..\FreeRTOS9/tasks.c **** 		}
 2997              		.loc 1 3056 0
 2998 0040 0124     		movs	r4, #1
 2999              	.LVL310:
 3000 0042 00E0     		b	.L241
 3001              	.LVL311:
 3002              	.L245:
3067:..\FreeRTOS9/tasks.c **** 		}
 3003              		.loc 1 3067 0
 3004 0044 0124     		movs	r4, #1
 3005              	.LVL312:
 3006              	.L241:
 3007              	.LBE15:
3070:..\FreeRTOS9/tasks.c **** 
 3008              		.loc 1 3070 0
 3009 0046 FFF7FEFF 		bl	vPortExitCritical
 3010              	.LVL313:
3073:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 3011              		.loc 1 3073 0
 3012 004a 2000     		movs	r0, r4
 3013              		@ sp needed
 3014              	.LVL314:
 3015              	.LVL315:
 3016 004c 70BD     		pop	{r4, r5, r6, pc}
 3017              	.L247:
 3018 004e C046     		.align	2
 3019              	.L246:
 3020 0050 80000000 		.word	.LANCHOR1
 3021              		.cfi_endproc
 3022              	.LFE61:
 3023              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3024              		.section	.text.vTaskMissedYield,"ax",%progbits
 3025              		.align	2
 3026              		.global	vTaskMissedYield
 3027              		.code	16
 3028              		.thumb_func
 3029              		.type	vTaskMissedYield, %function
 3030              	vTaskMissedYield:
 3031              	.LFB62:
3077:..\FreeRTOS9/tasks.c **** 	xYieldPending = pdTRUE;
 3032              		.loc 1 3077 0
 3033              		.cfi_startproc
 3034              		@ args = 0, pretend = 0, frame = 0
 3035              		@ frame_needed = 0, uses_anonymous_args = 0
 3036              		@ link register save eliminated.
3078:..\FreeRTOS9/tasks.c **** }
 3037              		.loc 1 3078 0
 3038 0000 0122     		movs	r2, #1
 3039 0002 014B     		ldr	r3, .L249
 3040 0004 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 146


3079:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 3041              		.loc 1 3079 0
 3042              		@ sp needed
 3043 0006 7047     		bx	lr
 3044              	.L250:
 3045              		.align	2
 3046              	.L249:
 3047 0008 00010000 		.word	.LANCHOR2
 3048              		.cfi_endproc
 3049              	.LFE62:
 3050              		.size	vTaskMissedYield, .-vTaskMissedYield
 3051              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3052              		.align	2
 3053              		.global	vTaskSetThreadLocalStoragePointer
 3054              		.code	16
 3055              		.thumb_func
 3056              		.type	vTaskSetThreadLocalStoragePointer, %function
 3057              	vTaskSetThreadLocalStoragePointer:
 3058              	.LFB64:
3281:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 3059              		.loc 1 3281 0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 3063              		@ link register save eliminated.
 3064              	.LVL316:
3284:..\FreeRTOS9/tasks.c **** 		{
 3065              		.loc 1 3284 0
 3066 0000 0429     		cmp	r1, #4
 3067 0002 07DC     		bgt	.L251
3286:..\FreeRTOS9/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3068              		.loc 1 3286 0
 3069 0004 0028     		cmp	r0, #0
 3070 0006 01D1     		bne	.L253
3286:..\FreeRTOS9/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3071              		.loc 1 3286 0 is_stmt 0 discriminator 1
 3072 0008 034B     		ldr	r3, .L254
 3073 000a 986D     		ldr	r0, [r3, #88]
 3074              	.LVL317:
 3075              	.L253:
3287:..\FreeRTOS9/tasks.c **** 		}
 3076              		.loc 1 3287 0 is_stmt 1 discriminator 4
 3077 000c 1231     		adds	r1, r1, #18
 3078              	.LVL318:
 3079 000e 8900     		lsls	r1, r1, #2
 3080              	.LVL319:
 3081 0010 4018     		adds	r0, r0, r1
 3082              	.LVL320:
 3083 0012 4260     		str	r2, [r0, #4]
 3084              	.L251:
3289:..\FreeRTOS9/tasks.c **** 
 3085              		.loc 1 3289 0
 3086              		@ sp needed
 3087 0014 7047     		bx	lr
 3088              	.L255:
 3089 0016 C046     		.align	2
 3090              	.L254:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 147


 3091 0018 80000000 		.word	.LANCHOR1
 3092              		.cfi_endproc
 3093              	.LFE64:
 3094              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3095              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3096              		.align	2
 3097              		.global	pvTaskGetThreadLocalStoragePointer
 3098              		.code	16
 3099              		.thumb_func
 3100              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3101              	pvTaskGetThreadLocalStoragePointer:
 3102              	.LFB65:
3297:..\FreeRTOS9/tasks.c **** 	void *pvReturn = NULL;
 3103              		.loc 1 3297 0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 3107              		@ link register save eliminated.
 3108              	.LVL321:
3301:..\FreeRTOS9/tasks.c **** 		{
 3109              		.loc 1 3301 0
 3110 0000 0429     		cmp	r1, #4
 3111 0002 08DC     		bgt	.L259
3303:..\FreeRTOS9/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3112              		.loc 1 3303 0
 3113 0004 0028     		cmp	r0, #0
 3114 0006 01D1     		bne	.L258
3303:..\FreeRTOS9/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3115              		.loc 1 3303 0 is_stmt 0 discriminator 1
 3116 0008 044B     		ldr	r3, .L260
 3117 000a 986D     		ldr	r0, [r3, #88]
 3118              	.LVL322:
 3119              	.L258:
3304:..\FreeRTOS9/tasks.c **** 		}
 3120              		.loc 1 3304 0 is_stmt 1 discriminator 4
 3121 000c 1231     		adds	r1, r1, #18
 3122              	.LVL323:
 3123 000e 8900     		lsls	r1, r1, #2
 3124              	.LVL324:
 3125 0010 4018     		adds	r0, r0, r1
 3126              	.LVL325:
 3127 0012 4068     		ldr	r0, [r0, #4]
 3128              	.LVL326:
 3129 0014 00E0     		b	.L257
 3130              	.LVL327:
 3131              	.L259:
3308:..\FreeRTOS9/tasks.c **** 		}
 3132              		.loc 1 3308 0
 3133 0016 0020     		movs	r0, #0
 3134              	.LVL328:
 3135              	.L257:
3312:..\FreeRTOS9/tasks.c **** 
 3136              		.loc 1 3312 0
 3137              		@ sp needed
 3138 0018 7047     		bx	lr
 3139              	.L261:
 3140 001a C046     		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 148


 3141              	.L260:
 3142 001c 80000000 		.word	.LANCHOR1
 3143              		.cfi_endproc
 3144              	.LFE65:
 3145              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3146              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3147              		.align	2
 3148              		.global	uxTaskGetStackHighWaterMark
 3149              		.code	16
 3150              		.thumb_func
 3151              		.type	uxTaskGetStackHighWaterMark, %function
 3152              	uxTaskGetStackHighWaterMark:
 3153              	.LFB69:
3554:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 3154              		.loc 1 3554 0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 0
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 3158              	.LVL329:
 3159 0000 10B5     		push	{r4, lr}
 3160              		.cfi_def_cfa_offset 8
 3161              		.cfi_offset 4, -8
 3162              		.cfi_offset 14, -4
3559:..\FreeRTOS9/tasks.c **** 
 3163              		.loc 1 3559 0
 3164 0002 0028     		cmp	r0, #0
 3165 0004 01D1     		bne	.L263
3559:..\FreeRTOS9/tasks.c **** 
 3166              		.loc 1 3559 0 is_stmt 0 discriminator 1
 3167 0006 034B     		ldr	r3, .L264
 3168 0008 986D     		ldr	r0, [r3, #88]
 3169              	.LVL330:
 3170              	.L263:
3563:..\FreeRTOS9/tasks.c **** 		}
 3171              		.loc 1 3563 0 is_stmt 1 discriminator 4
 3172 000a 006B     		ldr	r0, [r0, #48]
 3173              	.LVL331:
3571:..\FreeRTOS9/tasks.c **** 
 3174              		.loc 1 3571 0 discriminator 4
 3175 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3176              	.LVL332:
3574:..\FreeRTOS9/tasks.c **** 
 3177              		.loc 1 3574 0 discriminator 4
 3178              		@ sp needed
 3179 0010 10BD     		pop	{r4, pc}
 3180              	.L265:
 3181 0012 C046     		.align	2
 3182              	.L264:
 3183 0014 80000000 		.word	.LANCHOR1
 3184              		.cfi_endproc
 3185              	.LFE69:
 3186              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3187              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3188              		.align	2
 3189              		.global	xTaskGetCurrentTaskHandle
 3190              		.code	16
 3191              		.thumb_func
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 149


 3192              		.type	xTaskGetCurrentTaskHandle, %function
 3193              	xTaskGetCurrentTaskHandle:
 3194              	.LFB72:
3662:..\FreeRTOS9/tasks.c **** 	TaskHandle_t xReturn;
 3195              		.loc 1 3662 0
 3196              		.cfi_startproc
 3197              		@ args = 0, pretend = 0, frame = 0
 3198              		@ frame_needed = 0, uses_anonymous_args = 0
 3199              		@ link register save eliminated.
3668:..\FreeRTOS9/tasks.c **** 
 3200              		.loc 1 3668 0
 3201 0000 014B     		ldr	r3, .L267
 3202 0002 986D     		ldr	r0, [r3, #88]
 3203              	.LVL333:
3671:..\FreeRTOS9/tasks.c **** 
 3204              		.loc 1 3671 0
 3205              		@ sp needed
 3206 0004 7047     		bx	lr
 3207              	.L268:
 3208 0006 C046     		.align	2
 3209              	.L267:
 3210 0008 80000000 		.word	.LANCHOR1
 3211              		.cfi_endproc
 3212              	.LFE72:
 3213              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3214              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3215              		.align	2
 3216              		.global	xTaskGetSchedulerState
 3217              		.code	16
 3218              		.thumb_func
 3219              		.type	xTaskGetSchedulerState, %function
 3220              	xTaskGetSchedulerState:
 3221              	.LFB73:
3679:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
 3222              		.loc 1 3679 0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 0
 3225              		@ frame_needed = 0, uses_anonymous_args = 0
 3226              		@ link register save eliminated.
3682:..\FreeRTOS9/tasks.c **** 		{
 3227              		.loc 1 3682 0
 3228 0000 064B     		ldr	r3, .L273
 3229 0002 DB6D     		ldr	r3, [r3, #92]
 3230 0004 002B     		cmp	r3, #0
 3231 0006 05D0     		beq	.L271
3688:..\FreeRTOS9/tasks.c **** 			{
 3232              		.loc 1 3688 0
 3233 0008 044B     		ldr	r3, .L273
 3234 000a 1B6F     		ldr	r3, [r3, #112]
 3235 000c 002B     		cmp	r3, #0
 3236 000e 03D1     		bne	.L272
3690:..\FreeRTOS9/tasks.c **** 			}
 3237              		.loc 1 3690 0
 3238 0010 0220     		movs	r0, #2
 3239 0012 02E0     		b	.L270
 3240              	.L271:
3684:..\FreeRTOS9/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 150


 3241              		.loc 1 3684 0
 3242 0014 0120     		movs	r0, #1
 3243 0016 00E0     		b	.L270
 3244              	.L272:
3694:..\FreeRTOS9/tasks.c **** 			}
 3245              		.loc 1 3694 0
 3246 0018 0020     		movs	r0, #0
 3247              	.L270:
 3248              	.LVL334:
3699:..\FreeRTOS9/tasks.c **** 
 3249              		.loc 1 3699 0
 3250              		@ sp needed
 3251 001a 7047     		bx	lr
 3252              	.L274:
 3253              		.align	2
 3254              	.L273:
 3255 001c 80000000 		.word	.LANCHOR1
 3256              		.cfi_endproc
 3257              	.LFE73:
 3258              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3259              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3260              		.align	2
 3261              		.global	vTaskPriorityInherit
 3262              		.code	16
 3263              		.thumb_func
 3264              		.type	vTaskPriorityInherit, %function
 3265              	vTaskPriorityInherit:
 3266              	.LFB74:
3707:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3267              		.loc 1 3707 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 3271              	.LVL335:
 3272 0000 70B5     		push	{r4, r5, r6, lr}
 3273              		.cfi_def_cfa_offset 16
 3274              		.cfi_offset 4, -16
 3275              		.cfi_offset 5, -12
 3276              		.cfi_offset 6, -8
 3277              		.cfi_offset 14, -4
 3278 0002 041E     		subs	r4, r0, #0
 3279              	.LVL336:
3712:..\FreeRTOS9/tasks.c **** 		{
 3280              		.loc 1 3712 0
 3281 0004 37D0     		beq	.L275
3717:..\FreeRTOS9/tasks.c **** 			{
 3282              		.loc 1 3717 0
 3283 0006 C36A     		ldr	r3, [r0, #44]
 3284 0008 1B4A     		ldr	r2, .L282
 3285 000a 926D     		ldr	r2, [r2, #88]
 3286 000c D26A     		ldr	r2, [r2, #44]
 3287 000e 9342     		cmp	r3, r2
 3288 0010 31D2     		bcs	.L275
3722:..\FreeRTOS9/tasks.c **** 				{
 3289              		.loc 1 3722 0
 3290 0012 8269     		ldr	r2, [r0, #24]
 3291 0014 002A     		cmp	r2, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 151


 3292 0016 05DB     		blt	.L277
3724:..\FreeRTOS9/tasks.c **** 				}
 3293              		.loc 1 3724 0
 3294 0018 174A     		ldr	r2, .L282
 3295 001a 926D     		ldr	r2, [r2, #88]
 3296 001c D16A     		ldr	r1, [r2, #44]
 3297 001e 0522     		movs	r2, #5
 3298 0020 521A     		subs	r2, r2, r1
 3299 0022 8261     		str	r2, [r0, #24]
 3300              	.L277:
3733:..\FreeRTOS9/tasks.c **** 				{
 3301              		.loc 1 3733 0
 3302 0024 9A00     		lsls	r2, r3, #2
 3303 0026 D318     		adds	r3, r2, r3
 3304 0028 9A00     		lsls	r2, r3, #2
 3305 002a 144B     		ldr	r3, .L282+4
 3306 002c 3033     		adds	r3, r3, #48
 3307 002e 9A18     		adds	r2, r3, r2
 3308 0030 6369     		ldr	r3, [r4, #20]
 3309 0032 9342     		cmp	r3, r2
 3310 0034 01D1     		bne	.L281
 3311 0036 0123     		movs	r3, #1
 3312 0038 00E0     		b	.L278
 3313              	.L281:
 3314 003a 0023     		movs	r3, #0
 3315              	.L278:
3733:..\FreeRTOS9/tasks.c **** 				{
 3316              		.loc 1 3733 0 is_stmt 0 discriminator 4
 3317 003c 002B     		cmp	r3, #0
 3318 003e 16D0     		beq	.L279
3735:..\FreeRTOS9/tasks.c **** 					{
 3319              		.loc 1 3735 0 is_stmt 1
 3320 0040 251D     		adds	r5, r4, #4
 3321 0042 2800     		movs	r0, r5
 3322              	.LVL337:
 3323 0044 FFF7FEFF 		bl	uxListRemove
 3324              	.LVL338:
3745:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3325              		.loc 1 3745 0
 3326 0048 0B4A     		ldr	r2, .L282
 3327 004a 936D     		ldr	r3, [r2, #88]
 3328 004c DB6A     		ldr	r3, [r3, #44]
 3329 004e E362     		str	r3, [r4, #44]
3746:..\FreeRTOS9/tasks.c **** 				}
 3330              		.loc 1 3746 0
 3331 0050 526E     		ldr	r2, [r2, #100]
 3332 0052 9342     		cmp	r3, r2
 3333 0054 01D9     		bls	.L280
3746:..\FreeRTOS9/tasks.c **** 				}
 3334              		.loc 1 3746 0 is_stmt 0 discriminator 1
 3335 0056 084A     		ldr	r2, .L282
 3336 0058 5366     		str	r3, [r2, #100]
 3337              	.L280:
3746:..\FreeRTOS9/tasks.c **** 				}
 3338              		.loc 1 3746 0 discriminator 3
 3339 005a 9A00     		lsls	r2, r3, #2
 3340 005c D318     		adds	r3, r2, r3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 152


 3341 005e 9A00     		lsls	r2, r3, #2
 3342 0060 0648     		ldr	r0, .L282+4
 3343 0062 3030     		adds	r0, r0, #48
 3344 0064 8018     		adds	r0, r0, r2
 3345 0066 2900     		movs	r1, r5
 3346 0068 FFF7FEFF 		bl	vListInsertEnd
 3347              	.LVL339:
 3348 006c 03E0     		b	.L275
 3349              	.LVL340:
 3350              	.L279:
3751:..\FreeRTOS9/tasks.c **** 				}
 3351              		.loc 1 3751 0 is_stmt 1
 3352 006e 024B     		ldr	r3, .L282
 3353 0070 9B6D     		ldr	r3, [r3, #88]
 3354 0072 DB6A     		ldr	r3, [r3, #44]
 3355 0074 E362     		str	r3, [r4, #44]
 3356              	.LVL341:
 3357              	.L275:
3765:..\FreeRTOS9/tasks.c **** 
 3358              		.loc 1 3765 0
 3359              		@ sp needed
 3360              	.LVL342:
 3361 0076 70BD     		pop	{r4, r5, r6, pc}
 3362              	.L283:
 3363              		.align	2
 3364              	.L282:
 3365 0078 80000000 		.word	.LANCHOR1
 3366 007c 00000000 		.word	.LANCHOR0
 3367              		.cfi_endproc
 3368              	.LFE74:
 3369              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 3370              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3371              		.align	2
 3372              		.global	xTaskPriorityDisinherit
 3373              		.code	16
 3374              		.thumb_func
 3375              		.type	xTaskPriorityDisinherit, %function
 3376              	xTaskPriorityDisinherit:
 3377              	.LFB75:
3773:..\FreeRTOS9/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3378              		.loc 1 3773 0
 3379              		.cfi_startproc
 3380              		@ args = 0, pretend = 0, frame = 0
 3381              		@ frame_needed = 0, uses_anonymous_args = 0
 3382              	.LVL343:
 3383 0000 70B5     		push	{r4, r5, r6, lr}
 3384              		.cfi_def_cfa_offset 16
 3385              		.cfi_offset 4, -16
 3386              		.cfi_offset 5, -12
 3387              		.cfi_offset 6, -8
 3388              		.cfi_offset 14, -4
 3389 0002 041E     		subs	r4, r0, #0
 3390              	.LVL344:
3777:..\FreeRTOS9/tasks.c **** 		{
 3391              		.loc 1 3777 0
 3392 0004 22D0     		beq	.L287
3786:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 153


 3393              		.loc 1 3786 0
 3394 0006 836C     		ldr	r3, [r0, #72]
 3395 0008 013B     		subs	r3, r3, #1
 3396 000a 8364     		str	r3, [r0, #72]
3790:..\FreeRTOS9/tasks.c **** 			{
 3397              		.loc 1 3790 0
 3398 000c C26A     		ldr	r2, [r0, #44]
 3399 000e 416C     		ldr	r1, [r0, #68]
 3400 0010 8A42     		cmp	r2, r1
 3401 0012 1DD0     		beq	.L288
3793:..\FreeRTOS9/tasks.c **** 				{
 3402              		.loc 1 3793 0
 3403 0014 002B     		cmp	r3, #0
 3404 0016 1DD1     		bne	.L289
3800:..\FreeRTOS9/tasks.c **** 					{
 3405              		.loc 1 3800 0
 3406 0018 051D     		adds	r5, r0, #4
 3407 001a 2800     		movs	r0, r5
 3408              	.LVL345:
 3409 001c FFF7FEFF 		bl	uxListRemove
 3410              	.LVL346:
3812:..\FreeRTOS9/tasks.c **** 
 3411              		.loc 1 3812 0
 3412 0020 636C     		ldr	r3, [r4, #68]
 3413 0022 E362     		str	r3, [r4, #44]
3817:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3414              		.loc 1 3817 0
 3415 0024 0522     		movs	r2, #5
 3416 0026 D21A     		subs	r2, r2, r3
 3417 0028 A261     		str	r2, [r4, #24]
3818:..\FreeRTOS9/tasks.c **** 
 3418              		.loc 1 3818 0
 3419 002a 0B4A     		ldr	r2, .L290
 3420 002c 526E     		ldr	r2, [r2, #100]
 3421 002e 9342     		cmp	r3, r2
 3422 0030 01D9     		bls	.L286
3818:..\FreeRTOS9/tasks.c **** 
 3423              		.loc 1 3818 0 is_stmt 0 discriminator 1
 3424 0032 094A     		ldr	r2, .L290
 3425 0034 5366     		str	r3, [r2, #100]
 3426              	.L286:
3818:..\FreeRTOS9/tasks.c **** 
 3427              		.loc 1 3818 0 discriminator 3
 3428 0036 9A00     		lsls	r2, r3, #2
 3429 0038 D318     		adds	r3, r2, r3
 3430 003a 9A00     		lsls	r2, r3, #2
 3431 003c 0748     		ldr	r0, .L290+4
 3432 003e 3030     		adds	r0, r0, #48
 3433 0040 8018     		adds	r0, r0, r2
 3434 0042 2900     		movs	r1, r5
 3435 0044 FFF7FEFF 		bl	vListInsertEnd
 3436              	.LVL347:
3828:..\FreeRTOS9/tasks.c **** 				}
 3437              		.loc 1 3828 0 is_stmt 1 discriminator 3
 3438 0048 0120     		movs	r0, #1
 3439 004a 04E0     		b	.L285
 3440              	.LVL348:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 154


 3441              	.L287:
3775:..\FreeRTOS9/tasks.c **** 
 3442              		.loc 1 3775 0
 3443 004c 0020     		movs	r0, #0
 3444              	.LVL349:
 3445 004e 02E0     		b	.L285
 3446              	.LVL350:
 3447              	.L288:
 3448 0050 0020     		movs	r0, #0
 3449              	.LVL351:
 3450 0052 00E0     		b	.L285
 3451              	.LVL352:
 3452              	.L289:
 3453 0054 0020     		movs	r0, #0
 3454              	.LVL353:
 3455              	.L285:
3846:..\FreeRTOS9/tasks.c **** 
 3456              		.loc 1 3846 0
 3457              		@ sp needed
 3458              	.LVL354:
 3459 0056 70BD     		pop	{r4, r5, r6, pc}
 3460              	.L291:
 3461              		.align	2
 3462              	.L290:
 3463 0058 80000000 		.word	.LANCHOR1
 3464 005c 00000000 		.word	.LANCHOR0
 3465              		.cfi_endproc
 3466              	.LFE75:
 3467              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3468              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3469              		.align	2
 3470              		.global	uxTaskResetEventItemValue
 3471              		.code	16
 3472              		.thumb_func
 3473              		.type	uxTaskResetEventItemValue, %function
 3474              	uxTaskResetEventItemValue:
 3475              	.LFB76:
4163:..\FreeRTOS9/tasks.c **** TickType_t uxReturn;
 3476              		.loc 1 4163 0
 3477              		.cfi_startproc
 3478              		@ args = 0, pretend = 0, frame = 0
 3479              		@ frame_needed = 0, uses_anonymous_args = 0
 3480              		@ link register save eliminated.
4166:..\FreeRTOS9/tasks.c **** 
 3481              		.loc 1 4166 0
 3482 0000 044B     		ldr	r3, .L293
 3483 0002 9A6D     		ldr	r2, [r3, #88]
 3484 0004 9069     		ldr	r0, [r2, #24]
 3485              	.LVL355:
4170:..\FreeRTOS9/tasks.c **** 
 3486              		.loc 1 4170 0
 3487 0006 9A6D     		ldr	r2, [r3, #88]
 3488 0008 9B6D     		ldr	r3, [r3, #88]
 3489 000a D96A     		ldr	r1, [r3, #44]
 3490 000c 0523     		movs	r3, #5
 3491 000e 5B1A     		subs	r3, r3, r1
 3492 0010 9361     		str	r3, [r2, #24]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 155


4173:..\FreeRTOS9/tasks.c **** /*-----------------------------------------------------------*/
 3493              		.loc 1 4173 0
 3494              		@ sp needed
 3495 0012 7047     		bx	lr
 3496              	.L294:
 3497              		.align	2
 3498              	.L293:
 3499 0014 80000000 		.word	.LANCHOR1
 3500              		.cfi_endproc
 3501              	.LFE76:
 3502              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3503              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3504              		.align	2
 3505              		.global	pvTaskIncrementMutexHeldCount
 3506              		.code	16
 3507              		.thumb_func
 3508              		.type	pvTaskIncrementMutexHeldCount, %function
 3509              	pvTaskIncrementMutexHeldCount:
 3510              	.LFB77:
4179:..\FreeRTOS9/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3511              		.loc 1 4179 0
 3512              		.cfi_startproc
 3513              		@ args = 0, pretend = 0, frame = 0
 3514              		@ frame_needed = 0, uses_anonymous_args = 0
 3515              		@ link register save eliminated.
4182:..\FreeRTOS9/tasks.c **** 		{
 3516              		.loc 1 4182 0
 3517 0000 054B     		ldr	r3, .L297
 3518 0002 9B6D     		ldr	r3, [r3, #88]
 3519 0004 002B     		cmp	r3, #0
 3520 0006 04D0     		beq	.L296
4184:..\FreeRTOS9/tasks.c **** 		}
 3521              		.loc 1 4184 0
 3522 0008 034B     		ldr	r3, .L297
 3523 000a 9A6D     		ldr	r2, [r3, #88]
 3524 000c 936C     		ldr	r3, [r2, #72]
 3525 000e 0133     		adds	r3, r3, #1
 3526 0010 9364     		str	r3, [r2, #72]
 3527              	.L296:
4187:..\FreeRTOS9/tasks.c **** 	}
 3528              		.loc 1 4187 0
 3529 0012 014B     		ldr	r3, .L297
 3530 0014 986D     		ldr	r0, [r3, #88]
4188:..\FreeRTOS9/tasks.c **** 
 3531              		.loc 1 4188 0
 3532              		@ sp needed
 3533 0016 7047     		bx	lr
 3534              	.L298:
 3535              		.align	2
 3536              	.L297:
 3537 0018 80000000 		.word	.LANCHOR1
 3538              		.cfi_endproc
 3539              	.LFE77:
 3540              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3541              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3542              		.align	2
 3543              		.global	ulTaskNotifyTake
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 156


 3544              		.code	16
 3545              		.thumb_func
 3546              		.type	ulTaskNotifyTake, %function
 3547              	ulTaskNotifyTake:
 3548              	.LFB78:
4196:..\FreeRTOS9/tasks.c **** 	uint32_t ulReturn;
 3549              		.loc 1 4196 0
 3550              		.cfi_startproc
 3551              		@ args = 0, pretend = 0, frame = 0
 3552              		@ frame_needed = 0, uses_anonymous_args = 0
 3553              	.LVL356:
 3554 0000 70B5     		push	{r4, r5, r6, lr}
 3555              		.cfi_def_cfa_offset 16
 3556              		.cfi_offset 4, -16
 3557              		.cfi_offset 5, -12
 3558              		.cfi_offset 6, -8
 3559              		.cfi_offset 14, -4
 3560 0002 0500     		movs	r5, r0
 3561 0004 0C00     		movs	r4, r1
4199:..\FreeRTOS9/tasks.c **** 		{
 3562              		.loc 1 4199 0
 3563 0006 FFF7FEFF 		bl	vPortEnterCritical
 3564              	.LVL357:
4202:..\FreeRTOS9/tasks.c **** 			{
 3565              		.loc 1 4202 0
 3566 000a 174B     		ldr	r3, .L303
 3567 000c 9B6D     		ldr	r3, [r3, #88]
 3568 000e 1B6E     		ldr	r3, [r3, #96]
 3569 0010 002B     		cmp	r3, #0
 3570 0012 0BD1     		bne	.L300
4205:..\FreeRTOS9/tasks.c **** 
 3571              		.loc 1 4205 0
 3572 0014 144B     		ldr	r3, .L303
 3573 0016 9A6D     		ldr	r2, [r3, #88]
 3574 0018 0121     		movs	r1, #1
 3575 001a 6423     		movs	r3, #100
 3576 001c D154     		strb	r1, [r2, r3]
4207:..\FreeRTOS9/tasks.c **** 				{
 3577              		.loc 1 4207 0
 3578 001e 002C     		cmp	r4, #0
 3579 0020 04D0     		beq	.L300
4209:..\FreeRTOS9/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3580              		.loc 1 4209 0
 3581 0022 2000     		movs	r0, r4
 3582 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3583              	.LVL358:
4216:..\FreeRTOS9/tasks.c **** 				}
 3584              		.loc 1 4216 0
 3585 0028 FFF7FEFF 		bl	vPortYield
 3586              	.LVL359:
 3587              	.L300:
4228:..\FreeRTOS9/tasks.c **** 
 3588              		.loc 1 4228 0
 3589 002c FFF7FEFF 		bl	vPortExitCritical
 3590              	.LVL360:
4230:..\FreeRTOS9/tasks.c **** 		{
 3591              		.loc 1 4230 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 157


 3592 0030 FFF7FEFF 		bl	vPortEnterCritical
 3593              	.LVL361:
4233:..\FreeRTOS9/tasks.c **** 
 3594              		.loc 1 4233 0
 3595 0034 0C4B     		ldr	r3, .L303
 3596 0036 9B6D     		ldr	r3, [r3, #88]
 3597 0038 1C6E     		ldr	r4, [r3, #96]
 3598              	.LVL362:
4235:..\FreeRTOS9/tasks.c **** 			{
 3599              		.loc 1 4235 0
 3600 003a 002C     		cmp	r4, #0
 3601 003c 0AD0     		beq	.L301
4237:..\FreeRTOS9/tasks.c **** 				{
 3602              		.loc 1 4237 0
 3603 003e 002D     		cmp	r5, #0
 3604 0040 04D0     		beq	.L302
4239:..\FreeRTOS9/tasks.c **** 				}
 3605              		.loc 1 4239 0
 3606 0042 094B     		ldr	r3, .L303
 3607 0044 9B6D     		ldr	r3, [r3, #88]
 3608 0046 0022     		movs	r2, #0
 3609 0048 1A66     		str	r2, [r3, #96]
 3610 004a 03E0     		b	.L301
 3611              	.L302:
4243:..\FreeRTOS9/tasks.c **** 				}
 3612              		.loc 1 4243 0
 3613 004c 064B     		ldr	r3, .L303
 3614 004e 9B6D     		ldr	r3, [r3, #88]
 3615 0050 621E     		subs	r2, r4, #1
 3616 0052 1A66     		str	r2, [r3, #96]
 3617              	.L301:
4251:..\FreeRTOS9/tasks.c **** 		}
 3618              		.loc 1 4251 0
 3619 0054 044B     		ldr	r3, .L303
 3620 0056 9A6D     		ldr	r2, [r3, #88]
 3621 0058 0021     		movs	r1, #0
 3622 005a 6423     		movs	r3, #100
 3623 005c D154     		strb	r1, [r2, r3]
4253:..\FreeRTOS9/tasks.c **** 
 3624              		.loc 1 4253 0
 3625 005e FFF7FEFF 		bl	vPortExitCritical
 3626              	.LVL363:
4256:..\FreeRTOS9/tasks.c **** 
 3627              		.loc 1 4256 0
 3628 0062 2000     		movs	r0, r4
 3629              		@ sp needed
 3630              	.LVL364:
 3631              	.LVL365:
 3632 0064 70BD     		pop	{r4, r5, r6, pc}
 3633              	.L304:
 3634 0066 C046     		.align	2
 3635              	.L303:
 3636 0068 80000000 		.word	.LANCHOR1
 3637              		.cfi_endproc
 3638              	.LFE78:
 3639              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3640              		.section	.text.xTaskNotifyWait,"ax",%progbits
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 158


 3641              		.align	2
 3642              		.global	xTaskNotifyWait
 3643              		.code	16
 3644              		.thumb_func
 3645              		.type	xTaskNotifyWait, %function
 3646              	xTaskNotifyWait:
 3647              	.LFB79:
4264:..\FreeRTOS9/tasks.c **** 	BaseType_t xReturn;
 3648              		.loc 1 4264 0
 3649              		.cfi_startproc
 3650              		@ args = 0, pretend = 0, frame = 0
 3651              		@ frame_needed = 0, uses_anonymous_args = 0
 3652              	.LVL366:
 3653 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3654              		.cfi_def_cfa_offset 24
 3655              		.cfi_offset 3, -24
 3656              		.cfi_offset 4, -20
 3657              		.cfi_offset 5, -16
 3658              		.cfi_offset 6, -12
 3659              		.cfi_offset 7, -8
 3660              		.cfi_offset 14, -4
 3661 0002 0600     		movs	r6, r0
 3662 0004 0F00     		movs	r7, r1
 3663 0006 1400     		movs	r4, r2
 3664 0008 1D00     		movs	r5, r3
4267:..\FreeRTOS9/tasks.c **** 		{
 3665              		.loc 1 4267 0
 3666 000a FFF7FEFF 		bl	vPortEnterCritical
 3667              	.LVL367:
4270:..\FreeRTOS9/tasks.c **** 			{
 3668              		.loc 1 4270 0
 3669 000e 1B4B     		ldr	r3, .L310
 3670 0010 9A6D     		ldr	r2, [r3, #88]
 3671 0012 6423     		movs	r3, #100
 3672 0014 D35C     		ldrb	r3, [r2, r3]
 3673 0016 022B     		cmp	r3, #2
 3674 0018 0FD0     		beq	.L306
4275:..\FreeRTOS9/tasks.c **** 
 3675              		.loc 1 4275 0
 3676 001a 184A     		ldr	r2, .L310
 3677 001c 916D     		ldr	r1, [r2, #88]
 3678 001e 0B6E     		ldr	r3, [r1, #96]
 3679 0020 B343     		bics	r3, r6
 3680 0022 0B66     		str	r3, [r1, #96]
4278:..\FreeRTOS9/tasks.c **** 
 3681              		.loc 1 4278 0
 3682 0024 926D     		ldr	r2, [r2, #88]
 3683 0026 0121     		movs	r1, #1
 3684 0028 6423     		movs	r3, #100
 3685 002a D154     		strb	r1, [r2, r3]
4280:..\FreeRTOS9/tasks.c **** 				{
 3686              		.loc 1 4280 0
 3687 002c 002D     		cmp	r5, #0
 3688 002e 04D0     		beq	.L306
4282:..\FreeRTOS9/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3689              		.loc 1 4282 0
 3690 0030 2800     		movs	r0, r5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 159


 3691 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3692              	.LVL368:
4289:..\FreeRTOS9/tasks.c **** 				}
 3693              		.loc 1 4289 0
 3694 0036 FFF7FEFF 		bl	vPortYield
 3695              	.LVL369:
 3696              	.L306:
4301:..\FreeRTOS9/tasks.c **** 
 3697              		.loc 1 4301 0
 3698 003a FFF7FEFF 		bl	vPortExitCritical
 3699              	.LVL370:
4303:..\FreeRTOS9/tasks.c **** 		{
 3700              		.loc 1 4303 0
 3701 003e FFF7FEFF 		bl	vPortEnterCritical
 3702              	.LVL371:
4307:..\FreeRTOS9/tasks.c **** 			{
 3703              		.loc 1 4307 0
 3704 0042 002C     		cmp	r4, #0
 3705 0044 03D0     		beq	.L307
4311:..\FreeRTOS9/tasks.c **** 			}
 3706              		.loc 1 4311 0
 3707 0046 0D4B     		ldr	r3, .L310
 3708 0048 9B6D     		ldr	r3, [r3, #88]
 3709 004a 1B6E     		ldr	r3, [r3, #96]
 3710 004c 2360     		str	r3, [r4]
 3711              	.L307:
4318:..\FreeRTOS9/tasks.c **** 			{
 3712              		.loc 1 4318 0
 3713 004e 0B4B     		ldr	r3, .L310
 3714 0050 9A6D     		ldr	r2, [r3, #88]
 3715 0052 6423     		movs	r3, #100
 3716 0054 D35C     		ldrb	r3, [r2, r3]
 3717 0056 012B     		cmp	r3, #1
 3718 0058 06D0     		beq	.L309
4327:..\FreeRTOS9/tasks.c **** 				xReturn = pdTRUE;
 3719              		.loc 1 4327 0
 3720 005a 084B     		ldr	r3, .L310
 3721 005c 9A6D     		ldr	r2, [r3, #88]
 3722 005e 136E     		ldr	r3, [r2, #96]
 3723 0060 BB43     		bics	r3, r7
 3724 0062 1366     		str	r3, [r2, #96]
 3725              	.LVL372:
4328:..\FreeRTOS9/tasks.c **** 			}
 3726              		.loc 1 4328 0
 3727 0064 0124     		movs	r4, #1
 3728              	.LVL373:
 3729 0066 00E0     		b	.L308
 3730              	.LVL374:
 3731              	.L309:
4321:..\FreeRTOS9/tasks.c **** 			}
 3732              		.loc 1 4321 0
 3733 0068 0024     		movs	r4, #0
 3734              	.LVL375:
 3735              	.L308:
4331:..\FreeRTOS9/tasks.c **** 		}
 3736              		.loc 1 4331 0
 3737 006a 044B     		ldr	r3, .L310
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 160


 3738 006c 9A6D     		ldr	r2, [r3, #88]
 3739 006e 0021     		movs	r1, #0
 3740 0070 6423     		movs	r3, #100
 3741 0072 D154     		strb	r1, [r2, r3]
4333:..\FreeRTOS9/tasks.c **** 
 3742              		.loc 1 4333 0
 3743 0074 FFF7FEFF 		bl	vPortExitCritical
 3744              	.LVL376:
4336:..\FreeRTOS9/tasks.c **** 
 3745              		.loc 1 4336 0
 3746 0078 2000     		movs	r0, r4
 3747              		@ sp needed
 3748              	.LVL377:
 3749              	.LVL378:
 3750              	.LVL379:
 3751              	.LVL380:
 3752 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3753              	.L311:
 3754              		.align	2
 3755              	.L310:
 3756 007c 80000000 		.word	.LANCHOR1
 3757              		.cfi_endproc
 3758              	.LFE79:
 3759              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3760              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3761              		.align	2
 3762              		.global	xTaskGenericNotify
 3763              		.code	16
 3764              		.thumb_func
 3765              		.type	xTaskGenericNotify, %function
 3766              	xTaskGenericNotify:
 3767              	.LFB80:
4344:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
 3768              		.loc 1 4344 0
 3769              		.cfi_startproc
 3770              		@ args = 0, pretend = 0, frame = 0
 3771              		@ frame_needed = 0, uses_anonymous_args = 0
 3772              	.LVL381:
 3773 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3774              		.cfi_def_cfa_offset 24
 3775              		.cfi_offset 3, -24
 3776              		.cfi_offset 4, -20
 3777              		.cfi_offset 5, -16
 3778              		.cfi_offset 6, -12
 3779              		.cfi_offset 7, -8
 3780              		.cfi_offset 14, -4
 3781 0002 0400     		movs	r4, r0
 3782 0004 0D00     		movs	r5, r1
 3783 0006 1600     		movs	r6, r2
 3784 0008 1F00     		movs	r7, r3
 3785              	.LVL382:
4352:..\FreeRTOS9/tasks.c **** 		{
 3786              		.loc 1 4352 0
 3787 000a FFF7FEFF 		bl	vPortEnterCritical
 3788              	.LVL383:
4354:..\FreeRTOS9/tasks.c **** 			{
 3789              		.loc 1 4354 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 161


 3790 000e 002F     		cmp	r7, #0
 3791 0010 01D0     		beq	.L313
4356:..\FreeRTOS9/tasks.c **** 			}
 3792              		.loc 1 4356 0
 3793 0012 236E     		ldr	r3, [r4, #96]
 3794 0014 3B60     		str	r3, [r7]
 3795              	.L313:
4359:..\FreeRTOS9/tasks.c **** 
 3796              		.loc 1 4359 0
 3797 0016 6422     		movs	r2, #100
 3798 0018 A35C     		ldrb	r3, [r4, r2]
 3799 001a DBB2     		uxtb	r3, r3
 3800              	.LVL384:
4361:..\FreeRTOS9/tasks.c **** 
 3801              		.loc 1 4361 0
 3802 001c 0221     		movs	r1, #2
 3803 001e A154     		strb	r1, [r4, r2]
4363:..\FreeRTOS9/tasks.c **** 			{
 3804              		.loc 1 4363 0
 3805 0020 022E     		cmp	r6, #2
 3806 0022 0DD0     		beq	.L315
 3807 0024 02D8     		bhi	.L316
 3808 0026 012E     		cmp	r6, #1
 3809 0028 05D0     		beq	.L317
 3810 002a 16E0     		b	.L322
 3811              	.L316:
 3812 002c 032E     		cmp	r6, #3
 3813 002e 0CD0     		beq	.L318
 3814 0030 042E     		cmp	r6, #4
 3815 0032 0DD0     		beq	.L319
 3816 0034 11E0     		b	.L322
 3817              	.L317:
4366:..\FreeRTOS9/tasks.c **** 					break;
 3818              		.loc 1 4366 0
 3819 0036 226E     		ldr	r2, [r4, #96]
 3820 0038 1543     		orrs	r5, r2
 3821              	.LVL385:
 3822 003a 2566     		str	r5, [r4, #96]
4346:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3823              		.loc 1 4346 0
 3824 003c 0125     		movs	r5, #1
4367:..\FreeRTOS9/tasks.c **** 
 3825              		.loc 1 4367 0
 3826 003e 0FE0     		b	.L314
 3827              	.LVL386:
 3828              	.L315:
4370:..\FreeRTOS9/tasks.c **** 					break;
 3829              		.loc 1 4370 0
 3830 0040 226E     		ldr	r2, [r4, #96]
 3831 0042 0132     		adds	r2, r2, #1
 3832 0044 2266     		str	r2, [r4, #96]
4346:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3833              		.loc 1 4346 0
 3834 0046 0125     		movs	r5, #1
 3835              	.LVL387:
4371:..\FreeRTOS9/tasks.c **** 
 3836              		.loc 1 4371 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 162


 3837 0048 0AE0     		b	.L314
 3838              	.LVL388:
 3839              	.L318:
4374:..\FreeRTOS9/tasks.c **** 					break;
 3840              		.loc 1 4374 0
 3841 004a 2566     		str	r5, [r4, #96]
4346:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3842              		.loc 1 4346 0
 3843 004c 0125     		movs	r5, #1
 3844              	.LVL389:
4375:..\FreeRTOS9/tasks.c **** 
 3845              		.loc 1 4375 0
 3846 004e 07E0     		b	.L314
 3847              	.LVL390:
 3848              	.L319:
4378:..\FreeRTOS9/tasks.c **** 					{
 3849              		.loc 1 4378 0
 3850 0050 022B     		cmp	r3, #2
 3851 0052 04D0     		beq	.L323
4380:..\FreeRTOS9/tasks.c **** 					}
 3852              		.loc 1 4380 0
 3853 0054 2566     		str	r5, [r4, #96]
4346:..\FreeRTOS9/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3854              		.loc 1 4346 0
 3855 0056 0125     		movs	r5, #1
 3856              	.LVL391:
 3857 0058 02E0     		b	.L314
 3858              	.LVL392:
 3859              	.L322:
 3860 005a 0125     		movs	r5, #1
 3861              	.LVL393:
 3862 005c 00E0     		b	.L314
 3863              	.LVL394:
 3864              	.L323:
4385:..\FreeRTOS9/tasks.c **** 					}
 3865              		.loc 1 4385 0
 3866 005e 0025     		movs	r5, #0
 3867              	.LVL395:
 3868              	.L314:
4399:..\FreeRTOS9/tasks.c **** 			{
 3869              		.loc 1 4399 0
 3870 0060 012B     		cmp	r3, #1
 3871 0062 1BD1     		bne	.L320
4401:..\FreeRTOS9/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 3872              		.loc 1 4401 0
 3873 0064 261D     		adds	r6, r4, #4
 3874 0066 3000     		movs	r0, r6
 3875 0068 FFF7FEFF 		bl	uxListRemove
 3876              	.LVL396:
4402:..\FreeRTOS9/tasks.c **** 
 3877              		.loc 1 4402 0
 3878 006c E36A     		ldr	r3, [r4, #44]
 3879 006e 0D4A     		ldr	r2, .L324
 3880 0070 526E     		ldr	r2, [r2, #100]
 3881 0072 9342     		cmp	r3, r2
 3882 0074 01D9     		bls	.L321
4402:..\FreeRTOS9/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 163


 3883              		.loc 1 4402 0 is_stmt 0 discriminator 1
 3884 0076 0B4A     		ldr	r2, .L324
 3885 0078 5366     		str	r3, [r2, #100]
 3886              	.L321:
4402:..\FreeRTOS9/tasks.c **** 
 3887              		.loc 1 4402 0 discriminator 3
 3888 007a 9A00     		lsls	r2, r3, #2
 3889 007c D318     		adds	r3, r2, r3
 3890 007e 9A00     		lsls	r2, r3, #2
 3891 0080 0948     		ldr	r0, .L324+4
 3892 0082 3030     		adds	r0, r0, #48
 3893 0084 8018     		adds	r0, r0, r2
 3894 0086 3100     		movs	r1, r6
 3895 0088 FFF7FEFF 		bl	vListInsertEnd
 3896              	.LVL397:
4423:..\FreeRTOS9/tasks.c **** 				{
 3897              		.loc 1 4423 0 is_stmt 1 discriminator 3
 3898 008c E26A     		ldr	r2, [r4, #44]
 3899 008e 054B     		ldr	r3, .L324
 3900 0090 9B6D     		ldr	r3, [r3, #88]
 3901 0092 DB6A     		ldr	r3, [r3, #44]
 3902 0094 9A42     		cmp	r2, r3
 3903 0096 01D9     		bls	.L320
4427:..\FreeRTOS9/tasks.c **** 				}
 3904              		.loc 1 4427 0
 3905 0098 FFF7FEFF 		bl	vPortYield
 3906              	.LVL398:
 3907              	.L320:
4439:..\FreeRTOS9/tasks.c **** 
 3908              		.loc 1 4439 0
 3909 009c FFF7FEFF 		bl	vPortExitCritical
 3910              	.LVL399:
4442:..\FreeRTOS9/tasks.c **** 
 3911              		.loc 1 4442 0
 3912 00a0 2800     		movs	r0, r5
 3913              		@ sp needed
 3914              	.LVL400:
 3915              	.LVL401:
 3916              	.LVL402:
 3917 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3918              	.L325:
 3919              		.align	2
 3920              	.L324:
 3921 00a4 80000000 		.word	.LANCHOR1
 3922 00a8 00000000 		.word	.LANCHOR0
 3923              		.cfi_endproc
 3924              	.LFE80:
 3925              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 3926              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 3927              		.align	2
 3928              		.global	xTaskGenericNotifyFromISR
 3929              		.code	16
 3930              		.thumb_func
 3931              		.type	xTaskGenericNotifyFromISR, %function
 3932              	xTaskGenericNotifyFromISR:
 3933              	.LFB81:
4450:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 164


 3934              		.loc 1 4450 0
 3935              		.cfi_startproc
 3936              		@ args = 4, pretend = 0, frame = 8
 3937              		@ frame_needed = 0, uses_anonymous_args = 0
 3938              	.LVL403:
 3939 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3940              		.cfi_def_cfa_offset 20
 3941              		.cfi_offset 4, -20
 3942              		.cfi_offset 5, -16
 3943              		.cfi_offset 6, -12
 3944              		.cfi_offset 7, -8
 3945              		.cfi_offset 14, -4
 3946 0002 83B0     		sub	sp, sp, #12
 3947              		.cfi_def_cfa_offset 32
 3948 0004 0400     		movs	r4, r0
 3949 0006 0E00     		movs	r6, r1
 3950 0008 1700     		movs	r7, r2
 3951 000a 1D00     		movs	r5, r3
 3952              	.LVL404:
4478:..\FreeRTOS9/tasks.c **** 		{
 3953              		.loc 1 4478 0
 3954 000c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 3955              	.LVL405:
 3956 0010 0190     		str	r0, [sp, #4]
 3957              	.LVL406:
4480:..\FreeRTOS9/tasks.c **** 			{
 3958              		.loc 1 4480 0
 3959 0012 002D     		cmp	r5, #0
 3960 0014 01D0     		beq	.L327
4482:..\FreeRTOS9/tasks.c **** 			}
 3961              		.loc 1 4482 0
 3962 0016 236E     		ldr	r3, [r4, #96]
 3963 0018 2B60     		str	r3, [r5]
 3964              	.L327:
4485:..\FreeRTOS9/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 3965              		.loc 1 4485 0
 3966 001a 6422     		movs	r2, #100
 3967 001c A35C     		ldrb	r3, [r4, r2]
 3968 001e DBB2     		uxtb	r3, r3
 3969              	.LVL407:
4486:..\FreeRTOS9/tasks.c **** 
 3970              		.loc 1 4486 0
 3971 0020 0221     		movs	r1, #2
 3972 0022 A154     		strb	r1, [r4, r2]
4488:..\FreeRTOS9/tasks.c **** 			{
 3973              		.loc 1 4488 0
 3974 0024 022F     		cmp	r7, #2
 3975 0026 0DD0     		beq	.L329
 3976 0028 02D8     		bhi	.L330
 3977 002a 012F     		cmp	r7, #1
 3978 002c 05D0     		beq	.L331
 3979 002e 16E0     		b	.L339
 3980              	.L330:
 3981 0030 032F     		cmp	r7, #3
 3982 0032 0CD0     		beq	.L332
 3983 0034 042F     		cmp	r7, #4
 3984 0036 0DD0     		beq	.L333
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 165


 3985 0038 11E0     		b	.L339
 3986              	.L331:
4491:..\FreeRTOS9/tasks.c **** 					break;
 3987              		.loc 1 4491 0
 3988 003a 226E     		ldr	r2, [r4, #96]
 3989 003c 1643     		orrs	r6, r2
 3990              	.LVL408:
 3991 003e 2666     		str	r6, [r4, #96]
4453:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 3992              		.loc 1 4453 0
 3993 0040 0126     		movs	r6, #1
4492:..\FreeRTOS9/tasks.c **** 
 3994              		.loc 1 4492 0
 3995 0042 0FE0     		b	.L328
 3996              	.LVL409:
 3997              	.L329:
4495:..\FreeRTOS9/tasks.c **** 					break;
 3998              		.loc 1 4495 0
 3999 0044 226E     		ldr	r2, [r4, #96]
 4000 0046 0132     		adds	r2, r2, #1
 4001 0048 2266     		str	r2, [r4, #96]
4453:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4002              		.loc 1 4453 0
 4003 004a 0126     		movs	r6, #1
 4004              	.LVL410:
4496:..\FreeRTOS9/tasks.c **** 
 4005              		.loc 1 4496 0
 4006 004c 0AE0     		b	.L328
 4007              	.LVL411:
 4008              	.L332:
4499:..\FreeRTOS9/tasks.c **** 					break;
 4009              		.loc 1 4499 0
 4010 004e 2666     		str	r6, [r4, #96]
4453:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4011              		.loc 1 4453 0
 4012 0050 0126     		movs	r6, #1
 4013              	.LVL412:
4500:..\FreeRTOS9/tasks.c **** 
 4014              		.loc 1 4500 0
 4015 0052 07E0     		b	.L328
 4016              	.LVL413:
 4017              	.L333:
4503:..\FreeRTOS9/tasks.c **** 					{
 4018              		.loc 1 4503 0
 4019 0054 022B     		cmp	r3, #2
 4020 0056 04D0     		beq	.L340
4505:..\FreeRTOS9/tasks.c **** 					}
 4021              		.loc 1 4505 0
 4022 0058 2666     		str	r6, [r4, #96]
4453:..\FreeRTOS9/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4023              		.loc 1 4453 0
 4024 005a 0126     		movs	r6, #1
 4025              	.LVL414:
 4026 005c 02E0     		b	.L328
 4027              	.LVL415:
 4028              	.L339:
 4029 005e 0126     		movs	r6, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 166


 4030              	.LVL416:
 4031 0060 00E0     		b	.L328
 4032              	.LVL417:
 4033              	.L340:
4510:..\FreeRTOS9/tasks.c **** 					}
 4034              		.loc 1 4510 0
 4035 0062 0026     		movs	r6, #0
 4036              	.LVL418:
 4037              	.L328:
4524:..\FreeRTOS9/tasks.c **** 			{
 4038              		.loc 1 4524 0
 4039 0064 012B     		cmp	r3, #1
 4040 0066 2ED1     		bne	.L334
4529:..\FreeRTOS9/tasks.c **** 				{
 4041              		.loc 1 4529 0
 4042 0068 1A4B     		ldr	r3, .L341
 4043              	.LVL419:
 4044 006a 1B6F     		ldr	r3, [r3, #112]
 4045 006c 002B     		cmp	r3, #0
 4046 006e 14D1     		bne	.L335
4531:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4047              		.loc 1 4531 0
 4048 0070 271D     		adds	r7, r4, #4
 4049 0072 3800     		movs	r0, r7
 4050              	.LVL420:
 4051 0074 FFF7FEFF 		bl	uxListRemove
 4052              	.LVL421:
4532:..\FreeRTOS9/tasks.c **** 				}
 4053              		.loc 1 4532 0
 4054 0078 E36A     		ldr	r3, [r4, #44]
 4055 007a 164A     		ldr	r2, .L341
 4056 007c 526E     		ldr	r2, [r2, #100]
 4057 007e 9342     		cmp	r3, r2
 4058 0080 01D9     		bls	.L336
4532:..\FreeRTOS9/tasks.c **** 				}
 4059              		.loc 1 4532 0 is_stmt 0 discriminator 1
 4060 0082 144A     		ldr	r2, .L341
 4061 0084 5366     		str	r3, [r2, #100]
 4062              	.L336:
4532:..\FreeRTOS9/tasks.c **** 				}
 4063              		.loc 1 4532 0 discriminator 3
 4064 0086 9A00     		lsls	r2, r3, #2
 4065 0088 D318     		adds	r3, r2, r3
 4066 008a 9A00     		lsls	r2, r3, #2
 4067 008c 1248     		ldr	r0, .L341+4
 4068 008e 3030     		adds	r0, r0, #48
 4069 0090 8018     		adds	r0, r0, r2
 4070 0092 3900     		movs	r1, r7
 4071 0094 FFF7FEFF 		bl	vListInsertEnd
 4072              	.LVL422:
 4073 0098 05E0     		b	.L337
 4074              	.LVL423:
 4075              	.L335:
4538:..\FreeRTOS9/tasks.c **** 				}
 4076              		.loc 1 4538 0 is_stmt 1
 4077 009a 2100     		movs	r1, r4
 4078 009c 1831     		adds	r1, r1, #24
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 167


 4079 009e 0E48     		ldr	r0, .L341+4
 4080              	.LVL424:
 4081 00a0 1430     		adds	r0, r0, #20
 4082 00a2 FFF7FEFF 		bl	vListInsertEnd
 4083              	.LVL425:
 4084              	.L337:
4541:..\FreeRTOS9/tasks.c **** 				{
 4085              		.loc 1 4541 0
 4086 00a6 E26A     		ldr	r2, [r4, #44]
 4087 00a8 0A4B     		ldr	r3, .L341
 4088 00aa 9B6D     		ldr	r3, [r3, #88]
 4089 00ac DB6A     		ldr	r3, [r3, #44]
 4090 00ae 9A42     		cmp	r2, r3
 4091 00b0 09D9     		bls	.L334
4545:..\FreeRTOS9/tasks.c **** 					{
 4092              		.loc 1 4545 0
 4093 00b2 089B     		ldr	r3, [sp, #32]
 4094 00b4 002B     		cmp	r3, #0
 4095 00b6 03D0     		beq	.L338
4547:..\FreeRTOS9/tasks.c **** 					}
 4096              		.loc 1 4547 0
 4097 00b8 0123     		movs	r3, #1
 4098 00ba 089A     		ldr	r2, [sp, #32]
 4099 00bc 1360     		str	r3, [r2]
 4100 00be 02E0     		b	.L334
 4101              	.L338:
4554:..\FreeRTOS9/tasks.c **** 					}
 4102              		.loc 1 4554 0
 4103 00c0 0122     		movs	r2, #1
 4104 00c2 064B     		ldr	r3, .L341+8
 4105 00c4 1A60     		str	r2, [r3]
 4106              	.L334:
4563:..\FreeRTOS9/tasks.c **** 
 4107              		.loc 1 4563 0
 4108 00c6 0198     		ldr	r0, [sp, #4]
 4109 00c8 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4110              	.LVL426:
4566:..\FreeRTOS9/tasks.c **** 
 4111              		.loc 1 4566 0
 4112 00cc 3000     		movs	r0, r6
 4113 00ce 03B0     		add	sp, sp, #12
 4114              		@ sp needed
 4115              	.LVL427:
 4116              	.LVL428:
 4117              	.LVL429:
 4118 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 4119              	.L342:
 4120 00d2 C046     		.align	2
 4121              	.L341:
 4122 00d4 80000000 		.word	.LANCHOR1
 4123 00d8 00000000 		.word	.LANCHOR0
 4124 00dc 00010000 		.word	.LANCHOR2
 4125              		.cfi_endproc
 4126              	.LFE81:
 4127              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4128              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4129              		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 168


 4130              		.global	vTaskNotifyGiveFromISR
 4131              		.code	16
 4132              		.thumb_func
 4133              		.type	vTaskNotifyGiveFromISR, %function
 4134              	vTaskNotifyGiveFromISR:
 4135              	.LFB82:
4574:..\FreeRTOS9/tasks.c **** 	TCB_t * pxTCB;
 4136              		.loc 1 4574 0
 4137              		.cfi_startproc
 4138              		@ args = 0, pretend = 0, frame = 0
 4139              		@ frame_needed = 0, uses_anonymous_args = 0
 4140              	.LVL430:
 4141 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4142              		.cfi_def_cfa_offset 24
 4143              		.cfi_offset 3, -24
 4144              		.cfi_offset 4, -20
 4145              		.cfi_offset 5, -16
 4146              		.cfi_offset 6, -12
 4147              		.cfi_offset 7, -8
 4148              		.cfi_offset 14, -4
 4149 0002 0400     		movs	r4, r0
 4150 0004 0E00     		movs	r6, r1
 4151              	.LVL431:
4601:..\FreeRTOS9/tasks.c **** 		{
 4152              		.loc 1 4601 0
 4153 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4154              	.LVL432:
 4155 000a 0500     		movs	r5, r0
 4156              	.LVL433:
4603:..\FreeRTOS9/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4157              		.loc 1 4603 0
 4158 000c 6423     		movs	r3, #100
 4159 000e E25C     		ldrb	r2, [r4, r3]
 4160              	.LVL434:
4604:..\FreeRTOS9/tasks.c **** 
 4161              		.loc 1 4604 0
 4162 0010 0221     		movs	r1, #2
 4163 0012 E154     		strb	r1, [r4, r3]
4608:..\FreeRTOS9/tasks.c **** 
 4164              		.loc 1 4608 0
 4165 0014 236E     		ldr	r3, [r4, #96]
 4166 0016 0133     		adds	r3, r3, #1
 4167 0018 2366     		str	r3, [r4, #96]
4614:..\FreeRTOS9/tasks.c **** 			{
 4168              		.loc 1 4614 0
 4169 001a 012A     		cmp	r2, #1
 4170 001c 2CD1     		bne	.L344
4619:..\FreeRTOS9/tasks.c **** 				{
 4171              		.loc 1 4619 0
 4172 001e 184B     		ldr	r3, .L349
 4173 0020 1B6F     		ldr	r3, [r3, #112]
 4174 0022 002B     		cmp	r3, #0
 4175 0024 14D1     		bne	.L345
4621:..\FreeRTOS9/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4176              		.loc 1 4621 0
 4177 0026 271D     		adds	r7, r4, #4
 4178 0028 3800     		movs	r0, r7
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 169


 4179              	.LVL435:
 4180 002a FFF7FEFF 		bl	uxListRemove
 4181              	.LVL436:
4622:..\FreeRTOS9/tasks.c **** 				}
 4182              		.loc 1 4622 0
 4183 002e E36A     		ldr	r3, [r4, #44]
 4184 0030 134A     		ldr	r2, .L349
 4185 0032 526E     		ldr	r2, [r2, #100]
 4186 0034 9342     		cmp	r3, r2
 4187 0036 01D9     		bls	.L346
4622:..\FreeRTOS9/tasks.c **** 				}
 4188              		.loc 1 4622 0 is_stmt 0 discriminator 1
 4189 0038 114A     		ldr	r2, .L349
 4190 003a 5366     		str	r3, [r2, #100]
 4191              	.L346:
4622:..\FreeRTOS9/tasks.c **** 				}
 4192              		.loc 1 4622 0 discriminator 3
 4193 003c 9A00     		lsls	r2, r3, #2
 4194 003e D318     		adds	r3, r2, r3
 4195 0040 9A00     		lsls	r2, r3, #2
 4196 0042 1048     		ldr	r0, .L349+4
 4197 0044 3030     		adds	r0, r0, #48
 4198 0046 8018     		adds	r0, r0, r2
 4199 0048 3900     		movs	r1, r7
 4200 004a FFF7FEFF 		bl	vListInsertEnd
 4201              	.LVL437:
 4202 004e 05E0     		b	.L347
 4203              	.LVL438:
 4204              	.L345:
4628:..\FreeRTOS9/tasks.c **** 				}
 4205              		.loc 1 4628 0 is_stmt 1
 4206 0050 2100     		movs	r1, r4
 4207 0052 1831     		adds	r1, r1, #24
 4208 0054 0B48     		ldr	r0, .L349+4
 4209              	.LVL439:
 4210 0056 1430     		adds	r0, r0, #20
 4211 0058 FFF7FEFF 		bl	vListInsertEnd
 4212              	.LVL440:
 4213              	.L347:
4631:..\FreeRTOS9/tasks.c **** 				{
 4214              		.loc 1 4631 0
 4215 005c E26A     		ldr	r2, [r4, #44]
 4216 005e 084B     		ldr	r3, .L349
 4217 0060 9B6D     		ldr	r3, [r3, #88]
 4218 0062 DB6A     		ldr	r3, [r3, #44]
 4219 0064 9A42     		cmp	r2, r3
 4220 0066 07D9     		bls	.L344
4635:..\FreeRTOS9/tasks.c **** 					{
 4221              		.loc 1 4635 0
 4222 0068 002E     		cmp	r6, #0
 4223 006a 02D0     		beq	.L348
4637:..\FreeRTOS9/tasks.c **** 					}
 4224              		.loc 1 4637 0
 4225 006c 0123     		movs	r3, #1
 4226 006e 3360     		str	r3, [r6]
 4227 0070 02E0     		b	.L344
 4228              	.L348:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 170


4644:..\FreeRTOS9/tasks.c **** 					}
 4229              		.loc 1 4644 0
 4230 0072 0122     		movs	r2, #1
 4231 0074 044B     		ldr	r3, .L349+8
 4232 0076 1A60     		str	r2, [r3]
 4233              	.L344:
4653:..\FreeRTOS9/tasks.c **** 	}
 4234              		.loc 1 4653 0
 4235 0078 2800     		movs	r0, r5
 4236 007a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4237              	.LVL441:
4654:..\FreeRTOS9/tasks.c **** 
 4238              		.loc 1 4654 0
 4239              		@ sp needed
 4240              	.LVL442:
 4241              	.LVL443:
 4242              	.LVL444:
 4243 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4244              	.L350:
 4245              		.align	2
 4246              	.L349:
 4247 0080 80000000 		.word	.LANCHOR1
 4248 0084 00000000 		.word	.LANCHOR0
 4249 0088 00010000 		.word	.LANCHOR2
 4250              		.cfi_endproc
 4251              	.LFE82:
 4252              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4253              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4254              		.align	2
 4255              		.global	xTaskNotifyStateClear
 4256              		.code	16
 4257              		.thumb_func
 4258              		.type	xTaskNotifyStateClear, %function
 4259              	xTaskNotifyStateClear:
 4260              	.LFB83:
4663:..\FreeRTOS9/tasks.c **** 	TCB_t *pxTCB;
 4261              		.loc 1 4663 0
 4262              		.cfi_startproc
 4263              		@ args = 0, pretend = 0, frame = 0
 4264              		@ frame_needed = 0, uses_anonymous_args = 0
 4265              	.LVL445:
 4266 0000 10B5     		push	{r4, lr}
 4267              		.cfi_def_cfa_offset 8
 4268              		.cfi_offset 4, -8
 4269              		.cfi_offset 14, -4
 4270 0002 041E     		subs	r4, r0, #0
4669:..\FreeRTOS9/tasks.c **** 
 4271              		.loc 1 4669 0
 4272 0004 01D1     		bne	.L352
4669:..\FreeRTOS9/tasks.c **** 
 4273              		.loc 1 4669 0 is_stmt 0 discriminator 1
 4274 0006 094B     		ldr	r3, .L355
 4275 0008 9C6D     		ldr	r4, [r3, #88]
 4276              	.LVL446:
 4277              	.L352:
4671:..\FreeRTOS9/tasks.c **** 		{
 4278              		.loc 1 4671 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 171


 4279 000a FFF7FEFF 		bl	vPortEnterCritical
 4280              	.LVL447:
4673:..\FreeRTOS9/tasks.c **** 			{
 4281              		.loc 1 4673 0 discriminator 4
 4282 000e 6423     		movs	r3, #100
 4283 0010 E35C     		ldrb	r3, [r4, r3]
 4284 0012 022B     		cmp	r3, #2
 4285 0014 04D1     		bne	.L354
4675:..\FreeRTOS9/tasks.c **** 				xReturn = pdPASS;
 4286              		.loc 1 4675 0
 4287 0016 0022     		movs	r2, #0
 4288 0018 6233     		adds	r3, r3, #98
 4289 001a E254     		strb	r2, [r4, r3]
 4290              	.LVL448:
4676:..\FreeRTOS9/tasks.c **** 			}
 4291              		.loc 1 4676 0
 4292 001c 0124     		movs	r4, #1
 4293              	.LVL449:
 4294 001e 00E0     		b	.L353
 4295              	.LVL450:
 4296              	.L354:
4680:..\FreeRTOS9/tasks.c **** 			}
 4297              		.loc 1 4680 0
 4298 0020 0024     		movs	r4, #0
 4299              	.LVL451:
 4300              	.L353:
4683:..\FreeRTOS9/tasks.c **** 
 4301              		.loc 1 4683 0
 4302 0022 FFF7FEFF 		bl	vPortExitCritical
 4303              	.LVL452:
4686:..\FreeRTOS9/tasks.c **** 
 4304              		.loc 1 4686 0
 4305 0026 2000     		movs	r0, r4
 4306              		@ sp needed
 4307              	.LVL453:
 4308 0028 10BD     		pop	{r4, pc}
 4309              	.L356:
 4310 002a C046     		.align	2
 4311              	.L355:
 4312 002c 80000000 		.word	.LANCHOR1
 4313              		.cfi_endproc
 4314              	.LFE83:
 4315              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4316              		.global	pxCurrentTCB
 4317              		.section	.rodata.str1.4,"aMS",%progbits,1
 4318              		.align	2
 4319              	.LC31:
 4320 0000 49444C45 		.ascii	"IDLE\000"
 4320      00
 4321              		.bss
 4322              		.align	2
 4323              		.set	.LANCHOR0,. + 0
 4324              		.set	.LANCHOR1,. + 128
 4325              		.set	.LANCHOR2,. + 256
 4326              		.type	xSuspendedTaskList, %object
 4327              		.size	xSuspendedTaskList, 20
 4328              	xSuspendedTaskList:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 172


 4329 0000 00000000 		.space	20
 4329      00000000 
 4329      00000000 
 4329      00000000 
 4329      00000000 
 4330              		.type	xPendingReadyList, %object
 4331              		.size	xPendingReadyList, 20
 4332              	xPendingReadyList:
 4333 0014 00000000 		.space	20
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4334              		.type	pxDelayedTaskList, %object
 4335              		.size	pxDelayedTaskList, 4
 4336              	pxDelayedTaskList:
 4337 0028 00000000 		.space	4
 4338              		.type	xNextTaskUnblockTime, %object
 4339              		.size	xNextTaskUnblockTime, 4
 4340              	xNextTaskUnblockTime:
 4341 002c 00000000 		.space	4
 4342              		.type	pxReadyTasksLists, %object
 4343              		.size	pxReadyTasksLists, 100
 4344              	pxReadyTasksLists:
 4345 0030 00000000 		.space	100
 4345      00000000 
 4345      00000000 
 4345      00000000 
 4345      00000000 
 4346              		.type	xDelayedTaskList1, %object
 4347              		.size	xDelayedTaskList1, 20
 4348              	xDelayedTaskList1:
 4349 0094 00000000 		.space	20
 4349      00000000 
 4349      00000000 
 4349      00000000 
 4349      00000000 
 4350              		.type	xDelayedTaskList2, %object
 4351              		.size	xDelayedTaskList2, 20
 4352              	xDelayedTaskList2:
 4353 00a8 00000000 		.space	20
 4353      00000000 
 4353      00000000 
 4353      00000000 
 4353      00000000 
 4354              		.type	xTasksWaitingTermination, %object
 4355              		.size	xTasksWaitingTermination, 20
 4356              	xTasksWaitingTermination:
 4357 00bc 00000000 		.space	20
 4357      00000000 
 4357      00000000 
 4357      00000000 
 4357      00000000 
 4358              		.type	pxOverflowDelayedTaskList, %object
 4359              		.size	pxOverflowDelayedTaskList, 4
 4360              	pxOverflowDelayedTaskList:
 4361 00d0 00000000 		.space	4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 173


 4362              		.type	uxCurrentNumberOfTasks, %object
 4363              		.size	uxCurrentNumberOfTasks, 4
 4364              	uxCurrentNumberOfTasks:
 4365 00d4 00000000 		.space	4
 4366              		.type	pxCurrentTCB, %object
 4367              		.size	pxCurrentTCB, 4
 4368              	pxCurrentTCB:
 4369 00d8 00000000 		.space	4
 4370              		.type	xSchedulerRunning, %object
 4371              		.size	xSchedulerRunning, 4
 4372              	xSchedulerRunning:
 4373 00dc 00000000 		.space	4
 4374              		.type	uxTaskNumber, %object
 4375              		.size	uxTaskNumber, 4
 4376              	uxTaskNumber:
 4377 00e0 00000000 		.space	4
 4378              		.type	uxTopReadyPriority, %object
 4379              		.size	uxTopReadyPriority, 4
 4380              	uxTopReadyPriority:
 4381 00e4 00000000 		.space	4
 4382              		.type	xTickCount, %object
 4383              		.size	xTickCount, 4
 4384              	xTickCount:
 4385 00e8 00000000 		.space	4
 4386              		.type	uxDeletedTasksWaitingCleanUp, %object
 4387              		.size	uxDeletedTasksWaitingCleanUp, 4
 4388              	uxDeletedTasksWaitingCleanUp:
 4389 00ec 00000000 		.space	4
 4390              		.type	uxSchedulerSuspended, %object
 4391              		.size	uxSchedulerSuspended, 4
 4392              	uxSchedulerSuspended:
 4393 00f0 00000000 		.space	4
 4394              		.type	xIdleTaskHandle, %object
 4395              		.size	xIdleTaskHandle, 4
 4396              	xIdleTaskHandle:
 4397 00f4 00000000 		.space	4
 4398              		.type	xNumOfOverflows, %object
 4399              		.size	xNumOfOverflows, 4
 4400              	xNumOfOverflows:
 4401 00f8 00000000 		.space	4
 4402              		.type	uxPendedTicks, %object
 4403              		.size	uxPendedTicks, 4
 4404              	uxPendedTicks:
 4405 00fc 00000000 		.space	4
 4406              		.type	xYieldPending, %object
 4407              		.size	xYieldPending, 4
 4408              	xYieldPending:
 4409 0100 00000000 		.space	4
 4410              		.text
 4411              	.Letext0:
 4412              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4413              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4414              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4415              		.file 5 "..\\FreeRTOS9\\include/projdefs.h"
 4416              		.file 6 "..\\FreeRTOS9\\portable\\GCC\\ARM_CM0/portmacro.h"
 4417              		.file 7 "..\\FreeRTOS9\\include/list.h"
 4418              		.file 8 "..\\FreeRTOS9\\include/task.h"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 174


 4419              		.file 9 "..\\FreeRTOS9\\include/portable.h"
 4420              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4
 4421              		.section	.debug_info,"",%progbits
 4422              	.Ldebug_info0:
 4423 0000 251F0000 		.4byte	0x1f25
 4424 0004 0400     		.2byte	0x4
 4425 0006 00000000 		.4byte	.Ldebug_abbrev0
 4426 000a 04       		.byte	0x4
 4427 000b 01       		.uleb128 0x1
 4428 000c B7040000 		.4byte	.LASF233
 4429 0010 0C       		.byte	0xc
 4430 0011 E3050000 		.4byte	.LASF234
 4431 0015 17030000 		.4byte	.LASF235
 4432 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4433 001d 00000000 		.4byte	0
 4434 0021 00000000 		.4byte	.Ldebug_line0
 4435 0025 02       		.uleb128 0x2
 4436 0026 53050000 		.4byte	.LASF4
 4437 002a 02       		.byte	0x2
 4438 002b D8       		.byte	0xd8
 4439 002c 30000000 		.4byte	0x30
 4440 0030 03       		.uleb128 0x3
 4441 0031 04       		.byte	0x4
 4442 0032 07       		.byte	0x7
 4443 0033 2B010000 		.4byte	.LASF0
 4444 0037 04       		.uleb128 0x4
 4445 0038 04       		.byte	0x4
 4446 0039 05       		.byte	0x5
 4447 003a 696E7400 		.ascii	"int\000"
 4448 003e 03       		.uleb128 0x3
 4449 003f 08       		.byte	0x8
 4450 0040 05       		.byte	0x5
 4451 0041 F1070000 		.4byte	.LASF1
 4452 0045 03       		.uleb128 0x3
 4453 0046 08       		.byte	0x8
 4454 0047 04       		.byte	0x4
 4455 0048 95090000 		.4byte	.LASF2
 4456 004c 03       		.uleb128 0x3
 4457 004d 01       		.byte	0x1
 4458 004e 06       		.byte	0x6
 4459 004f 350E0000 		.4byte	.LASF3
 4460 0053 02       		.uleb128 0x2
 4461 0054 510B0000 		.4byte	.LASF5
 4462 0058 03       		.byte	0x3
 4463 0059 1D       		.byte	0x1d
 4464 005a 5E000000 		.4byte	0x5e
 4465 005e 03       		.uleb128 0x3
 4466 005f 01       		.byte	0x1
 4467 0060 08       		.byte	0x8
 4468 0061 500C0000 		.4byte	.LASF6
 4469 0065 03       		.uleb128 0x3
 4470 0066 02       		.byte	0x2
 4471 0067 05       		.byte	0x5
 4472 0068 220A0000 		.4byte	.LASF7
 4473 006c 02       		.uleb128 0x2
 4474 006d 27040000 		.4byte	.LASF8
 4475 0071 03       		.byte	0x3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 175


 4476 0072 2B       		.byte	0x2b
 4477 0073 77000000 		.4byte	0x77
 4478 0077 03       		.uleb128 0x3
 4479 0078 02       		.byte	0x2
 4480 0079 07       		.byte	0x7
 4481 007a 410E0000 		.4byte	.LASF9
 4482 007e 03       		.uleb128 0x3
 4483 007f 04       		.byte	0x4
 4484 0080 05       		.byte	0x5
 4485 0081 580A0000 		.4byte	.LASF10
 4486 0085 02       		.uleb128 0x2
 4487 0086 9F0C0000 		.4byte	.LASF11
 4488 008a 03       		.byte	0x3
 4489 008b 41       		.byte	0x41
 4490 008c 90000000 		.4byte	0x90
 4491 0090 03       		.uleb128 0x3
 4492 0091 04       		.byte	0x4
 4493 0092 07       		.byte	0x7
 4494 0093 A70B0000 		.4byte	.LASF12
 4495 0097 03       		.uleb128 0x3
 4496 0098 08       		.byte	0x8
 4497 0099 07       		.byte	0x7
 4498 009a 96030000 		.4byte	.LASF13
 4499 009e 03       		.uleb128 0x3
 4500 009f 04       		.byte	0x4
 4501 00a0 07       		.byte	0x7
 4502 00a1 7F0B0000 		.4byte	.LASF14
 4503 00a5 05       		.uleb128 0x5
 4504 00a6 04       		.byte	0x4
 4505 00a7 06       		.uleb128 0x6
 4506 00a8 04       		.byte	0x4
 4507 00a9 AD000000 		.4byte	0xad
 4508 00ad 03       		.uleb128 0x3
 4509 00ae 01       		.byte	0x1
 4510 00af 08       		.byte	0x8
 4511 00b0 BF060000 		.4byte	.LASF15
 4512 00b4 06       		.uleb128 0x6
 4513 00b5 04       		.byte	0x4
 4514 00b6 BA000000 		.4byte	0xba
 4515 00ba 07       		.uleb128 0x7
 4516 00bb AD000000 		.4byte	0xad
 4517 00bf 02       		.uleb128 0x2
 4518 00c0 86070000 		.4byte	.LASF16
 4519 00c4 04       		.byte	0x4
 4520 00c5 18       		.byte	0x18
 4521 00c6 53000000 		.4byte	0x53
 4522 00ca 02       		.uleb128 0x2
 4523 00cb B0090000 		.4byte	.LASF17
 4524 00cf 04       		.byte	0x4
 4525 00d0 24       		.byte	0x24
 4526 00d1 6C000000 		.4byte	0x6c
 4527 00d5 02       		.uleb128 0x2
 4528 00d6 BC020000 		.4byte	.LASF18
 4529 00da 04       		.byte	0x4
 4530 00db 30       		.byte	0x30
 4531 00dc 85000000 		.4byte	0x85
 4532 00e0 03       		.uleb128 0x3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 176


 4533 00e1 04       		.byte	0x4
 4534 00e2 04       		.byte	0x4
 4535 00e3 02030000 		.4byte	.LASF19
 4536 00e7 03       		.uleb128 0x3
 4537 00e8 08       		.byte	0x8
 4538 00e9 04       		.byte	0x4
 4539 00ea 750E0000 		.4byte	.LASF20
 4540 00ee 08       		.uleb128 0x8
 4541 00ef D5000000 		.4byte	0xd5
 4542 00f3 02       		.uleb128 0x2
 4543 00f4 6A080000 		.4byte	.LASF21
 4544 00f8 05       		.byte	0x5
 4545 00f9 4D       		.byte	0x4d
 4546 00fa FE000000 		.4byte	0xfe
 4547 00fe 06       		.uleb128 0x6
 4548 00ff 04       		.byte	0x4
 4549 0100 04010000 		.4byte	0x104
 4550 0104 09       		.uleb128 0x9
 4551 0105 0F010000 		.4byte	0x10f
 4552 0109 0A       		.uleb128 0xa
 4553 010a A5000000 		.4byte	0xa5
 4554 010e 00       		.byte	0
 4555 010f 02       		.uleb128 0x2
 4556 0110 73010000 		.4byte	.LASF22
 4557 0114 06       		.byte	0x6
 4558 0115 61       		.byte	0x61
 4559 0116 D5000000 		.4byte	0xd5
 4560 011a 02       		.uleb128 0x2
 4561 011b 18080000 		.4byte	.LASF23
 4562 011f 06       		.byte	0x6
 4563 0120 62       		.byte	0x62
 4564 0121 7E000000 		.4byte	0x7e
 4565 0125 02       		.uleb128 0x2
 4566 0126 F9060000 		.4byte	.LASF24
 4567 012a 06       		.byte	0x6
 4568 012b 63       		.byte	0x63
 4569 012c 90000000 		.4byte	0x90
 4570 0130 02       		.uleb128 0x2
 4571 0131 6D090000 		.4byte	.LASF25
 4572 0135 06       		.byte	0x6
 4573 0136 69       		.byte	0x69
 4574 0137 D5000000 		.4byte	0xd5
 4575 013b 06       		.uleb128 0x6
 4576 013c 04       		.byte	0x4
 4577 013d BF000000 		.4byte	0xbf
 4578 0141 0B       		.uleb128 0xb
 4579 0142 A5000000 		.4byte	0xa5
 4580 0146 51010000 		.4byte	0x151
 4581 014a 0C       		.uleb128 0xc
 4582 014b 9E000000 		.4byte	0x9e
 4583 014f 04       		.byte	0x4
 4584 0150 00       		.byte	0
 4585 0151 0D       		.uleb128 0xd
 4586 0152 A6010000 		.4byte	.LASF32
 4587 0156 14       		.byte	0x14
 4588 0157 07       		.byte	0x7
 4589 0158 B5       		.byte	0xb5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 177


 4590 0159 9A010000 		.4byte	0x19a
 4591 015d 0E       		.uleb128 0xe
 4592 015e 4D0A0000 		.4byte	.LASF26
 4593 0162 07       		.byte	0x7
 4594 0163 B8       		.byte	0xb8
 4595 0164 30010000 		.4byte	0x130
 4596 0168 00       		.byte	0
 4597 0169 0E       		.uleb128 0xe
 4598 016a 79080000 		.4byte	.LASF27
 4599 016e 07       		.byte	0x7
 4600 016f B9       		.byte	0xb9
 4601 0170 9A010000 		.4byte	0x19a
 4602 0174 04       		.byte	0x4
 4603 0175 0E       		.uleb128 0xe
 4604 0176 03040000 		.4byte	.LASF28
 4605 017a 07       		.byte	0x7
 4606 017b BA       		.byte	0xba
 4607 017c 9A010000 		.4byte	0x19a
 4608 0180 08       		.byte	0x8
 4609 0181 0E       		.uleb128 0xe
 4610 0182 4F0D0000 		.4byte	.LASF29
 4611 0186 07       		.byte	0x7
 4612 0187 BB       		.byte	0xbb
 4613 0188 A5000000 		.4byte	0xa5
 4614 018c 0C       		.byte	0xc
 4615 018d 0E       		.uleb128 0xe
 4616 018e E8090000 		.4byte	.LASF30
 4617 0192 07       		.byte	0x7
 4618 0193 BC       		.byte	0xbc
 4619 0194 A5000000 		.4byte	0xa5
 4620 0198 10       		.byte	0x10
 4621 0199 00       		.byte	0
 4622 019a 06       		.uleb128 0x6
 4623 019b 04       		.byte	0x4
 4624 019c 51010000 		.4byte	0x151
 4625 01a0 02       		.uleb128 0x2
 4626 01a1 C4060000 		.4byte	.LASF31
 4627 01a5 07       		.byte	0x7
 4628 01a6 BF       		.byte	0xbf
 4629 01a7 51010000 		.4byte	0x151
 4630 01ab 0D       		.uleb128 0xd
 4631 01ac 65050000 		.4byte	.LASF33
 4632 01b0 0C       		.byte	0xc
 4633 01b1 07       		.byte	0x7
 4634 01b2 C1       		.byte	0xc1
 4635 01b3 DC010000 		.4byte	0x1dc
 4636 01b7 0E       		.uleb128 0xe
 4637 01b8 4D0A0000 		.4byte	.LASF26
 4638 01bc 07       		.byte	0x7
 4639 01bd C4       		.byte	0xc4
 4640 01be 30010000 		.4byte	0x130
 4641 01c2 00       		.byte	0
 4642 01c3 0E       		.uleb128 0xe
 4643 01c4 79080000 		.4byte	.LASF27
 4644 01c8 07       		.byte	0x7
 4645 01c9 C5       		.byte	0xc5
 4646 01ca 9A010000 		.4byte	0x19a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 178


 4647 01ce 04       		.byte	0x4
 4648 01cf 0E       		.uleb128 0xe
 4649 01d0 03040000 		.4byte	.LASF28
 4650 01d4 07       		.byte	0x7
 4651 01d5 C6       		.byte	0xc6
 4652 01d6 9A010000 		.4byte	0x19a
 4653 01da 08       		.byte	0x8
 4654 01db 00       		.byte	0
 4655 01dc 02       		.uleb128 0x2
 4656 01dd 52070000 		.4byte	.LASF34
 4657 01e1 07       		.byte	0x7
 4658 01e2 C8       		.byte	0xc8
 4659 01e3 AB010000 		.4byte	0x1ab
 4660 01e7 0D       		.uleb128 0xd
 4661 01e8 80050000 		.4byte	.LASF35
 4662 01ec 14       		.byte	0x14
 4663 01ed 07       		.byte	0x7
 4664 01ee CD       		.byte	0xcd
 4665 01ef 18020000 		.4byte	0x218
 4666 01f3 0E       		.uleb128 0xe
 4667 01f4 0B000000 		.4byte	.LASF36
 4668 01f8 07       		.byte	0x7
 4669 01f9 D0       		.byte	0xd0
 4670 01fa 25010000 		.4byte	0x125
 4671 01fe 00       		.byte	0
 4672 01ff 0E       		.uleb128 0xe
 4673 0200 56010000 		.4byte	.LASF37
 4674 0204 07       		.byte	0x7
 4675 0205 D1       		.byte	0xd1
 4676 0206 18020000 		.4byte	0x218
 4677 020a 04       		.byte	0x4
 4678 020b 0E       		.uleb128 0xe
 4679 020c 2B070000 		.4byte	.LASF38
 4680 0210 07       		.byte	0x7
 4681 0211 D2       		.byte	0xd2
 4682 0212 DC010000 		.4byte	0x1dc
 4683 0216 08       		.byte	0x8
 4684 0217 00       		.byte	0
 4685 0218 06       		.uleb128 0x6
 4686 0219 04       		.byte	0x4
 4687 021a A0010000 		.4byte	0x1a0
 4688 021e 02       		.uleb128 0x2
 4689 021f 59090000 		.4byte	.LASF39
 4690 0223 07       		.byte	0x7
 4691 0224 D4       		.byte	0xd4
 4692 0225 E7010000 		.4byte	0x1e7
 4693 0229 02       		.uleb128 0x2
 4694 022a F4080000 		.4byte	.LASF40
 4695 022e 08       		.byte	0x8
 4696 022f 67       		.byte	0x67
 4697 0230 A5000000 		.4byte	0xa5
 4698 0234 0F       		.uleb128 0xf
 4699 0235 01       		.byte	0x1
 4700 0236 5E000000 		.4byte	0x5e
 4701 023a 08       		.byte	0x8
 4702 023b 71       		.byte	0x71
 4703 023c 65020000 		.4byte	0x265
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 179


 4704 0240 10       		.uleb128 0x10
 4705 0241 060C0000 		.4byte	.LASF41
 4706 0245 00       		.byte	0
 4707 0246 10       		.uleb128 0x10
 4708 0247 8E070000 		.4byte	.LASF42
 4709 024b 01       		.byte	0x1
 4710 024c 10       		.uleb128 0x10
 4711 024d 640D0000 		.4byte	.LASF43
 4712 0251 02       		.byte	0x2
 4713 0252 10       		.uleb128 0x10
 4714 0253 64000000 		.4byte	.LASF44
 4715 0257 03       		.byte	0x3
 4716 0258 10       		.uleb128 0x10
 4717 0259 FF070000 		.4byte	.LASF45
 4718 025d 04       		.byte	0x4
 4719 025e 10       		.uleb128 0x10
 4720 025f 7A000000 		.4byte	.LASF46
 4721 0263 05       		.byte	0x5
 4722 0264 00       		.byte	0
 4723 0265 02       		.uleb128 0x2
 4724 0266 4E090000 		.4byte	.LASF47
 4725 026a 08       		.byte	0x8
 4726 026b 78       		.byte	0x78
 4727 026c 34020000 		.4byte	0x234
 4728 0270 0F       		.uleb128 0xf
 4729 0271 01       		.byte	0x1
 4730 0272 5E000000 		.4byte	0x5e
 4731 0276 08       		.byte	0x8
 4732 0277 7C       		.byte	0x7c
 4733 0278 9B020000 		.4byte	0x29b
 4734 027c 10       		.uleb128 0x10
 4735 027d 0E010000 		.4byte	.LASF48
 4736 0281 00       		.byte	0
 4737 0282 10       		.uleb128 0x10
 4738 0283 8C090000 		.4byte	.LASF49
 4739 0287 01       		.byte	0x1
 4740 0288 10       		.uleb128 0x10
 4741 0289 5A050000 		.4byte	.LASF50
 4742 028d 02       		.byte	0x2
 4743 028e 10       		.uleb128 0x10
 4744 028f 7F030000 		.4byte	.LASF51
 4745 0293 03       		.byte	0x3
 4746 0294 10       		.uleb128 0x10
 4747 0295 CF060000 		.4byte	.LASF52
 4748 0299 04       		.byte	0x4
 4749 029a 00       		.byte	0
 4750 029b 02       		.uleb128 0x2
 4751 029c 45050000 		.4byte	.LASF53
 4752 02a0 08       		.byte	0x8
 4753 02a1 82       		.byte	0x82
 4754 02a2 70020000 		.4byte	0x270
 4755 02a6 0D       		.uleb128 0xd
 4756 02a7 7F010000 		.4byte	.LASF54
 4757 02ab 08       		.byte	0x8
 4758 02ac 08       		.byte	0x8
 4759 02ad 87       		.byte	0x87
 4760 02ae CB020000 		.4byte	0x2cb
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 180


 4761 02b2 0E       		.uleb128 0xe
 4762 02b3 39020000 		.4byte	.LASF55
 4763 02b7 08       		.byte	0x8
 4764 02b8 89       		.byte	0x89
 4765 02b9 1A010000 		.4byte	0x11a
 4766 02bd 00       		.byte	0
 4767 02be 0E       		.uleb128 0xe
 4768 02bf 4C080000 		.4byte	.LASF56
 4769 02c3 08       		.byte	0x8
 4770 02c4 8A       		.byte	0x8a
 4771 02c5 30010000 		.4byte	0x130
 4772 02c9 04       		.byte	0x4
 4773 02ca 00       		.byte	0
 4774 02cb 02       		.uleb128 0x2
 4775 02cc DD080000 		.4byte	.LASF57
 4776 02d0 08       		.byte	0x8
 4777 02d1 8B       		.byte	0x8b
 4778 02d2 A6020000 		.4byte	0x2a6
 4779 02d6 0D       		.uleb128 0xd
 4780 02d7 A1090000 		.4byte	.LASF58
 4781 02db 0C       		.byte	0xc
 4782 02dc 08       		.byte	0x8
 4783 02dd 90       		.byte	0x90
 4784 02de 07030000 		.4byte	0x307
 4785 02e2 0E       		.uleb128 0xe
 4786 02e3 3B0C0000 		.4byte	.LASF59
 4787 02e7 08       		.byte	0x8
 4788 02e8 92       		.byte	0x92
 4789 02e9 A5000000 		.4byte	0xa5
 4790 02ed 00       		.byte	0
 4791 02ee 0E       		.uleb128 0xe
 4792 02ef 08080000 		.4byte	.LASF60
 4793 02f3 08       		.byte	0x8
 4794 02f4 93       		.byte	0x93
 4795 02f5 D5000000 		.4byte	0xd5
 4796 02f9 04       		.byte	0x4
 4797 02fa 0E       		.uleb128 0xe
 4798 02fb 5B020000 		.4byte	.LASF61
 4799 02ff 08       		.byte	0x8
 4800 0300 94       		.byte	0x94
 4801 0301 D5000000 		.4byte	0xd5
 4802 0305 08       		.byte	0x8
 4803 0306 00       		.byte	0
 4804 0307 02       		.uleb128 0x2
 4805 0308 B7070000 		.4byte	.LASF62
 4806 030c 08       		.byte	0x8
 4807 030d 95       		.byte	0x95
 4808 030e D6020000 		.4byte	0x2d6
 4809 0312 07       		.uleb128 0x7
 4810 0313 B4000000 		.4byte	0xb4
 4811 0317 06       		.uleb128 0x6
 4812 0318 04       		.byte	0x4
 4813 0319 0F010000 		.4byte	0x10f
 4814 031d 11       		.uleb128 0x11
 4815 031e 03060000 		.4byte	.LASF63
 4816 0322 68       		.byte	0x68
 4817 0323 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 181


 4818 0324 2501     		.2byte	0x125
 4819 0326 BA030000 		.4byte	0x3ba
 4820 032a 12       		.uleb128 0x12
 4821 032b 910E0000 		.4byte	.LASF64
 4822 032f 01       		.byte	0x1
 4823 0330 2701     		.2byte	0x127
 4824 0332 BA030000 		.4byte	0x3ba
 4825 0336 00       		.byte	0
 4826 0337 12       		.uleb128 0x12
 4827 0338 600E0000 		.4byte	.LASF65
 4828 033c 01       		.byte	0x1
 4829 033d 2D01     		.2byte	0x12d
 4830 033f A0010000 		.4byte	0x1a0
 4831 0343 04       		.byte	0x4
 4832 0344 12       		.uleb128 0x12
 4833 0345 170D0000 		.4byte	.LASF66
 4834 0349 01       		.byte	0x1
 4835 034a 2E01     		.2byte	0x12e
 4836 034c A0010000 		.4byte	0x1a0
 4837 0350 18       		.byte	0x18
 4838 0351 12       		.uleb128 0x12
 4839 0352 41000000 		.4byte	.LASF67
 4840 0356 01       		.byte	0x1
 4841 0357 2F01     		.2byte	0x12f
 4842 0359 25010000 		.4byte	0x125
 4843 035d 2C       		.byte	0x2c
 4844 035e 12       		.uleb128 0x12
 4845 035f E00A0000 		.4byte	.LASF68
 4846 0363 01       		.byte	0x1
 4847 0364 3001     		.2byte	0x130
 4848 0366 17030000 		.4byte	0x317
 4849 036a 30       		.byte	0x30
 4850 036b 12       		.uleb128 0x12
 4851 036c 00000000 		.4byte	.LASF69
 4852 0370 01       		.byte	0x1
 4853 0371 3101     		.2byte	0x131
 4854 0373 C5030000 		.4byte	0x3c5
 4855 0377 34       		.byte	0x34
 4856 0378 12       		.uleb128 0x12
 4857 0379 F80C0000 		.4byte	.LASF70
 4858 037d 01       		.byte	0x1
 4859 037e 4101     		.2byte	0x141
 4860 0380 25010000 		.4byte	0x125
 4861 0384 44       		.byte	0x44
 4862 0385 12       		.uleb128 0x12
 4863 0386 80060000 		.4byte	.LASF71
 4864 038a 01       		.byte	0x1
 4865 038b 4201     		.2byte	0x142
 4866 038d 25010000 		.4byte	0x125
 4867 0391 48       		.byte	0x48
 4868 0392 12       		.uleb128 0x12
 4869 0393 9A040000 		.4byte	.LASF72
 4870 0397 01       		.byte	0x1
 4871 0398 4A01     		.2byte	0x14a
 4872 039a 41010000 		.4byte	0x141
 4873 039e 4C       		.byte	0x4c
 4874 039f 12       		.uleb128 0x12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 182


 4875 03a0 70060000 		.4byte	.LASF73
 4876 03a4 01       		.byte	0x1
 4877 03a5 5D01     		.2byte	0x15d
 4878 03a7 EE000000 		.4byte	0xee
 4879 03ab 60       		.byte	0x60
 4880 03ac 12       		.uleb128 0x12
 4881 03ad C5020000 		.4byte	.LASF74
 4882 03b1 01       		.byte	0x1
 4883 03b2 5E01     		.2byte	0x15e
 4884 03b4 D5030000 		.4byte	0x3d5
 4885 03b8 64       		.byte	0x64
 4886 03b9 00       		.byte	0
 4887 03ba 06       		.uleb128 0x6
 4888 03bb 04       		.byte	0x4
 4889 03bc C0030000 		.4byte	0x3c0
 4890 03c0 08       		.uleb128 0x8
 4891 03c1 0F010000 		.4byte	0x10f
 4892 03c5 0B       		.uleb128 0xb
 4893 03c6 AD000000 		.4byte	0xad
 4894 03ca D5030000 		.4byte	0x3d5
 4895 03ce 0C       		.uleb128 0xc
 4896 03cf 9E000000 		.4byte	0x9e
 4897 03d3 0F       		.byte	0xf
 4898 03d4 00       		.byte	0
 4899 03d5 08       		.uleb128 0x8
 4900 03d6 BF000000 		.4byte	0xbf
 4901 03da 13       		.uleb128 0x13
 4902 03db 9E020000 		.4byte	.LASF75
 4903 03df 01       		.byte	0x1
 4904 03e0 6B01     		.2byte	0x16b
 4905 03e2 1D030000 		.4byte	0x31d
 4906 03e6 13       		.uleb128 0x13
 4907 03e7 3C0D0000 		.4byte	.LASF76
 4908 03eb 01       		.byte	0x1
 4909 03ec 6F01     		.2byte	0x16f
 4910 03ee DA030000 		.4byte	0x3da
 4911 03f2 14       		.uleb128 0x14
 4912 03f3 AB0A0000 		.4byte	.LASF79
 4913 03f7 01       		.byte	0x1
 4914 03f8 7806     		.2byte	0x678
 4915 03fa 1A010000 		.4byte	0x11a
 4916 03fe 00000000 		.4byte	.LFB43
 4917 0402 3C000000 		.4byte	.LFE43-.LFB43
 4918 0406 01       		.uleb128 0x1
 4919 0407 9C       		.byte	0x9c
 4920 0408 3D040000 		.4byte	0x43d
 4921 040c 15       		.uleb128 0x15
 4922 040d 86090000 		.4byte	.LASF81
 4923 0411 01       		.byte	0x1
 4924 0412 7806     		.2byte	0x678
 4925 0414 3D040000 		.4byte	0x43d
 4926 0418 00000000 		.4byte	.LLST0
 4927 041c 16       		.uleb128 0x16
 4928 041d 770B0000 		.4byte	.LASF77
 4929 0421 01       		.byte	0x1
 4930 0422 7A06     		.2byte	0x67a
 4931 0424 1A010000 		.4byte	0x11a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 183


 4932 0428 6C000000 		.4byte	.LLST1
 4933 042c 16       		.uleb128 0x16
 4934 042d 6F0E0000 		.4byte	.LASF78
 4935 0431 01       		.byte	0x1
 4936 0432 7B06     		.2byte	0x67b
 4937 0434 4D040000 		.4byte	0x44d
 4938 0438 8B000000 		.4byte	.LLST2
 4939 043c 00       		.byte	0
 4940 043d 07       		.uleb128 0x7
 4941 043e 29020000 		.4byte	0x229
 4942 0442 06       		.uleb128 0x6
 4943 0443 04       		.byte	0x4
 4944 0444 48040000 		.4byte	0x448
 4945 0448 07       		.uleb128 0x7
 4946 0449 E6030000 		.4byte	0x3e6
 4947 044d 07       		.uleb128 0x7
 4948 044e 42040000 		.4byte	0x442
 4949 0452 14       		.uleb128 0x14
 4950 0453 BF0D0000 		.4byte	.LASF80
 4951 0457 01       		.byte	0x1
 4952 0458 CD0D     		.2byte	0xdcd
 4953 045a CA000000 		.4byte	0xca
 4954 045e 00000000 		.4byte	.LFB68
 4955 0462 14000000 		.4byte	.LFE68-.LFB68
 4956 0466 01       		.uleb128 0x1
 4957 0467 9C       		.byte	0x9c
 4958 0468 8D040000 		.4byte	0x48d
 4959 046c 15       		.uleb128 0x15
 4960 046d 08020000 		.4byte	.LASF82
 4961 0471 01       		.byte	0x1
 4962 0472 CD0D     		.2byte	0xdcd
 4963 0474 8D040000 		.4byte	0x48d
 4964 0478 F7000000 		.4byte	.LLST3
 4965 047c 16       		.uleb128 0x16
 4966 047d D5080000 		.4byte	.LASF83
 4967 0481 01       		.byte	0x1
 4968 0482 CF0D     		.2byte	0xdcf
 4969 0484 D5000000 		.4byte	0xd5
 4970 0488 15010000 		.4byte	.LLST4
 4971 048c 00       		.byte	0
 4972 048d 06       		.uleb128 0x6
 4973 048e 04       		.byte	0x4
 4974 048f 93040000 		.4byte	0x493
 4975 0493 07       		.uleb128 0x7
 4976 0494 BF000000 		.4byte	0xbf
 4977 0498 17       		.uleb128 0x17
 4978 0499 30080000 		.4byte	.LASF84
 4979 049d 01       		.byte	0x1
 4980 049e 330E     		.2byte	0xe33
 4981 04a0 00000000 		.4byte	.LFB71
 4982 04a4 30000000 		.4byte	.LFE71-.LFB71
 4983 04a8 01       		.uleb128 0x1
 4984 04a9 9C       		.byte	0x9c
 4985 04aa BF040000 		.4byte	0x4bf
 4986 04ae 16       		.uleb128 0x16
 4987 04af 6F0E0000 		.4byte	.LASF78
 4988 04b3 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 184


 4989 04b4 350E     		.2byte	0xe35
 4990 04b6 BF040000 		.4byte	0x4bf
 4991 04ba 34010000 		.4byte	.LLST5
 4992 04be 00       		.byte	0
 4993 04bf 06       		.uleb128 0x6
 4994 04c0 04       		.byte	0x4
 4995 04c1 E6030000 		.4byte	0x3e6
 4996 04c5 17       		.uleb128 0x17
 4997 04c6 570D0000 		.4byte	.LASF85
 4998 04ca 01       		.byte	0x1
 4999 04cb FD0D     		.2byte	0xdfd
 5000 04cd 00000000 		.4byte	.LFB70
 5001 04d1 12000000 		.4byte	.LFE70-.LFB70
 5002 04d5 01       		.uleb128 0x1
 5003 04d6 9C       		.byte	0x9c
 5004 04d7 05050000 		.4byte	0x505
 5005 04db 15       		.uleb128 0x15
 5006 04dc 6F0E0000 		.4byte	.LASF78
 5007 04e0 01       		.byte	0x1
 5008 04e1 FD0D     		.2byte	0xdfd
 5009 04e3 BF040000 		.4byte	0x4bf
 5010 04e7 47010000 		.4byte	.LLST6
 5011 04eb 18       		.uleb128 0x18
 5012 04ec 0A000000 		.4byte	.LVL18
 5013 04f0 671E0000 		.4byte	0x1e67
 5014 04f4 19       		.uleb128 0x19
 5015 04f5 10000000 		.4byte	.LVL19
 5016 04f9 671E0000 		.4byte	0x1e67
 5017 04fd 1A       		.uleb128 0x1a
 5018 04fe 01       		.uleb128 0x1
 5019 04ff 50       		.byte	0x50
 5020 0500 02       		.uleb128 0x2
 5021 0501 74       		.byte	0x74
 5022 0502 00       		.sleb128 0
 5023 0503 00       		.byte	0
 5024 0504 00       		.byte	0
 5025 0505 17       		.uleb128 0x17
 5026 0506 C8000000 		.4byte	.LASF86
 5027 050a 01       		.byte	0x1
 5028 050b FF02     		.2byte	0x2ff
 5029 050d 00000000 		.4byte	.LFB33
 5030 0511 AC000000 		.4byte	.LFE33-.LFB33
 5031 0515 01       		.uleb128 0x1
 5032 0516 9C       		.byte	0x9c
 5033 0517 19060000 		.4byte	0x619
 5034 051b 15       		.uleb128 0x15
 5035 051c AC070000 		.4byte	.LASF87
 5036 0520 01       		.byte	0x1
 5037 0521 FF02     		.2byte	0x2ff
 5038 0523 F3000000 		.4byte	0xf3
 5039 0527 73010000 		.4byte	.LLST7
 5040 052b 15       		.uleb128 0x15
 5041 052c DC050000 		.4byte	.LASF88
 5042 0530 01       		.byte	0x1
 5043 0531 0003     		.2byte	0x300
 5044 0533 12030000 		.4byte	0x312
 5045 0537 9E010000 		.4byte	.LLST8
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 185


 5046 053b 15       		.uleb128 0x15
 5047 053c 05070000 		.4byte	.LASF89
 5048 0540 01       		.byte	0x1
 5049 0541 0103     		.2byte	0x301
 5050 0543 19060000 		.4byte	0x619
 5051 0547 CA010000 		.4byte	.LLST9
 5052 054b 15       		.uleb128 0x15
 5053 054c 400A0000 		.4byte	.LASF90
 5054 0550 01       		.byte	0x1
 5055 0551 0203     		.2byte	0x302
 5056 0553 1E060000 		.4byte	0x61e
 5057 0557 F6010000 		.4byte	.LLST10
 5058 055b 15       		.uleb128 0x15
 5059 055c 41000000 		.4byte	.LASF67
 5060 0560 01       		.byte	0x1
 5061 0561 0303     		.2byte	0x303
 5062 0563 25010000 		.4byte	0x125
 5063 0567 15020000 		.4byte	.LLST11
 5064 056b 1B       		.uleb128 0x1b
 5065 056c D90E0000 		.4byte	.LASF91
 5066 0570 01       		.byte	0x1
 5067 0571 0403     		.2byte	0x304
 5068 0573 29060000 		.4byte	0x629
 5069 0577 02       		.uleb128 0x2
 5070 0578 91       		.byte	0x91
 5071 0579 04       		.sleb128 4
 5072 057a 1B       		.uleb128 0x1b
 5073 057b A3070000 		.4byte	.LASF92
 5074 057f 01       		.byte	0x1
 5075 0580 0503     		.2byte	0x305
 5076 0582 BF040000 		.4byte	0x4bf
 5077 0586 02       		.uleb128 0x2
 5078 0587 91       		.byte	0x91
 5079 0588 08       		.sleb128 8
 5080 0589 1B       		.uleb128 0x1b
 5081 058a DA0D0000 		.4byte	.LASF93
 5082 058e 01       		.byte	0x1
 5083 058f 0603     		.2byte	0x306
 5084 0591 39060000 		.4byte	0x639
 5085 0595 02       		.uleb128 0x2
 5086 0596 91       		.byte	0x91
 5087 0597 0C       		.sleb128 12
 5088 0598 16       		.uleb128 0x16
 5089 0599 910E0000 		.4byte	.LASF64
 5090 059d 01       		.byte	0x1
 5091 059e 0803     		.2byte	0x308
 5092 05a0 17030000 		.4byte	0x317
 5093 05a4 34020000 		.4byte	.LLST12
 5094 05a8 1C       		.uleb128 0x1c
 5095 05a9 7800     		.ascii	"x\000"
 5096 05ab 01       		.byte	0x1
 5097 05ac 0903     		.2byte	0x309
 5098 05ae 25010000 		.4byte	0x125
 5099 05b2 73020000 		.4byte	.LLST13
 5100 05b6 1D       		.uleb128 0x1d
 5101 05b7 1A000000 		.4byte	.LVL25
 5102 05bb 721E0000 		.4byte	0x1e72
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 186


 5103 05bf D2050000 		.4byte	0x5d2
 5104 05c3 1A       		.uleb128 0x1a
 5105 05c4 01       		.uleb128 0x1
 5106 05c5 51       		.byte	0x51
 5107 05c6 02       		.uleb128 0x2
 5108 05c7 08       		.byte	0x8
 5109 05c8 A5       		.byte	0xa5
 5110 05c9 1A       		.uleb128 0x1a
 5111 05ca 01       		.uleb128 0x1
 5112 05cb 52       		.byte	0x52
 5113 05cc 04       		.uleb128 0x4
 5114 05cd 77       		.byte	0x77
 5115 05ce 00       		.sleb128 0
 5116 05cf 32       		.byte	0x32
 5117 05d0 24       		.byte	0x24
 5118 05d1 00       		.byte	0
 5119 05d2 1D       		.uleb128 0x1d
 5120 05d3 60000000 		.4byte	.LVL34
 5121 05d7 7D1E0000 		.4byte	0x1e7d
 5122 05db E6050000 		.4byte	0x5e6
 5123 05df 1A       		.uleb128 0x1a
 5124 05e0 01       		.uleb128 0x1
 5125 05e1 50       		.byte	0x50
 5126 05e2 02       		.uleb128 0x2
 5127 05e3 76       		.byte	0x76
 5128 05e4 04       		.sleb128 4
 5129 05e5 00       		.byte	0
 5130 05e6 1D       		.uleb128 0x1d
 5131 05e7 68000000 		.4byte	.LVL35
 5132 05eb 7D1E0000 		.4byte	0x1e7d
 5133 05ef FA050000 		.4byte	0x5fa
 5134 05f3 1A       		.uleb128 0x1a
 5135 05f4 01       		.uleb128 0x1
 5136 05f5 50       		.byte	0x50
 5137 05f6 02       		.uleb128 0x2
 5138 05f7 76       		.byte	0x76
 5139 05f8 18       		.sleb128 24
 5140 05f9 00       		.byte	0
 5141 05fa 19       		.uleb128 0x19
 5142 05fb 9A000000 		.4byte	.LVL41
 5143 05ff 891E0000 		.4byte	0x1e89
 5144 0603 1A       		.uleb128 0x1a
 5145 0604 01       		.uleb128 0x1
 5146 0605 50       		.byte	0x50
 5147 0606 02       		.uleb128 0x2
 5148 0607 77       		.byte	0x77
 5149 0608 00       		.sleb128 0
 5150 0609 1A       		.uleb128 0x1a
 5151 060a 01       		.uleb128 0x1
 5152 060b 51       		.byte	0x51
 5153 060c 03       		.uleb128 0x3
 5154 060d 7D       		.byte	0x7d
 5155 060e 00       		.sleb128 0
 5156 060f 06       		.byte	0x6
 5157 0610 1A       		.uleb128 0x1a
 5158 0611 01       		.uleb128 0x1
 5159 0612 52       		.byte	0x52
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 187


 5160 0613 03       		.uleb128 0x3
 5161 0614 91       		.byte	0x91
 5162 0615 64       		.sleb128 -28
 5163 0616 06       		.byte	0x6
 5164 0617 00       		.byte	0
 5165 0618 00       		.byte	0
 5166 0619 07       		.uleb128 0x7
 5167 061a D5000000 		.4byte	0xd5
 5168 061e 07       		.uleb128 0x7
 5169 061f A5000000 		.4byte	0xa5
 5170 0623 06       		.uleb128 0x6
 5171 0624 04       		.byte	0x4
 5172 0625 29020000 		.4byte	0x229
 5173 0629 07       		.uleb128 0x7
 5174 062a 23060000 		.4byte	0x623
 5175 062e 06       		.uleb128 0x6
 5176 062f 04       		.byte	0x4
 5177 0630 34060000 		.4byte	0x634
 5178 0634 07       		.uleb128 0x7
 5179 0635 07030000 		.4byte	0x307
 5180 0639 07       		.uleb128 0x7
 5181 063a 2E060000 		.4byte	0x62e
 5182 063e 17       		.uleb128 0x17
 5183 063f AA0E0000 		.4byte	.LASF94
 5184 0643 01       		.byte	0x1
 5185 0644 050D     		.2byte	0xd05
 5186 0646 00000000 		.4byte	.LFB66
 5187 064a 58000000 		.4byte	.LFE66-.LFB66
 5188 064e 01       		.uleb128 0x1
 5189 064f 9C       		.byte	0x9c
 5190 0650 E6060000 		.4byte	0x6e6
 5191 0654 16       		.uleb128 0x16
 5192 0655 41000000 		.4byte	.LASF67
 5193 0659 01       		.byte	0x1
 5194 065a 070D     		.2byte	0xd07
 5195 065c 25010000 		.4byte	0x125
 5196 0660 A9020000 		.4byte	.LLST14
 5197 0664 1D       		.uleb128 0x1d
 5198 0665 16000000 		.4byte	.LVL47
 5199 0669 941E0000 		.4byte	0x1e94
 5200 066d 85060000 		.4byte	0x685
 5201 0671 1A       		.uleb128 0x1a
 5202 0672 01       		.uleb128 0x1
 5203 0673 50       		.byte	0x50
 5204 0674 0F       		.uleb128 0xf
 5205 0675 74       		.byte	0x74
 5206 0676 00       		.sleb128 0
 5207 0677 32       		.byte	0x32
 5208 0678 24       		.byte	0x24
 5209 0679 74       		.byte	0x74
 5210 067a 00       		.sleb128 0
 5211 067b 22       		.byte	0x22
 5212 067c 32       		.byte	0x32
 5213 067d 24       		.byte	0x24
 5214 067e 03       		.byte	0x3
 5215 067f 30000000 		.4byte	.LANCHOR0+48
 5216 0683 22       		.byte	0x22
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 188


 5217 0684 00       		.byte	0
 5218 0685 1D       		.uleb128 0x1d
 5219 0686 28000000 		.4byte	.LVL50
 5220 068a 941E0000 		.4byte	0x1e94
 5221 068e 99060000 		.4byte	0x699
 5222 0692 1A       		.uleb128 0x1a
 5223 0693 01       		.uleb128 0x1
 5224 0694 50       		.byte	0x50
 5225 0695 02       		.uleb128 0x2
 5226 0696 77       		.byte	0x77
 5227 0697 00       		.sleb128 0
 5228 0698 00       		.byte	0
 5229 0699 1D       		.uleb128 0x1d
 5230 069a 32000000 		.4byte	.LVL51
 5231 069e 941E0000 		.4byte	0x1e94
 5232 06a2 AD060000 		.4byte	0x6ad
 5233 06a6 1A       		.uleb128 0x1a
 5234 06a7 01       		.uleb128 0x1
 5235 06a8 50       		.byte	0x50
 5236 06a9 02       		.uleb128 0x2
 5237 06aa 76       		.byte	0x76
 5238 06ab 00       		.sleb128 0
 5239 06ac 00       		.byte	0
 5240 06ad 1D       		.uleb128 0x1d
 5241 06ae 3C000000 		.4byte	.LVL52
 5242 06b2 941E0000 		.4byte	0x1e94
 5243 06b6 C1060000 		.4byte	0x6c1
 5244 06ba 1A       		.uleb128 0x1a
 5245 06bb 01       		.uleb128 0x1
 5246 06bc 50       		.byte	0x50
 5247 06bd 02       		.uleb128 0x2
 5248 06be 75       		.byte	0x75
 5249 06bf 14       		.sleb128 20
 5250 06c0 00       		.byte	0
 5251 06c1 1D       		.uleb128 0x1d
 5252 06c2 44000000 		.4byte	.LVL53
 5253 06c6 941E0000 		.4byte	0x1e94
 5254 06ca D5060000 		.4byte	0x6d5
 5255 06ce 1A       		.uleb128 0x1a
 5256 06cf 01       		.uleb128 0x1
 5257 06d0 50       		.byte	0x50
 5258 06d1 02       		.uleb128 0x2
 5259 06d2 74       		.byte	0x74
 5260 06d3 3C       		.sleb128 60
 5261 06d4 00       		.byte	0
 5262 06d5 19       		.uleb128 0x19
 5263 06d6 4A000000 		.4byte	.LVL54
 5264 06da 941E0000 		.4byte	0x1e94
 5265 06de 1A       		.uleb128 0x1a
 5266 06df 01       		.uleb128 0x1
 5267 06e0 50       		.byte	0x50
 5268 06e1 02       		.uleb128 0x2
 5269 06e2 75       		.byte	0x75
 5270 06e3 00       		.sleb128 0
 5271 06e4 00       		.byte	0
 5272 06e5 00       		.byte	0
 5273 06e6 17       		.uleb128 0x17
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 189


 5274 06e7 6D070000 		.4byte	.LASF95
 5275 06eb 01       		.byte	0x1
 5276 06ec C303     		.2byte	0x3c3
 5277 06ee 00000000 		.4byte	.LFB34
 5278 06f2 8C000000 		.4byte	.LFE34-.LFB34
 5279 06f6 01       		.uleb128 0x1
 5280 06f7 9C       		.byte	0x9c
 5281 06f8 45070000 		.4byte	0x745
 5282 06fc 15       		.uleb128 0x15
 5283 06fd A3070000 		.4byte	.LASF92
 5284 0701 01       		.byte	0x1
 5285 0702 C303     		.2byte	0x3c3
 5286 0704 BF040000 		.4byte	0x4bf
 5287 0708 C8020000 		.4byte	.LLST15
 5288 070c 18       		.uleb128 0x18
 5289 070d 08000000 		.4byte	.LVL56
 5290 0711 A01E0000 		.4byte	0x1ea0
 5291 0715 18       		.uleb128 0x18
 5292 0716 24000000 		.4byte	.LVL57
 5293 071a 3E060000 		.4byte	0x63e
 5294 071e 1D       		.uleb128 0x1d
 5295 071f 64000000 		.4byte	.LVL58
 5296 0723 AB1E0000 		.4byte	0x1eab
 5297 0727 32070000 		.4byte	0x732
 5298 072b 1A       		.uleb128 0x1a
 5299 072c 01       		.uleb128 0x1
 5300 072d 51       		.byte	0x51
 5301 072e 02       		.uleb128 0x2
 5302 072f 74       		.byte	0x74
 5303 0730 04       		.sleb128 4
 5304 0731 00       		.byte	0
 5305 0732 18       		.uleb128 0x18
 5306 0733 68000000 		.4byte	.LVL59
 5307 0737 B71E0000 		.4byte	0x1eb7
 5308 073b 18       		.uleb128 0x18
 5309 073c 80000000 		.4byte	.LVL60
 5310 0740 C21E0000 		.4byte	0x1ec2
 5311 0744 00       		.byte	0
 5312 0745 17       		.uleb128 0x17
 5313 0746 E30D0000 		.4byte	.LASF96
 5314 074a 01       		.byte	0x1
 5315 074b 5412     		.2byte	0x1254
 5316 074d 00000000 		.4byte	.LFB84
 5317 0751 64000000 		.4byte	.LFE84-.LFB84
 5318 0755 01       		.uleb128 0x1
 5319 0756 9C       		.byte	0x9c
 5320 0757 CE070000 		.4byte	0x7ce
 5321 075b 15       		.uleb128 0x15
 5322 075c 420D0000 		.4byte	.LASF97
 5323 0760 01       		.byte	0x1
 5324 0761 5412     		.2byte	0x1254
 5325 0763 30010000 		.4byte	0x130
 5326 0767 F4020000 		.4byte	.LLST16
 5327 076b 15       		.uleb128 0x15
 5328 076c F00B0000 		.4byte	.LASF98
 5329 0770 01       		.byte	0x1
 5330 0771 5412     		.2byte	0x1254
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 190


 5331 0773 CE070000 		.4byte	0x7ce
 5332 0777 20030000 		.4byte	.LLST17
 5333 077b 16       		.uleb128 0x16
 5334 077c 540E0000 		.4byte	.LASF99
 5335 0780 01       		.byte	0x1
 5336 0781 5612     		.2byte	0x1256
 5337 0783 30010000 		.4byte	0x130
 5338 0787 4C030000 		.4byte	.LLST18
 5339 078b 16       		.uleb128 0x16
 5340 078c AA050000 		.4byte	.LASF100
 5341 0790 01       		.byte	0x1
 5342 0791 5712     		.2byte	0x1257
 5343 0793 D3070000 		.4byte	0x7d3
 5344 0797 5F030000 		.4byte	.LLST19
 5345 079b 18       		.uleb128 0x18
 5346 079c 12000000 		.4byte	.LVL65
 5347 07a0 CD1E0000 		.4byte	0x1ecd
 5348 07a4 1D       		.uleb128 0x1d
 5349 07a5 26000000 		.4byte	.LVL66
 5350 07a9 AB1E0000 		.4byte	0x1eab
 5351 07ad BB070000 		.4byte	0x7bb
 5352 07b1 1A       		.uleb128 0x1a
 5353 07b2 01       		.uleb128 0x1
 5354 07b3 50       		.byte	0x50
 5355 07b4 05       		.uleb128 0x5
 5356 07b5 03       		.byte	0x3
 5357 07b6 00000000 		.4byte	.LANCHOR0
 5358 07ba 00       		.byte	0
 5359 07bb 18       		.uleb128 0x18
 5360 07bc 40000000 		.4byte	.LVL68
 5361 07c0 D91E0000 		.4byte	0x1ed9
 5362 07c4 18       		.uleb128 0x18
 5363 07c5 50000000 		.4byte	.LVL70
 5364 07c9 D91E0000 		.4byte	0x1ed9
 5365 07cd 00       		.byte	0
 5366 07ce 07       		.uleb128 0x7
 5367 07cf 1A010000 		.4byte	0x11a
 5368 07d3 07       		.uleb128 0x7
 5369 07d4 30010000 		.4byte	0x130
 5370 07d8 1E       		.uleb128 0x1e
 5371 07d9 61070000 		.4byte	.LASF103
 5372 07dd 01       		.byte	0x1
 5373 07de A402     		.2byte	0x2a4
 5374 07e0 1A010000 		.4byte	0x11a
 5375 07e4 00000000 		.4byte	.LFB32
 5376 07e8 5E000000 		.4byte	.LFE32-.LFB32
 5377 07ec 01       		.uleb128 0x1
 5378 07ed 9C       		.byte	0x9c
 5379 07ee 1E090000 		.4byte	0x91e
 5380 07f2 15       		.uleb128 0x15
 5381 07f3 AC070000 		.4byte	.LASF87
 5382 07f7 01       		.byte	0x1
 5383 07f8 A402     		.2byte	0x2a4
 5384 07fa F3000000 		.4byte	0xf3
 5385 07fe 72030000 		.4byte	.LLST20
 5386 0802 15       		.uleb128 0x15
 5387 0803 DC050000 		.4byte	.LASF88
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 191


 5388 0807 01       		.byte	0x1
 5389 0808 A502     		.2byte	0x2a5
 5390 080a 12030000 		.4byte	0x312
 5391 080e 91030000 		.4byte	.LLST21
 5392 0812 15       		.uleb128 0x15
 5393 0813 60030000 		.4byte	.LASF101
 5394 0817 01       		.byte	0x1
 5395 0818 A602     		.2byte	0x2a6
 5396 081a 1E090000 		.4byte	0x91e
 5397 081e B0030000 		.4byte	.LLST22
 5398 0822 15       		.uleb128 0x15
 5399 0823 400A0000 		.4byte	.LASF90
 5400 0827 01       		.byte	0x1
 5401 0828 A702     		.2byte	0x2a7
 5402 082a 1E060000 		.4byte	0x61e
 5403 082e D1030000 		.4byte	.LLST23
 5404 0832 1B       		.uleb128 0x1b
 5405 0833 41000000 		.4byte	.LASF67
 5406 0837 01       		.byte	0x1
 5407 0838 A802     		.2byte	0x2a8
 5408 083a 25010000 		.4byte	0x125
 5409 083e 02       		.uleb128 0x2
 5410 083f 91       		.byte	0x91
 5411 0840 00       		.sleb128 0
 5412 0841 1B       		.uleb128 0x1b
 5413 0842 D90E0000 		.4byte	.LASF91
 5414 0846 01       		.byte	0x1
 5415 0847 A902     		.2byte	0x2a9
 5416 0849 29060000 		.4byte	0x629
 5417 084d 02       		.uleb128 0x2
 5418 084e 91       		.byte	0x91
 5419 084f 04       		.sleb128 4
 5420 0850 16       		.uleb128 0x16
 5421 0851 A3070000 		.4byte	.LASF92
 5422 0855 01       		.byte	0x1
 5423 0856 AB02     		.2byte	0x2ab
 5424 0858 BF040000 		.4byte	0x4bf
 5425 085c FD030000 		.4byte	.LLST24
 5426 0860 16       		.uleb128 0x16
 5427 0861 770B0000 		.4byte	.LASF77
 5428 0865 01       		.byte	0x1
 5429 0866 AC02     		.2byte	0x2ac
 5430 0868 1A010000 		.4byte	0x11a
 5431 086c 26040000 		.4byte	.LLST25
 5432 0870 1F       		.uleb128 0x1f
 5433 0871 0C000000 		.4byte	.LBB2
 5434 0875 22000000 		.4byte	.LBE2-.LBB2
 5435 0879 C8080000 		.4byte	0x8c8
 5436 087d 16       		.uleb128 0x16
 5437 087e E00A0000 		.4byte	.LASF68
 5438 0882 01       		.byte	0x1
 5439 0883 C902     		.2byte	0x2c9
 5440 0885 17030000 		.4byte	0x317
 5441 0889 45040000 		.4byte	.LLST26
 5442 088d 1D       		.uleb128 0x1d
 5443 088e 12000000 		.4byte	.LVL75
 5444 0892 E51E0000 		.4byte	0x1ee5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 192


 5445 0896 A3080000 		.4byte	0x8a3
 5446 089a 1A       		.uleb128 0x1a
 5447 089b 01       		.uleb128 0x1
 5448 089c 50       		.byte	0x50
 5449 089d 04       		.uleb128 0x4
 5450 089e 74       		.byte	0x74
 5451 089f 00       		.sleb128 0
 5452 08a0 32       		.byte	0x32
 5453 08a1 24       		.byte	0x24
 5454 08a2 00       		.byte	0
 5455 08a3 1D       		.uleb128 0x1d
 5456 08a4 1C000000 		.4byte	.LVL78
 5457 08a8 E51E0000 		.4byte	0x1ee5
 5458 08ac B7080000 		.4byte	0x8b7
 5459 08b0 1A       		.uleb128 0x1a
 5460 08b1 01       		.uleb128 0x1
 5461 08b2 50       		.byte	0x50
 5462 08b3 02       		.uleb128 0x2
 5463 08b4 08       		.byte	0x8
 5464 08b5 68       		.byte	0x68
 5465 08b6 00       		.byte	0
 5466 08b7 19       		.uleb128 0x19
 5467 08b8 2A000000 		.4byte	.LVL81
 5468 08bc 671E0000 		.4byte	0x1e67
 5469 08c0 1A       		.uleb128 0x1a
 5470 08c1 01       		.uleb128 0x1
 5471 08c2 50       		.byte	0x50
 5472 08c3 02       		.uleb128 0x2
 5473 08c4 76       		.byte	0x76
 5474 08c5 00       		.sleb128 0
 5475 08c6 00       		.byte	0
 5476 08c7 00       		.byte	0
 5477 08c8 1D       		.uleb128 0x1d
 5478 08c9 4C000000 		.4byte	.LVL84
 5479 08cd 05050000 		.4byte	0x505
 5480 08d1 0D090000 		.4byte	0x90d
 5481 08d5 1A       		.uleb128 0x1a
 5482 08d6 01       		.uleb128 0x1
 5483 08d7 50       		.byte	0x50
 5484 08d8 03       		.uleb128 0x3
 5485 08d9 91       		.byte	0x91
 5486 08da 60       		.sleb128 -32
 5487 08db 06       		.byte	0x6
 5488 08dc 1A       		.uleb128 0x1a
 5489 08dd 01       		.uleb128 0x1
 5490 08de 51       		.byte	0x51
 5491 08df 03       		.uleb128 0x3
 5492 08e0 91       		.byte	0x91
 5493 08e1 64       		.sleb128 -28
 5494 08e2 06       		.byte	0x6
 5495 08e3 1A       		.uleb128 0x1a
 5496 08e4 01       		.uleb128 0x1
 5497 08e5 52       		.byte	0x52
 5498 08e6 02       		.uleb128 0x2
 5499 08e7 74       		.byte	0x74
 5500 08e8 00       		.sleb128 0
 5501 08e9 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 193


 5502 08ea 01       		.uleb128 0x1
 5503 08eb 53       		.byte	0x53
 5504 08ec 02       		.uleb128 0x2
 5505 08ed 77       		.byte	0x77
 5506 08ee 00       		.sleb128 0
 5507 08ef 1A       		.uleb128 0x1a
 5508 08f0 02       		.uleb128 0x2
 5509 08f1 7D       		.byte	0x7d
 5510 08f2 00       		.sleb128 0
 5511 08f3 03       		.uleb128 0x3
 5512 08f4 91       		.byte	0x91
 5513 08f5 00       		.sleb128 0
 5514 08f6 06       		.byte	0x6
 5515 08f7 1A       		.uleb128 0x1a
 5516 08f8 02       		.uleb128 0x2
 5517 08f9 7D       		.byte	0x7d
 5518 08fa 04       		.sleb128 4
 5519 08fb 03       		.uleb128 0x3
 5520 08fc 91       		.byte	0x91
 5521 08fd 04       		.sleb128 4
 5522 08fe 06       		.byte	0x6
 5523 08ff 1A       		.uleb128 0x1a
 5524 0900 02       		.uleb128 0x2
 5525 0901 7D       		.byte	0x7d
 5526 0902 08       		.sleb128 8
 5527 0903 02       		.uleb128 0x2
 5528 0904 75       		.byte	0x75
 5529 0905 00       		.sleb128 0
 5530 0906 1A       		.uleb128 0x1a
 5531 0907 02       		.uleb128 0x2
 5532 0908 7D       		.byte	0x7d
 5533 0909 0C       		.sleb128 12
 5534 090a 01       		.uleb128 0x1
 5535 090b 30       		.byte	0x30
 5536 090c 00       		.byte	0
 5537 090d 19       		.uleb128 0x19
 5538 090e 52000000 		.4byte	.LVL85
 5539 0912 E6060000 		.4byte	0x6e6
 5540 0916 1A       		.uleb128 0x1a
 5541 0917 01       		.uleb128 0x1
 5542 0918 50       		.byte	0x50
 5543 0919 02       		.uleb128 0x2
 5544 091a 75       		.byte	0x75
 5545 091b 00       		.sleb128 0
 5546 091c 00       		.byte	0
 5547 091d 00       		.byte	0
 5548 091e 07       		.uleb128 0x7
 5549 091f CA000000 		.4byte	0xca
 5550 0923 20       		.uleb128 0x20
 5551 0924 B9090000 		.4byte	.LASF111
 5552 0928 01       		.byte	0x1
 5553 0929 1804     		.2byte	0x418
 5554 092b 00000000 		.4byte	.LFB35
 5555 092f 78000000 		.4byte	.LFE35-.LFB35
 5556 0933 01       		.uleb128 0x1
 5557 0934 9C       		.byte	0x9c
 5558 0935 D4090000 		.4byte	0x9d4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 194


 5559 0939 15       		.uleb128 0x15
 5560 093a E80A0000 		.4byte	.LASF102
 5561 093e 01       		.byte	0x1
 5562 093f 1804     		.2byte	0x418
 5563 0941 29020000 		.4byte	0x229
 5564 0945 79040000 		.4byte	.LLST27
 5565 0949 16       		.uleb128 0x16
 5566 094a 6F0E0000 		.4byte	.LASF78
 5567 094e 01       		.byte	0x1
 5568 094f 1A04     		.2byte	0x41a
 5569 0951 BF040000 		.4byte	0x4bf
 5570 0955 97040000 		.4byte	.LLST28
 5571 0959 18       		.uleb128 0x18
 5572 095a 08000000 		.4byte	.LVL92
 5573 095e A01E0000 		.4byte	0x1ea0
 5574 0962 1D       		.uleb128 0x1d
 5575 0963 18000000 		.4byte	.LVL94
 5576 0967 CD1E0000 		.4byte	0x1ecd
 5577 096b 76090000 		.4byte	0x976
 5578 096f 1A       		.uleb128 0x1a
 5579 0970 01       		.uleb128 0x1
 5580 0971 50       		.byte	0x50
 5581 0972 02       		.uleb128 0x2
 5582 0973 75       		.byte	0x75
 5583 0974 00       		.sleb128 0
 5584 0975 00       		.byte	0
 5585 0976 1D       		.uleb128 0x1d
 5586 0977 26000000 		.4byte	.LVL95
 5587 097b CD1E0000 		.4byte	0x1ecd
 5588 097f 8A090000 		.4byte	0x98a
 5589 0983 1A       		.uleb128 0x1a
 5590 0984 01       		.uleb128 0x1
 5591 0985 50       		.byte	0x50
 5592 0986 02       		.uleb128 0x2
 5593 0987 74       		.byte	0x74
 5594 0988 18       		.sleb128 24
 5595 0989 00       		.byte	0
 5596 098a 1D       		.uleb128 0x1d
 5597 098b 40000000 		.4byte	.LVL96
 5598 098f AB1E0000 		.4byte	0x1eab
 5599 0993 A4090000 		.4byte	0x9a4
 5600 0997 1A       		.uleb128 0x1a
 5601 0998 01       		.uleb128 0x1
 5602 0999 50       		.byte	0x50
 5603 099a 02       		.uleb128 0x2
 5604 099b 76       		.byte	0x76
 5605 099c 3C       		.sleb128 60
 5606 099d 1A       		.uleb128 0x1a
 5607 099e 01       		.uleb128 0x1
 5608 099f 51       		.byte	0x51
 5609 09a0 02       		.uleb128 0x2
 5610 09a1 75       		.byte	0x75
 5611 09a2 00       		.sleb128 0
 5612 09a3 00       		.byte	0
 5613 09a4 1D       		.uleb128 0x1d
 5614 09a5 56000000 		.4byte	.LVL97
 5615 09a9 C5040000 		.4byte	0x4c5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 195


 5616 09ad B8090000 		.4byte	0x9b8
 5617 09b1 1A       		.uleb128 0x1a
 5618 09b2 01       		.uleb128 0x1
 5619 09b3 50       		.byte	0x50
 5620 09b4 02       		.uleb128 0x2
 5621 09b5 74       		.byte	0x74
 5622 09b6 00       		.sleb128 0
 5623 09b7 00       		.byte	0
 5624 09b8 18       		.uleb128 0x18
 5625 09b9 5A000000 		.4byte	.LVL98
 5626 09bd 98040000 		.4byte	0x498
 5627 09c1 18       		.uleb128 0x18
 5628 09c2 5E000000 		.4byte	.LVL99
 5629 09c6 B71E0000 		.4byte	0x1eb7
 5630 09ca 18       		.uleb128 0x18
 5631 09cb 72000000 		.4byte	.LVL100
 5632 09cf C21E0000 		.4byte	0x1ec2
 5633 09d3 00       		.byte	0
 5634 09d4 1E       		.uleb128 0x1e
 5635 09d5 95070000 		.4byte	.LASF104
 5636 09d9 01       		.byte	0x1
 5637 09da F504     		.2byte	0x4f5
 5638 09dc 65020000 		.4byte	0x265
 5639 09e0 00000000 		.4byte	.LFB38
 5640 09e4 68000000 		.4byte	.LFE38-.LFB38
 5641 09e8 01       		.uleb128 0x1
 5642 09e9 9C       		.byte	0x9c
 5643 09ea 3F0A0000 		.4byte	0xa3f
 5644 09ee 15       		.uleb128 0x15
 5645 09ef 86090000 		.4byte	.LASF81
 5646 09f3 01       		.byte	0x1
 5647 09f4 F504     		.2byte	0x4f5
 5648 09f6 29020000 		.4byte	0x229
 5649 09fa B7040000 		.4byte	.LLST29
 5650 09fe 21       		.uleb128 0x21
 5651 09ff 68020000 		.4byte	.LASF105
 5652 0a03 01       		.byte	0x1
 5653 0a04 F704     		.2byte	0x4f7
 5654 0a06 65020000 		.4byte	0x265
 5655 0a0a 01       		.uleb128 0x1
 5656 0a0b 50       		.byte	0x50
 5657 0a0c 16       		.uleb128 0x16
 5658 0a0d 58000000 		.4byte	.LASF106
 5659 0a11 01       		.byte	0x1
 5660 0a12 F804     		.2byte	0x4f8
 5661 0a14 3F0A0000 		.4byte	0xa3f
 5662 0a18 F9040000 		.4byte	.LLST30
 5663 0a1c 16       		.uleb128 0x16
 5664 0a1d 6F0E0000 		.4byte	.LASF78
 5665 0a21 01       		.byte	0x1
 5666 0a22 F904     		.2byte	0x4f9
 5667 0a24 4D040000 		.4byte	0x44d
 5668 0a28 17050000 		.4byte	.LLST31
 5669 0a2c 18       		.uleb128 0x18
 5670 0a2d 10000000 		.4byte	.LVL105
 5671 0a31 A01E0000 		.4byte	0x1ea0
 5672 0a35 18       		.uleb128 0x18
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 196


 5673 0a36 16000000 		.4byte	.LVL107
 5674 0a3a B71E0000 		.4byte	0x1eb7
 5675 0a3e 00       		.byte	0
 5676 0a3f 06       		.uleb128 0x6
 5677 0a40 04       		.byte	0x4
 5678 0a41 1E020000 		.4byte	0x21e
 5679 0a45 1E       		.uleb128 0x1e
 5680 0a46 98050000 		.4byte	.LASF107
 5681 0a4a 01       		.byte	0x1
 5682 0a4b 3C05     		.2byte	0x53c
 5683 0a4d 25010000 		.4byte	0x125
 5684 0a51 00000000 		.4byte	.LFB39
 5685 0a55 20000000 		.4byte	.LFE39-.LFB39
 5686 0a59 01       		.uleb128 0x1
 5687 0a5a 9C       		.byte	0x9c
 5688 0a5b A20A0000 		.4byte	0xaa2
 5689 0a5f 15       		.uleb128 0x15
 5690 0a60 86090000 		.4byte	.LASF81
 5691 0a64 01       		.byte	0x1
 5692 0a65 3C05     		.2byte	0x53c
 5693 0a67 29020000 		.4byte	0x229
 5694 0a6b 59050000 		.4byte	.LLST32
 5695 0a6f 16       		.uleb128 0x16
 5696 0a70 6F0E0000 		.4byte	.LASF78
 5697 0a74 01       		.byte	0x1
 5698 0a75 3E05     		.2byte	0x53e
 5699 0a77 BF040000 		.4byte	0x4bf
 5700 0a7b 77050000 		.4byte	.LLST33
 5701 0a7f 16       		.uleb128 0x16
 5702 0a80 7E020000 		.4byte	.LASF108
 5703 0a84 01       		.byte	0x1
 5704 0a85 3F05     		.2byte	0x53f
 5705 0a87 25010000 		.4byte	0x125
 5706 0a8b 8A050000 		.4byte	.LLST34
 5707 0a8f 18       		.uleb128 0x18
 5708 0a90 08000000 		.4byte	.LVL114
 5709 0a94 A01E0000 		.4byte	0x1ea0
 5710 0a98 18       		.uleb128 0x18
 5711 0a99 16000000 		.4byte	.LVL117
 5712 0a9d B71E0000 		.4byte	0x1eb7
 5713 0aa1 00       		.byte	0
 5714 0aa2 1E       		.uleb128 0x1e
 5715 0aa3 BC080000 		.4byte	.LASF109
 5716 0aa7 01       		.byte	0x1
 5717 0aa8 5205     		.2byte	0x552
 5718 0aaa 25010000 		.4byte	0x125
 5719 0aae 00000000 		.4byte	.LFB40
 5720 0ab2 20000000 		.4byte	.LFE40-.LFB40
 5721 0ab6 01       		.uleb128 0x1
 5722 0ab7 9C       		.byte	0x9c
 5723 0ab8 0F0B0000 		.4byte	0xb0f
 5724 0abc 15       		.uleb128 0x15
 5725 0abd 86090000 		.4byte	.LASF81
 5726 0ac1 01       		.byte	0x1
 5727 0ac2 5205     		.2byte	0x552
 5728 0ac4 29020000 		.4byte	0x229
 5729 0ac8 A8050000 		.4byte	.LLST35
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 197


 5730 0acc 16       		.uleb128 0x16
 5731 0acd 6F0E0000 		.4byte	.LASF78
 5732 0ad1 01       		.byte	0x1
 5733 0ad2 5405     		.2byte	0x554
 5734 0ad4 BF040000 		.4byte	0x4bf
 5735 0ad8 C6050000 		.4byte	.LLST36
 5736 0adc 16       		.uleb128 0x16
 5737 0add 7E020000 		.4byte	.LASF108
 5738 0ae1 01       		.byte	0x1
 5739 0ae2 5505     		.2byte	0x555
 5740 0ae4 25010000 		.4byte	0x125
 5741 0ae8 D9050000 		.4byte	.LLST37
 5742 0aec 16       		.uleb128 0x16
 5743 0aed C6030000 		.4byte	.LASF110
 5744 0af1 01       		.byte	0x1
 5745 0af2 5505     		.2byte	0x555
 5746 0af4 25010000 		.4byte	0x125
 5747 0af8 F7050000 		.4byte	.LLST38
 5748 0afc 18       		.uleb128 0x18
 5749 0afd 08000000 		.4byte	.LVL120
 5750 0b01 F01E0000 		.4byte	0x1ef0
 5751 0b05 18       		.uleb128 0x18
 5752 0b06 16000000 		.4byte	.LVL123
 5753 0b0a FB1E0000 		.4byte	0x1efb
 5754 0b0e 00       		.byte	0
 5755 0b0f 20       		.uleb128 0x20
 5756 0b10 23090000 		.4byte	.LASF112
 5757 0b14 01       		.byte	0x1
 5758 0b15 7A05     		.2byte	0x57a
 5759 0b17 00000000 		.4byte	.LFB41
 5760 0b1b BC000000 		.4byte	.LFE41-.LFB41
 5761 0b1f 01       		.uleb128 0x1
 5762 0b20 9C       		.byte	0x9c
 5763 0b21 C90B0000 		.4byte	0xbc9
 5764 0b25 15       		.uleb128 0x15
 5765 0b26 86090000 		.4byte	.LASF81
 5766 0b2a 01       		.byte	0x1
 5767 0b2b 7A05     		.2byte	0x57a
 5768 0b2d 29020000 		.4byte	0x229
 5769 0b31 0A060000 		.4byte	.LLST39
 5770 0b35 15       		.uleb128 0x15
 5771 0b36 5C080000 		.4byte	.LASF113
 5772 0b3a 01       		.byte	0x1
 5773 0b3b 7A05     		.2byte	0x57a
 5774 0b3d 25010000 		.4byte	0x125
 5775 0b41 28060000 		.4byte	.LLST40
 5776 0b45 16       		.uleb128 0x16
 5777 0b46 6F0E0000 		.4byte	.LASF78
 5778 0b4a 01       		.byte	0x1
 5779 0b4b 7C05     		.2byte	0x57c
 5780 0b4d BF040000 		.4byte	0x4bf
 5781 0b51 53060000 		.4byte	.LLST41
 5782 0b55 16       		.uleb128 0x16
 5783 0b56 100F0000 		.4byte	.LASF114
 5784 0b5a 01       		.byte	0x1
 5785 0b5b 7D05     		.2byte	0x57d
 5786 0b5d 25010000 		.4byte	0x125
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 198


 5787 0b61 66060000 		.4byte	.LLST42
 5788 0b65 16       		.uleb128 0x16
 5789 0b66 260D0000 		.4byte	.LASF115
 5790 0b6a 01       		.byte	0x1
 5791 0b6b 7D05     		.2byte	0x57d
 5792 0b6d 25010000 		.4byte	0x125
 5793 0b71 79060000 		.4byte	.LLST43
 5794 0b75 16       		.uleb128 0x16
 5795 0b76 E0020000 		.4byte	.LASF116
 5796 0b7a 01       		.byte	0x1
 5797 0b7b 7E05     		.2byte	0x57e
 5798 0b7d 1A010000 		.4byte	0x11a
 5799 0b81 8C060000 		.4byte	.LLST44
 5800 0b85 18       		.uleb128 0x18
 5801 0b86 10000000 		.4byte	.LVL128
 5802 0b8a A01E0000 		.4byte	0x1ea0
 5803 0b8e 1D       		.uleb128 0x1d
 5804 0b8f 86000000 		.4byte	.LVL136
 5805 0b93 CD1E0000 		.4byte	0x1ecd
 5806 0b97 A20B0000 		.4byte	0xba2
 5807 0b9b 1A       		.uleb128 0x1a
 5808 0b9c 01       		.uleb128 0x1
 5809 0b9d 50       		.byte	0x50
 5810 0b9e 02       		.uleb128 0x2
 5811 0b9f 75       		.byte	0x75
 5812 0ba0 00       		.sleb128 0
 5813 0ba1 00       		.byte	0
 5814 0ba2 1D       		.uleb128 0x1d
 5815 0ba3 A6000000 		.4byte	.LVL137
 5816 0ba7 AB1E0000 		.4byte	0x1eab
 5817 0bab B60B0000 		.4byte	0xbb6
 5818 0baf 1A       		.uleb128 0x1a
 5819 0bb0 01       		.uleb128 0x1
 5820 0bb1 51       		.byte	0x51
 5821 0bb2 02       		.uleb128 0x2
 5822 0bb3 75       		.byte	0x75
 5823 0bb4 00       		.sleb128 0
 5824 0bb5 00       		.byte	0
 5825 0bb6 18       		.uleb128 0x18
 5826 0bb7 AE000000 		.4byte	.LVL138
 5827 0bbb C21E0000 		.4byte	0x1ec2
 5828 0bbf 18       		.uleb128 0x18
 5829 0bc0 B2000000 		.4byte	.LVL139
 5830 0bc4 B71E0000 		.4byte	0x1eb7
 5831 0bc8 00       		.byte	0
 5832 0bc9 20       		.uleb128 0x20
 5833 0bca 9E0E0000 		.4byte	.LASF117
 5834 0bce 01       		.byte	0x1
 5835 0bcf A606     		.2byte	0x6a6
 5836 0bd1 00000000 		.4byte	.LFB44
 5837 0bd5 64000000 		.4byte	.LFE44-.LFB44
 5838 0bd9 01       		.uleb128 0x1
 5839 0bda 9C       		.byte	0x9c
 5840 0bdb 570C0000 		.4byte	0xc57
 5841 0bdf 15       		.uleb128 0x15
 5842 0be0 70020000 		.4byte	.LASF118
 5843 0be4 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 199


 5844 0be5 A606     		.2byte	0x6a6
 5845 0be7 29020000 		.4byte	0x229
 5846 0beb AB060000 		.4byte	.LLST45
 5847 0bef 16       		.uleb128 0x16
 5848 0bf0 6F0E0000 		.4byte	.LASF78
 5849 0bf4 01       		.byte	0x1
 5850 0bf5 A806     		.2byte	0x6a8
 5851 0bf7 570C0000 		.4byte	0xc57
 5852 0bfb D7060000 		.4byte	.LLST46
 5853 0bff 18       		.uleb128 0x18
 5854 0c00 12000000 		.4byte	.LVL143
 5855 0c04 A01E0000 		.4byte	0x1ea0
 5856 0c08 1D       		.uleb128 0x1d
 5857 0c09 18000000 		.4byte	.LVL144
 5858 0c0d F2030000 		.4byte	0x3f2
 5859 0c11 1C0C0000 		.4byte	0xc1c
 5860 0c15 1A       		.uleb128 0x1a
 5861 0c16 01       		.uleb128 0x1
 5862 0c17 50       		.byte	0x50
 5863 0c18 02       		.uleb128 0x2
 5864 0c19 74       		.byte	0x74
 5865 0c1a 00       		.sleb128 0
 5866 0c1b 00       		.byte	0
 5867 0c1c 1D       		.uleb128 0x1d
 5868 0c1d 24000000 		.4byte	.LVL145
 5869 0c21 CD1E0000 		.4byte	0x1ecd
 5870 0c25 300C0000 		.4byte	0xc30
 5871 0c29 1A       		.uleb128 0x1a
 5872 0c2a 01       		.uleb128 0x1
 5873 0c2b 50       		.byte	0x50
 5874 0c2c 02       		.uleb128 0x2
 5875 0c2d 75       		.byte	0x75
 5876 0c2e 00       		.sleb128 0
 5877 0c2f 00       		.byte	0
 5878 0c30 1D       		.uleb128 0x1d
 5879 0c31 44000000 		.4byte	.LVL146
 5880 0c35 AB1E0000 		.4byte	0x1eab
 5881 0c39 440C0000 		.4byte	0xc44
 5882 0c3d 1A       		.uleb128 0x1a
 5883 0c3e 01       		.uleb128 0x1
 5884 0c3f 51       		.byte	0x51
 5885 0c40 02       		.uleb128 0x2
 5886 0c41 75       		.byte	0x75
 5887 0c42 00       		.sleb128 0
 5888 0c43 00       		.byte	0
 5889 0c44 18       		.uleb128 0x18
 5890 0c45 54000000 		.4byte	.LVL147
 5891 0c49 C21E0000 		.4byte	0x1ec2
 5892 0c4d 18       		.uleb128 0x18
 5893 0c4e 58000000 		.4byte	.LVL148
 5894 0c52 B71E0000 		.4byte	0x1eb7
 5895 0c56 00       		.byte	0
 5896 0c57 07       		.uleb128 0x7
 5897 0c58 BF040000 		.4byte	0x4bf
 5898 0c5c 1E       		.uleb128 0x1e
 5899 0c5d 3B040000 		.4byte	.LASF119
 5900 0c61 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 200


 5901 0c62 DC06     		.2byte	0x6dc
 5902 0c64 1A010000 		.4byte	0x11a
 5903 0c68 00000000 		.4byte	.LFB45
 5904 0c6c 7C000000 		.4byte	.LFE45-.LFB45
 5905 0c70 01       		.uleb128 0x1
 5906 0c71 9C       		.byte	0x9c
 5907 0c72 290D0000 		.4byte	0xd29
 5908 0c76 15       		.uleb128 0x15
 5909 0c77 70020000 		.4byte	.LASF118
 5910 0c7b 01       		.byte	0x1
 5911 0c7c DC06     		.2byte	0x6dc
 5912 0c7e 29020000 		.4byte	0x229
 5913 0c82 03070000 		.4byte	.LLST47
 5914 0c86 16       		.uleb128 0x16
 5915 0c87 E0020000 		.4byte	.LASF116
 5916 0c8b 01       		.byte	0x1
 5917 0c8c DE06     		.2byte	0x6de
 5918 0c8e 1A010000 		.4byte	0x11a
 5919 0c92 2F070000 		.4byte	.LLST48
 5920 0c96 16       		.uleb128 0x16
 5921 0c97 6F0E0000 		.4byte	.LASF78
 5922 0c9b 01       		.byte	0x1
 5923 0c9c DF06     		.2byte	0x6df
 5924 0c9e 570C0000 		.4byte	0xc57
 5925 0ca2 70070000 		.4byte	.LLST49
 5926 0ca6 16       		.uleb128 0x16
 5927 0ca7 A5020000 		.4byte	.LASF120
 5928 0cab 01       		.byte	0x1
 5929 0cac E006     		.2byte	0x6e0
 5930 0cae 25010000 		.4byte	0x125
 5931 0cb2 9C070000 		.4byte	.LLST50
 5932 0cb6 18       		.uleb128 0x18
 5933 0cb7 08000000 		.4byte	.LVL152
 5934 0cbb F01E0000 		.4byte	0x1ef0
 5935 0cbf 1D       		.uleb128 0x1d
 5936 0cc0 10000000 		.4byte	.LVL155
 5937 0cc4 F2030000 		.4byte	0x3f2
 5938 0cc8 D30C0000 		.4byte	0xcd3
 5939 0ccc 1A       		.uleb128 0x1a
 5940 0ccd 01       		.uleb128 0x1
 5941 0cce 50       		.byte	0x50
 5942 0ccf 02       		.uleb128 0x2
 5943 0cd0 74       		.byte	0x74
 5944 0cd1 00       		.sleb128 0
 5945 0cd2 00       		.byte	0
 5946 0cd3 1D       		.uleb128 0x1d
 5947 0cd4 36000000 		.4byte	.LVL157
 5948 0cd8 CD1E0000 		.4byte	0x1ecd
 5949 0cdc E70C0000 		.4byte	0xce7
 5950 0ce0 1A       		.uleb128 0x1a
 5951 0ce1 01       		.uleb128 0x1
 5952 0ce2 50       		.byte	0x50
 5953 0ce3 02       		.uleb128 0x2
 5954 0ce4 77       		.byte	0x77
 5955 0ce5 00       		.sleb128 0
 5956 0ce6 00       		.byte	0
 5957 0ce7 1D       		.uleb128 0x1d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 201


 5958 0ce8 56000000 		.4byte	.LVL158
 5959 0cec AB1E0000 		.4byte	0x1eab
 5960 0cf0 FB0C0000 		.4byte	0xcfb
 5961 0cf4 1A       		.uleb128 0x1a
 5962 0cf5 01       		.uleb128 0x1
 5963 0cf6 51       		.byte	0x51
 5964 0cf7 02       		.uleb128 0x2
 5965 0cf8 77       		.byte	0x77
 5966 0cf9 00       		.sleb128 0
 5967 0cfa 00       		.byte	0
 5968 0cfb 1D       		.uleb128 0x1d
 5969 0cfc 64000000 		.4byte	.LVL160
 5970 0d00 AB1E0000 		.4byte	0x1eab
 5971 0d04 180D0000 		.4byte	0xd18
 5972 0d08 1A       		.uleb128 0x1a
 5973 0d09 01       		.uleb128 0x1
 5974 0d0a 50       		.byte	0x50
 5975 0d0b 05       		.uleb128 0x5
 5976 0d0c 03       		.byte	0x3
 5977 0d0d 14000000 		.4byte	.LANCHOR0+20
 5978 0d11 1A       		.uleb128 0x1a
 5979 0d12 01       		.uleb128 0x1
 5980 0d13 51       		.byte	0x51
 5981 0d14 02       		.uleb128 0x2
 5982 0d15 74       		.byte	0x74
 5983 0d16 18       		.sleb128 24
 5984 0d17 00       		.byte	0
 5985 0d18 19       		.uleb128 0x19
 5986 0d19 70000000 		.4byte	.LVL162
 5987 0d1d FB1E0000 		.4byte	0x1efb
 5988 0d21 1A       		.uleb128 0x1a
 5989 0d22 01       		.uleb128 0x1
 5990 0d23 50       		.byte	0x50
 5991 0d24 02       		.uleb128 0x2
 5992 0d25 75       		.byte	0x75
 5993 0d26 00       		.sleb128 0
 5994 0d27 00       		.byte	0
 5995 0d28 00       		.byte	0
 5996 0d29 20       		.uleb128 0x20
 5997 0d2a DC0B0000 		.4byte	.LASF121
 5998 0d2e 01       		.byte	0x1
 5999 0d2f 2207     		.2byte	0x722
 6000 0d31 00000000 		.4byte	.LFB46
 6001 0d35 48000000 		.4byte	.LFE46-.LFB46
 6002 0d39 01       		.uleb128 0x1
 6003 0d3a 9C       		.byte	0x9c
 6004 0d3b 940D0000 		.4byte	0xd94
 6005 0d3f 16       		.uleb128 0x16
 6006 0d40 770B0000 		.4byte	.LASF77
 6007 0d44 01       		.byte	0x1
 6008 0d45 2407     		.2byte	0x724
 6009 0d47 1A010000 		.4byte	0x11a
 6010 0d4b BA070000 		.4byte	.LLST51
 6011 0d4f 1D       		.uleb128 0x1d
 6012 0d50 18000000 		.4byte	.LVL166
 6013 0d54 D8070000 		.4byte	0x7d8
 6014 0d58 8A0D0000 		.4byte	0xd8a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 202


 6015 0d5c 1A       		.uleb128 0x1a
 6016 0d5d 01       		.uleb128 0x1
 6017 0d5e 50       		.byte	0x50
 6018 0d5f 05       		.uleb128 0x5
 6019 0d60 03       		.byte	0x3
 6020 0d61 00000000 		.4byte	prvIdleTask
 6021 0d65 1A       		.uleb128 0x1a
 6022 0d66 01       		.uleb128 0x1
 6023 0d67 51       		.byte	0x51
 6024 0d68 05       		.uleb128 0x5
 6025 0d69 03       		.byte	0x3
 6026 0d6a 00000000 		.4byte	.LC31
 6027 0d6e 1A       		.uleb128 0x1a
 6028 0d6f 01       		.uleb128 0x1
 6029 0d70 52       		.byte	0x52
 6030 0d71 02       		.uleb128 0x2
 6031 0d72 08       		.byte	0x8
 6032 0d73 32       		.byte	0x32
 6033 0d74 1A       		.uleb128 0x1a
 6034 0d75 01       		.uleb128 0x1
 6035 0d76 53       		.byte	0x53
 6036 0d77 01       		.uleb128 0x1
 6037 0d78 30       		.byte	0x30
 6038 0d79 1A       		.uleb128 0x1a
 6039 0d7a 02       		.uleb128 0x2
 6040 0d7b 7D       		.byte	0x7d
 6041 0d7c 00       		.sleb128 0
 6042 0d7d 01       		.uleb128 0x1
 6043 0d7e 30       		.byte	0x30
 6044 0d7f 1A       		.uleb128 0x1a
 6045 0d80 02       		.uleb128 0x2
 6046 0d81 7D       		.byte	0x7d
 6047 0d82 04       		.sleb128 4
 6048 0d83 05       		.uleb128 0x5
 6049 0d84 03       		.byte	0x3
 6050 0d85 F4000000 		.4byte	.LANCHOR1+116
 6051 0d89 00       		.byte	0
 6052 0d8a 18       		.uleb128 0x18
 6053 0d8b 34000000 		.4byte	.LVL167
 6054 0d8f 061F0000 		.4byte	0x1f06
 6055 0d93 00       		.byte	0
 6056 0d94 20       		.uleb128 0x20
 6057 0d95 86050000 		.4byte	.LASF122
 6058 0d99 01       		.byte	0x1
 6059 0d9a 8D07     		.2byte	0x78d
 6060 0d9c 00000000 		.4byte	.LFB47
 6061 0da0 14000000 		.4byte	.LFE47-.LFB47
 6062 0da4 01       		.uleb128 0x1
 6063 0da5 9C       		.byte	0x9c
 6064 0da6 B40D0000 		.4byte	0xdb4
 6065 0daa 18       		.uleb128 0x18
 6066 0dab 0E000000 		.4byte	.LVL168
 6067 0daf 111F0000 		.4byte	0x1f11
 6068 0db3 00       		.byte	0
 6069 0db4 22       		.uleb128 0x22
 6070 0db5 5B040000 		.4byte	.LASF161
 6071 0db9 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 203


 6072 0dba 9807     		.2byte	0x798
 6073 0dbc 00000000 		.4byte	.LFB48
 6074 0dc0 10000000 		.4byte	.LFE48-.LFB48
 6075 0dc4 01       		.uleb128 0x1
 6076 0dc5 9C       		.byte	0x9c
 6077 0dc6 1E       		.uleb128 0x1e
 6078 0dc7 990A0000 		.4byte	.LASF123
 6079 0dcb 01       		.byte	0x1
 6080 0dcc 4F08     		.2byte	0x84f
 6081 0dce 30010000 		.4byte	0x130
 6082 0dd2 00000000 		.4byte	.LFB50
 6083 0dd6 0C000000 		.4byte	.LFE50-.LFB50
 6084 0dda 01       		.uleb128 0x1
 6085 0ddb 9C       		.byte	0x9c
 6086 0ddc EF0D0000 		.4byte	0xdef
 6087 0de0 21       		.uleb128 0x21
 6088 0de1 D50B0000 		.4byte	.LASF124
 6089 0de5 01       		.byte	0x1
 6090 0de6 5108     		.2byte	0x851
 6091 0de8 30010000 		.4byte	0x130
 6092 0dec 01       		.uleb128 0x1
 6093 0ded 50       		.byte	0x50
 6094 0dee 00       		.byte	0
 6095 0def 1E       		.uleb128 0x1e
 6096 0df0 AD030000 		.4byte	.LASF125
 6097 0df4 01       		.byte	0x1
 6098 0df5 5E08     		.2byte	0x85e
 6099 0df7 30010000 		.4byte	0x130
 6100 0dfb 00000000 		.4byte	.LFB51
 6101 0dff 0C000000 		.4byte	.LFE51-.LFB51
 6102 0e03 01       		.uleb128 0x1
 6103 0e04 9C       		.byte	0x9c
 6104 0e05 250E0000 		.4byte	0xe25
 6105 0e09 21       		.uleb128 0x21
 6106 0e0a 770B0000 		.4byte	.LASF77
 6107 0e0e 01       		.byte	0x1
 6108 0e0f 6008     		.2byte	0x860
 6109 0e11 30010000 		.4byte	0x130
 6110 0e15 01       		.uleb128 0x1
 6111 0e16 50       		.byte	0x50
 6112 0e17 23       		.uleb128 0x23
 6113 0e18 A5020000 		.4byte	.LASF120
 6114 0e1c 01       		.byte	0x1
 6115 0e1d 6108     		.2byte	0x861
 6116 0e1f 25010000 		.4byte	0x125
 6117 0e23 00       		.byte	0
 6118 0e24 00       		.byte	0
 6119 0e25 24       		.uleb128 0x24
 6120 0e26 87020000 		.4byte	.LASF177
 6121 0e2a 01       		.byte	0x1
 6122 0e2b 7D08     		.2byte	0x87d
 6123 0e2d 25010000 		.4byte	0x125
 6124 0e31 00000000 		.4byte	.LFB52
 6125 0e35 0C000000 		.4byte	.LFE52-.LFB52
 6126 0e39 01       		.uleb128 0x1
 6127 0e3a 9C       		.byte	0x9c
 6128 0e3b 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 204


 6129 0e3c C70B0000 		.4byte	.LASF126
 6130 0e40 01       		.byte	0x1
 6131 0e41 8508     		.2byte	0x885
 6132 0e43 A7000000 		.4byte	0xa7
 6133 0e47 00000000 		.4byte	.LFB53
 6134 0e4b 10000000 		.4byte	.LFE53-.LFB53
 6135 0e4f 01       		.uleb128 0x1
 6136 0e50 9C       		.byte	0x9c
 6137 0e51 760E0000 		.4byte	0xe76
 6138 0e55 15       		.uleb128 0x15
 6139 0e56 60090000 		.4byte	.LASF127
 6140 0e5a 01       		.byte	0x1
 6141 0e5b 8508     		.2byte	0x885
 6142 0e5d 29020000 		.4byte	0x229
 6143 0e61 CD070000 		.4byte	.LLST52
 6144 0e65 16       		.uleb128 0x16
 6145 0e66 6F0E0000 		.4byte	.LASF78
 6146 0e6a 01       		.byte	0x1
 6147 0e6b 8708     		.2byte	0x887
 6148 0e6d BF040000 		.4byte	0x4bf
 6149 0e71 E0070000 		.4byte	.LLST53
 6150 0e75 00       		.byte	0
 6151 0e76 1E       		.uleb128 0x1e
 6152 0e77 87040000 		.4byte	.LASF128
 6153 0e7b 01       		.byte	0x1
 6154 0e7c C309     		.2byte	0x9c3
 6155 0e7e 1A010000 		.4byte	0x11a
 6156 0e82 00000000 		.4byte	.LFB54
 6157 0e86 D8000000 		.4byte	.LFE54-.LFB54
 6158 0e8a 01       		.uleb128 0x1
 6159 0e8b 9C       		.byte	0x9c
 6160 0e8c 360F0000 		.4byte	0xf36
 6161 0e90 16       		.uleb128 0x16
 6162 0e91 6F0E0000 		.4byte	.LASF78
 6163 0e95 01       		.byte	0x1
 6164 0e96 C509     		.2byte	0x9c5
 6165 0e98 BF040000 		.4byte	0x4bf
 6166 0e9c 00080000 		.4byte	.LLST54
 6167 0ea0 16       		.uleb128 0x16
 6168 0ea1 4D0A0000 		.4byte	.LASF26
 6169 0ea5 01       		.byte	0x1
 6170 0ea6 C609     		.2byte	0x9c6
 6171 0ea8 30010000 		.4byte	0x130
 6172 0eac 1E080000 		.4byte	.LLST55
 6173 0eb0 16       		.uleb128 0x16
 6174 0eb1 C20A0000 		.4byte	.LASF129
 6175 0eb5 01       		.byte	0x1
 6176 0eb6 C709     		.2byte	0x9c7
 6177 0eb8 1A010000 		.4byte	0x11a
 6178 0ebc 31080000 		.4byte	.LLST56
 6179 0ec0 25       		.uleb128 0x25
 6180 0ec1 00000000 		.4byte	.Ldebug_ranges0+0
 6181 0ec5 16       		.uleb128 0x16
 6182 0ec6 AA050000 		.4byte	.LASF100
 6183 0eca 01       		.byte	0x1
 6184 0ecb D109     		.2byte	0x9d1
 6185 0ecd D3070000 		.4byte	0x7d3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 205


 6186 0ed1 89080000 		.4byte	.LLST57
 6187 0ed5 1F       		.uleb128 0x1f
 6188 0ed6 16000000 		.4byte	.LBB4
 6189 0eda 14000000 		.4byte	.LBE4-.LBB4
 6190 0ede FC0E0000 		.4byte	0xefc
 6191 0ee2 16       		.uleb128 0x16
 6192 0ee3 490C0000 		.4byte	.LASF130
 6193 0ee7 01       		.byte	0x1
 6194 0ee8 D909     		.2byte	0x9d9
 6195 0eea 3F0A0000 		.4byte	0xa3f
 6196 0eee 9C080000 		.4byte	.LLST58
 6197 0ef2 18       		.uleb128 0x18
 6198 0ef3 2A000000 		.4byte	.LVL178
 6199 0ef7 98040000 		.4byte	0x498
 6200 0efb 00       		.byte	0
 6201 0efc 1D       		.uleb128 0x1d
 6202 0efd 76000000 		.4byte	.LVL185
 6203 0f01 CD1E0000 		.4byte	0x1ecd
 6204 0f05 100F0000 		.4byte	0xf10
 6205 0f09 1A       		.uleb128 0x1a
 6206 0f0a 01       		.uleb128 0x1
 6207 0f0b 50       		.byte	0x50
 6208 0f0c 02       		.uleb128 0x2
 6209 0f0d 74       		.byte	0x74
 6210 0f0e 00       		.sleb128 0
 6211 0f0f 00       		.byte	0
 6212 0f10 1D       		.uleb128 0x1d
 6213 0f11 84000000 		.4byte	.LVL186
 6214 0f15 CD1E0000 		.4byte	0x1ecd
 6215 0f19 240F0000 		.4byte	0xf24
 6216 0f1d 1A       		.uleb128 0x1a
 6217 0f1e 01       		.uleb128 0x1
 6218 0f1f 50       		.byte	0x50
 6219 0f20 02       		.uleb128 0x2
 6220 0f21 76       		.byte	0x76
 6221 0f22 18       		.sleb128 24
 6222 0f23 00       		.byte	0
 6223 0f24 19       		.uleb128 0x19
 6224 0f25 A4000000 		.4byte	.LVL187
 6225 0f29 AB1E0000 		.4byte	0x1eab
 6226 0f2d 1A       		.uleb128 0x1a
 6227 0f2e 01       		.uleb128 0x1
 6228 0f2f 51       		.byte	0x51
 6229 0f30 02       		.uleb128 0x2
 6230 0f31 74       		.byte	0x74
 6231 0f32 00       		.sleb128 0
 6232 0f33 00       		.byte	0
 6233 0f34 00       		.byte	0
 6234 0f35 00       		.byte	0
 6235 0f36 1E       		.uleb128 0x1e
 6236 0f37 610A0000 		.4byte	.LASF131
 6237 0f3b 01       		.byte	0x1
 6238 0f3c E107     		.2byte	0x7e1
 6239 0f3e 1A010000 		.4byte	0x11a
 6240 0f42 00000000 		.4byte	.LFB49
 6241 0f46 C8000000 		.4byte	.LFE49-.LFB49
 6242 0f4a 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 206


 6243 0f4b 9C       		.byte	0x9c
 6244 0f4c F80F0000 		.4byte	0xff8
 6245 0f50 16       		.uleb128 0x16
 6246 0f51 6F0E0000 		.4byte	.LASF78
 6247 0f55 01       		.byte	0x1
 6248 0f56 E307     		.2byte	0x7e3
 6249 0f58 BF040000 		.4byte	0x4bf
 6250 0f5c AF080000 		.4byte	.LLST59
 6251 0f60 16       		.uleb128 0x16
 6252 0f61 950D0000 		.4byte	.LASF132
 6253 0f65 01       		.byte	0x1
 6254 0f66 E407     		.2byte	0x7e4
 6255 0f68 1A010000 		.4byte	0x11a
 6256 0f6c F1080000 		.4byte	.LLST60
 6257 0f70 1F       		.uleb128 0x1f
 6258 0f71 7C000000 		.4byte	.LBB6
 6259 0f75 22000000 		.4byte	.LBE6-.LBB6
 6260 0f79 970F0000 		.4byte	0xf97
 6261 0f7d 16       		.uleb128 0x16
 6262 0f7e 83000000 		.4byte	.LASF133
 6263 0f82 01       		.byte	0x1
 6264 0f83 1C08     		.2byte	0x81c
 6265 0f85 25010000 		.4byte	0x125
 6266 0f89 33090000 		.4byte	.LLST61
 6267 0f8d 18       		.uleb128 0x18
 6268 0f8e 88000000 		.4byte	.LVL203
 6269 0f92 760E0000 		.4byte	0xe76
 6270 0f96 00       		.byte	0
 6271 0f97 18       		.uleb128 0x18
 6272 0f98 06000000 		.4byte	.LVL193
 6273 0f9c A01E0000 		.4byte	0x1ea0
 6274 0fa0 1D       		.uleb128 0x1d
 6275 0fa1 2E000000 		.4byte	.LVL196
 6276 0fa5 CD1E0000 		.4byte	0x1ecd
 6277 0fa9 B40F0000 		.4byte	0xfb4
 6278 0fad 1A       		.uleb128 0x1a
 6279 0fae 01       		.uleb128 0x1
 6280 0faf 50       		.byte	0x50
 6281 0fb0 02       		.uleb128 0x2
 6282 0fb1 74       		.byte	0x74
 6283 0fb2 18       		.sleb128 24
 6284 0fb3 00       		.byte	0
 6285 0fb4 1D       		.uleb128 0x1d
 6286 0fb5 36000000 		.4byte	.LVL197
 6287 0fb9 CD1E0000 		.4byte	0x1ecd
 6288 0fbd C80F0000 		.4byte	0xfc8
 6289 0fc1 1A       		.uleb128 0x1a
 6290 0fc2 01       		.uleb128 0x1
 6291 0fc3 50       		.byte	0x50
 6292 0fc4 02       		.uleb128 0x2
 6293 0fc5 75       		.byte	0x75
 6294 0fc6 00       		.sleb128 0
 6295 0fc7 00       		.byte	0
 6296 0fc8 1D       		.uleb128 0x1d
 6297 0fc9 56000000 		.4byte	.LVL198
 6298 0fcd AB1E0000 		.4byte	0x1eab
 6299 0fd1 DC0F0000 		.4byte	0xfdc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 207


 6300 0fd5 1A       		.uleb128 0x1a
 6301 0fd6 01       		.uleb128 0x1
 6302 0fd7 51       		.byte	0x51
 6303 0fd8 02       		.uleb128 0x2
 6304 0fd9 75       		.byte	0x75
 6305 0fda 00       		.sleb128 0
 6306 0fdb 00       		.byte	0
 6307 0fdc 18       		.uleb128 0x18
 6308 0fdd 7C000000 		.4byte	.LVL201
 6309 0fe1 98040000 		.4byte	0x498
 6310 0fe5 18       		.uleb128 0x18
 6311 0fe6 AA000000 		.4byte	.LVL206
 6312 0fea C21E0000 		.4byte	0x1ec2
 6313 0fee 18       		.uleb128 0x18
 6314 0fef B8000000 		.4byte	.LVL211
 6315 0ff3 B71E0000 		.4byte	0x1eb7
 6316 0ff7 00       		.byte	0
 6317 0ff8 20       		.uleb128 0x20
 6318 0ff9 070D0000 		.4byte	.LASF134
 6319 0ffd 01       		.byte	0x1
 6320 0ffe 7404     		.2byte	0x474
 6321 1000 00000000 		.4byte	.LFB36
 6322 1004 5C000000 		.4byte	.LFE36-.LFB36
 6323 1008 01       		.uleb128 0x1
 6324 1009 9C       		.byte	0x9c
 6325 100a A3100000 		.4byte	0x10a3
 6326 100e 15       		.uleb128 0x15
 6327 100f 3E0B0000 		.4byte	.LASF135
 6328 1013 01       		.byte	0x1
 6329 1014 7404     		.2byte	0x474
 6330 1016 A9100000 		.4byte	0x10a9
 6331 101a 51090000 		.4byte	.LLST62
 6332 101e 15       		.uleb128 0x15
 6333 101f 260E0000 		.4byte	.LASF136
 6334 1023 01       		.byte	0x1
 6335 1024 7404     		.2byte	0x474
 6336 1026 D3070000 		.4byte	0x7d3
 6337 102a 7D090000 		.4byte	.LLST63
 6338 102e 16       		.uleb128 0x16
 6339 102f 540E0000 		.4byte	.LASF99
 6340 1033 01       		.byte	0x1
 6341 1034 7604     		.2byte	0x476
 6342 1036 30010000 		.4byte	0x130
 6343 103a A9090000 		.4byte	.LLST64
 6344 103e 16       		.uleb128 0x16
 6345 103f 950D0000 		.4byte	.LASF132
 6346 1043 01       		.byte	0x1
 6347 1044 7704     		.2byte	0x477
 6348 1046 1A010000 		.4byte	0x11a
 6349 104a C8090000 		.4byte	.LLST65
 6350 104e 16       		.uleb128 0x16
 6351 104f 12070000 		.4byte	.LASF137
 6352 1053 01       		.byte	0x1
 6353 1054 7704     		.2byte	0x477
 6354 1056 1A010000 		.4byte	0x11a
 6355 105a DB090000 		.4byte	.LLST66
 6356 105e 26       		.uleb128 0x26
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 208


 6357 105f 18000000 		.4byte	.Ldebug_ranges0+0x18
 6358 1063 87100000 		.4byte	0x1087
 6359 1067 16       		.uleb128 0x16
 6360 1068 AA050000 		.4byte	.LASF100
 6361 106c 01       		.byte	0x1
 6362 106d 8104     		.2byte	0x481
 6363 106f D3070000 		.4byte	0x7d3
 6364 1073 FA090000 		.4byte	.LLST67
 6365 1077 19       		.uleb128 0x19
 6366 1078 4A000000 		.4byte	.LVL221
 6367 107c 45070000 		.4byte	0x745
 6368 1080 1A       		.uleb128 0x1a
 6369 1081 01       		.uleb128 0x1
 6370 1082 51       		.byte	0x51
 6371 1083 01       		.uleb128 0x1
 6372 1084 30       		.byte	0x30
 6373 1085 00       		.byte	0
 6374 1086 00       		.byte	0
 6375 1087 18       		.uleb128 0x18
 6376 1088 0A000000 		.4byte	.LVL215
 6377 108c B40D0000 		.4byte	0xdb4
 6378 1090 18       		.uleb128 0x18
 6379 1091 4E000000 		.4byte	.LVL222
 6380 1095 360F0000 		.4byte	0xf36
 6381 1099 18       		.uleb128 0x18
 6382 109a 56000000 		.4byte	.LVL223
 6383 109e C21E0000 		.4byte	0x1ec2
 6384 10a2 00       		.byte	0
 6385 10a3 06       		.uleb128 0x6
 6386 10a4 04       		.byte	0x4
 6387 10a5 30010000 		.4byte	0x130
 6388 10a9 07       		.uleb128 0x7
 6389 10aa A3100000 		.4byte	0x10a3
 6390 10ae 20       		.uleb128 0x20
 6391 10af 47060000 		.4byte	.LASF138
 6392 10b3 01       		.byte	0x1
 6393 10b4 C804     		.2byte	0x4c8
 6394 10b6 00000000 		.4byte	.LFB37
 6395 10ba 24000000 		.4byte	.LFE37-.LFB37
 6396 10be 01       		.uleb128 0x1
 6397 10bf 9C       		.byte	0x9c
 6398 10c0 19110000 		.4byte	0x1119
 6399 10c4 15       		.uleb128 0x15
 6400 10c5 AE080000 		.4byte	.LASF139
 6401 10c9 01       		.byte	0x1
 6402 10ca C804     		.2byte	0x4c8
 6403 10cc D3070000 		.4byte	0x7d3
 6404 10d0 0D0A0000 		.4byte	.LLST68
 6405 10d4 16       		.uleb128 0x16
 6406 10d5 950D0000 		.4byte	.LASF132
 6407 10d9 01       		.byte	0x1
 6408 10da CA04     		.2byte	0x4ca
 6409 10dc 1A010000 		.4byte	0x11a
 6410 10e0 4F0A0000 		.4byte	.LLST69
 6411 10e4 18       		.uleb128 0x18
 6412 10e5 0A000000 		.4byte	.LVL228
 6413 10e9 B40D0000 		.4byte	0xdb4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 209


 6414 10ed 1D       		.uleb128 0x1d
 6415 10ee 12000000 		.4byte	.LVL229
 6416 10f2 45070000 		.4byte	0x745
 6417 10f6 06110000 		.4byte	0x1106
 6418 10fa 1A       		.uleb128 0x1a
 6419 10fb 01       		.uleb128 0x1
 6420 10fc 50       		.byte	0x50
 6421 10fd 02       		.uleb128 0x2
 6422 10fe 74       		.byte	0x74
 6423 10ff 00       		.sleb128 0
 6424 1100 1A       		.uleb128 0x1a
 6425 1101 01       		.uleb128 0x1
 6426 1102 51       		.byte	0x51
 6427 1103 01       		.uleb128 0x1
 6428 1104 30       		.byte	0x30
 6429 1105 00       		.byte	0
 6430 1106 18       		.uleb128 0x18
 6431 1107 16000000 		.4byte	.LVL230
 6432 110b 360F0000 		.4byte	0xf36
 6433 110f 18       		.uleb128 0x18
 6434 1110 22000000 		.4byte	.LVL233
 6435 1114 C21E0000 		.4byte	0x1ec2
 6436 1118 00       		.byte	0
 6437 1119 17       		.uleb128 0x17
 6438 111a E70E0000 		.4byte	.LASF140
 6439 111e 01       		.byte	0x1
 6440 111f 250D     		.2byte	0xd25
 6441 1121 00000000 		.4byte	.LFB67
 6442 1125 48000000 		.4byte	.LFE67-.LFB67
 6443 1129 01       		.uleb128 0x1
 6444 112a 9C       		.byte	0x9c
 6445 112b B0110000 		.4byte	0x11b0
 6446 112f 27       		.uleb128 0x27
 6447 1130 02000000 		.4byte	.LBB10
 6448 1134 40000000 		.4byte	.LBE10-.LBB10
 6449 1138 16       		.uleb128 0x16
 6450 1139 34070000 		.4byte	.LASF141
 6451 113d 01       		.byte	0x1
 6452 113e 2C0D     		.2byte	0xd2c
 6453 1140 1A010000 		.4byte	0x11a
 6454 1144 850A0000 		.4byte	.LLST70
 6455 1148 1F       		.uleb128 0x1f
 6456 1149 14000000 		.4byte	.LBB11
 6457 114d 26000000 		.4byte	.LBE11-.LBB11
 6458 1151 9C110000 		.4byte	0x119c
 6459 1155 16       		.uleb128 0x16
 6460 1156 6F0E0000 		.4byte	.LASF78
 6461 115a 01       		.byte	0x1
 6462 115b 3A0D     		.2byte	0xd3a
 6463 115d BF040000 		.4byte	0x4bf
 6464 1161 9F0A0000 		.4byte	.LLST71
 6465 1165 18       		.uleb128 0x18
 6466 1166 18000000 		.4byte	.LVL238
 6467 116a A01E0000 		.4byte	0x1ea0
 6468 116e 1D       		.uleb128 0x1d
 6469 116f 24000000 		.4byte	.LVL241
 6470 1173 CD1E0000 		.4byte	0x1ecd
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 210


 6471 1177 82110000 		.4byte	0x1182
 6472 117b 1A       		.uleb128 0x1a
 6473 117c 01       		.uleb128 0x1
 6474 117d 50       		.byte	0x50
 6475 117e 02       		.uleb128 0x2
 6476 117f 75       		.byte	0x75
 6477 1180 04       		.sleb128 4
 6478 1181 00       		.byte	0
 6479 1182 18       		.uleb128 0x18
 6480 1183 34000000 		.4byte	.LVL242
 6481 1187 B71E0000 		.4byte	0x1eb7
 6482 118b 19       		.uleb128 0x19
 6483 118c 3A000000 		.4byte	.LVL243
 6484 1190 C5040000 		.4byte	0x4c5
 6485 1194 1A       		.uleb128 0x1a
 6486 1195 01       		.uleb128 0x1
 6487 1196 50       		.byte	0x50
 6488 1197 02       		.uleb128 0x2
 6489 1198 75       		.byte	0x75
 6490 1199 00       		.sleb128 0
 6491 119a 00       		.byte	0
 6492 119b 00       		.byte	0
 6493 119c 18       		.uleb128 0x18
 6494 119d 08000000 		.4byte	.LVL235
 6495 11a1 B40D0000 		.4byte	0xdb4
 6496 11a5 18       		.uleb128 0x18
 6497 11a6 10000000 		.4byte	.LVL237
 6498 11aa 360F0000 		.4byte	0xf36
 6499 11ae 00       		.byte	0
 6500 11af 00       		.byte	0
 6501 11b0 28       		.uleb128 0x28
 6502 11b1 1F070000 		.4byte	.LASF142
 6503 11b5 01       		.byte	0x1
 6504 11b6 3B0C     		.2byte	0xc3b
 6505 11b8 00000000 		.4byte	.LFB63
 6506 11bc 08000000 		.4byte	.LFE63-.LFB63
 6507 11c0 01       		.uleb128 0x1
 6508 11c1 9C       		.byte	0x9c
 6509 11c2 E0110000 		.4byte	0x11e0
 6510 11c6 15       		.uleb128 0x15
 6511 11c7 400A0000 		.4byte	.LASF90
 6512 11cb 01       		.byte	0x1
 6513 11cc 3B0C     		.2byte	0xc3b
 6514 11ce A5000000 		.4byte	0xa5
 6515 11d2 B20A0000 		.4byte	.LLST72
 6516 11d6 18       		.uleb128 0x18
 6517 11d7 06000000 		.4byte	.LVL246
 6518 11db 19110000 		.4byte	0x1119
 6519 11df 00       		.byte	0
 6520 11e0 20       		.uleb128 0x20
 6521 11e1 C5090000 		.4byte	.LASF143
 6522 11e5 01       		.byte	0x1
 6523 11e6 C90A     		.2byte	0xac9
 6524 11e8 00000000 		.4byte	.LFB55
 6525 11ec B4000000 		.4byte	.LFE55-.LFB55
 6526 11f0 01       		.uleb128 0x1
 6527 11f1 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 211


 6528 11f2 62120000 		.4byte	0x1262
 6529 11f6 1F       		.uleb128 0x1f
 6530 11f7 18000000 		.4byte	.LBB12
 6531 11fb 2E000000 		.4byte	.LBE12-.LBB12
 6532 11ff 2D120000 		.4byte	0x122d
 6533 1203 16       		.uleb128 0x16
 6534 1204 0F0C0000 		.4byte	.LASF144
 6535 1208 01       		.byte	0x1
 6536 1209 F20A     		.2byte	0xaf2
 6537 120b 68120000 		.4byte	0x1268
 6538 120f D30A0000 		.4byte	.LLST73
 6539 1213 16       		.uleb128 0x16
 6540 1214 23080000 		.4byte	.LASF145
 6541 1218 01       		.byte	0x1
 6542 1219 F20A     		.2byte	0xaf2
 6543 121b 19060000 		.4byte	0x619
 6544 121f E60A0000 		.4byte	.LLST74
 6545 1223 18       		.uleb128 0x18
 6546 1224 46000000 		.4byte	.LVL249
 6547 1228 1C1F0000 		.4byte	0x1f1c
 6548 122c 00       		.byte	0
 6549 122d 27       		.uleb128 0x27
 6550 122e 46000000 		.4byte	.LBB13
 6551 1232 5A000000 		.4byte	.LBE13-.LBB13
 6552 1236 16       		.uleb128 0x16
 6553 1237 EA0C0000 		.4byte	.LASF146
 6554 123b 01       		.byte	0x1
 6555 123c F60A     		.2byte	0xaf6
 6556 123e 25010000 		.4byte	0x125
 6557 1242 FE0A0000 		.4byte	.LLST75
 6558 1246 27       		.uleb128 0x27
 6559 1247 5E000000 		.4byte	.LBB14
 6560 124b 40000000 		.4byte	.LBE14-.LBB14
 6561 124f 16       		.uleb128 0x16
 6562 1250 4C000000 		.4byte	.LASF147
 6563 1254 01       		.byte	0x1
 6564 1255 F60A     		.2byte	0xaf6
 6565 1257 6D120000 		.4byte	0x126d
 6566 125b 110B0000 		.4byte	.LLST76
 6567 125f 00       		.byte	0
 6568 1260 00       		.byte	0
 6569 1261 00       		.byte	0
 6570 1262 06       		.uleb128 0x6
 6571 1263 04       		.byte	0x4
 6572 1264 19060000 		.4byte	0x619
 6573 1268 07       		.uleb128 0x7
 6574 1269 62120000 		.4byte	0x1262
 6575 126d 07       		.uleb128 0x7
 6576 126e 3F0A0000 		.4byte	0xa3f
 6577 1272 20       		.uleb128 0x20
 6578 1273 6D0D0000 		.4byte	.LASF148
 6579 1277 01       		.byte	0x1
 6580 1278 1E06     		.2byte	0x61e
 6581 127a 00000000 		.4byte	.LFB42
 6582 127e 80000000 		.4byte	.LFE42-.LFB42
 6583 1282 01       		.uleb128 0x1
 6584 1283 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 212


 6585 1284 2D130000 		.4byte	0x132d
 6586 1288 15       		.uleb128 0x15
 6587 1289 FE0A0000 		.4byte	.LASF149
 6588 128d 01       		.byte	0x1
 6589 128e 1E06     		.2byte	0x61e
 6590 1290 29020000 		.4byte	0x229
 6591 1294 2E0B0000 		.4byte	.LLST77
 6592 1298 16       		.uleb128 0x16
 6593 1299 6F0E0000 		.4byte	.LASF78
 6594 129d 01       		.byte	0x1
 6595 129e 2006     		.2byte	0x620
 6596 12a0 BF040000 		.4byte	0x4bf
 6597 12a4 4C0B0000 		.4byte	.LLST78
 6598 12a8 18       		.uleb128 0x18
 6599 12a9 08000000 		.4byte	.LVL255
 6600 12ad A01E0000 		.4byte	0x1ea0
 6601 12b1 1D       		.uleb128 0x1d
 6602 12b2 18000000 		.4byte	.LVL257
 6603 12b6 CD1E0000 		.4byte	0x1ecd
 6604 12ba C5120000 		.4byte	0x12c5
 6605 12be 1A       		.uleb128 0x1a
 6606 12bf 01       		.uleb128 0x1
 6607 12c0 50       		.byte	0x50
 6608 12c1 02       		.uleb128 0x2
 6609 12c2 75       		.byte	0x75
 6610 12c3 00       		.sleb128 0
 6611 12c4 00       		.byte	0
 6612 12c5 1D       		.uleb128 0x1d
 6613 12c6 26000000 		.4byte	.LVL258
 6614 12ca CD1E0000 		.4byte	0x1ecd
 6615 12ce D9120000 		.4byte	0x12d9
 6616 12d2 1A       		.uleb128 0x1a
 6617 12d3 01       		.uleb128 0x1
 6618 12d4 50       		.byte	0x50
 6619 12d5 02       		.uleb128 0x2
 6620 12d6 74       		.byte	0x74
 6621 12d7 18       		.sleb128 24
 6622 12d8 00       		.byte	0
 6623 12d9 1D       		.uleb128 0x1d
 6624 12da 2E000000 		.4byte	.LVL259
 6625 12de AB1E0000 		.4byte	0x1eab
 6626 12e2 F6120000 		.4byte	0x12f6
 6627 12e6 1A       		.uleb128 0x1a
 6628 12e7 01       		.uleb128 0x1
 6629 12e8 50       		.byte	0x50
 6630 12e9 05       		.uleb128 0x5
 6631 12ea 03       		.byte	0x3
 6632 12eb 00000000 		.4byte	.LANCHOR0
 6633 12ef 1A       		.uleb128 0x1a
 6634 12f0 01       		.uleb128 0x1
 6635 12f1 51       		.byte	0x51
 6636 12f2 02       		.uleb128 0x2
 6637 12f3 75       		.byte	0x75
 6638 12f4 00       		.sleb128 0
 6639 12f5 00       		.byte	0
 6640 12f6 18       		.uleb128 0x18
 6641 12f7 32000000 		.4byte	.LVL260
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 213


 6642 12fb B71E0000 		.4byte	0x1eb7
 6643 12ff 18       		.uleb128 0x18
 6644 1300 3E000000 		.4byte	.LVL261
 6645 1304 A01E0000 		.4byte	0x1ea0
 6646 1308 18       		.uleb128 0x18
 6647 1309 42000000 		.4byte	.LVL262
 6648 130d 98040000 		.4byte	0x498
 6649 1311 18       		.uleb128 0x18
 6650 1312 46000000 		.4byte	.LVL263
 6651 1316 B71E0000 		.4byte	0x1eb7
 6652 131a 18       		.uleb128 0x18
 6653 131b 5A000000 		.4byte	.LVL264
 6654 131f C21E0000 		.4byte	0x1ec2
 6655 1323 18       		.uleb128 0x18
 6656 1324 74000000 		.4byte	.LVL265
 6657 1328 E0110000 		.4byte	0x11e0
 6658 132c 00       		.byte	0
 6659 132d 20       		.uleb128 0x20
 6660 132e 31060000 		.4byte	.LASF150
 6661 1332 01       		.byte	0x1
 6662 1333 040B     		.2byte	0xb04
 6663 1335 00000000 		.4byte	.LFB56
 6664 1339 1C000000 		.4byte	.LFE56-.LFB56
 6665 133d 01       		.uleb128 0x1
 6666 133e 9C       		.byte	0x9c
 6667 133f 8E130000 		.4byte	0x138e
 6668 1343 15       		.uleb128 0x15
 6669 1344 38010000 		.4byte	.LASF151
 6670 1348 01       		.byte	0x1
 6671 1349 040B     		.2byte	0xb04
 6672 134b 6D120000 		.4byte	0x126d
 6673 134f 6C0B0000 		.4byte	.LLST79
 6674 1353 15       		.uleb128 0x15
 6675 1354 420D0000 		.4byte	.LASF97
 6676 1358 01       		.byte	0x1
 6677 1359 040B     		.2byte	0xb04
 6678 135b D3070000 		.4byte	0x7d3
 6679 135f 8D0B0000 		.4byte	.LLST80
 6680 1363 1D       		.uleb128 0x1d
 6681 1364 0E000000 		.4byte	.LVL270
 6682 1368 D91E0000 		.4byte	0x1ed9
 6683 136c 78130000 		.4byte	0x1378
 6684 1370 1A       		.uleb128 0x1a
 6685 1371 01       		.uleb128 0x1
 6686 1372 50       		.byte	0x50
 6687 1373 03       		.uleb128 0x3
 6688 1374 F3       		.byte	0xf3
 6689 1375 01       		.uleb128 0x1
 6690 1376 50       		.byte	0x50
 6691 1377 00       		.byte	0
 6692 1378 19       		.uleb128 0x19
 6693 1379 16000000 		.4byte	.LVL271
 6694 137d 45070000 		.4byte	0x745
 6695 1381 1A       		.uleb128 0x1a
 6696 1382 01       		.uleb128 0x1
 6697 1383 50       		.byte	0x50
 6698 1384 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 214


 6699 1385 74       		.byte	0x74
 6700 1386 00       		.sleb128 0
 6701 1387 1A       		.uleb128 0x1a
 6702 1388 01       		.uleb128 0x1
 6703 1389 51       		.byte	0x51
 6704 138a 01       		.uleb128 0x1
 6705 138b 31       		.byte	0x31
 6706 138c 00       		.byte	0
 6707 138d 00       		.byte	0
 6708 138e 20       		.uleb128 0x20
 6709 138f 5E0C0000 		.4byte	.LASF152
 6710 1393 01       		.byte	0x1
 6711 1394 150B     		.2byte	0xb15
 6712 1396 00000000 		.4byte	.LFB57
 6713 139a 28000000 		.4byte	.LFE57-.LFB57
 6714 139e 01       		.uleb128 0x1
 6715 139f 9C       		.byte	0x9c
 6716 13a0 FF130000 		.4byte	0x13ff
 6717 13a4 15       		.uleb128 0x15
 6718 13a5 38010000 		.4byte	.LASF151
 6719 13a9 01       		.byte	0x1
 6720 13aa 150B     		.2byte	0xb15
 6721 13ac 3F0A0000 		.4byte	0xa3f
 6722 13b0 B90B0000 		.4byte	.LLST81
 6723 13b4 15       		.uleb128 0x15
 6724 13b5 4D0A0000 		.4byte	.LASF26
 6725 13b9 01       		.byte	0x1
 6726 13ba 150B     		.2byte	0xb15
 6727 13bc D3070000 		.4byte	0x7d3
 6728 13c0 DA0B0000 		.4byte	.LLST82
 6729 13c4 15       		.uleb128 0x15
 6730 13c5 420D0000 		.4byte	.LASF97
 6731 13c9 01       		.byte	0x1
 6732 13ca 150B     		.2byte	0xb15
 6733 13cc D3070000 		.4byte	0x7d3
 6734 13d0 FB0B0000 		.4byte	.LLST83
 6735 13d4 1D       		.uleb128 0x1d
 6736 13d5 18000000 		.4byte	.LVL276
 6737 13d9 AB1E0000 		.4byte	0x1eab
 6738 13dd E9130000 		.4byte	0x13e9
 6739 13e1 1A       		.uleb128 0x1a
 6740 13e2 01       		.uleb128 0x1
 6741 13e3 50       		.byte	0x50
 6742 13e4 03       		.uleb128 0x3
 6743 13e5 F3       		.byte	0xf3
 6744 13e6 01       		.uleb128 0x1
 6745 13e7 50       		.byte	0x50
 6746 13e8 00       		.byte	0
 6747 13e9 19       		.uleb128 0x19
 6748 13ea 20000000 		.4byte	.LVL277
 6749 13ee 45070000 		.4byte	0x745
 6750 13f2 1A       		.uleb128 0x1a
 6751 13f3 01       		.uleb128 0x1
 6752 13f4 50       		.byte	0x50
 6753 13f5 02       		.uleb128 0x2
 6754 13f6 74       		.byte	0x74
 6755 13f7 00       		.sleb128 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 215


 6756 13f8 1A       		.uleb128 0x1a
 6757 13f9 01       		.uleb128 0x1
 6758 13fa 51       		.byte	0x51
 6759 13fb 01       		.uleb128 0x1
 6760 13fc 31       		.byte	0x31
 6761 13fd 00       		.byte	0
 6762 13fe 00       		.byte	0
 6763 13ff 1E       		.uleb128 0x1e
 6764 1400 A6060000 		.4byte	.LASF153
 6765 1404 01       		.byte	0x1
 6766 1405 4E0B     		.2byte	0xb4e
 6767 1407 1A010000 		.4byte	0x11a
 6768 140b 00000000 		.4byte	.LFB58
 6769 140f 74000000 		.4byte	.LFE58-.LFB58
 6770 1413 01       		.uleb128 0x1
 6771 1414 9C       		.byte	0x9c
 6772 1415 9F140000 		.4byte	0x149f
 6773 1419 15       		.uleb128 0x15
 6774 141a 38010000 		.4byte	.LASF151
 6775 141e 01       		.byte	0x1
 6776 141f 4E0B     		.2byte	0xb4e
 6777 1421 AA140000 		.4byte	0x14aa
 6778 1425 270C0000 		.4byte	.LLST84
 6779 1429 16       		.uleb128 0x16
 6780 142a 08030000 		.4byte	.LASF154
 6781 142e 01       		.byte	0x1
 6782 142f 500B     		.2byte	0xb50
 6783 1431 BF040000 		.4byte	0x4bf
 6784 1435 480C0000 		.4byte	.LLST85
 6785 1439 16       		.uleb128 0x16
 6786 143a 770B0000 		.4byte	.LASF77
 6787 143e 01       		.byte	0x1
 6788 143f 510B     		.2byte	0xb51
 6789 1441 1A010000 		.4byte	0x11a
 6790 1445 5B0C0000 		.4byte	.LLST86
 6791 1449 1D       		.uleb128 0x1d
 6792 144a 10000000 		.4byte	.LVL282
 6793 144e CD1E0000 		.4byte	0x1ecd
 6794 1452 5D140000 		.4byte	0x145d
 6795 1456 1A       		.uleb128 0x1a
 6796 1457 01       		.uleb128 0x1
 6797 1458 50       		.byte	0x50
 6798 1459 02       		.uleb128 0x2
 6799 145a 75       		.byte	0x75
 6800 145b 00       		.sleb128 0
 6801 145c 00       		.byte	0
 6802 145d 1D       		.uleb128 0x1d
 6803 145e 20000000 		.4byte	.LVL283
 6804 1462 CD1E0000 		.4byte	0x1ecd
 6805 1466 71140000 		.4byte	0x1471
 6806 146a 1A       		.uleb128 0x1a
 6807 146b 01       		.uleb128 0x1
 6808 146c 50       		.byte	0x50
 6809 146d 02       		.uleb128 0x2
 6810 146e 75       		.byte	0x75
 6811 146f 00       		.sleb128 0
 6812 1470 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 216


 6813 1471 1D       		.uleb128 0x1d
 6814 1472 40000000 		.4byte	.LVL284
 6815 1476 AB1E0000 		.4byte	0x1eab
 6816 147a 85140000 		.4byte	0x1485
 6817 147e 1A       		.uleb128 0x1a
 6818 147f 01       		.uleb128 0x1
 6819 1480 51       		.byte	0x51
 6820 1481 02       		.uleb128 0x2
 6821 1482 75       		.byte	0x75
 6822 1483 00       		.sleb128 0
 6823 1484 00       		.byte	0
 6824 1485 19       		.uleb128 0x19
 6825 1486 4C000000 		.4byte	.LVL285
 6826 148a AB1E0000 		.4byte	0x1eab
 6827 148e 1A       		.uleb128 0x1a
 6828 148f 01       		.uleb128 0x1
 6829 1490 50       		.byte	0x50
 6830 1491 05       		.uleb128 0x5
 6831 1492 03       		.byte	0x3
 6832 1493 14000000 		.4byte	.LANCHOR0+20
 6833 1497 1A       		.uleb128 0x1a
 6834 1498 01       		.uleb128 0x1
 6835 1499 51       		.byte	0x51
 6836 149a 02       		.uleb128 0x2
 6837 149b 75       		.byte	0x75
 6838 149c 00       		.sleb128 0
 6839 149d 00       		.byte	0
 6840 149e 00       		.byte	0
 6841 149f 06       		.uleb128 0x6
 6842 14a0 04       		.byte	0x4
 6843 14a1 A5140000 		.4byte	0x14a5
 6844 14a5 07       		.uleb128 0x7
 6845 14a6 1E020000 		.4byte	0x21e
 6846 14aa 07       		.uleb128 0x7
 6847 14ab 9F140000 		.4byte	0x149f
 6848 14af 1E       		.uleb128 0x1e
 6849 14b0 7D0C0000 		.4byte	.LASF155
 6850 14b4 01       		.byte	0x1
 6851 14b5 920B     		.2byte	0xb92
 6852 14b7 1A010000 		.4byte	0x11a
 6853 14bb 00000000 		.4byte	.LFB59
 6854 14bf 60000000 		.4byte	.LFE59-.LFB59
 6855 14c3 01       		.uleb128 0x1
 6856 14c4 9C       		.byte	0x9c
 6857 14c5 43150000 		.4byte	0x1543
 6858 14c9 15       		.uleb128 0x15
 6859 14ca C10E0000 		.4byte	.LASF156
 6860 14ce 01       		.byte	0x1
 6861 14cf 920B     		.2byte	0xb92
 6862 14d1 18020000 		.4byte	0x218
 6863 14d5 7A0C0000 		.4byte	.LLST87
 6864 14d9 15       		.uleb128 0x15
 6865 14da 4D0A0000 		.4byte	.LASF26
 6866 14de 01       		.byte	0x1
 6867 14df 920B     		.2byte	0xb92
 6868 14e1 D3070000 		.4byte	0x7d3
 6869 14e5 9B0C0000 		.4byte	.LLST88
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 217


 6870 14e9 16       		.uleb128 0x16
 6871 14ea 08030000 		.4byte	.LASF154
 6872 14ee 01       		.byte	0x1
 6873 14ef 940B     		.2byte	0xb94
 6874 14f1 BF040000 		.4byte	0x4bf
 6875 14f5 BC0C0000 		.4byte	.LLST89
 6876 14f9 16       		.uleb128 0x16
 6877 14fa 770B0000 		.4byte	.LASF77
 6878 14fe 01       		.byte	0x1
 6879 14ff 950B     		.2byte	0xb95
 6880 1501 1A010000 		.4byte	0x11a
 6881 1505 CF0C0000 		.4byte	.LLST90
 6882 1509 1D       		.uleb128 0x1d
 6883 150a 10000000 		.4byte	.LVL293
 6884 150e CD1E0000 		.4byte	0x1ecd
 6885 1512 1E150000 		.4byte	0x151e
 6886 1516 1A       		.uleb128 0x1a
 6887 1517 01       		.uleb128 0x1
 6888 1518 50       		.byte	0x50
 6889 1519 03       		.uleb128 0x3
 6890 151a F3       		.byte	0xf3
 6891 151b 01       		.uleb128 0x1
 6892 151c 50       		.byte	0x50
 6893 151d 00       		.byte	0
 6894 151e 1D       		.uleb128 0x1d
 6895 151f 18000000 		.4byte	.LVL294
 6896 1523 CD1E0000 		.4byte	0x1ecd
 6897 1527 32150000 		.4byte	0x1532
 6898 152b 1A       		.uleb128 0x1a
 6899 152c 01       		.uleb128 0x1
 6900 152d 50       		.byte	0x50
 6901 152e 02       		.uleb128 0x2
 6902 152f 74       		.byte	0x74
 6903 1530 00       		.sleb128 0
 6904 1531 00       		.byte	0
 6905 1532 19       		.uleb128 0x19
 6906 1533 38000000 		.4byte	.LVL295
 6907 1537 AB1E0000 		.4byte	0x1eab
 6908 153b 1A       		.uleb128 0x1a
 6909 153c 01       		.uleb128 0x1
 6910 153d 51       		.byte	0x51
 6911 153e 02       		.uleb128 0x2
 6912 153f 74       		.byte	0x74
 6913 1540 00       		.sleb128 0
 6914 1541 00       		.byte	0
 6915 1542 00       		.byte	0
 6916 1543 20       		.uleb128 0x20
 6917 1544 D9010000 		.4byte	.LASF157
 6918 1548 01       		.byte	0x1
 6919 1549 BF0B     		.2byte	0xbbf
 6920 154b 00000000 		.4byte	.LFB60
 6921 154f 10000000 		.4byte	.LFE60-.LFB60
 6922 1553 01       		.uleb128 0x1
 6923 1554 9C       		.byte	0x9c
 6924 1555 68150000 		.4byte	0x1568
 6925 1559 1B       		.uleb128 0x1b
 6926 155a A4080000 		.4byte	.LASF158
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 218


 6927 155e 01       		.byte	0x1
 6928 155f BF0B     		.2byte	0xbbf
 6929 1561 6E150000 		.4byte	0x156e
 6930 1565 01       		.uleb128 0x1
 6931 1566 50       		.byte	0x50
 6932 1567 00       		.byte	0
 6933 1568 06       		.uleb128 0x6
 6934 1569 04       		.byte	0x4
 6935 156a CB020000 		.4byte	0x2cb
 6936 156e 07       		.uleb128 0x7
 6937 156f 68150000 		.4byte	0x1568
 6938 1573 1E       		.uleb128 0x1e
 6939 1574 0D0B0000 		.4byte	.LASF159
 6940 1578 01       		.byte	0x1
 6941 1579 C70B     		.2byte	0xbc7
 6942 157b 1A010000 		.4byte	0x11a
 6943 157f 00000000 		.4byte	.LFB61
 6944 1583 54000000 		.4byte	.LFE61-.LFB61
 6945 1587 01       		.uleb128 0x1
 6946 1588 9C       		.byte	0x9c
 6947 1589 FE150000 		.4byte	0x15fe
 6948 158d 15       		.uleb128 0x15
 6949 158e A4080000 		.4byte	.LASF158
 6950 1592 01       		.byte	0x1
 6951 1593 C70B     		.2byte	0xbc7
 6952 1595 6E150000 		.4byte	0x156e
 6953 1599 EE0C0000 		.4byte	.LLST91
 6954 159d 15       		.uleb128 0x15
 6955 159e D00C0000 		.4byte	.LASF160
 6956 15a2 01       		.byte	0x1
 6957 15a3 C70B     		.2byte	0xbc7
 6958 15a5 A9100000 		.4byte	0x10a9
 6959 15a9 650D0000 		.4byte	.LLST92
 6960 15ad 16       		.uleb128 0x16
 6961 15ae 770B0000 		.4byte	.LASF77
 6962 15b2 01       		.byte	0x1
 6963 15b3 C90B     		.2byte	0xbc9
 6964 15b5 1A010000 		.4byte	0x11a
 6965 15b9 910D0000 		.4byte	.LLST93
 6966 15bd 1F       		.uleb128 0x1f
 6967 15be 0A000000 		.4byte	.LBB15
 6968 15c2 3C000000 		.4byte	.LBE15-.LBB15
 6969 15c6 EB150000 		.4byte	0x15eb
 6970 15ca 16       		.uleb128 0x16
 6971 15cb AA050000 		.4byte	.LASF100
 6972 15cf 01       		.byte	0x1
 6973 15d0 D10B     		.2byte	0xbd1
 6974 15d2 D3070000 		.4byte	0x7d3
 6975 15d6 BB0D0000 		.4byte	.LLST94
 6976 15da 19       		.uleb128 0x19
 6977 15db 38000000 		.4byte	.LVL305
 6978 15df 43150000 		.4byte	0x1543
 6979 15e3 1A       		.uleb128 0x1a
 6980 15e4 01       		.uleb128 0x1
 6981 15e5 50       		.byte	0x50
 6982 15e6 02       		.uleb128 0x2
 6983 15e7 74       		.byte	0x74
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 219


 6984 15e8 00       		.sleb128 0
 6985 15e9 00       		.byte	0
 6986 15ea 00       		.byte	0
 6987 15eb 18       		.uleb128 0x18
 6988 15ec 0A000000 		.4byte	.LVL302
 6989 15f0 A01E0000 		.4byte	0x1ea0
 6990 15f4 18       		.uleb128 0x18
 6991 15f5 4A000000 		.4byte	.LVL313
 6992 15f9 B71E0000 		.4byte	0x1eb7
 6993 15fd 00       		.byte	0
 6994 15fe 22       		.uleb128 0x22
 6995 15ff 880B0000 		.4byte	.LASF162
 6996 1603 01       		.byte	0x1
 6997 1604 040C     		.2byte	0xc04
 6998 1606 00000000 		.4byte	.LFB62
 6999 160a 0C000000 		.4byte	.LFE62-.LFB62
 7000 160e 01       		.uleb128 0x1
 7001 160f 9C       		.byte	0x9c
 7002 1610 20       		.uleb128 0x20
 7003 1611 92000000 		.4byte	.LASF163
 7004 1615 01       		.byte	0x1
 7005 1616 D00C     		.2byte	0xcd0
 7006 1618 00000000 		.4byte	.LFB64
 7007 161c 1C000000 		.4byte	.LFE64-.LFB64
 7008 1620 01       		.uleb128 0x1
 7009 1621 9C       		.byte	0x9c
 7010 1622 65160000 		.4byte	0x1665
 7011 1626 15       		.uleb128 0x15
 7012 1627 F8050000 		.4byte	.LASF164
 7013 162b 01       		.byte	0x1
 7014 162c D00C     		.2byte	0xcd0
 7015 162e 29020000 		.4byte	0x229
 7016 1632 D90D0000 		.4byte	.LLST95
 7017 1636 15       		.uleb128 0x15
 7018 1637 5B0B0000 		.4byte	.LASF165
 7019 163b 01       		.byte	0x1
 7020 163c D00C     		.2byte	0xcd0
 7021 163e 1A010000 		.4byte	0x11a
 7022 1642 EC0D0000 		.4byte	.LLST96
 7023 1646 1B       		.uleb128 0x1b
 7024 1647 D10E0000 		.4byte	.LASF166
 7025 164b 01       		.byte	0x1
 7026 164c D00C     		.2byte	0xcd0
 7027 164e A5000000 		.4byte	0xa5
 7028 1652 01       		.uleb128 0x1
 7029 1653 52       		.byte	0x52
 7030 1654 16       		.uleb128 0x16
 7031 1655 6F0E0000 		.4byte	.LASF78
 7032 1659 01       		.byte	0x1
 7033 165a D20C     		.2byte	0xcd2
 7034 165c BF040000 		.4byte	0x4bf
 7035 1660 1A0E0000 		.4byte	.LLST97
 7036 1664 00       		.byte	0
 7037 1665 1E       		.uleb128 0x1e
 7038 1666 180C0000 		.4byte	.LASF167
 7039 166a 01       		.byte	0x1
 7040 166b E00C     		.2byte	0xce0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 220


 7041 166d A5000000 		.4byte	0xa5
 7042 1671 00000000 		.4byte	.LFB65
 7043 1675 20000000 		.4byte	.LFE65-.LFB65
 7044 1679 01       		.uleb128 0x1
 7045 167a 9C       		.byte	0x9c
 7046 167b C0160000 		.4byte	0x16c0
 7047 167f 15       		.uleb128 0x15
 7048 1680 60090000 		.4byte	.LASF127
 7049 1684 01       		.byte	0x1
 7050 1685 E00C     		.2byte	0xce0
 7051 1687 29020000 		.4byte	0x229
 7052 168b 2D0E0000 		.4byte	.LLST98
 7053 168f 15       		.uleb128 0x15
 7054 1690 5B0B0000 		.4byte	.LASF165
 7055 1694 01       		.byte	0x1
 7056 1695 E00C     		.2byte	0xce0
 7057 1697 1A010000 		.4byte	0x11a
 7058 169b 4B0E0000 		.4byte	.LLST99
 7059 169f 16       		.uleb128 0x16
 7060 16a0 32040000 		.4byte	.LASF168
 7061 16a4 01       		.byte	0x1
 7062 16a5 E20C     		.2byte	0xce2
 7063 16a7 A5000000 		.4byte	0xa5
 7064 16ab 920E0000 		.4byte	.LLST100
 7065 16af 16       		.uleb128 0x16
 7066 16b0 6F0E0000 		.4byte	.LASF78
 7067 16b4 01       		.byte	0x1
 7068 16b5 E30C     		.2byte	0xce3
 7069 16b7 BF040000 		.4byte	0x4bf
 7070 16bb C80E0000 		.4byte	.LLST101
 7071 16bf 00       		.byte	0
 7072 16c0 1E       		.uleb128 0x1e
 7073 16c1 6B040000 		.4byte	.LASF169
 7074 16c5 01       		.byte	0x1
 7075 16c6 E10D     		.2byte	0xde1
 7076 16c8 25010000 		.4byte	0x125
 7077 16cc 00000000 		.4byte	.LFB69
 7078 16d0 18000000 		.4byte	.LFE69-.LFB69
 7079 16d4 01       		.uleb128 0x1
 7080 16d5 9C       		.byte	0x9c
 7081 16d6 22170000 		.4byte	0x1722
 7082 16da 15       		.uleb128 0x15
 7083 16db 86090000 		.4byte	.LASF81
 7084 16df 01       		.byte	0x1
 7085 16e0 E10D     		.2byte	0xde1
 7086 16e2 29020000 		.4byte	0x229
 7087 16e6 DB0E0000 		.4byte	.LLST102
 7088 16ea 16       		.uleb128 0x16
 7089 16eb 6F0E0000 		.4byte	.LASF78
 7090 16ef 01       		.byte	0x1
 7091 16f0 E30D     		.2byte	0xde3
 7092 16f2 BF040000 		.4byte	0x4bf
 7093 16f6 EE0E0000 		.4byte	.LLST103
 7094 16fa 16       		.uleb128 0x16
 7095 16fb B90B0000 		.4byte	.LASF170
 7096 16ff 01       		.byte	0x1
 7097 1700 E40D     		.2byte	0xde4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 221


 7098 1702 3B010000 		.4byte	0x13b
 7099 1706 010F0000 		.4byte	.LLST104
 7100 170a 21       		.uleb128 0x21
 7101 170b 7E020000 		.4byte	.LASF108
 7102 170f 01       		.byte	0x1
 7103 1710 E50D     		.2byte	0xde5
 7104 1712 25010000 		.4byte	0x125
 7105 1716 01       		.uleb128 0x1
 7106 1717 50       		.byte	0x50
 7107 1718 18       		.uleb128 0x18
 7108 1719 10000000 		.4byte	.LVL332
 7109 171d 52040000 		.4byte	0x452
 7110 1721 00       		.byte	0
 7111 1722 1E       		.uleb128 0x1e
 7112 1723 A50D0000 		.4byte	.LASF171
 7113 1727 01       		.byte	0x1
 7114 1728 4D0E     		.2byte	0xe4d
 7115 172a 29020000 		.4byte	0x229
 7116 172e 00000000 		.4byte	.LFB72
 7117 1732 0C000000 		.4byte	.LFE72-.LFB72
 7118 1736 01       		.uleb128 0x1
 7119 1737 9C       		.byte	0x9c
 7120 1738 4B170000 		.4byte	0x174b
 7121 173c 21       		.uleb128 0x21
 7122 173d 770B0000 		.4byte	.LASF77
 7123 1741 01       		.byte	0x1
 7124 1742 4F0E     		.2byte	0xe4f
 7125 1744 29020000 		.4byte	0x229
 7126 1748 01       		.uleb128 0x1
 7127 1749 50       		.byte	0x50
 7128 174a 00       		.byte	0
 7129 174b 1E       		.uleb128 0x1e
 7130 174c DD000000 		.4byte	.LASF172
 7131 1750 01       		.byte	0x1
 7132 1751 5E0E     		.2byte	0xe5e
 7133 1753 1A010000 		.4byte	0x11a
 7134 1757 00000000 		.4byte	.LFB73
 7135 175b 20000000 		.4byte	.LFE73-.LFB73
 7136 175f 01       		.uleb128 0x1
 7137 1760 9C       		.byte	0x9c
 7138 1761 74170000 		.4byte	0x1774
 7139 1765 21       		.uleb128 0x21
 7140 1766 770B0000 		.4byte	.LASF77
 7141 176a 01       		.byte	0x1
 7142 176b 600E     		.2byte	0xe60
 7143 176d 1A010000 		.4byte	0x11a
 7144 1771 01       		.uleb128 0x1
 7145 1772 50       		.byte	0x50
 7146 1773 00       		.byte	0
 7147 1774 20       		.uleb128 0x20
 7148 1775 5E010000 		.4byte	.LASF173
 7149 1779 01       		.byte	0x1
 7150 177a 7A0E     		.2byte	0xe7a
 7151 177c 00000000 		.4byte	.LFB74
 7152 1780 80000000 		.4byte	.LFE74-.LFB74
 7153 1784 01       		.uleb128 0x1
 7154 1785 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 222


 7155 1786 CF170000 		.4byte	0x17cf
 7156 178a 15       		.uleb128 0x15
 7157 178b D20A0000 		.4byte	.LASF174
 7158 178f 01       		.byte	0x1
 7159 1790 7A0E     		.2byte	0xe7a
 7160 1792 3D040000 		.4byte	0x43d
 7161 1796 140F0000 		.4byte	.LLST105
 7162 179a 16       		.uleb128 0x16
 7163 179b 6F0E0000 		.4byte	.LASF78
 7164 179f 01       		.byte	0x1
 7165 17a0 7C0E     		.2byte	0xe7c
 7166 17a2 570C0000 		.4byte	0xc57
 7167 17a6 560F0000 		.4byte	.LLST106
 7168 17aa 1D       		.uleb128 0x1d
 7169 17ab 48000000 		.4byte	.LVL338
 7170 17af CD1E0000 		.4byte	0x1ecd
 7171 17b3 BE170000 		.4byte	0x17be
 7172 17b7 1A       		.uleb128 0x1a
 7173 17b8 01       		.uleb128 0x1
 7174 17b9 50       		.byte	0x50
 7175 17ba 02       		.uleb128 0x2
 7176 17bb 75       		.byte	0x75
 7177 17bc 00       		.sleb128 0
 7178 17bd 00       		.byte	0
 7179 17be 19       		.uleb128 0x19
 7180 17bf 6C000000 		.4byte	.LVL339
 7181 17c3 AB1E0000 		.4byte	0x1eab
 7182 17c7 1A       		.uleb128 0x1a
 7183 17c8 01       		.uleb128 0x1
 7184 17c9 51       		.byte	0x51
 7185 17ca 02       		.uleb128 0x2
 7186 17cb 75       		.byte	0x75
 7187 17cc 00       		.sleb128 0
 7188 17cd 00       		.byte	0
 7189 17ce 00       		.byte	0
 7190 17cf 1E       		.uleb128 0x1e
 7191 17d0 8E060000 		.4byte	.LASF175
 7192 17d4 01       		.byte	0x1
 7193 17d5 BC0E     		.2byte	0xebc
 7194 17d7 1A010000 		.4byte	0x11a
 7195 17db 00000000 		.4byte	.LFB75
 7196 17df 60000000 		.4byte	.LFE75-.LFB75
 7197 17e3 01       		.uleb128 0x1
 7198 17e4 9C       		.byte	0x9c
 7199 17e5 3E180000 		.4byte	0x183e
 7200 17e9 15       		.uleb128 0x15
 7201 17ea D20A0000 		.4byte	.LASF174
 7202 17ee 01       		.byte	0x1
 7203 17ef BC0E     		.2byte	0xebc
 7204 17f1 3D040000 		.4byte	0x43d
 7205 17f5 980F0000 		.4byte	.LLST107
 7206 17f9 16       		.uleb128 0x16
 7207 17fa 6F0E0000 		.4byte	.LASF78
 7208 17fe 01       		.byte	0x1
 7209 17ff BE0E     		.2byte	0xebe
 7210 1801 570C0000 		.4byte	0xc57
 7211 1805 06100000 		.4byte	.LLST108
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 223


 7212 1809 16       		.uleb128 0x16
 7213 180a 770B0000 		.4byte	.LASF77
 7214 180e 01       		.byte	0x1
 7215 180f BF0E     		.2byte	0xebf
 7216 1811 1A010000 		.4byte	0x11a
 7217 1815 74100000 		.4byte	.LLST109
 7218 1819 1D       		.uleb128 0x1d
 7219 181a 20000000 		.4byte	.LVL346
 7220 181e CD1E0000 		.4byte	0x1ecd
 7221 1822 2D180000 		.4byte	0x182d
 7222 1826 1A       		.uleb128 0x1a
 7223 1827 01       		.uleb128 0x1
 7224 1828 50       		.byte	0x50
 7225 1829 02       		.uleb128 0x2
 7226 182a 75       		.byte	0x75
 7227 182b 00       		.sleb128 0
 7228 182c 00       		.byte	0
 7229 182d 19       		.uleb128 0x19
 7230 182e 48000000 		.4byte	.LVL347
 7231 1832 AB1E0000 		.4byte	0x1eab
 7232 1836 1A       		.uleb128 0x1a
 7233 1837 01       		.uleb128 0x1
 7234 1838 51       		.byte	0x51
 7235 1839 02       		.uleb128 0x2
 7236 183a 75       		.byte	0x75
 7237 183b 00       		.sleb128 0
 7238 183c 00       		.byte	0
 7239 183d 00       		.byte	0
 7240 183e 1E       		.uleb128 0x1e
 7241 183f 09090000 		.4byte	.LASF176
 7242 1843 01       		.byte	0x1
 7243 1844 4210     		.2byte	0x1042
 7244 1846 30010000 		.4byte	0x130
 7245 184a 00000000 		.4byte	.LFB76
 7246 184e 18000000 		.4byte	.LFE76-.LFB76
 7247 1852 01       		.uleb128 0x1
 7248 1853 9C       		.byte	0x9c
 7249 1854 67180000 		.4byte	0x1867
 7250 1858 21       		.uleb128 0x21
 7251 1859 7E020000 		.4byte	.LASF108
 7252 185d 01       		.byte	0x1
 7253 185e 4410     		.2byte	0x1044
 7254 1860 30010000 		.4byte	0x130
 7255 1864 01       		.uleb128 0x1
 7256 1865 50       		.byte	0x50
 7257 1866 00       		.byte	0
 7258 1867 24       		.uleb128 0x24
 7259 1868 52060000 		.4byte	.LASF178
 7260 186c 01       		.byte	0x1
 7261 186d 5210     		.2byte	0x1052
 7262 186f A5000000 		.4byte	0xa5
 7263 1873 00000000 		.4byte	.LFB77
 7264 1877 1C000000 		.4byte	.LFE77-.LFB77
 7265 187b 01       		.uleb128 0x1
 7266 187c 9C       		.byte	0x9c
 7267 187d 1E       		.uleb128 0x1e
 7268 187e 41070000 		.4byte	.LASF179
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 224


 7269 1882 01       		.byte	0x1
 7270 1883 6310     		.2byte	0x1063
 7271 1885 D5000000 		.4byte	0xd5
 7272 1889 00000000 		.4byte	.LFB78
 7273 188d 6C000000 		.4byte	.LFE78-.LFB78
 7274 1891 01       		.uleb128 0x1
 7275 1892 9C       		.byte	0x9c
 7276 1893 0E190000 		.4byte	0x190e
 7277 1897 15       		.uleb128 0x15
 7278 1898 6D030000 		.4byte	.LASF180
 7279 189c 01       		.byte	0x1
 7280 189d 6310     		.2byte	0x1063
 7281 189f 1A010000 		.4byte	0x11a
 7282 18a3 AB100000 		.4byte	.LLST110
 7283 18a7 15       		.uleb128 0x15
 7284 18a8 420D0000 		.4byte	.LASF97
 7285 18ac 01       		.byte	0x1
 7286 18ad 6310     		.2byte	0x1063
 7287 18af 30010000 		.4byte	0x130
 7288 18b3 D7100000 		.4byte	.LLST111
 7289 18b7 16       		.uleb128 0x16
 7290 18b8 070F0000 		.4byte	.LASF181
 7291 18bc 01       		.byte	0x1
 7292 18bd 6510     		.2byte	0x1065
 7293 18bf D5000000 		.4byte	0xd5
 7294 18c3 03110000 		.4byte	.LLST112
 7295 18c7 18       		.uleb128 0x18
 7296 18c8 0A000000 		.4byte	.LVL357
 7297 18cc A01E0000 		.4byte	0x1ea0
 7298 18d0 1D       		.uleb128 0x1d
 7299 18d1 28000000 		.4byte	.LVL358
 7300 18d5 45070000 		.4byte	0x745
 7301 18d9 E9180000 		.4byte	0x18e9
 7302 18dd 1A       		.uleb128 0x1a
 7303 18de 01       		.uleb128 0x1
 7304 18df 50       		.byte	0x50
 7305 18e0 02       		.uleb128 0x2
 7306 18e1 74       		.byte	0x74
 7307 18e2 00       		.sleb128 0
 7308 18e3 1A       		.uleb128 0x1a
 7309 18e4 01       		.uleb128 0x1
 7310 18e5 51       		.byte	0x51
 7311 18e6 01       		.uleb128 0x1
 7312 18e7 31       		.byte	0x31
 7313 18e8 00       		.byte	0
 7314 18e9 18       		.uleb128 0x18
 7315 18ea 2C000000 		.4byte	.LVL359
 7316 18ee C21E0000 		.4byte	0x1ec2
 7317 18f2 18       		.uleb128 0x18
 7318 18f3 30000000 		.4byte	.LVL360
 7319 18f7 B71E0000 		.4byte	0x1eb7
 7320 18fb 18       		.uleb128 0x18
 7321 18fc 34000000 		.4byte	.LVL361
 7322 1900 A01E0000 		.4byte	0x1ea0
 7323 1904 18       		.uleb128 0x18
 7324 1905 62000000 		.4byte	.LVL363
 7325 1909 B71E0000 		.4byte	0x1eb7
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 225


 7326 190d 00       		.byte	0
 7327 190e 1E       		.uleb128 0x1e
 7328 190f E9060000 		.4byte	.LASF182
 7329 1913 01       		.byte	0x1
 7330 1914 A710     		.2byte	0x10a7
 7331 1916 1A010000 		.4byte	0x11a
 7332 191a 00000000 		.4byte	.LFB79
 7333 191e 80000000 		.4byte	.LFE79-.LFB79
 7334 1922 01       		.uleb128 0x1
 7335 1923 9C       		.byte	0x9c
 7336 1924 BF190000 		.4byte	0x19bf
 7337 1928 15       		.uleb128 0x15
 7338 1929 DC030000 		.4byte	.LASF183
 7339 192d 01       		.byte	0x1
 7340 192e A710     		.2byte	0x10a7
 7341 1930 D5000000 		.4byte	0xd5
 7342 1934 21110000 		.4byte	.LLST113
 7343 1938 15       		.uleb128 0x15
 7344 1939 B4000000 		.4byte	.LASF184
 7345 193d 01       		.byte	0x1
 7346 193e A710     		.2byte	0x10a7
 7347 1940 D5000000 		.4byte	0xd5
 7348 1944 4D110000 		.4byte	.LLST114
 7349 1948 15       		.uleb128 0x15
 7350 1949 620B0000 		.4byte	.LASF185
 7351 194d 01       		.byte	0x1
 7352 194e A710     		.2byte	0x10a7
 7353 1950 BF190000 		.4byte	0x19bf
 7354 1954 79110000 		.4byte	.LLST115
 7355 1958 15       		.uleb128 0x15
 7356 1959 420D0000 		.4byte	.LASF97
 7357 195d 01       		.byte	0x1
 7358 195e A710     		.2byte	0x10a7
 7359 1960 30010000 		.4byte	0x130
 7360 1964 BE110000 		.4byte	.LLST116
 7361 1968 16       		.uleb128 0x16
 7362 1969 770B0000 		.4byte	.LASF77
 7363 196d 01       		.byte	0x1
 7364 196e A910     		.2byte	0x10a9
 7365 1970 1A010000 		.4byte	0x11a
 7366 1974 EA110000 		.4byte	.LLST117
 7367 1978 18       		.uleb128 0x18
 7368 1979 0E000000 		.4byte	.LVL367
 7369 197d A01E0000 		.4byte	0x1ea0
 7370 1981 1D       		.uleb128 0x1d
 7371 1982 36000000 		.4byte	.LVL368
 7372 1986 45070000 		.4byte	0x745
 7373 198a 9A190000 		.4byte	0x199a
 7374 198e 1A       		.uleb128 0x1a
 7375 198f 01       		.uleb128 0x1
 7376 1990 50       		.byte	0x50
 7377 1991 02       		.uleb128 0x2
 7378 1992 75       		.byte	0x75
 7379 1993 00       		.sleb128 0
 7380 1994 1A       		.uleb128 0x1a
 7381 1995 01       		.uleb128 0x1
 7382 1996 51       		.byte	0x51
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 226


 7383 1997 01       		.uleb128 0x1
 7384 1998 31       		.byte	0x31
 7385 1999 00       		.byte	0
 7386 199a 18       		.uleb128 0x18
 7387 199b 3A000000 		.4byte	.LVL369
 7388 199f C21E0000 		.4byte	0x1ec2
 7389 19a3 18       		.uleb128 0x18
 7390 19a4 3E000000 		.4byte	.LVL370
 7391 19a8 B71E0000 		.4byte	0x1eb7
 7392 19ac 18       		.uleb128 0x18
 7393 19ad 42000000 		.4byte	.LVL371
 7394 19b1 A01E0000 		.4byte	0x1ea0
 7395 19b5 18       		.uleb128 0x18
 7396 19b6 78000000 		.4byte	.LVL376
 7397 19ba B71E0000 		.4byte	0x1eb7
 7398 19be 00       		.byte	0
 7399 19bf 06       		.uleb128 0x6
 7400 19c0 04       		.byte	0x4
 7401 19c1 D5000000 		.4byte	0xd5
 7402 19c5 1E       		.uleb128 0x1e
 7403 19c6 EF020000 		.4byte	.LASF186
 7404 19ca 01       		.byte	0x1
 7405 19cb F710     		.2byte	0x10f7
 7406 19cd 1A010000 		.4byte	0x11a
 7407 19d1 00000000 		.4byte	.LFB80
 7408 19d5 AC000000 		.4byte	.LFE80-.LFB80
 7409 19d9 01       		.uleb128 0x1
 7410 19da 9C       		.byte	0x9c
 7411 19db 931A0000 		.4byte	0x1a93
 7412 19df 15       		.uleb128 0x15
 7413 19e0 78090000 		.4byte	.LASF187
 7414 19e4 01       		.byte	0x1
 7415 19e5 F710     		.2byte	0x10f7
 7416 19e7 29020000 		.4byte	0x229
 7417 19eb 14120000 		.4byte	.LLST118
 7418 19ef 15       		.uleb128 0x15
 7419 19f0 F60A0000 		.4byte	.LASF188
 7420 19f4 01       		.byte	0x1
 7421 19f5 F710     		.2byte	0x10f7
 7422 19f7 D5000000 		.4byte	0xd5
 7423 19fb 40120000 		.4byte	.LLST119
 7424 19ff 15       		.uleb128 0x15
 7425 1a00 01090000 		.4byte	.LASF189
 7426 1a04 01       		.byte	0x1
 7427 1a05 F710     		.2byte	0x10f7
 7428 1a07 9B020000 		.4byte	0x29b
 7429 1a0b E7120000 		.4byte	.LLST120
 7430 1a0f 15       		.uleb128 0x15
 7431 1a10 80080000 		.4byte	.LASF190
 7432 1a14 01       		.byte	0x1
 7433 1a15 F710     		.2byte	0x10f7
 7434 1a17 BF190000 		.4byte	0x19bf
 7435 1a1b 08130000 		.4byte	.LLST121
 7436 1a1f 16       		.uleb128 0x16
 7437 1a20 6F0E0000 		.4byte	.LASF78
 7438 1a24 01       		.byte	0x1
 7439 1a25 F910     		.2byte	0x10f9
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 227


 7440 1a27 BF040000 		.4byte	0x4bf
 7441 1a2b 34130000 		.4byte	.LLST122
 7442 1a2f 16       		.uleb128 0x16
 7443 1a30 770B0000 		.4byte	.LASF77
 7444 1a34 01       		.byte	0x1
 7445 1a35 FA10     		.2byte	0x10fa
 7446 1a37 1A010000 		.4byte	0x11a
 7447 1a3b 60130000 		.4byte	.LLST123
 7448 1a3f 16       		.uleb128 0x16
 7449 1a40 C3010000 		.4byte	.LASF191
 7450 1a44 01       		.byte	0x1
 7451 1a45 FB10     		.2byte	0x10fb
 7452 1a47 BF000000 		.4byte	0xbf
 7453 1a4b 8A130000 		.4byte	.LLST124
 7454 1a4f 18       		.uleb128 0x18
 7455 1a50 0E000000 		.4byte	.LVL383
 7456 1a54 A01E0000 		.4byte	0x1ea0
 7457 1a58 1D       		.uleb128 0x1d
 7458 1a59 6C000000 		.4byte	.LVL396
 7459 1a5d CD1E0000 		.4byte	0x1ecd
 7460 1a61 6C1A0000 		.4byte	0x1a6c
 7461 1a65 1A       		.uleb128 0x1a
 7462 1a66 01       		.uleb128 0x1
 7463 1a67 50       		.byte	0x50
 7464 1a68 02       		.uleb128 0x2
 7465 1a69 76       		.byte	0x76
 7466 1a6a 00       		.sleb128 0
 7467 1a6b 00       		.byte	0
 7468 1a6c 1D       		.uleb128 0x1d
 7469 1a6d 8C000000 		.4byte	.LVL397
 7470 1a71 AB1E0000 		.4byte	0x1eab
 7471 1a75 801A0000 		.4byte	0x1a80
 7472 1a79 1A       		.uleb128 0x1a
 7473 1a7a 01       		.uleb128 0x1
 7474 1a7b 51       		.byte	0x51
 7475 1a7c 02       		.uleb128 0x2
 7476 1a7d 76       		.byte	0x76
 7477 1a7e 00       		.sleb128 0
 7478 1a7f 00       		.byte	0
 7479 1a80 18       		.uleb128 0x18
 7480 1a81 9C000000 		.4byte	.LVL398
 7481 1a85 C21E0000 		.4byte	0x1ec2
 7482 1a89 18       		.uleb128 0x18
 7483 1a8a A0000000 		.4byte	.LVL399
 7484 1a8e B71E0000 		.4byte	0x1eb7
 7485 1a92 00       		.byte	0
 7486 1a93 1E       		.uleb128 0x1e
 7487 1a94 EE010000 		.4byte	.LASF192
 7488 1a98 01       		.byte	0x1
 7489 1a99 6111     		.2byte	0x1161
 7490 1a9b 1A010000 		.4byte	0x11a
 7491 1a9f 00000000 		.4byte	.LFB81
 7492 1aa3 E0000000 		.4byte	.LFE81-.LFB81
 7493 1aa7 01       		.uleb128 0x1
 7494 1aa8 9C       		.byte	0x9c
 7495 1aa9 9C1B0000 		.4byte	0x1b9c
 7496 1aad 15       		.uleb128 0x15
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 228


 7497 1aae 78090000 		.4byte	.LASF187
 7498 1ab2 01       		.byte	0x1
 7499 1ab3 6111     		.2byte	0x1161
 7500 1ab5 29020000 		.4byte	0x229
 7501 1ab9 9D130000 		.4byte	.LLST125
 7502 1abd 15       		.uleb128 0x15
 7503 1abe F60A0000 		.4byte	.LASF188
 7504 1ac2 01       		.byte	0x1
 7505 1ac3 6111     		.2byte	0x1161
 7506 1ac5 D5000000 		.4byte	0xd5
 7507 1ac9 C9130000 		.4byte	.LLST126
 7508 1acd 15       		.uleb128 0x15
 7509 1ace 01090000 		.4byte	.LASF189
 7510 1ad2 01       		.byte	0x1
 7511 1ad3 6111     		.2byte	0x1161
 7512 1ad5 9B020000 		.4byte	0x29b
 7513 1ad9 70140000 		.4byte	.LLST127
 7514 1add 15       		.uleb128 0x15
 7515 1ade 80080000 		.4byte	.LASF190
 7516 1ae2 01       		.byte	0x1
 7517 1ae3 6111     		.2byte	0x1161
 7518 1ae5 BF190000 		.4byte	0x19bf
 7519 1ae9 91140000 		.4byte	.LLST128
 7520 1aed 1B       		.uleb128 0x1b
 7521 1aee F4000000 		.4byte	.LASF193
 7522 1af2 01       		.byte	0x1
 7523 1af3 6111     		.2byte	0x1161
 7524 1af5 9C1B0000 		.4byte	0x1b9c
 7525 1af9 02       		.uleb128 0x2
 7526 1afa 91       		.byte	0x91
 7527 1afb 00       		.sleb128 0
 7528 1afc 16       		.uleb128 0x16
 7529 1afd 6F0E0000 		.4byte	.LASF78
 7530 1b01 01       		.byte	0x1
 7531 1b02 6311     		.2byte	0x1163
 7532 1b04 BF040000 		.4byte	0x4bf
 7533 1b08 BD140000 		.4byte	.LLST129
 7534 1b0c 16       		.uleb128 0x16
 7535 1b0d C3010000 		.4byte	.LASF191
 7536 1b11 01       		.byte	0x1
 7537 1b12 6411     		.2byte	0x1164
 7538 1b14 BF000000 		.4byte	0xbf
 7539 1b18 E9140000 		.4byte	.LLST130
 7540 1b1c 16       		.uleb128 0x16
 7541 1b1d 770B0000 		.4byte	.LASF77
 7542 1b21 01       		.byte	0x1
 7543 1b22 6511     		.2byte	0x1165
 7544 1b24 1A010000 		.4byte	0x11a
 7545 1b28 FC140000 		.4byte	.LLST131
 7546 1b2c 16       		.uleb128 0x16
 7547 1b2d A5020000 		.4byte	.LASF120
 7548 1b31 01       		.byte	0x1
 7549 1b32 6611     		.2byte	0x1166
 7550 1b34 25010000 		.4byte	0x125
 7551 1b38 26150000 		.4byte	.LLST132
 7552 1b3c 18       		.uleb128 0x18
 7553 1b3d 10000000 		.4byte	.LVL405
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 229


 7554 1b41 F01E0000 		.4byte	0x1ef0
 7555 1b45 1D       		.uleb128 0x1d
 7556 1b46 78000000 		.4byte	.LVL421
 7557 1b4a CD1E0000 		.4byte	0x1ecd
 7558 1b4e 591B0000 		.4byte	0x1b59
 7559 1b52 1A       		.uleb128 0x1a
 7560 1b53 01       		.uleb128 0x1
 7561 1b54 50       		.byte	0x50
 7562 1b55 02       		.uleb128 0x2
 7563 1b56 77       		.byte	0x77
 7564 1b57 00       		.sleb128 0
 7565 1b58 00       		.byte	0
 7566 1b59 1D       		.uleb128 0x1d
 7567 1b5a 98000000 		.4byte	.LVL422
 7568 1b5e AB1E0000 		.4byte	0x1eab
 7569 1b62 6D1B0000 		.4byte	0x1b6d
 7570 1b66 1A       		.uleb128 0x1a
 7571 1b67 01       		.uleb128 0x1
 7572 1b68 51       		.byte	0x51
 7573 1b69 02       		.uleb128 0x2
 7574 1b6a 77       		.byte	0x77
 7575 1b6b 00       		.sleb128 0
 7576 1b6c 00       		.byte	0
 7577 1b6d 1D       		.uleb128 0x1d
 7578 1b6e A6000000 		.4byte	.LVL425
 7579 1b72 AB1E0000 		.4byte	0x1eab
 7580 1b76 8A1B0000 		.4byte	0x1b8a
 7581 1b7a 1A       		.uleb128 0x1a
 7582 1b7b 01       		.uleb128 0x1
 7583 1b7c 50       		.byte	0x50
 7584 1b7d 05       		.uleb128 0x5
 7585 1b7e 03       		.byte	0x3
 7586 1b7f 14000000 		.4byte	.LANCHOR0+20
 7587 1b83 1A       		.uleb128 0x1a
 7588 1b84 01       		.uleb128 0x1
 7589 1b85 51       		.byte	0x51
 7590 1b86 02       		.uleb128 0x2
 7591 1b87 74       		.byte	0x74
 7592 1b88 18       		.sleb128 24
 7593 1b89 00       		.byte	0
 7594 1b8a 19       		.uleb128 0x19
 7595 1b8b CC000000 		.4byte	.LVL426
 7596 1b8f FB1E0000 		.4byte	0x1efb
 7597 1b93 1A       		.uleb128 0x1a
 7598 1b94 01       		.uleb128 0x1
 7599 1b95 50       		.byte	0x50
 7600 1b96 03       		.uleb128 0x3
 7601 1b97 91       		.byte	0x91
 7602 1b98 64       		.sleb128 -28
 7603 1b99 06       		.byte	0x6
 7604 1b9a 00       		.byte	0
 7605 1b9b 00       		.byte	0
 7606 1b9c 06       		.uleb128 0x6
 7607 1b9d 04       		.byte	0x4
 7608 1b9e 1A010000 		.4byte	0x11a
 7609 1ba2 20       		.uleb128 0x20
 7610 1ba3 700A0000 		.4byte	.LASF194
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 230


 7611 1ba7 01       		.byte	0x1
 7612 1ba8 DD11     		.2byte	0x11dd
 7613 1baa 00000000 		.4byte	.LFB82
 7614 1bae 8C000000 		.4byte	.LFE82-.LFB82
 7615 1bb2 01       		.uleb128 0x1
 7616 1bb3 9C       		.byte	0x9c
 7617 1bb4 671C0000 		.4byte	0x1c67
 7618 1bb8 15       		.uleb128 0x15
 7619 1bb9 78090000 		.4byte	.LASF187
 7620 1bbd 01       		.byte	0x1
 7621 1bbe DD11     		.2byte	0x11dd
 7622 1bc0 29020000 		.4byte	0x229
 7623 1bc4 5C150000 		.4byte	.LLST133
 7624 1bc8 15       		.uleb128 0x15
 7625 1bc9 F4000000 		.4byte	.LASF193
 7626 1bcd 01       		.byte	0x1
 7627 1bce DD11     		.2byte	0x11dd
 7628 1bd0 9C1B0000 		.4byte	0x1b9c
 7629 1bd4 88150000 		.4byte	.LLST134
 7630 1bd8 16       		.uleb128 0x16
 7631 1bd9 6F0E0000 		.4byte	.LASF78
 7632 1bdd 01       		.byte	0x1
 7633 1bde DF11     		.2byte	0x11df
 7634 1be0 BF040000 		.4byte	0x4bf
 7635 1be4 B4150000 		.4byte	.LLST135
 7636 1be8 16       		.uleb128 0x16
 7637 1be9 C3010000 		.4byte	.LASF191
 7638 1bed 01       		.byte	0x1
 7639 1bee E011     		.2byte	0x11e0
 7640 1bf0 BF000000 		.4byte	0xbf
 7641 1bf4 E0150000 		.4byte	.LLST136
 7642 1bf8 16       		.uleb128 0x16
 7643 1bf9 A5020000 		.4byte	.LASF120
 7644 1bfd 01       		.byte	0x1
 7645 1bfe E111     		.2byte	0x11e1
 7646 1c00 25010000 		.4byte	0x125
 7647 1c04 FE150000 		.4byte	.LLST137
 7648 1c08 18       		.uleb128 0x18
 7649 1c09 0A000000 		.4byte	.LVL432
 7650 1c0d F01E0000 		.4byte	0x1ef0
 7651 1c11 1D       		.uleb128 0x1d
 7652 1c12 2E000000 		.4byte	.LVL436
 7653 1c16 CD1E0000 		.4byte	0x1ecd
 7654 1c1a 251C0000 		.4byte	0x1c25
 7655 1c1e 1A       		.uleb128 0x1a
 7656 1c1f 01       		.uleb128 0x1
 7657 1c20 50       		.byte	0x50
 7658 1c21 02       		.uleb128 0x2
 7659 1c22 77       		.byte	0x77
 7660 1c23 00       		.sleb128 0
 7661 1c24 00       		.byte	0
 7662 1c25 1D       		.uleb128 0x1d
 7663 1c26 4E000000 		.4byte	.LVL437
 7664 1c2a AB1E0000 		.4byte	0x1eab
 7665 1c2e 391C0000 		.4byte	0x1c39
 7666 1c32 1A       		.uleb128 0x1a
 7667 1c33 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 231


 7668 1c34 51       		.byte	0x51
 7669 1c35 02       		.uleb128 0x2
 7670 1c36 77       		.byte	0x77
 7671 1c37 00       		.sleb128 0
 7672 1c38 00       		.byte	0
 7673 1c39 1D       		.uleb128 0x1d
 7674 1c3a 5C000000 		.4byte	.LVL440
 7675 1c3e AB1E0000 		.4byte	0x1eab
 7676 1c42 561C0000 		.4byte	0x1c56
 7677 1c46 1A       		.uleb128 0x1a
 7678 1c47 01       		.uleb128 0x1
 7679 1c48 50       		.byte	0x50
 7680 1c49 05       		.uleb128 0x5
 7681 1c4a 03       		.byte	0x3
 7682 1c4b 14000000 		.4byte	.LANCHOR0+20
 7683 1c4f 1A       		.uleb128 0x1a
 7684 1c50 01       		.uleb128 0x1
 7685 1c51 51       		.byte	0x51
 7686 1c52 02       		.uleb128 0x2
 7687 1c53 74       		.byte	0x74
 7688 1c54 18       		.sleb128 24
 7689 1c55 00       		.byte	0
 7690 1c56 19       		.uleb128 0x19
 7691 1c57 7E000000 		.4byte	.LVL441
 7692 1c5b FB1E0000 		.4byte	0x1efb
 7693 1c5f 1A       		.uleb128 0x1a
 7694 1c60 01       		.uleb128 0x1
 7695 1c61 50       		.byte	0x50
 7696 1c62 02       		.uleb128 0x2
 7697 1c63 75       		.byte	0x75
 7698 1c64 00       		.sleb128 0
 7699 1c65 00       		.byte	0
 7700 1c66 00       		.byte	0
 7701 1c67 1E       		.uleb128 0x1e
 7702 1c68 AA0C0000 		.4byte	.LASF195
 7703 1c6c 01       		.byte	0x1
 7704 1c6d 3612     		.2byte	0x1236
 7705 1c6f 1A010000 		.4byte	0x11a
 7706 1c73 00000000 		.4byte	.LFB83
 7707 1c77 30000000 		.4byte	.LFE83-.LFB83
 7708 1c7b 01       		.uleb128 0x1
 7709 1c7c 9C       		.byte	0x9c
 7710 1c7d C41C0000 		.4byte	0x1cc4
 7711 1c81 15       		.uleb128 0x15
 7712 1c82 86090000 		.4byte	.LASF81
 7713 1c86 01       		.byte	0x1
 7714 1c87 3612     		.2byte	0x1236
 7715 1c89 29020000 		.4byte	0x229
 7716 1c8d 32160000 		.4byte	.LLST138
 7717 1c91 16       		.uleb128 0x16
 7718 1c92 6F0E0000 		.4byte	.LASF78
 7719 1c96 01       		.byte	0x1
 7720 1c97 3812     		.2byte	0x1238
 7721 1c99 BF040000 		.4byte	0x4bf
 7722 1c9d 45160000 		.4byte	.LLST139
 7723 1ca1 16       		.uleb128 0x16
 7724 1ca2 770B0000 		.4byte	.LASF77
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 232


 7725 1ca6 01       		.byte	0x1
 7726 1ca7 3912     		.2byte	0x1239
 7727 1ca9 1A010000 		.4byte	0x11a
 7728 1cad 63160000 		.4byte	.LLST140
 7729 1cb1 18       		.uleb128 0x18
 7730 1cb2 0E000000 		.4byte	.LVL447
 7731 1cb6 A01E0000 		.4byte	0x1ea0
 7732 1cba 18       		.uleb128 0x18
 7733 1cbb 26000000 		.4byte	.LVL452
 7734 1cbf B71E0000 		.4byte	0x1eb7
 7735 1cc3 00       		.byte	0
 7736 1cc4 0B       		.uleb128 0xb
 7737 1cc5 1E020000 		.4byte	0x21e
 7738 1cc9 D41C0000 		.4byte	0x1cd4
 7739 1ccd 0C       		.uleb128 0xc
 7740 1cce 9E000000 		.4byte	0x9e
 7741 1cd2 04       		.byte	0x4
 7742 1cd3 00       		.byte	0
 7743 1cd4 21       		.uleb128 0x21
 7744 1cd5 B1010000 		.4byte	.LASF196
 7745 1cd9 01       		.byte	0x1
 7746 1cda 7701     		.2byte	0x177
 7747 1cdc C41C0000 		.4byte	0x1cc4
 7748 1ce0 05       		.uleb128 0x5
 7749 1ce1 03       		.byte	0x3
 7750 1ce2 30000000 		.4byte	pxReadyTasksLists
 7751 1ce6 21       		.uleb128 0x21
 7752 1ce7 15020000 		.4byte	.LASF197
 7753 1ceb 01       		.byte	0x1
 7754 1cec 7801     		.2byte	0x178
 7755 1cee 1E020000 		.4byte	0x21e
 7756 1cf2 05       		.uleb128 0x5
 7757 1cf3 03       		.byte	0x3
 7758 1cf4 94000000 		.4byte	xDelayedTaskList1
 7759 1cf8 21       		.uleb128 0x21
 7760 1cf9 27020000 		.4byte	.LASF198
 7761 1cfd 01       		.byte	0x1
 7762 1cfe 7901     		.2byte	0x179
 7763 1d00 1E020000 		.4byte	0x21e
 7764 1d04 05       		.uleb128 0x5
 7765 1d05 03       		.byte	0x3
 7766 1d06 A8000000 		.4byte	xDelayedTaskList2
 7767 1d0a 21       		.uleb128 0x21
 7768 1d0b 870A0000 		.4byte	.LASF199
 7769 1d0f 01       		.byte	0x1
 7770 1d10 7A01     		.2byte	0x17a
 7771 1d12 1C1D0000 		.4byte	0x1d1c
 7772 1d16 05       		.uleb128 0x5
 7773 1d17 03       		.byte	0x3
 7774 1d18 28000000 		.4byte	pxDelayedTaskList
 7775 1d1c 08       		.uleb128 0x8
 7776 1d1d 3F0A0000 		.4byte	0xa3f
 7777 1d21 21       		.uleb128 0x21
 7778 1d22 17060000 		.4byte	.LASF200
 7779 1d26 01       		.byte	0x1
 7780 1d27 7B01     		.2byte	0x17b
 7781 1d29 1C1D0000 		.4byte	0x1d1c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 233


 7782 1d2d 05       		.uleb128 0x5
 7783 1d2e 03       		.byte	0x3
 7784 1d2f D0000000 		.4byte	pxOverflowDelayedTaskList
 7785 1d33 21       		.uleb128 0x21
 7786 1d34 F1030000 		.4byte	.LASF201
 7787 1d38 01       		.byte	0x1
 7788 1d39 7C01     		.2byte	0x17c
 7789 1d3b 1E020000 		.4byte	0x21e
 7790 1d3f 05       		.uleb128 0x5
 7791 1d40 03       		.byte	0x3
 7792 1d41 14000000 		.4byte	xPendingReadyList
 7793 1d45 21       		.uleb128 0x21
 7794 1d46 0E040000 		.4byte	.LASF202
 7795 1d4a 01       		.byte	0x1
 7796 1d4b 8001     		.2byte	0x180
 7797 1d4d 1E020000 		.4byte	0x21e
 7798 1d51 05       		.uleb128 0x5
 7799 1d52 03       		.byte	0x3
 7800 1d53 BC000000 		.4byte	xTasksWaitingTermination
 7801 1d57 21       		.uleb128 0x21
 7802 1d58 89010000 		.4byte	.LASF203
 7803 1d5c 01       		.byte	0x1
 7804 1d5d 8101     		.2byte	0x181
 7805 1d5f 691D0000 		.4byte	0x1d69
 7806 1d63 05       		.uleb128 0x5
 7807 1d64 03       		.byte	0x3
 7808 1d65 EC000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7809 1d69 08       		.uleb128 0x8
 7810 1d6a 25010000 		.4byte	0x125
 7811 1d6e 21       		.uleb128 0x21
 7812 1d6f C9050000 		.4byte	.LASF204
 7813 1d73 01       		.byte	0x1
 7814 1d74 8701     		.2byte	0x187
 7815 1d76 1E020000 		.4byte	0x21e
 7816 1d7a 05       		.uleb128 0x5
 7817 1d7b 03       		.byte	0x3
 7818 1d7c 00000000 		.4byte	xSuspendedTaskList
 7819 1d80 21       		.uleb128 0x21
 7820 1d81 0F0E0000 		.4byte	.LASF205
 7821 1d85 01       		.byte	0x1
 7822 1d86 8C01     		.2byte	0x18c
 7823 1d88 691D0000 		.4byte	0x1d69
 7824 1d8c 05       		.uleb128 0x5
 7825 1d8d 03       		.byte	0x3
 7826 1d8e D4000000 		.4byte	uxCurrentNumberOfTasks
 7827 1d92 21       		.uleb128 0x21
 7828 1d93 75050000 		.4byte	.LASF206
 7829 1d97 01       		.byte	0x1
 7830 1d98 8D01     		.2byte	0x18d
 7831 1d9a A41D0000 		.4byte	0x1da4
 7832 1d9e 05       		.uleb128 0x5
 7833 1d9f 03       		.byte	0x3
 7834 1da0 E8000000 		.4byte	xTickCount
 7835 1da4 08       		.uleb128 0x8
 7836 1da5 30010000 		.4byte	0x130
 7837 1da9 21       		.uleb128 0x21
 7838 1daa 18010000 		.4byte	.LASF207
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 234


 7839 1dae 01       		.byte	0x1
 7840 1daf 8E01     		.2byte	0x18e
 7841 1db1 691D0000 		.4byte	0x1d69
 7842 1db5 05       		.uleb128 0x5
 7843 1db6 03       		.byte	0x3
 7844 1db7 E4000000 		.4byte	uxTopReadyPriority
 7845 1dbb 21       		.uleb128 0x21
 7846 1dbc 44010000 		.4byte	.LASF208
 7847 1dc0 01       		.byte	0x1
 7848 1dc1 8F01     		.2byte	0x18f
 7849 1dc3 CD1D0000 		.4byte	0x1dcd
 7850 1dc7 05       		.uleb128 0x5
 7851 1dc8 03       		.byte	0x3
 7852 1dc9 DC000000 		.4byte	xSchedulerRunning
 7853 1dcd 08       		.uleb128 0x8
 7854 1dce 1A010000 		.4byte	0x11a
 7855 1dd2 21       		.uleb128 0x21
 7856 1dd3 990B0000 		.4byte	.LASF209
 7857 1dd7 01       		.byte	0x1
 7858 1dd8 9001     		.2byte	0x190
 7859 1dda 691D0000 		.4byte	0x1d69
 7860 1dde 05       		.uleb128 0x5
 7861 1ddf 03       		.byte	0x3
 7862 1de0 FC000000 		.4byte	uxPendedTicks
 7863 1de4 21       		.uleb128 0x21
 7864 1de5 260F0000 		.4byte	.LASF210
 7865 1de9 01       		.byte	0x1
 7866 1dea 9101     		.2byte	0x191
 7867 1dec CD1D0000 		.4byte	0x1dcd
 7868 1df0 05       		.uleb128 0x5
 7869 1df1 03       		.byte	0x3
 7870 1df2 00010000 		.4byte	xYieldPending
 7871 1df6 21       		.uleb128 0x21
 7872 1df7 D8090000 		.4byte	.LASF211
 7873 1dfb 01       		.byte	0x1
 7874 1dfc 9201     		.2byte	0x192
 7875 1dfe CD1D0000 		.4byte	0x1dcd
 7876 1e02 05       		.uleb128 0x5
 7877 1e03 03       		.byte	0x3
 7878 1e04 F8000000 		.4byte	xNumOfOverflows
 7879 1e08 21       		.uleb128 0x21
 7880 1e09 E7080000 		.4byte	.LASF212
 7881 1e0d 01       		.byte	0x1
 7882 1e0e 9301     		.2byte	0x193
 7883 1e10 25010000 		.4byte	0x125
 7884 1e14 05       		.uleb128 0x5
 7885 1e15 03       		.byte	0x3
 7886 1e16 E0000000 		.4byte	uxTaskNumber
 7887 1e1a 21       		.uleb128 0x21
 7888 1e1b C6070000 		.4byte	.LASF213
 7889 1e1f 01       		.byte	0x1
 7890 1e20 9401     		.2byte	0x194
 7891 1e22 A41D0000 		.4byte	0x1da4
 7892 1e26 05       		.uleb128 0x5
 7893 1e27 03       		.byte	0x3
 7894 1e28 2C000000 		.4byte	xNextTaskUnblockTime
 7895 1e2c 21       		.uleb128 0x21
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 235


 7896 1e2d F4090000 		.4byte	.LASF214
 7897 1e31 01       		.byte	0x1
 7898 1e32 9501     		.2byte	0x195
 7899 1e34 29020000 		.4byte	0x229
 7900 1e38 05       		.uleb128 0x5
 7901 1e39 03       		.byte	0x3
 7902 1e3a F4000000 		.4byte	xIdleTaskHandle
 7903 1e3e 21       		.uleb128 0x21
 7904 1e3f 7C0E0000 		.4byte	.LASF215
 7905 1e43 01       		.byte	0x1
 7906 1e44 9F01     		.2byte	0x19f
 7907 1e46 691D0000 		.4byte	0x1d69
 7908 1e4a 05       		.uleb128 0x5
 7909 1e4b 03       		.byte	0x3
 7910 1e4c F0000000 		.4byte	uxSchedulerSuspended
 7911 1e50 29       		.uleb128 0x29
 7912 1e51 020E0000 		.4byte	.LASF236
 7913 1e55 01       		.byte	0x1
 7914 1e56 7401     		.2byte	0x174
 7915 1e58 621E0000 		.4byte	0x1e62
 7916 1e5c 05       		.uleb128 0x5
 7917 1e5d 03       		.byte	0x3
 7918 1e5e 00000000 		.4byte	pxCurrentTCB
 7919 1e62 08       		.uleb128 0x8
 7920 1e63 BF040000 		.4byte	0x4bf
 7921 1e67 2A       		.uleb128 0x2a
 7922 1e68 340B0000 		.4byte	.LASF216
 7923 1e6c 340B0000 		.4byte	.LASF216
 7924 1e70 09       		.byte	0x9
 7925 1e71 AC       		.byte	0xac
 7926 1e72 2A       		.uleb128 0x2a
 7927 1e73 9D080000 		.4byte	.LASF217
 7928 1e77 9D080000 		.4byte	.LASF217
 7929 1e7b 0A       		.byte	0xa
 7930 1e7c 19       		.byte	0x19
 7931 1e7d 2B       		.uleb128 0x2b
 7932 1e7e 2C0A0000 		.4byte	.LASF218
 7933 1e82 2C0A0000 		.4byte	.LASF218
 7934 1e86 07       		.byte	0x7
 7935 1e87 8D01     		.2byte	0x18d
 7936 1e89 2A       		.uleb128 0x2a
 7937 1e8a DB070000 		.4byte	.LASF219
 7938 1e8e DB070000 		.4byte	.LASF219
 7939 1e92 09       		.byte	0x9
 7940 1e93 90       		.byte	0x90
 7941 1e94 2B       		.uleb128 0x2b
 7942 1e95 C00C0000 		.4byte	.LASF220
 7943 1e99 C00C0000 		.4byte	.LASF220
 7944 1e9d 07       		.byte	0x7
 7945 1e9e 8201     		.2byte	0x182
 7946 1ea0 2A       		.uleb128 0x2a
 7947 1ea1 48020000 		.4byte	.LASF221
 7948 1ea5 48020000 		.4byte	.LASF221
 7949 1ea9 06       		.byte	0x6
 7950 1eaa 84       		.byte	0x84
 7951 1eab 2B       		.uleb128 0x2b
 7952 1eac BA050000 		.4byte	.LASF222
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 236


 7953 1eb0 BA050000 		.4byte	.LASF222
 7954 1eb4 07       		.byte	0x7
 7955 1eb5 AF01     		.2byte	0x1af
 7956 1eb7 2A       		.uleb128 0x2a
 7957 1eb8 1B000000 		.4byte	.LASF223
 7958 1ebc 1B000000 		.4byte	.LASF223
 7959 1ec0 06       		.byte	0x6
 7960 1ec1 85       		.byte	0x85
 7961 1ec2 2A       		.uleb128 0x2a
 7962 1ec3 6F000000 		.4byte	.LASF224
 7963 1ec7 6F000000 		.4byte	.LASF224
 7964 1ecb 06       		.byte	0x6
 7965 1ecc 7A       		.byte	0x7a
 7966 1ecd 2B       		.uleb128 0x2b
 7967 1ece D3020000 		.4byte	.LASF225
 7968 1ed2 D3020000 		.4byte	.LASF225
 7969 1ed6 07       		.byte	0x7
 7970 1ed7 BE01     		.2byte	0x1be
 7971 1ed9 2B       		.uleb128 0x2b
 7972 1eda DE0C0000 		.4byte	.LASF226
 7973 1ede DE0C0000 		.4byte	.LASF226
 7974 1ee2 07       		.byte	0x7
 7975 1ee3 9A01     		.2byte	0x19a
 7976 1ee5 2A       		.uleb128 0x2a
 7977 1ee6 4E040000 		.4byte	.LASF227
 7978 1eea 4E040000 		.4byte	.LASF227
 7979 1eee 09       		.byte	0x9
 7980 1eef AB       		.byte	0xab
 7981 1ef0 2A       		.uleb128 0x2a
 7982 1ef1 34090000 		.4byte	.LASF228
 7983 1ef5 34090000 		.4byte	.LASF228
 7984 1ef9 06       		.byte	0x6
 7985 1efa 86       		.byte	0x86
 7986 1efb 2A       		.uleb128 0x2a
 7987 1efc 7A0D0000 		.4byte	.LASF229
 7988 1f00 7A0D0000 		.4byte	.LASF229
 7989 1f04 06       		.byte	0x6
 7990 1f05 87       		.byte	0x87
 7991 1f06 2A       		.uleb128 0x2a
 7992 1f07 2D000000 		.4byte	.LASF230
 7993 1f0b 2D000000 		.4byte	.LASF230
 7994 1f0f 09       		.byte	0x9
 7995 1f10 B5       		.byte	0xb5
 7996 1f11 2A       		.uleb128 0x2a
 7997 1f12 220B0000 		.4byte	.LASF231
 7998 1f16 220B0000 		.4byte	.LASF231
 7999 1f1a 09       		.byte	0x9
 8000 1f1b BC       		.byte	0xbc
 8001 1f1c 2B       		.uleb128 0x2b
 8002 1f1d 040A0000 		.4byte	.LASF232
 8003 1f21 040A0000 		.4byte	.LASF232
 8004 1f25 01       		.byte	0x1
 8005 1f26 AE01     		.2byte	0x1ae
 8006 1f28 00       		.byte	0
 8007              		.section	.debug_abbrev,"",%progbits
 8008              	.Ldebug_abbrev0:
 8009 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 237


 8010 0001 11       		.uleb128 0x11
 8011 0002 01       		.byte	0x1
 8012 0003 25       		.uleb128 0x25
 8013 0004 0E       		.uleb128 0xe
 8014 0005 13       		.uleb128 0x13
 8015 0006 0B       		.uleb128 0xb
 8016 0007 03       		.uleb128 0x3
 8017 0008 0E       		.uleb128 0xe
 8018 0009 1B       		.uleb128 0x1b
 8019 000a 0E       		.uleb128 0xe
 8020 000b 55       		.uleb128 0x55
 8021 000c 17       		.uleb128 0x17
 8022 000d 11       		.uleb128 0x11
 8023 000e 01       		.uleb128 0x1
 8024 000f 10       		.uleb128 0x10
 8025 0010 17       		.uleb128 0x17
 8026 0011 00       		.byte	0
 8027 0012 00       		.byte	0
 8028 0013 02       		.uleb128 0x2
 8029 0014 16       		.uleb128 0x16
 8030 0015 00       		.byte	0
 8031 0016 03       		.uleb128 0x3
 8032 0017 0E       		.uleb128 0xe
 8033 0018 3A       		.uleb128 0x3a
 8034 0019 0B       		.uleb128 0xb
 8035 001a 3B       		.uleb128 0x3b
 8036 001b 0B       		.uleb128 0xb
 8037 001c 49       		.uleb128 0x49
 8038 001d 13       		.uleb128 0x13
 8039 001e 00       		.byte	0
 8040 001f 00       		.byte	0
 8041 0020 03       		.uleb128 0x3
 8042 0021 24       		.uleb128 0x24
 8043 0022 00       		.byte	0
 8044 0023 0B       		.uleb128 0xb
 8045 0024 0B       		.uleb128 0xb
 8046 0025 3E       		.uleb128 0x3e
 8047 0026 0B       		.uleb128 0xb
 8048 0027 03       		.uleb128 0x3
 8049 0028 0E       		.uleb128 0xe
 8050 0029 00       		.byte	0
 8051 002a 00       		.byte	0
 8052 002b 04       		.uleb128 0x4
 8053 002c 24       		.uleb128 0x24
 8054 002d 00       		.byte	0
 8055 002e 0B       		.uleb128 0xb
 8056 002f 0B       		.uleb128 0xb
 8057 0030 3E       		.uleb128 0x3e
 8058 0031 0B       		.uleb128 0xb
 8059 0032 03       		.uleb128 0x3
 8060 0033 08       		.uleb128 0x8
 8061 0034 00       		.byte	0
 8062 0035 00       		.byte	0
 8063 0036 05       		.uleb128 0x5
 8064 0037 0F       		.uleb128 0xf
 8065 0038 00       		.byte	0
 8066 0039 0B       		.uleb128 0xb
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 238


 8067 003a 0B       		.uleb128 0xb
 8068 003b 00       		.byte	0
 8069 003c 00       		.byte	0
 8070 003d 06       		.uleb128 0x6
 8071 003e 0F       		.uleb128 0xf
 8072 003f 00       		.byte	0
 8073 0040 0B       		.uleb128 0xb
 8074 0041 0B       		.uleb128 0xb
 8075 0042 49       		.uleb128 0x49
 8076 0043 13       		.uleb128 0x13
 8077 0044 00       		.byte	0
 8078 0045 00       		.byte	0
 8079 0046 07       		.uleb128 0x7
 8080 0047 26       		.uleb128 0x26
 8081 0048 00       		.byte	0
 8082 0049 49       		.uleb128 0x49
 8083 004a 13       		.uleb128 0x13
 8084 004b 00       		.byte	0
 8085 004c 00       		.byte	0
 8086 004d 08       		.uleb128 0x8
 8087 004e 35       		.uleb128 0x35
 8088 004f 00       		.byte	0
 8089 0050 49       		.uleb128 0x49
 8090 0051 13       		.uleb128 0x13
 8091 0052 00       		.byte	0
 8092 0053 00       		.byte	0
 8093 0054 09       		.uleb128 0x9
 8094 0055 15       		.uleb128 0x15
 8095 0056 01       		.byte	0x1
 8096 0057 27       		.uleb128 0x27
 8097 0058 19       		.uleb128 0x19
 8098 0059 01       		.uleb128 0x1
 8099 005a 13       		.uleb128 0x13
 8100 005b 00       		.byte	0
 8101 005c 00       		.byte	0
 8102 005d 0A       		.uleb128 0xa
 8103 005e 05       		.uleb128 0x5
 8104 005f 00       		.byte	0
 8105 0060 49       		.uleb128 0x49
 8106 0061 13       		.uleb128 0x13
 8107 0062 00       		.byte	0
 8108 0063 00       		.byte	0
 8109 0064 0B       		.uleb128 0xb
 8110 0065 01       		.uleb128 0x1
 8111 0066 01       		.byte	0x1
 8112 0067 49       		.uleb128 0x49
 8113 0068 13       		.uleb128 0x13
 8114 0069 01       		.uleb128 0x1
 8115 006a 13       		.uleb128 0x13
 8116 006b 00       		.byte	0
 8117 006c 00       		.byte	0
 8118 006d 0C       		.uleb128 0xc
 8119 006e 21       		.uleb128 0x21
 8120 006f 00       		.byte	0
 8121 0070 49       		.uleb128 0x49
 8122 0071 13       		.uleb128 0x13
 8123 0072 2F       		.uleb128 0x2f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 239


 8124 0073 0B       		.uleb128 0xb
 8125 0074 00       		.byte	0
 8126 0075 00       		.byte	0
 8127 0076 0D       		.uleb128 0xd
 8128 0077 13       		.uleb128 0x13
 8129 0078 01       		.byte	0x1
 8130 0079 03       		.uleb128 0x3
 8131 007a 0E       		.uleb128 0xe
 8132 007b 0B       		.uleb128 0xb
 8133 007c 0B       		.uleb128 0xb
 8134 007d 3A       		.uleb128 0x3a
 8135 007e 0B       		.uleb128 0xb
 8136 007f 3B       		.uleb128 0x3b
 8137 0080 0B       		.uleb128 0xb
 8138 0081 01       		.uleb128 0x1
 8139 0082 13       		.uleb128 0x13
 8140 0083 00       		.byte	0
 8141 0084 00       		.byte	0
 8142 0085 0E       		.uleb128 0xe
 8143 0086 0D       		.uleb128 0xd
 8144 0087 00       		.byte	0
 8145 0088 03       		.uleb128 0x3
 8146 0089 0E       		.uleb128 0xe
 8147 008a 3A       		.uleb128 0x3a
 8148 008b 0B       		.uleb128 0xb
 8149 008c 3B       		.uleb128 0x3b
 8150 008d 0B       		.uleb128 0xb
 8151 008e 49       		.uleb128 0x49
 8152 008f 13       		.uleb128 0x13
 8153 0090 38       		.uleb128 0x38
 8154 0091 0B       		.uleb128 0xb
 8155 0092 00       		.byte	0
 8156 0093 00       		.byte	0
 8157 0094 0F       		.uleb128 0xf
 8158 0095 04       		.uleb128 0x4
 8159 0096 01       		.byte	0x1
 8160 0097 0B       		.uleb128 0xb
 8161 0098 0B       		.uleb128 0xb
 8162 0099 49       		.uleb128 0x49
 8163 009a 13       		.uleb128 0x13
 8164 009b 3A       		.uleb128 0x3a
 8165 009c 0B       		.uleb128 0xb
 8166 009d 3B       		.uleb128 0x3b
 8167 009e 0B       		.uleb128 0xb
 8168 009f 01       		.uleb128 0x1
 8169 00a0 13       		.uleb128 0x13
 8170 00a1 00       		.byte	0
 8171 00a2 00       		.byte	0
 8172 00a3 10       		.uleb128 0x10
 8173 00a4 28       		.uleb128 0x28
 8174 00a5 00       		.byte	0
 8175 00a6 03       		.uleb128 0x3
 8176 00a7 0E       		.uleb128 0xe
 8177 00a8 1C       		.uleb128 0x1c
 8178 00a9 0B       		.uleb128 0xb
 8179 00aa 00       		.byte	0
 8180 00ab 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 240


 8181 00ac 11       		.uleb128 0x11
 8182 00ad 13       		.uleb128 0x13
 8183 00ae 01       		.byte	0x1
 8184 00af 03       		.uleb128 0x3
 8185 00b0 0E       		.uleb128 0xe
 8186 00b1 0B       		.uleb128 0xb
 8187 00b2 0B       		.uleb128 0xb
 8188 00b3 3A       		.uleb128 0x3a
 8189 00b4 0B       		.uleb128 0xb
 8190 00b5 3B       		.uleb128 0x3b
 8191 00b6 05       		.uleb128 0x5
 8192 00b7 01       		.uleb128 0x1
 8193 00b8 13       		.uleb128 0x13
 8194 00b9 00       		.byte	0
 8195 00ba 00       		.byte	0
 8196 00bb 12       		.uleb128 0x12
 8197 00bc 0D       		.uleb128 0xd
 8198 00bd 00       		.byte	0
 8199 00be 03       		.uleb128 0x3
 8200 00bf 0E       		.uleb128 0xe
 8201 00c0 3A       		.uleb128 0x3a
 8202 00c1 0B       		.uleb128 0xb
 8203 00c2 3B       		.uleb128 0x3b
 8204 00c3 05       		.uleb128 0x5
 8205 00c4 49       		.uleb128 0x49
 8206 00c5 13       		.uleb128 0x13
 8207 00c6 38       		.uleb128 0x38
 8208 00c7 0B       		.uleb128 0xb
 8209 00c8 00       		.byte	0
 8210 00c9 00       		.byte	0
 8211 00ca 13       		.uleb128 0x13
 8212 00cb 16       		.uleb128 0x16
 8213 00cc 00       		.byte	0
 8214 00cd 03       		.uleb128 0x3
 8215 00ce 0E       		.uleb128 0xe
 8216 00cf 3A       		.uleb128 0x3a
 8217 00d0 0B       		.uleb128 0xb
 8218 00d1 3B       		.uleb128 0x3b
 8219 00d2 05       		.uleb128 0x5
 8220 00d3 49       		.uleb128 0x49
 8221 00d4 13       		.uleb128 0x13
 8222 00d5 00       		.byte	0
 8223 00d6 00       		.byte	0
 8224 00d7 14       		.uleb128 0x14
 8225 00d8 2E       		.uleb128 0x2e
 8226 00d9 01       		.byte	0x1
 8227 00da 03       		.uleb128 0x3
 8228 00db 0E       		.uleb128 0xe
 8229 00dc 3A       		.uleb128 0x3a
 8230 00dd 0B       		.uleb128 0xb
 8231 00de 3B       		.uleb128 0x3b
 8232 00df 05       		.uleb128 0x5
 8233 00e0 27       		.uleb128 0x27
 8234 00e1 19       		.uleb128 0x19
 8235 00e2 49       		.uleb128 0x49
 8236 00e3 13       		.uleb128 0x13
 8237 00e4 11       		.uleb128 0x11
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 241


 8238 00e5 01       		.uleb128 0x1
 8239 00e6 12       		.uleb128 0x12
 8240 00e7 06       		.uleb128 0x6
 8241 00e8 40       		.uleb128 0x40
 8242 00e9 18       		.uleb128 0x18
 8243 00ea 9742     		.uleb128 0x2117
 8244 00ec 19       		.uleb128 0x19
 8245 00ed 01       		.uleb128 0x1
 8246 00ee 13       		.uleb128 0x13
 8247 00ef 00       		.byte	0
 8248 00f0 00       		.byte	0
 8249 00f1 15       		.uleb128 0x15
 8250 00f2 05       		.uleb128 0x5
 8251 00f3 00       		.byte	0
 8252 00f4 03       		.uleb128 0x3
 8253 00f5 0E       		.uleb128 0xe
 8254 00f6 3A       		.uleb128 0x3a
 8255 00f7 0B       		.uleb128 0xb
 8256 00f8 3B       		.uleb128 0x3b
 8257 00f9 05       		.uleb128 0x5
 8258 00fa 49       		.uleb128 0x49
 8259 00fb 13       		.uleb128 0x13
 8260 00fc 02       		.uleb128 0x2
 8261 00fd 17       		.uleb128 0x17
 8262 00fe 00       		.byte	0
 8263 00ff 00       		.byte	0
 8264 0100 16       		.uleb128 0x16
 8265 0101 34       		.uleb128 0x34
 8266 0102 00       		.byte	0
 8267 0103 03       		.uleb128 0x3
 8268 0104 0E       		.uleb128 0xe
 8269 0105 3A       		.uleb128 0x3a
 8270 0106 0B       		.uleb128 0xb
 8271 0107 3B       		.uleb128 0x3b
 8272 0108 05       		.uleb128 0x5
 8273 0109 49       		.uleb128 0x49
 8274 010a 13       		.uleb128 0x13
 8275 010b 02       		.uleb128 0x2
 8276 010c 17       		.uleb128 0x17
 8277 010d 00       		.byte	0
 8278 010e 00       		.byte	0
 8279 010f 17       		.uleb128 0x17
 8280 0110 2E       		.uleb128 0x2e
 8281 0111 01       		.byte	0x1
 8282 0112 03       		.uleb128 0x3
 8283 0113 0E       		.uleb128 0xe
 8284 0114 3A       		.uleb128 0x3a
 8285 0115 0B       		.uleb128 0xb
 8286 0116 3B       		.uleb128 0x3b
 8287 0117 05       		.uleb128 0x5
 8288 0118 27       		.uleb128 0x27
 8289 0119 19       		.uleb128 0x19
 8290 011a 11       		.uleb128 0x11
 8291 011b 01       		.uleb128 0x1
 8292 011c 12       		.uleb128 0x12
 8293 011d 06       		.uleb128 0x6
 8294 011e 40       		.uleb128 0x40
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 242


 8295 011f 18       		.uleb128 0x18
 8296 0120 9742     		.uleb128 0x2117
 8297 0122 19       		.uleb128 0x19
 8298 0123 01       		.uleb128 0x1
 8299 0124 13       		.uleb128 0x13
 8300 0125 00       		.byte	0
 8301 0126 00       		.byte	0
 8302 0127 18       		.uleb128 0x18
 8303 0128 898201   		.uleb128 0x4109
 8304 012b 00       		.byte	0
 8305 012c 11       		.uleb128 0x11
 8306 012d 01       		.uleb128 0x1
 8307 012e 31       		.uleb128 0x31
 8308 012f 13       		.uleb128 0x13
 8309 0130 00       		.byte	0
 8310 0131 00       		.byte	0
 8311 0132 19       		.uleb128 0x19
 8312 0133 898201   		.uleb128 0x4109
 8313 0136 01       		.byte	0x1
 8314 0137 11       		.uleb128 0x11
 8315 0138 01       		.uleb128 0x1
 8316 0139 31       		.uleb128 0x31
 8317 013a 13       		.uleb128 0x13
 8318 013b 00       		.byte	0
 8319 013c 00       		.byte	0
 8320 013d 1A       		.uleb128 0x1a
 8321 013e 8A8201   		.uleb128 0x410a
 8322 0141 00       		.byte	0
 8323 0142 02       		.uleb128 0x2
 8324 0143 18       		.uleb128 0x18
 8325 0144 9142     		.uleb128 0x2111
 8326 0146 18       		.uleb128 0x18
 8327 0147 00       		.byte	0
 8328 0148 00       		.byte	0
 8329 0149 1B       		.uleb128 0x1b
 8330 014a 05       		.uleb128 0x5
 8331 014b 00       		.byte	0
 8332 014c 03       		.uleb128 0x3
 8333 014d 0E       		.uleb128 0xe
 8334 014e 3A       		.uleb128 0x3a
 8335 014f 0B       		.uleb128 0xb
 8336 0150 3B       		.uleb128 0x3b
 8337 0151 05       		.uleb128 0x5
 8338 0152 49       		.uleb128 0x49
 8339 0153 13       		.uleb128 0x13
 8340 0154 02       		.uleb128 0x2
 8341 0155 18       		.uleb128 0x18
 8342 0156 00       		.byte	0
 8343 0157 00       		.byte	0
 8344 0158 1C       		.uleb128 0x1c
 8345 0159 34       		.uleb128 0x34
 8346 015a 00       		.byte	0
 8347 015b 03       		.uleb128 0x3
 8348 015c 08       		.uleb128 0x8
 8349 015d 3A       		.uleb128 0x3a
 8350 015e 0B       		.uleb128 0xb
 8351 015f 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 243


 8352 0160 05       		.uleb128 0x5
 8353 0161 49       		.uleb128 0x49
 8354 0162 13       		.uleb128 0x13
 8355 0163 02       		.uleb128 0x2
 8356 0164 17       		.uleb128 0x17
 8357 0165 00       		.byte	0
 8358 0166 00       		.byte	0
 8359 0167 1D       		.uleb128 0x1d
 8360 0168 898201   		.uleb128 0x4109
 8361 016b 01       		.byte	0x1
 8362 016c 11       		.uleb128 0x11
 8363 016d 01       		.uleb128 0x1
 8364 016e 31       		.uleb128 0x31
 8365 016f 13       		.uleb128 0x13
 8366 0170 01       		.uleb128 0x1
 8367 0171 13       		.uleb128 0x13
 8368 0172 00       		.byte	0
 8369 0173 00       		.byte	0
 8370 0174 1E       		.uleb128 0x1e
 8371 0175 2E       		.uleb128 0x2e
 8372 0176 01       		.byte	0x1
 8373 0177 3F       		.uleb128 0x3f
 8374 0178 19       		.uleb128 0x19
 8375 0179 03       		.uleb128 0x3
 8376 017a 0E       		.uleb128 0xe
 8377 017b 3A       		.uleb128 0x3a
 8378 017c 0B       		.uleb128 0xb
 8379 017d 3B       		.uleb128 0x3b
 8380 017e 05       		.uleb128 0x5
 8381 017f 27       		.uleb128 0x27
 8382 0180 19       		.uleb128 0x19
 8383 0181 49       		.uleb128 0x49
 8384 0182 13       		.uleb128 0x13
 8385 0183 11       		.uleb128 0x11
 8386 0184 01       		.uleb128 0x1
 8387 0185 12       		.uleb128 0x12
 8388 0186 06       		.uleb128 0x6
 8389 0187 40       		.uleb128 0x40
 8390 0188 18       		.uleb128 0x18
 8391 0189 9742     		.uleb128 0x2117
 8392 018b 19       		.uleb128 0x19
 8393 018c 01       		.uleb128 0x1
 8394 018d 13       		.uleb128 0x13
 8395 018e 00       		.byte	0
 8396 018f 00       		.byte	0
 8397 0190 1F       		.uleb128 0x1f
 8398 0191 0B       		.uleb128 0xb
 8399 0192 01       		.byte	0x1
 8400 0193 11       		.uleb128 0x11
 8401 0194 01       		.uleb128 0x1
 8402 0195 12       		.uleb128 0x12
 8403 0196 06       		.uleb128 0x6
 8404 0197 01       		.uleb128 0x1
 8405 0198 13       		.uleb128 0x13
 8406 0199 00       		.byte	0
 8407 019a 00       		.byte	0
 8408 019b 20       		.uleb128 0x20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 244


 8409 019c 2E       		.uleb128 0x2e
 8410 019d 01       		.byte	0x1
 8411 019e 3F       		.uleb128 0x3f
 8412 019f 19       		.uleb128 0x19
 8413 01a0 03       		.uleb128 0x3
 8414 01a1 0E       		.uleb128 0xe
 8415 01a2 3A       		.uleb128 0x3a
 8416 01a3 0B       		.uleb128 0xb
 8417 01a4 3B       		.uleb128 0x3b
 8418 01a5 05       		.uleb128 0x5
 8419 01a6 27       		.uleb128 0x27
 8420 01a7 19       		.uleb128 0x19
 8421 01a8 11       		.uleb128 0x11
 8422 01a9 01       		.uleb128 0x1
 8423 01aa 12       		.uleb128 0x12
 8424 01ab 06       		.uleb128 0x6
 8425 01ac 40       		.uleb128 0x40
 8426 01ad 18       		.uleb128 0x18
 8427 01ae 9742     		.uleb128 0x2117
 8428 01b0 19       		.uleb128 0x19
 8429 01b1 01       		.uleb128 0x1
 8430 01b2 13       		.uleb128 0x13
 8431 01b3 00       		.byte	0
 8432 01b4 00       		.byte	0
 8433 01b5 21       		.uleb128 0x21
 8434 01b6 34       		.uleb128 0x34
 8435 01b7 00       		.byte	0
 8436 01b8 03       		.uleb128 0x3
 8437 01b9 0E       		.uleb128 0xe
 8438 01ba 3A       		.uleb128 0x3a
 8439 01bb 0B       		.uleb128 0xb
 8440 01bc 3B       		.uleb128 0x3b
 8441 01bd 05       		.uleb128 0x5
 8442 01be 49       		.uleb128 0x49
 8443 01bf 13       		.uleb128 0x13
 8444 01c0 02       		.uleb128 0x2
 8445 01c1 18       		.uleb128 0x18
 8446 01c2 00       		.byte	0
 8447 01c3 00       		.byte	0
 8448 01c4 22       		.uleb128 0x22
 8449 01c5 2E       		.uleb128 0x2e
 8450 01c6 00       		.byte	0
 8451 01c7 3F       		.uleb128 0x3f
 8452 01c8 19       		.uleb128 0x19
 8453 01c9 03       		.uleb128 0x3
 8454 01ca 0E       		.uleb128 0xe
 8455 01cb 3A       		.uleb128 0x3a
 8456 01cc 0B       		.uleb128 0xb
 8457 01cd 3B       		.uleb128 0x3b
 8458 01ce 05       		.uleb128 0x5
 8459 01cf 27       		.uleb128 0x27
 8460 01d0 19       		.uleb128 0x19
 8461 01d1 11       		.uleb128 0x11
 8462 01d2 01       		.uleb128 0x1
 8463 01d3 12       		.uleb128 0x12
 8464 01d4 06       		.uleb128 0x6
 8465 01d5 40       		.uleb128 0x40
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 245


 8466 01d6 18       		.uleb128 0x18
 8467 01d7 9742     		.uleb128 0x2117
 8468 01d9 19       		.uleb128 0x19
 8469 01da 00       		.byte	0
 8470 01db 00       		.byte	0
 8471 01dc 23       		.uleb128 0x23
 8472 01dd 34       		.uleb128 0x34
 8473 01de 00       		.byte	0
 8474 01df 03       		.uleb128 0x3
 8475 01e0 0E       		.uleb128 0xe
 8476 01e1 3A       		.uleb128 0x3a
 8477 01e2 0B       		.uleb128 0xb
 8478 01e3 3B       		.uleb128 0x3b
 8479 01e4 05       		.uleb128 0x5
 8480 01e5 49       		.uleb128 0x49
 8481 01e6 13       		.uleb128 0x13
 8482 01e7 1C       		.uleb128 0x1c
 8483 01e8 0B       		.uleb128 0xb
 8484 01e9 00       		.byte	0
 8485 01ea 00       		.byte	0
 8486 01eb 24       		.uleb128 0x24
 8487 01ec 2E       		.uleb128 0x2e
 8488 01ed 00       		.byte	0
 8489 01ee 3F       		.uleb128 0x3f
 8490 01ef 19       		.uleb128 0x19
 8491 01f0 03       		.uleb128 0x3
 8492 01f1 0E       		.uleb128 0xe
 8493 01f2 3A       		.uleb128 0x3a
 8494 01f3 0B       		.uleb128 0xb
 8495 01f4 3B       		.uleb128 0x3b
 8496 01f5 05       		.uleb128 0x5
 8497 01f6 27       		.uleb128 0x27
 8498 01f7 19       		.uleb128 0x19
 8499 01f8 49       		.uleb128 0x49
 8500 01f9 13       		.uleb128 0x13
 8501 01fa 11       		.uleb128 0x11
 8502 01fb 01       		.uleb128 0x1
 8503 01fc 12       		.uleb128 0x12
 8504 01fd 06       		.uleb128 0x6
 8505 01fe 40       		.uleb128 0x40
 8506 01ff 18       		.uleb128 0x18
 8507 0200 9742     		.uleb128 0x2117
 8508 0202 19       		.uleb128 0x19
 8509 0203 00       		.byte	0
 8510 0204 00       		.byte	0
 8511 0205 25       		.uleb128 0x25
 8512 0206 0B       		.uleb128 0xb
 8513 0207 01       		.byte	0x1
 8514 0208 55       		.uleb128 0x55
 8515 0209 17       		.uleb128 0x17
 8516 020a 00       		.byte	0
 8517 020b 00       		.byte	0
 8518 020c 26       		.uleb128 0x26
 8519 020d 0B       		.uleb128 0xb
 8520 020e 01       		.byte	0x1
 8521 020f 55       		.uleb128 0x55
 8522 0210 17       		.uleb128 0x17
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 246


 8523 0211 01       		.uleb128 0x1
 8524 0212 13       		.uleb128 0x13
 8525 0213 00       		.byte	0
 8526 0214 00       		.byte	0
 8527 0215 27       		.uleb128 0x27
 8528 0216 0B       		.uleb128 0xb
 8529 0217 01       		.byte	0x1
 8530 0218 11       		.uleb128 0x11
 8531 0219 01       		.uleb128 0x1
 8532 021a 12       		.uleb128 0x12
 8533 021b 06       		.uleb128 0x6
 8534 021c 00       		.byte	0
 8535 021d 00       		.byte	0
 8536 021e 28       		.uleb128 0x28
 8537 021f 2E       		.uleb128 0x2e
 8538 0220 01       		.byte	0x1
 8539 0221 03       		.uleb128 0x3
 8540 0222 0E       		.uleb128 0xe
 8541 0223 3A       		.uleb128 0x3a
 8542 0224 0B       		.uleb128 0xb
 8543 0225 3B       		.uleb128 0x3b
 8544 0226 05       		.uleb128 0x5
 8545 0227 27       		.uleb128 0x27
 8546 0228 19       		.uleb128 0x19
 8547 0229 8701     		.uleb128 0x87
 8548 022b 19       		.uleb128 0x19
 8549 022c 11       		.uleb128 0x11
 8550 022d 01       		.uleb128 0x1
 8551 022e 12       		.uleb128 0x12
 8552 022f 06       		.uleb128 0x6
 8553 0230 40       		.uleb128 0x40
 8554 0231 18       		.uleb128 0x18
 8555 0232 9742     		.uleb128 0x2117
 8556 0234 19       		.uleb128 0x19
 8557 0235 01       		.uleb128 0x1
 8558 0236 13       		.uleb128 0x13
 8559 0237 00       		.byte	0
 8560 0238 00       		.byte	0
 8561 0239 29       		.uleb128 0x29
 8562 023a 34       		.uleb128 0x34
 8563 023b 00       		.byte	0
 8564 023c 03       		.uleb128 0x3
 8565 023d 0E       		.uleb128 0xe
 8566 023e 3A       		.uleb128 0x3a
 8567 023f 0B       		.uleb128 0xb
 8568 0240 3B       		.uleb128 0x3b
 8569 0241 05       		.uleb128 0x5
 8570 0242 49       		.uleb128 0x49
 8571 0243 13       		.uleb128 0x13
 8572 0244 3F       		.uleb128 0x3f
 8573 0245 19       		.uleb128 0x19
 8574 0246 02       		.uleb128 0x2
 8575 0247 18       		.uleb128 0x18
 8576 0248 00       		.byte	0
 8577 0249 00       		.byte	0
 8578 024a 2A       		.uleb128 0x2a
 8579 024b 2E       		.uleb128 0x2e
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 247


 8580 024c 00       		.byte	0
 8581 024d 3F       		.uleb128 0x3f
 8582 024e 19       		.uleb128 0x19
 8583 024f 3C       		.uleb128 0x3c
 8584 0250 19       		.uleb128 0x19
 8585 0251 6E       		.uleb128 0x6e
 8586 0252 0E       		.uleb128 0xe
 8587 0253 03       		.uleb128 0x3
 8588 0254 0E       		.uleb128 0xe
 8589 0255 3A       		.uleb128 0x3a
 8590 0256 0B       		.uleb128 0xb
 8591 0257 3B       		.uleb128 0x3b
 8592 0258 0B       		.uleb128 0xb
 8593 0259 00       		.byte	0
 8594 025a 00       		.byte	0
 8595 025b 2B       		.uleb128 0x2b
 8596 025c 2E       		.uleb128 0x2e
 8597 025d 00       		.byte	0
 8598 025e 3F       		.uleb128 0x3f
 8599 025f 19       		.uleb128 0x19
 8600 0260 3C       		.uleb128 0x3c
 8601 0261 19       		.uleb128 0x19
 8602 0262 6E       		.uleb128 0x6e
 8603 0263 0E       		.uleb128 0xe
 8604 0264 03       		.uleb128 0x3
 8605 0265 0E       		.uleb128 0xe
 8606 0266 3A       		.uleb128 0x3a
 8607 0267 0B       		.uleb128 0xb
 8608 0268 3B       		.uleb128 0x3b
 8609 0269 05       		.uleb128 0x5
 8610 026a 00       		.byte	0
 8611 026b 00       		.byte	0
 8612 026c 00       		.byte	0
 8613              		.section	.debug_loc,"",%progbits
 8614              	.Ldebug_loc0:
 8615              	.LLST0:
 8616 0000 00000000 		.4byte	.LVL0
 8617 0004 28000000 		.4byte	.LVL1
 8618 0008 0100     		.2byte	0x1
 8619 000a 50       		.byte	0x50
 8620 000b 28000000 		.4byte	.LVL1
 8621 000f 2A000000 		.4byte	.LVL2
 8622 0013 0400     		.2byte	0x4
 8623 0015 F3       		.byte	0xf3
 8624 0016 01       		.uleb128 0x1
 8625 0017 50       		.byte	0x50
 8626 0018 9F       		.byte	0x9f
 8627 0019 2A000000 		.4byte	.LVL2
 8628 001d 2C000000 		.4byte	.LVL3
 8629 0021 0100     		.2byte	0x1
 8630 0023 50       		.byte	0x50
 8631 0024 2C000000 		.4byte	.LVL3
 8632 0028 2E000000 		.4byte	.LVL4
 8633 002c 0400     		.2byte	0x4
 8634 002e F3       		.byte	0xf3
 8635 002f 01       		.uleb128 0x1
 8636 0030 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 248


 8637 0031 9F       		.byte	0x9f
 8638 0032 2E000000 		.4byte	.LVL4
 8639 0036 30000000 		.4byte	.LVL5
 8640 003a 0100     		.2byte	0x1
 8641 003c 50       		.byte	0x50
 8642 003d 30000000 		.4byte	.LVL5
 8643 0041 32000000 		.4byte	.LVL6
 8644 0045 0400     		.2byte	0x4
 8645 0047 F3       		.byte	0xf3
 8646 0048 01       		.uleb128 0x1
 8647 0049 50       		.byte	0x50
 8648 004a 9F       		.byte	0x9f
 8649 004b 32000000 		.4byte	.LVL6
 8650 004f 34000000 		.4byte	.LVL7
 8651 0053 0100     		.2byte	0x1
 8652 0055 50       		.byte	0x50
 8653 0056 34000000 		.4byte	.LVL7
 8654 005a 3C000000 		.4byte	.LFE43
 8655 005e 0400     		.2byte	0x4
 8656 0060 F3       		.byte	0xf3
 8657 0061 01       		.uleb128 0x1
 8658 0062 50       		.byte	0x50
 8659 0063 9F       		.byte	0x9f
 8660 0064 00000000 		.4byte	0
 8661 0068 00000000 		.4byte	0
 8662              	.LLST1:
 8663 006c 00000000 		.4byte	.LVL0
 8664 0070 34000000 		.4byte	.LVL7
 8665 0074 0200     		.2byte	0x2
 8666 0076 30       		.byte	0x30
 8667 0077 9F       		.byte	0x9f
 8668 0078 34000000 		.4byte	.LVL7
 8669 007c 3C000000 		.4byte	.LFE43
 8670 0080 0100     		.2byte	0x1
 8671 0082 50       		.byte	0x50
 8672 0083 00000000 		.4byte	0
 8673 0087 00000000 		.4byte	0
 8674              	.LLST2:
 8675 008b 00000000 		.4byte	.LVL0
 8676 008f 28000000 		.4byte	.LVL1
 8677 0093 0100     		.2byte	0x1
 8678 0095 50       		.byte	0x50
 8679 0096 28000000 		.4byte	.LVL1
 8680 009a 2A000000 		.4byte	.LVL2
 8681 009e 0400     		.2byte	0x4
 8682 00a0 F3       		.byte	0xf3
 8683 00a1 01       		.uleb128 0x1
 8684 00a2 50       		.byte	0x50
 8685 00a3 9F       		.byte	0x9f
 8686 00a4 2A000000 		.4byte	.LVL2
 8687 00a8 2C000000 		.4byte	.LVL3
 8688 00ac 0100     		.2byte	0x1
 8689 00ae 50       		.byte	0x50
 8690 00af 2C000000 		.4byte	.LVL3
 8691 00b3 2E000000 		.4byte	.LVL4
 8692 00b7 0400     		.2byte	0x4
 8693 00b9 F3       		.byte	0xf3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 249


 8694 00ba 01       		.uleb128 0x1
 8695 00bb 50       		.byte	0x50
 8696 00bc 9F       		.byte	0x9f
 8697 00bd 2E000000 		.4byte	.LVL4
 8698 00c1 30000000 		.4byte	.LVL5
 8699 00c5 0100     		.2byte	0x1
 8700 00c7 50       		.byte	0x50
 8701 00c8 30000000 		.4byte	.LVL5
 8702 00cc 32000000 		.4byte	.LVL6
 8703 00d0 0400     		.2byte	0x4
 8704 00d2 F3       		.byte	0xf3
 8705 00d3 01       		.uleb128 0x1
 8706 00d4 50       		.byte	0x50
 8707 00d5 9F       		.byte	0x9f
 8708 00d6 32000000 		.4byte	.LVL6
 8709 00da 34000000 		.4byte	.LVL7
 8710 00de 0100     		.2byte	0x1
 8711 00e0 50       		.byte	0x50
 8712 00e1 34000000 		.4byte	.LVL7
 8713 00e5 3C000000 		.4byte	.LFE43
 8714 00e9 0400     		.2byte	0x4
 8715 00eb F3       		.byte	0xf3
 8716 00ec 01       		.uleb128 0x1
 8717 00ed 50       		.byte	0x50
 8718 00ee 9F       		.byte	0x9f
 8719 00ef 00000000 		.4byte	0
 8720 00f3 00000000 		.4byte	0
 8721              	.LLST3:
 8722 00f7 00000000 		.4byte	.LVL8
 8723 00fb 06000000 		.4byte	.LVL10
 8724 00ff 0100     		.2byte	0x1
 8725 0101 50       		.byte	0x50
 8726 0102 06000000 		.4byte	.LVL10
 8727 0106 12000000 		.4byte	.LVL13
 8728 010a 0100     		.2byte	0x1
 8729 010c 50       		.byte	0x50
 8730 010d 00000000 		.4byte	0
 8731 0111 00000000 		.4byte	0
 8732              	.LLST4:
 8733 0115 00000000 		.4byte	.LVL8
 8734 0119 04000000 		.4byte	.LVL9
 8735 011d 0200     		.2byte	0x2
 8736 011f 30       		.byte	0x30
 8737 0120 9F       		.byte	0x9f
 8738 0121 04000000 		.4byte	.LVL9
 8739 0125 14000000 		.4byte	.LFE68
 8740 0129 0100     		.2byte	0x1
 8741 012b 53       		.byte	0x53
 8742 012c 00000000 		.4byte	0
 8743 0130 00000000 		.4byte	0
 8744              	.LLST5:
 8745 0134 26000000 		.4byte	.LVL14
 8746 0138 28000000 		.4byte	.LVL15
 8747 013c 0100     		.2byte	0x1
 8748 013e 52       		.byte	0x52
 8749 013f 00000000 		.4byte	0
 8750 0143 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 250


 8751              	.LLST6:
 8752 0147 00000000 		.4byte	.LVL16
 8753 014b 06000000 		.4byte	.LVL17
 8754 014f 0100     		.2byte	0x1
 8755 0151 50       		.byte	0x50
 8756 0152 06000000 		.4byte	.LVL17
 8757 0156 10000000 		.4byte	.LVL20
 8758 015a 0100     		.2byte	0x1
 8759 015c 54       		.byte	0x54
 8760 015d 10000000 		.4byte	.LVL20
 8761 0161 12000000 		.4byte	.LFE70
 8762 0165 0400     		.2byte	0x4
 8763 0167 F3       		.byte	0xf3
 8764 0168 01       		.uleb128 0x1
 8765 0169 50       		.byte	0x50
 8766 016a 9F       		.byte	0x9f
 8767 016b 00000000 		.4byte	0
 8768 016f 00000000 		.4byte	0
 8769              	.LLST7:
 8770 0173 00000000 		.4byte	.LVL21
 8771 0177 16000000 		.4byte	.LVL24
 8772 017b 0100     		.2byte	0x1
 8773 017d 50       		.byte	0x50
 8774 017e 16000000 		.4byte	.LVL24
 8775 0182 A6000000 		.4byte	.LVL42
 8776 0186 0200     		.2byte	0x2
 8777 0188 7D       		.byte	0x7d
 8778 0189 00       		.sleb128 0
 8779 018a A6000000 		.4byte	.LVL42
 8780 018e AC000000 		.4byte	.LFE33
 8781 0192 0200     		.2byte	0x2
 8782 0194 91       		.byte	0x91
 8783 0195 60       		.sleb128 -32
 8784 0196 00000000 		.4byte	0
 8785 019a 00000000 		.4byte	0
 8786              	.LLST8:
 8787 019e 00000000 		.4byte	.LVL21
 8788 01a2 14000000 		.4byte	.LVL23
 8789 01a6 0100     		.2byte	0x1
 8790 01a8 51       		.byte	0x51
 8791 01a9 14000000 		.4byte	.LVL23
 8792 01ad A6000000 		.4byte	.LVL43
 8793 01b1 0100     		.2byte	0x1
 8794 01b3 55       		.byte	0x55
 8795 01b4 A6000000 		.4byte	.LVL43
 8796 01b8 AC000000 		.4byte	.LFE33
 8797 01bc 0400     		.2byte	0x4
 8798 01be F3       		.byte	0xf3
 8799 01bf 01       		.uleb128 0x1
 8800 01c0 51       		.byte	0x51
 8801 01c1 9F       		.byte	0x9f
 8802 01c2 00000000 		.4byte	0
 8803 01c6 00000000 		.4byte	0
 8804              	.LLST9:
 8805 01ca 00000000 		.4byte	.LVL21
 8806 01ce 12000000 		.4byte	.LVL22
 8807 01d2 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 251


 8808 01d4 52       		.byte	0x52
 8809 01d5 12000000 		.4byte	.LVL22
 8810 01d9 2C000000 		.4byte	.LVL28
 8811 01dd 0100     		.2byte	0x1
 8812 01df 57       		.byte	0x57
 8813 01e0 2C000000 		.4byte	.LVL28
 8814 01e4 AC000000 		.4byte	.LFE33
 8815 01e8 0400     		.2byte	0x4
 8816 01ea F3       		.byte	0xf3
 8817 01eb 01       		.uleb128 0x1
 8818 01ec 52       		.byte	0x52
 8819 01ed 9F       		.byte	0x9f
 8820 01ee 00000000 		.4byte	0
 8821 01f2 00000000 		.4byte	0
 8822              	.LLST10:
 8823 01f6 00000000 		.4byte	.LVL21
 8824 01fa 19000000 		.4byte	.LVL25-1
 8825 01fe 0100     		.2byte	0x1
 8826 0200 53       		.byte	0x53
 8827 0201 19000000 		.4byte	.LVL25-1
 8828 0205 AC000000 		.4byte	.LFE33
 8829 0209 0200     		.2byte	0x2
 8830 020b 91       		.byte	0x91
 8831 020c 64       		.sleb128 -28
 8832 020d 00000000 		.4byte	0
 8833 0211 00000000 		.4byte	0
 8834              	.LLST11:
 8835 0215 00000000 		.4byte	.LVL21
 8836 0219 52000000 		.4byte	.LVL33
 8837 021d 0200     		.2byte	0x2
 8838 021f 91       		.byte	0x91
 8839 0220 00       		.sleb128 0
 8840 0221 52000000 		.4byte	.LVL33
 8841 0225 6E000000 		.4byte	.LVL36
 8842 0229 0100     		.2byte	0x1
 8843 022b 54       		.byte	0x54
 8844 022c 00000000 		.4byte	0
 8845 0230 00000000 		.4byte	0
 8846              	.LLST12:
 8847 0234 26000000 		.4byte	.LVL26
 8848 0238 2A000000 		.4byte	.LVL27
 8849 023c 0100     		.2byte	0x1
 8850 023e 53       		.byte	0x53
 8851 023f 2A000000 		.4byte	.LVL27
 8852 0243 2C000000 		.4byte	.LVL28
 8853 0247 0C00     		.2byte	0xc
 8854 0249 77       		.byte	0x77
 8855 024a FFFFFFFF 		.sleb128 1073741823
 8855      03
 8856 024f 32       		.byte	0x32
 8857 0250 24       		.byte	0x24
 8858 0251 7C       		.byte	0x7c
 8859 0252 00       		.sleb128 0
 8860 0253 22       		.byte	0x22
 8861 0254 9F       		.byte	0x9f
 8862 0255 2C000000 		.4byte	.LVL28
 8863 0259 2E000000 		.4byte	.LVL29
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 252


 8864 025d 0100     		.2byte	0x1
 8865 025f 53       		.byte	0x53
 8866 0260 2E000000 		.4byte	.LVL29
 8867 0264 A6000000 		.4byte	.LVL44
 8868 0268 0100     		.2byte	0x1
 8869 026a 57       		.byte	0x57
 8870 026b 00000000 		.4byte	0
 8871 026f 00000000 		.4byte	0
 8872              	.LLST13:
 8873 0273 2C000000 		.4byte	.LVL28
 8874 0277 30000000 		.4byte	.LVL30
 8875 027b 0200     		.2byte	0x2
 8876 027d 30       		.byte	0x30
 8877 027e 9F       		.byte	0x9f
 8878 027f 30000000 		.4byte	.LVL30
 8879 0283 4A000000 		.4byte	.LVL32
 8880 0287 0100     		.2byte	0x1
 8881 0289 53       		.byte	0x53
 8882 028a 72000000 		.4byte	.LVL37
 8883 028e 76000000 		.4byte	.LVL38
 8884 0292 0200     		.2byte	0x2
 8885 0294 30       		.byte	0x30
 8886 0295 9F       		.byte	0x9f
 8887 0296 76000000 		.4byte	.LVL38
 8888 029a 8E000000 		.4byte	.LVL40
 8889 029e 0100     		.2byte	0x1
 8890 02a0 52       		.byte	0x52
 8891 02a1 00000000 		.4byte	0
 8892 02a5 00000000 		.4byte	0
 8893              	.LLST14:
 8894 02a9 02000000 		.4byte	.LVL45
 8895 02ad 06000000 		.4byte	.LVL46
 8896 02b1 0200     		.2byte	0x2
 8897 02b3 30       		.byte	0x30
 8898 02b4 9F       		.byte	0x9f
 8899 02b5 06000000 		.4byte	.LVL46
 8900 02b9 1E000000 		.4byte	.LVL49
 8901 02bd 0100     		.2byte	0x1
 8902 02bf 54       		.byte	0x54
 8903 02c0 00000000 		.4byte	0
 8904 02c4 00000000 		.4byte	0
 8905              	.LLST15:
 8906 02c8 00000000 		.4byte	.LVL55
 8907 02cc 07000000 		.4byte	.LVL56-1
 8908 02d0 0100     		.2byte	0x1
 8909 02d2 50       		.byte	0x50
 8910 02d3 07000000 		.4byte	.LVL56-1
 8911 02d7 80000000 		.4byte	.LVL61
 8912 02db 0100     		.2byte	0x1
 8913 02dd 54       		.byte	0x54
 8914 02de 80000000 		.4byte	.LVL61
 8915 02e2 8C000000 		.4byte	.LFE34
 8916 02e6 0400     		.2byte	0x4
 8917 02e8 F3       		.byte	0xf3
 8918 02e9 01       		.uleb128 0x1
 8919 02ea 50       		.byte	0x50
 8920 02eb 9F       		.byte	0x9f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 253


 8921 02ec 00000000 		.4byte	0
 8922 02f0 00000000 		.4byte	0
 8923              	.LLST16:
 8924 02f4 00000000 		.4byte	.LVL62
 8925 02f8 0C000000 		.4byte	.LVL64
 8926 02fc 0100     		.2byte	0x1
 8927 02fe 50       		.byte	0x50
 8928 02ff 0C000000 		.4byte	.LVL64
 8929 0303 2A000000 		.4byte	.LVL67
 8930 0307 0100     		.2byte	0x1
 8931 0309 54       		.byte	0x54
 8932 030a 2A000000 		.4byte	.LVL67
 8933 030e 64000000 		.4byte	.LFE84
 8934 0312 0400     		.2byte	0x4
 8935 0314 F3       		.byte	0xf3
 8936 0315 01       		.uleb128 0x1
 8937 0316 50       		.byte	0x50
 8938 0317 9F       		.byte	0x9f
 8939 0318 00000000 		.4byte	0
 8940 031c 00000000 		.4byte	0
 8941              	.LLST17:
 8942 0320 00000000 		.4byte	.LVL62
 8943 0324 11000000 		.4byte	.LVL65-1
 8944 0328 0100     		.2byte	0x1
 8945 032a 51       		.byte	0x51
 8946 032b 11000000 		.4byte	.LVL65-1
 8947 032f 44000000 		.4byte	.LVL69
 8948 0333 0100     		.2byte	0x1
 8949 0335 55       		.byte	0x55
 8950 0336 44000000 		.4byte	.LVL69
 8951 033a 64000000 		.4byte	.LFE84
 8952 033e 0400     		.2byte	0x4
 8953 0340 F3       		.byte	0xf3
 8954 0341 01       		.uleb128 0x1
 8955 0342 51       		.byte	0x51
 8956 0343 9F       		.byte	0x9f
 8957 0344 00000000 		.4byte	0
 8958 0348 00000000 		.4byte	0
 8959              	.LLST18:
 8960 034c 2A000000 		.4byte	.LVL67
 8961 0350 5A000000 		.4byte	.LVL71
 8962 0354 0100     		.2byte	0x1
 8963 0356 54       		.byte	0x54
 8964 0357 00000000 		.4byte	0
 8965 035b 00000000 		.4byte	0
 8966              	.LLST19:
 8967 035f 0A000000 		.4byte	.LVL63
 8968 0363 5A000000 		.4byte	.LVL72
 8969 0367 0100     		.2byte	0x1
 8970 0369 56       		.byte	0x56
 8971 036a 00000000 		.4byte	0
 8972 036e 00000000 		.4byte	0
 8973              	.LLST20:
 8974 0372 00000000 		.4byte	.LVL73
 8975 0376 0E000000 		.4byte	.LVL74
 8976 037a 0100     		.2byte	0x1
 8977 037c 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 254


 8978 037d 0E000000 		.4byte	.LVL74
 8979 0381 5E000000 		.4byte	.LFE32
 8980 0385 0200     		.2byte	0x2
 8981 0387 91       		.byte	0x91
 8982 0388 60       		.sleb128 -32
 8983 0389 00000000 		.4byte	0
 8984 038d 00000000 		.4byte	0
 8985              	.LLST21:
 8986 0391 00000000 		.4byte	.LVL73
 8987 0395 11000000 		.4byte	.LVL75-1
 8988 0399 0100     		.2byte	0x1
 8989 039b 51       		.byte	0x51
 8990 039c 11000000 		.4byte	.LVL75-1
 8991 03a0 5E000000 		.4byte	.LFE32
 8992 03a4 0200     		.2byte	0x2
 8993 03a6 91       		.byte	0x91
 8994 03a7 64       		.sleb128 -28
 8995 03a8 00000000 		.4byte	0
 8996 03ac 00000000 		.4byte	0
 8997              	.LLST22:
 8998 03b0 00000000 		.4byte	.LVL73
 8999 03b4 11000000 		.4byte	.LVL75-1
 9000 03b8 0100     		.2byte	0x1
 9001 03ba 52       		.byte	0x52
 9002 03bb 11000000 		.4byte	.LVL75-1
 9003 03bf 5E000000 		.4byte	.LFE32
 9004 03c3 0400     		.2byte	0x4
 9005 03c5 F3       		.byte	0xf3
 9006 03c6 01       		.uleb128 0x1
 9007 03c7 52       		.byte	0x52
 9008 03c8 9F       		.byte	0x9f
 9009 03c9 00000000 		.4byte	0
 9010 03cd 00000000 		.4byte	0
 9011              	.LLST23:
 9012 03d1 00000000 		.4byte	.LVL73
 9013 03d5 11000000 		.4byte	.LVL75-1
 9014 03d9 0100     		.2byte	0x1
 9015 03db 53       		.byte	0x53
 9016 03dc 11000000 		.4byte	.LVL75-1
 9017 03e0 5C000000 		.4byte	.LVL90
 9018 03e4 0100     		.2byte	0x1
 9019 03e6 57       		.byte	0x57
 9020 03e7 5C000000 		.4byte	.LVL90
 9021 03eb 5E000000 		.4byte	.LFE32
 9022 03ef 0400     		.2byte	0x4
 9023 03f1 F3       		.byte	0xf3
 9024 03f2 01       		.uleb128 0x1
 9025 03f3 53       		.byte	0x53
 9026 03f4 9F       		.byte	0x9f
 9027 03f5 00000000 		.4byte	0
 9028 03f9 00000000 		.4byte	0
 9029              	.LLST24:
 9030 03fd 1E000000 		.4byte	.LVL79
 9031 0401 26000000 		.4byte	.LVL80
 9032 0405 0100     		.2byte	0x1
 9033 0407 50       		.byte	0x50
 9034 0408 26000000 		.4byte	.LVL80
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 255


 9035 040c 2C000000 		.4byte	.LVL82
 9036 0410 0100     		.2byte	0x1
 9037 0412 55       		.byte	0x55
 9038 0413 2E000000 		.4byte	.LVL83
 9039 0417 5C000000 		.4byte	.LVL88
 9040 041b 0100     		.2byte	0x1
 9041 041d 55       		.byte	0x55
 9042 041e 00000000 		.4byte	0
 9043 0422 00000000 		.4byte	0
 9044              	.LLST25:
 9045 0426 52000000 		.4byte	.LVL85
 9046 042a 56000000 		.4byte	.LVL86
 9047 042e 0200     		.2byte	0x2
 9048 0430 31       		.byte	0x31
 9049 0431 9F       		.byte	0x9f
 9050 0432 5A000000 		.4byte	.LVL87
 9051 0436 5E000000 		.4byte	.LFE32
 9052 043a 0100     		.2byte	0x1
 9053 043c 50       		.byte	0x50
 9054 043d 00000000 		.4byte	0
 9055 0441 00000000 		.4byte	0
 9056              	.LLST26:
 9057 0445 14000000 		.4byte	.LVL76
 9058 0449 18000000 		.4byte	.LVL77
 9059 044d 0100     		.2byte	0x1
 9060 044f 50       		.byte	0x50
 9061 0450 18000000 		.4byte	.LVL77
 9062 0454 2C000000 		.4byte	.LVL82
 9063 0458 0100     		.2byte	0x1
 9064 045a 56       		.byte	0x56
 9065 045b 2C000000 		.4byte	.LVL82
 9066 045f 2E000000 		.4byte	.LVL83
 9067 0463 0100     		.2byte	0x1
 9068 0465 50       		.byte	0x50
 9069 0466 2E000000 		.4byte	.LVL83
 9070 046a 5C000000 		.4byte	.LVL89
 9071 046e 0100     		.2byte	0x1
 9072 0470 56       		.byte	0x56
 9073 0471 00000000 		.4byte	0
 9074 0475 00000000 		.4byte	0
 9075              	.LLST27:
 9076 0479 00000000 		.4byte	.LVL91
 9077 047d 07000000 		.4byte	.LVL92-1
 9078 0481 0100     		.2byte	0x1
 9079 0483 50       		.byte	0x50
 9080 0484 07000000 		.4byte	.LVL92-1
 9081 0488 10000000 		.4byte	.LVL93
 9082 048c 0100     		.2byte	0x1
 9083 048e 54       		.byte	0x54
 9084 048f 00000000 		.4byte	0
 9085 0493 00000000 		.4byte	0
 9086              	.LLST28:
 9087 0497 10000000 		.4byte	.LVL93
 9088 049b 72000000 		.4byte	.LVL101
 9089 049f 0100     		.2byte	0x1
 9090 04a1 54       		.byte	0x54
 9091 04a2 72000000 		.4byte	.LVL101
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 256


 9092 04a6 72000000 		.4byte	.LVL102
 9093 04aa 0300     		.2byte	0x3
 9094 04ac 75       		.byte	0x75
 9095 04ad 7C       		.sleb128 -4
 9096 04ae 9F       		.byte	0x9f
 9097 04af 00000000 		.4byte	0
 9098 04b3 00000000 		.4byte	0
 9099              	.LLST29:
 9100 04b7 00000000 		.4byte	.LVL103
 9101 04bb 0F000000 		.4byte	.LVL105-1
 9102 04bf 0100     		.2byte	0x1
 9103 04c1 50       		.byte	0x50
 9104 04c2 0F000000 		.4byte	.LVL105-1
 9105 04c6 46000000 		.4byte	.LVL108
 9106 04ca 0100     		.2byte	0x1
 9107 04cc 55       		.byte	0x55
 9108 04cd 46000000 		.4byte	.LVL108
 9109 04d1 48000000 		.4byte	.LVL109
 9110 04d5 0100     		.2byte	0x1
 9111 04d7 50       		.byte	0x50
 9112 04d8 48000000 		.4byte	.LVL109
 9113 04dc 5C000000 		.4byte	.LVL112
 9114 04e0 0100     		.2byte	0x1
 9115 04e2 55       		.byte	0x55
 9116 04e3 5C000000 		.4byte	.LVL112
 9117 04e7 68000000 		.4byte	.LFE38
 9118 04eb 0400     		.2byte	0x4
 9119 04ed F3       		.byte	0xf3
 9120 04ee 01       		.uleb128 0x1
 9121 04ef 50       		.byte	0x50
 9122 04f0 9F       		.byte	0x9f
 9123 04f1 00000000 		.4byte	0
 9124 04f5 00000000 		.4byte	0
 9125              	.LLST30:
 9126 04f9 12000000 		.4byte	.LVL106
 9127 04fd 46000000 		.4byte	.LVL108
 9128 0501 0100     		.2byte	0x1
 9129 0503 54       		.byte	0x54
 9130 0504 4A000000 		.4byte	.LVL110
 9131 0508 5C000000 		.4byte	.LVL111
 9132 050c 0100     		.2byte	0x1
 9133 050e 54       		.byte	0x54
 9134 050f 00000000 		.4byte	0
 9135 0513 00000000 		.4byte	0
 9136              	.LLST31:
 9137 0517 04000000 		.4byte	.LVL104
 9138 051b 0F000000 		.4byte	.LVL105-1
 9139 051f 0100     		.2byte	0x1
 9140 0521 50       		.byte	0x50
 9141 0522 0F000000 		.4byte	.LVL105-1
 9142 0526 46000000 		.4byte	.LVL108
 9143 052a 0100     		.2byte	0x1
 9144 052c 55       		.byte	0x55
 9145 052d 46000000 		.4byte	.LVL108
 9146 0531 48000000 		.4byte	.LVL109
 9147 0535 0100     		.2byte	0x1
 9148 0537 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 257


 9149 0538 48000000 		.4byte	.LVL109
 9150 053c 5C000000 		.4byte	.LVL112
 9151 0540 0100     		.2byte	0x1
 9152 0542 55       		.byte	0x55
 9153 0543 5C000000 		.4byte	.LVL112
 9154 0547 68000000 		.4byte	.LFE38
 9155 054b 0400     		.2byte	0x4
 9156 054d F3       		.byte	0xf3
 9157 054e 01       		.uleb128 0x1
 9158 054f 50       		.byte	0x50
 9159 0550 9F       		.byte	0x9f
 9160 0551 00000000 		.4byte	0
 9161 0555 00000000 		.4byte	0
 9162              	.LLST32:
 9163 0559 00000000 		.4byte	.LVL113
 9164 055d 07000000 		.4byte	.LVL114-1
 9165 0561 0100     		.2byte	0x1
 9166 0563 50       		.byte	0x50
 9167 0564 07000000 		.4byte	.LVL114-1
 9168 0568 10000000 		.4byte	.LVL115
 9169 056c 0100     		.2byte	0x1
 9170 056e 54       		.byte	0x54
 9171 056f 00000000 		.4byte	0
 9172 0573 00000000 		.4byte	0
 9173              	.LLST33:
 9174 0577 10000000 		.4byte	.LVL115
 9175 057b 12000000 		.4byte	.LVL116
 9176 057f 0100     		.2byte	0x1
 9177 0581 54       		.byte	0x54
 9178 0582 00000000 		.4byte	0
 9179 0586 00000000 		.4byte	0
 9180              	.LLST34:
 9181 058a 12000000 		.4byte	.LVL116
 9182 058e 18000000 		.4byte	.LVL118
 9183 0592 0100     		.2byte	0x1
 9184 0594 54       		.byte	0x54
 9185 0595 18000000 		.4byte	.LVL118
 9186 0599 20000000 		.4byte	.LFE39
 9187 059d 0100     		.2byte	0x1
 9188 059f 50       		.byte	0x50
 9189 05a0 00000000 		.4byte	0
 9190 05a4 00000000 		.4byte	0
 9191              	.LLST35:
 9192 05a8 00000000 		.4byte	.LVL119
 9193 05ac 07000000 		.4byte	.LVL120-1
 9194 05b0 0100     		.2byte	0x1
 9195 05b2 50       		.byte	0x50
 9196 05b3 07000000 		.4byte	.LVL120-1
 9197 05b7 10000000 		.4byte	.LVL121
 9198 05bb 0100     		.2byte	0x1
 9199 05bd 54       		.byte	0x54
 9200 05be 00000000 		.4byte	0
 9201 05c2 00000000 		.4byte	0
 9202              	.LLST36:
 9203 05c6 10000000 		.4byte	.LVL121
 9204 05ca 12000000 		.4byte	.LVL122
 9205 05ce 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 258


 9206 05d0 54       		.byte	0x54
 9207 05d1 00000000 		.4byte	0
 9208 05d5 00000000 		.4byte	0
 9209              	.LLST37:
 9210 05d9 12000000 		.4byte	.LVL122
 9211 05dd 18000000 		.4byte	.LVL124
 9212 05e1 0100     		.2byte	0x1
 9213 05e3 54       		.byte	0x54
 9214 05e4 18000000 		.4byte	.LVL124
 9215 05e8 20000000 		.4byte	.LFE40
 9216 05ec 0100     		.2byte	0x1
 9217 05ee 50       		.byte	0x50
 9218 05ef 00000000 		.4byte	0
 9219 05f3 00000000 		.4byte	0
 9220              	.LLST38:
 9221 05f7 08000000 		.4byte	.LVL120
 9222 05fb 15000000 		.4byte	.LVL123-1
 9223 05ff 0100     		.2byte	0x1
 9224 0601 50       		.byte	0x50
 9225 0602 00000000 		.4byte	0
 9226 0606 00000000 		.4byte	0
 9227              	.LLST39:
 9228 060a 00000000 		.4byte	.LVL125
 9229 060e 0F000000 		.4byte	.LVL128-1
 9230 0612 0100     		.2byte	0x1
 9231 0614 50       		.byte	0x50
 9232 0615 0F000000 		.4byte	.LVL128-1
 9233 0619 18000000 		.4byte	.LVL129
 9234 061d 0100     		.2byte	0x1
 9235 061f 54       		.byte	0x54
 9236 0620 00000000 		.4byte	0
 9237 0624 00000000 		.4byte	0
 9238              	.LLST40:
 9239 0628 00000000 		.4byte	.LVL125
 9240 062c 0C000000 		.4byte	.LVL127
 9241 0630 0100     		.2byte	0x1
 9242 0632 51       		.byte	0x51
 9243 0633 0C000000 		.4byte	.LVL127
 9244 0637 60000000 		.4byte	.LVL134
 9245 063b 0100     		.2byte	0x1
 9246 063d 55       		.byte	0x55
 9247 063e 60000000 		.4byte	.LVL134
 9248 0642 85000000 		.4byte	.LVL136-1
 9249 0646 0300     		.2byte	0x3
 9250 0648 74       		.byte	0x74
 9251 0649 C400     		.sleb128 68
 9252 064b 00000000 		.4byte	0
 9253 064f 00000000 		.4byte	0
 9254              	.LLST41:
 9255 0653 18000000 		.4byte	.LVL129
 9256 0657 B2000000 		.4byte	.LVL140
 9257 065b 0100     		.2byte	0x1
 9258 065d 54       		.byte	0x54
 9259 065e 00000000 		.4byte	0
 9260 0662 00000000 		.4byte	0
 9261              	.LLST42:
 9262 0666 1A000000 		.4byte	.LVL130
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 259


 9263 066a 58000000 		.4byte	.LVL133
 9264 066e 0100     		.2byte	0x1
 9265 0670 52       		.byte	0x52
 9266 0671 00000000 		.4byte	0
 9267 0675 00000000 		.4byte	0
 9268              	.LLST43:
 9269 0679 4E000000 		.4byte	.LVL132
 9270 067d 66000000 		.4byte	.LVL135
 9271 0681 0100     		.2byte	0x1
 9272 0683 53       		.byte	0x53
 9273 0684 00000000 		.4byte	0
 9274 0688 00000000 		.4byte	0
 9275              	.LLST44:
 9276 068c 06000000 		.4byte	.LVL126
 9277 0690 4C000000 		.4byte	.LVL131
 9278 0694 0200     		.2byte	0x2
 9279 0696 30       		.byte	0x30
 9280 0697 9F       		.byte	0x9f
 9281 0698 4C000000 		.4byte	.LVL131
 9282 069c AE000000 		.4byte	.LVL138
 9283 06a0 0100     		.2byte	0x1
 9284 06a2 56       		.byte	0x56
 9285 06a3 00000000 		.4byte	0
 9286 06a7 00000000 		.4byte	0
 9287              	.LLST45:
 9288 06ab 00000000 		.4byte	.LVL141
 9289 06af 11000000 		.4byte	.LVL143-1
 9290 06b3 0100     		.2byte	0x1
 9291 06b5 50       		.byte	0x50
 9292 06b6 11000000 		.4byte	.LVL143-1
 9293 06ba 58000000 		.4byte	.LVL149
 9294 06be 0100     		.2byte	0x1
 9295 06c0 54       		.byte	0x54
 9296 06c1 58000000 		.4byte	.LVL149
 9297 06c5 64000000 		.4byte	.LFE44
 9298 06c9 0400     		.2byte	0x4
 9299 06cb F3       		.byte	0xf3
 9300 06cc 01       		.uleb128 0x1
 9301 06cd 50       		.byte	0x50
 9302 06ce 9F       		.byte	0x9f
 9303 06cf 00000000 		.4byte	0
 9304 06d3 00000000 		.4byte	0
 9305              	.LLST46:
 9306 06d7 04000000 		.4byte	.LVL142
 9307 06db 11000000 		.4byte	.LVL143-1
 9308 06df 0100     		.2byte	0x1
 9309 06e1 50       		.byte	0x50
 9310 06e2 11000000 		.4byte	.LVL143-1
 9311 06e6 58000000 		.4byte	.LVL149
 9312 06ea 0100     		.2byte	0x1
 9313 06ec 54       		.byte	0x54
 9314 06ed 58000000 		.4byte	.LVL149
 9315 06f1 64000000 		.4byte	.LFE44
 9316 06f5 0400     		.2byte	0x4
 9317 06f7 F3       		.byte	0xf3
 9318 06f8 01       		.uleb128 0x1
 9319 06f9 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 260


 9320 06fa 9F       		.byte	0x9f
 9321 06fb 00000000 		.4byte	0
 9322 06ff 00000000 		.4byte	0
 9323              	.LLST47:
 9324 0703 00000000 		.4byte	.LVL150
 9325 0707 07000000 		.4byte	.LVL152-1
 9326 070b 0100     		.2byte	0x1
 9327 070d 50       		.byte	0x50
 9328 070e 07000000 		.4byte	.LVL152-1
 9329 0712 72000000 		.4byte	.LVL163
 9330 0716 0100     		.2byte	0x1
 9331 0718 54       		.byte	0x54
 9332 0719 72000000 		.4byte	.LVL163
 9333 071d 7C000000 		.4byte	.LFE45
 9334 0721 0400     		.2byte	0x4
 9335 0723 F3       		.byte	0xf3
 9336 0724 01       		.uleb128 0x1
 9337 0725 50       		.byte	0x50
 9338 0726 9F       		.byte	0x9f
 9339 0727 00000000 		.4byte	0
 9340 072b 00000000 		.4byte	0
 9341              	.LLST48:
 9342 072f 04000000 		.4byte	.LVL151
 9343 0733 2E000000 		.4byte	.LVL156
 9344 0737 0200     		.2byte	0x2
 9345 0739 30       		.byte	0x30
 9346 073a 9F       		.byte	0x9f
 9347 073b 2E000000 		.4byte	.LVL156
 9348 073f 58000000 		.4byte	.LVL159
 9349 0743 0100     		.2byte	0x1
 9350 0745 56       		.byte	0x56
 9351 0746 58000000 		.4byte	.LVL159
 9352 074a 6A000000 		.4byte	.LVL161
 9353 074e 0200     		.2byte	0x2
 9354 0750 30       		.byte	0x30
 9355 0751 9F       		.byte	0x9f
 9356 0752 6A000000 		.4byte	.LVL161
 9357 0756 72000000 		.4byte	.LVL165
 9358 075a 0100     		.2byte	0x1
 9359 075c 56       		.byte	0x56
 9360 075d 72000000 		.4byte	.LVL165
 9361 0761 7C000000 		.4byte	.LFE45
 9362 0765 0100     		.2byte	0x1
 9363 0767 50       		.byte	0x50
 9364 0768 00000000 		.4byte	0
 9365 076c 00000000 		.4byte	0
 9366              	.LLST49:
 9367 0770 04000000 		.4byte	.LVL151
 9368 0774 07000000 		.4byte	.LVL152-1
 9369 0778 0100     		.2byte	0x1
 9370 077a 50       		.byte	0x50
 9371 077b 07000000 		.4byte	.LVL152-1
 9372 077f 72000000 		.4byte	.LVL163
 9373 0783 0100     		.2byte	0x1
 9374 0785 54       		.byte	0x54
 9375 0786 72000000 		.4byte	.LVL163
 9376 078a 7C000000 		.4byte	.LFE45
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 261


 9377 078e 0400     		.2byte	0x4
 9378 0790 F3       		.byte	0xf3
 9379 0791 01       		.uleb128 0x1
 9380 0792 50       		.byte	0x50
 9381 0793 9F       		.byte	0x9f
 9382 0794 00000000 		.4byte	0
 9383 0798 00000000 		.4byte	0
 9384              	.LLST50:
 9385 079c 0A000000 		.4byte	.LVL153
 9386 07a0 0C000000 		.4byte	.LVL154
 9387 07a4 0100     		.2byte	0x1
 9388 07a6 50       		.byte	0x50
 9389 07a7 0C000000 		.4byte	.LVL154
 9390 07ab 72000000 		.4byte	.LVL164
 9391 07af 0100     		.2byte	0x1
 9392 07b1 55       		.byte	0x55
 9393 07b2 00000000 		.4byte	0
 9394 07b6 00000000 		.4byte	0
 9395              	.LLST51:
 9396 07ba 18000000 		.4byte	.LVL166
 9397 07be 33000000 		.4byte	.LVL167-1
 9398 07c2 0100     		.2byte	0x1
 9399 07c4 50       		.byte	0x50
 9400 07c5 00000000 		.4byte	0
 9401 07c9 00000000 		.4byte	0
 9402              	.LLST52:
 9403 07cd 00000000 		.4byte	.LVL172
 9404 07d1 08000000 		.4byte	.LVL173
 9405 07d5 0100     		.2byte	0x1
 9406 07d7 50       		.byte	0x50
 9407 07d8 00000000 		.4byte	0
 9408 07dc 00000000 		.4byte	0
 9409              	.LLST53:
 9410 07e0 08000000 		.4byte	.LVL173
 9411 07e4 0A000000 		.4byte	.LVL174
 9412 07e8 0100     		.2byte	0x1
 9413 07ea 50       		.byte	0x50
 9414 07eb 0A000000 		.4byte	.LVL174
 9415 07ef 10000000 		.4byte	.LFE53
 9416 07f3 0300     		.2byte	0x3
 9417 07f5 70       		.byte	0x70
 9418 07f6 4C       		.sleb128 -52
 9419 07f7 9F       		.byte	0x9f
 9420 07f8 00000000 		.4byte	0
 9421 07fc 00000000 		.4byte	0
 9422              	.LLST54:
 9423 0800 36000000 		.4byte	.LVL179
 9424 0804 3A000000 		.4byte	.LVL181
 9425 0808 0100     		.2byte	0x1
 9426 080a 56       		.byte	0x56
 9427 080b 62000000 		.4byte	.LVL183
 9428 080f B2000000 		.4byte	.LVL188
 9429 0813 0100     		.2byte	0x1
 9430 0815 56       		.byte	0x56
 9431 0816 00000000 		.4byte	0
 9432 081a 00000000 		.4byte	0
 9433              	.LLST55:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 262


 9434 081e 64000000 		.4byte	.LVL184
 9435 0822 75000000 		.4byte	.LVL185-1
 9436 0826 0100     		.2byte	0x1
 9437 0828 53       		.byte	0x53
 9438 0829 00000000 		.4byte	0
 9439 082d 00000000 		.4byte	0
 9440              	.LLST56:
 9441 0831 02000000 		.4byte	.LVL175
 9442 0835 36000000 		.4byte	.LVL179
 9443 0839 0200     		.2byte	0x2
 9444 083b 30       		.byte	0x30
 9445 083c 9F       		.byte	0x9f
 9446 083d 36000000 		.4byte	.LVL179
 9447 0841 38000000 		.4byte	.LVL180
 9448 0845 0100     		.2byte	0x1
 9449 0847 55       		.byte	0x55
 9450 0848 3A000000 		.4byte	.LVL181
 9451 084c 3C000000 		.4byte	.LVL182
 9452 0850 0200     		.2byte	0x2
 9453 0852 30       		.byte	0x30
 9454 0853 9F       		.byte	0x9f
 9455 0854 3C000000 		.4byte	.LVL182
 9456 0858 B2000000 		.4byte	.LVL188
 9457 085c 0100     		.2byte	0x1
 9458 085e 55       		.byte	0x55
 9459 085f B2000000 		.4byte	.LVL188
 9460 0863 BC000000 		.4byte	.LVL189
 9461 0867 0200     		.2byte	0x2
 9462 0869 30       		.byte	0x30
 9463 086a 9F       		.byte	0x9f
 9464 086b BC000000 		.4byte	.LVL189
 9465 086f C8000000 		.4byte	.LVL191
 9466 0873 0100     		.2byte	0x1
 9467 0875 55       		.byte	0x55
 9468 0876 C8000000 		.4byte	.LVL191
 9469 087a D8000000 		.4byte	.LFE54
 9470 087e 0100     		.2byte	0x1
 9471 0880 50       		.byte	0x50
 9472 0881 00000000 		.4byte	0
 9473 0885 00000000 		.4byte	0
 9474              	.LLST57:
 9475 0889 10000000 		.4byte	.LVL176
 9476 088d B2000000 		.4byte	.LVL188
 9477 0891 0100     		.2byte	0x1
 9478 0893 57       		.byte	0x57
 9479 0894 00000000 		.4byte	0
 9480 0898 00000000 		.4byte	0
 9481              	.LLST58:
 9482 089c 1A000000 		.4byte	.LVL177
 9483 08a0 29000000 		.4byte	.LVL178-1
 9484 08a4 0100     		.2byte	0x1
 9485 08a6 51       		.byte	0x51
 9486 08a7 00000000 		.4byte	0
 9487 08ab 00000000 		.4byte	0
 9488              	.LLST59:
 9489 08af 02000000 		.4byte	.LVL192
 9490 08b3 20000000 		.4byte	.LVL194
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 263


 9491 08b7 0200     		.2byte	0x2
 9492 08b9 30       		.byte	0x30
 9493 08ba 9F       		.byte	0x9f
 9494 08bb 20000000 		.4byte	.LVL194
 9495 08bf 6A000000 		.4byte	.LVL199
 9496 08c3 0100     		.2byte	0x1
 9497 08c5 54       		.byte	0x54
 9498 08c6 6A000000 		.4byte	.LVL199
 9499 08ca 6C000000 		.4byte	.LVL200
 9500 08ce 0200     		.2byte	0x2
 9501 08d0 30       		.byte	0x30
 9502 08d1 9F       		.byte	0x9f
 9503 08d2 6C000000 		.4byte	.LVL200
 9504 08d6 80000000 		.4byte	.LVL202
 9505 08da 0100     		.2byte	0x1
 9506 08dc 54       		.byte	0x54
 9507 08dd AE000000 		.4byte	.LVL208
 9508 08e1 B2000000 		.4byte	.LVL209
 9509 08e5 0200     		.2byte	0x2
 9510 08e7 30       		.byte	0x30
 9511 08e8 9F       		.byte	0x9f
 9512 08e9 00000000 		.4byte	0
 9513 08ed 00000000 		.4byte	0
 9514              	.LLST60:
 9515 08f1 02000000 		.4byte	.LVL192
 9516 08f5 A6000000 		.4byte	.LVL205
 9517 08f9 0200     		.2byte	0x2
 9518 08fb 30       		.byte	0x30
 9519 08fc 9F       		.byte	0x9f
 9520 08fd A6000000 		.4byte	.LVL205
 9521 0901 AE000000 		.4byte	.LVL208
 9522 0905 0200     		.2byte	0x2
 9523 0907 31       		.byte	0x31
 9524 0908 9F       		.byte	0x9f
 9525 0909 AE000000 		.4byte	.LVL208
 9526 090d B4000000 		.4byte	.LVL210
 9527 0911 0200     		.2byte	0x2
 9528 0913 30       		.byte	0x30
 9529 0914 9F       		.byte	0x9f
 9530 0915 B4000000 		.4byte	.LVL210
 9531 0919 BA000000 		.4byte	.LVL212
 9532 091d 0100     		.2byte	0x1
 9533 091f 54       		.byte	0x54
 9534 0920 BA000000 		.4byte	.LVL212
 9535 0924 C8000000 		.4byte	.LFE49
 9536 0928 0100     		.2byte	0x1
 9537 092a 50       		.byte	0x50
 9538 092b 00000000 		.4byte	0
 9539 092f 00000000 		.4byte	0
 9540              	.LLST61:
 9541 0933 80000000 		.4byte	.LVL202
 9542 0937 AC000000 		.4byte	.LVL207
 9543 093b 0100     		.2byte	0x1
 9544 093d 54       		.byte	0x54
 9545 093e B2000000 		.4byte	.LVL209
 9546 0942 B4000000 		.4byte	.LVL210
 9547 0946 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 264


 9548 0948 54       		.byte	0x54
 9549 0949 00000000 		.4byte	0
 9550 094d 00000000 		.4byte	0
 9551              	.LLST62:
 9552 0951 00000000 		.4byte	.LVL213
 9553 0955 09000000 		.4byte	.LVL215-1
 9554 0959 0100     		.2byte	0x1
 9555 095b 50       		.byte	0x50
 9556 095c 09000000 		.4byte	.LVL215-1
 9557 0960 56000000 		.4byte	.LVL225
 9558 0964 0100     		.2byte	0x1
 9559 0966 55       		.byte	0x55
 9560 0967 56000000 		.4byte	.LVL225
 9561 096b 5C000000 		.4byte	.LFE36
 9562 096f 0400     		.2byte	0x4
 9563 0971 F3       		.byte	0xf3
 9564 0972 01       		.uleb128 0x1
 9565 0973 50       		.byte	0x50
 9566 0974 9F       		.byte	0x9f
 9567 0975 00000000 		.4byte	0
 9568 0979 00000000 		.4byte	0
 9569              	.LLST63:
 9570 097d 00000000 		.4byte	.LVL213
 9571 0981 09000000 		.4byte	.LVL215-1
 9572 0985 0100     		.2byte	0x1
 9573 0987 51       		.byte	0x51
 9574 0988 09000000 		.4byte	.LVL215-1
 9575 098c 56000000 		.4byte	.LVL224
 9576 0990 0100     		.2byte	0x1
 9577 0992 54       		.byte	0x54
 9578 0993 56000000 		.4byte	.LVL224
 9579 0997 5C000000 		.4byte	.LFE36
 9580 099b 0400     		.2byte	0x4
 9581 099d F3       		.byte	0xf3
 9582 099e 01       		.uleb128 0x1
 9583 099f 51       		.byte	0x51
 9584 09a0 9F       		.byte	0x9f
 9585 09a1 00000000 		.4byte	0
 9586 09a5 00000000 		.4byte	0
 9587              	.LLST64:
 9588 09a9 12000000 		.4byte	.LVL217
 9589 09ad 46000000 		.4byte	.LVL220
 9590 09b1 0100     		.2byte	0x1
 9591 09b3 51       		.byte	0x51
 9592 09b4 46000000 		.4byte	.LVL220
 9593 09b8 49000000 		.4byte	.LVL221-1
 9594 09bc 0200     		.2byte	0x2
 9595 09be 75       		.byte	0x75
 9596 09bf 00       		.sleb128 0
 9597 09c0 00000000 		.4byte	0
 9598 09c4 00000000 		.4byte	0
 9599              	.LLST65:
 9600 09c8 4E000000 		.4byte	.LVL222
 9601 09cc 55000000 		.4byte	.LVL223-1
 9602 09d0 0100     		.2byte	0x1
 9603 09d2 50       		.byte	0x50
 9604 09d3 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 265


 9605 09d7 00000000 		.4byte	0
 9606              	.LLST66:
 9607 09db 06000000 		.4byte	.LVL214
 9608 09df 3C000000 		.4byte	.LVL218
 9609 09e3 0200     		.2byte	0x2
 9610 09e5 30       		.byte	0x30
 9611 09e6 9F       		.byte	0x9f
 9612 09e7 3C000000 		.4byte	.LVL218
 9613 09eb 49000000 		.4byte	.LVL221-1
 9614 09ef 0100     		.2byte	0x1
 9615 09f1 53       		.byte	0x53
 9616 09f2 00000000 		.4byte	0
 9617 09f6 00000000 		.4byte	0
 9618              	.LLST67:
 9619 09fa 0E000000 		.4byte	.LVL216
 9620 09fe 44000000 		.4byte	.LVL219
 9621 0a02 0100     		.2byte	0x1
 9622 0a04 50       		.byte	0x50
 9623 0a05 00000000 		.4byte	0
 9624 0a09 00000000 		.4byte	0
 9625              	.LLST68:
 9626 0a0d 00000000 		.4byte	.LVL226
 9627 0a11 09000000 		.4byte	.LVL228-1
 9628 0a15 0100     		.2byte	0x1
 9629 0a17 50       		.byte	0x50
 9630 0a18 09000000 		.4byte	.LVL228-1
 9631 0a1c 18000000 		.4byte	.LVL231
 9632 0a20 0100     		.2byte	0x1
 9633 0a22 54       		.byte	0x54
 9634 0a23 18000000 		.4byte	.LVL231
 9635 0a27 1A000000 		.4byte	.LVL232
 9636 0a2b 0100     		.2byte	0x1
 9637 0a2d 50       		.byte	0x50
 9638 0a2e 1A000000 		.4byte	.LVL232
 9639 0a32 22000000 		.4byte	.LVL234
 9640 0a36 0100     		.2byte	0x1
 9641 0a38 54       		.byte	0x54
 9642 0a39 22000000 		.4byte	.LVL234
 9643 0a3d 24000000 		.4byte	.LFE37
 9644 0a41 0400     		.2byte	0x4
 9645 0a43 F3       		.byte	0xf3
 9646 0a44 01       		.uleb128 0x1
 9647 0a45 50       		.byte	0x50
 9648 0a46 9F       		.byte	0x9f
 9649 0a47 00000000 		.4byte	0
 9650 0a4b 00000000 		.4byte	0
 9651              	.LLST69:
 9652 0a4f 04000000 		.4byte	.LVL227
 9653 0a53 16000000 		.4byte	.LVL230
 9654 0a57 0200     		.2byte	0x2
 9655 0a59 30       		.byte	0x30
 9656 0a5a 9F       		.byte	0x9f
 9657 0a5b 16000000 		.4byte	.LVL230
 9658 0a5f 18000000 		.4byte	.LVL231
 9659 0a63 0100     		.2byte	0x1
 9660 0a65 50       		.byte	0x50
 9661 0a66 18000000 		.4byte	.LVL231
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 266


 9662 0a6a 1A000000 		.4byte	.LVL232
 9663 0a6e 0200     		.2byte	0x2
 9664 0a70 30       		.byte	0x30
 9665 0a71 9F       		.byte	0x9f
 9666 0a72 1A000000 		.4byte	.LVL232
 9667 0a76 21000000 		.4byte	.LVL233-1
 9668 0a7a 0100     		.2byte	0x1
 9669 0a7c 50       		.byte	0x50
 9670 0a7d 00000000 		.4byte	0
 9671 0a81 00000000 		.4byte	0
 9672              	.LLST70:
 9673 0a85 0C000000 		.4byte	.LVL236
 9674 0a89 1A000000 		.4byte	.LVL239
 9675 0a8d 0800     		.2byte	0x8
 9676 0a8f 74       		.byte	0x74
 9677 0a90 00       		.sleb128 0
 9678 0a91 30       		.byte	0x30
 9679 0a92 29       		.byte	0x29
 9680 0a93 08       		.byte	0x8
 9681 0a94 FF       		.byte	0xff
 9682 0a95 1A       		.byte	0x1a
 9683 0a96 9F       		.byte	0x9f
 9684 0a97 00000000 		.4byte	0
 9685 0a9b 00000000 		.4byte	0
 9686              	.LLST71:
 9687 0a9f 1E000000 		.4byte	.LVL240
 9688 0aa3 3A000000 		.4byte	.LVL243
 9689 0aa7 0100     		.2byte	0x1
 9690 0aa9 55       		.byte	0x55
 9691 0aaa 00000000 		.4byte	0
 9692 0aae 00000000 		.4byte	0
 9693              	.LLST72:
 9694 0ab2 00000000 		.4byte	.LVL244
 9695 0ab6 02000000 		.4byte	.LVL245
 9696 0aba 0100     		.2byte	0x1
 9697 0abc 50       		.byte	0x50
 9698 0abd 02000000 		.4byte	.LVL245
 9699 0ac1 08000000 		.4byte	.LFE63
 9700 0ac5 0400     		.2byte	0x4
 9701 0ac7 F3       		.byte	0xf3
 9702 0ac8 01       		.uleb128 0x1
 9703 0ac9 50       		.byte	0x50
 9704 0aca 9F       		.byte	0x9f
 9705 0acb 00000000 		.4byte	0
 9706 0acf 00000000 		.4byte	0
 9707              	.LLST73:
 9708 0ad3 1E000000 		.4byte	.LVL247
 9709 0ad7 36000000 		.4byte	.LVL248
 9710 0adb 0100     		.2byte	0x1
 9711 0add 53       		.byte	0x53
 9712 0ade 00000000 		.4byte	0
 9713 0ae2 00000000 		.4byte	0
 9714              	.LLST74:
 9715 0ae6 1E000000 		.4byte	.LVL247
 9716 0aea A0000000 		.4byte	.LVL253
 9717 0aee 0600     		.2byte	0x6
 9718 0af0 9E       		.byte	0x9e
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 267


 9719 0af1 04       		.uleb128 0x4
 9720 0af2 A5A5A5A5 		.4byte	0xa5a5a5a5
 9721 0af6 00000000 		.4byte	0
 9722 0afa 00000000 		.4byte	0
 9723              	.LLST75:
 9724 0afe 4A000000 		.4byte	.LVL250
 9725 0b02 A0000000 		.4byte	.LVL253
 9726 0b06 0100     		.2byte	0x1
 9727 0b08 53       		.byte	0x53
 9728 0b09 00000000 		.4byte	0
 9729 0b0d 00000000 		.4byte	0
 9730              	.LLST76:
 9731 0b11 5E000000 		.4byte	.LVL252
 9732 0b15 A0000000 		.4byte	.LVL253
 9733 0b19 0B00     		.2byte	0xb
 9734 0b1b 73       		.byte	0x73
 9735 0b1c 00       		.sleb128 0
 9736 0b1d 44       		.byte	0x44
 9737 0b1e 1E       		.byte	0x1e
 9738 0b1f 03       		.byte	0x3
 9739 0b20 30000000 		.4byte	pxReadyTasksLists
 9740 0b24 22       		.byte	0x22
 9741 0b25 9F       		.byte	0x9f
 9742 0b26 00000000 		.4byte	0
 9743 0b2a 00000000 		.4byte	0
 9744              	.LLST77:
 9745 0b2e 00000000 		.4byte	.LVL254
 9746 0b32 07000000 		.4byte	.LVL255-1
 9747 0b36 0100     		.2byte	0x1
 9748 0b38 50       		.byte	0x50
 9749 0b39 07000000 		.4byte	.LVL255-1
 9750 0b3d 10000000 		.4byte	.LVL256
 9751 0b41 0100     		.2byte	0x1
 9752 0b43 54       		.byte	0x54
 9753 0b44 00000000 		.4byte	0
 9754 0b48 00000000 		.4byte	0
 9755              	.LLST78:
 9756 0b4c 10000000 		.4byte	.LVL256
 9757 0b50 74000000 		.4byte	.LVL266
 9758 0b54 0100     		.2byte	0x1
 9759 0b56 54       		.byte	0x54
 9760 0b57 74000000 		.4byte	.LVL266
 9761 0b5b 74000000 		.4byte	.LVL267
 9762 0b5f 0300     		.2byte	0x3
 9763 0b61 75       		.byte	0x75
 9764 0b62 7C       		.sleb128 -4
 9765 0b63 9F       		.byte	0x9f
 9766 0b64 00000000 		.4byte	0
 9767 0b68 00000000 		.4byte	0
 9768              	.LLST79:
 9769 0b6c 00000000 		.4byte	.LVL268
 9770 0b70 0D000000 		.4byte	.LVL270-1
 9771 0b74 0100     		.2byte	0x1
 9772 0b76 50       		.byte	0x50
 9773 0b77 0D000000 		.4byte	.LVL270-1
 9774 0b7b 1C000000 		.4byte	.LFE56
 9775 0b7f 0400     		.2byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 268


 9776 0b81 F3       		.byte	0xf3
 9777 0b82 01       		.uleb128 0x1
 9778 0b83 50       		.byte	0x50
 9779 0b84 9F       		.byte	0x9f
 9780 0b85 00000000 		.4byte	0
 9781 0b89 00000000 		.4byte	0
 9782              	.LLST80:
 9783 0b8d 00000000 		.4byte	.LVL268
 9784 0b91 08000000 		.4byte	.LVL269
 9785 0b95 0100     		.2byte	0x1
 9786 0b97 51       		.byte	0x51
 9787 0b98 08000000 		.4byte	.LVL269
 9788 0b9c 16000000 		.4byte	.LVL272
 9789 0ba0 0100     		.2byte	0x1
 9790 0ba2 54       		.byte	0x54
 9791 0ba3 16000000 		.4byte	.LVL272
 9792 0ba7 1C000000 		.4byte	.LFE56
 9793 0bab 0400     		.2byte	0x4
 9794 0bad F3       		.byte	0xf3
 9795 0bae 01       		.uleb128 0x1
 9796 0baf 51       		.byte	0x51
 9797 0bb0 9F       		.byte	0x9f
 9798 0bb1 00000000 		.4byte	0
 9799 0bb5 00000000 		.4byte	0
 9800              	.LLST81:
 9801 0bb9 00000000 		.4byte	.LVL273
 9802 0bbd 17000000 		.4byte	.LVL276-1
 9803 0bc1 0100     		.2byte	0x1
 9804 0bc3 50       		.byte	0x50
 9805 0bc4 17000000 		.4byte	.LVL276-1
 9806 0bc8 28000000 		.4byte	.LFE57
 9807 0bcc 0400     		.2byte	0x4
 9808 0bce F3       		.byte	0xf3
 9809 0bcf 01       		.uleb128 0x1
 9810 0bd0 50       		.byte	0x50
 9811 0bd1 9F       		.byte	0x9f
 9812 0bd2 00000000 		.4byte	0
 9813 0bd6 00000000 		.4byte	0
 9814              	.LLST82:
 9815 0bda 00000000 		.4byte	.LVL273
 9816 0bde 0E000000 		.4byte	.LVL275
 9817 0be2 0100     		.2byte	0x1
 9818 0be4 51       		.byte	0x51
 9819 0be5 0E000000 		.4byte	.LVL275
 9820 0be9 28000000 		.4byte	.LFE57
 9821 0bed 0400     		.2byte	0x4
 9822 0bef F3       		.byte	0xf3
 9823 0bf0 01       		.uleb128 0x1
 9824 0bf1 51       		.byte	0x51
 9825 0bf2 9F       		.byte	0x9f
 9826 0bf3 00000000 		.4byte	0
 9827 0bf7 00000000 		.4byte	0
 9828              	.LLST83:
 9829 0bfb 00000000 		.4byte	.LVL273
 9830 0bff 08000000 		.4byte	.LVL274
 9831 0c03 0100     		.2byte	0x1
 9832 0c05 52       		.byte	0x52
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 269


 9833 0c06 08000000 		.4byte	.LVL274
 9834 0c0a 20000000 		.4byte	.LVL278
 9835 0c0e 0100     		.2byte	0x1
 9836 0c10 54       		.byte	0x54
 9837 0c11 20000000 		.4byte	.LVL278
 9838 0c15 28000000 		.4byte	.LFE57
 9839 0c19 0400     		.2byte	0x4
 9840 0c1b F3       		.byte	0xf3
 9841 0c1c 01       		.uleb128 0x1
 9842 0c1d 52       		.byte	0x52
 9843 0c1e 9F       		.byte	0x9f
 9844 0c1f 00000000 		.4byte	0
 9845 0c23 00000000 		.4byte	0
 9846              	.LLST84:
 9847 0c27 00000000 		.4byte	.LVL279
 9848 0c2b 0C000000 		.4byte	.LVL281
 9849 0c2f 0100     		.2byte	0x1
 9850 0c31 50       		.byte	0x50
 9851 0c32 0C000000 		.4byte	.LVL281
 9852 0c36 74000000 		.4byte	.LFE58
 9853 0c3a 0400     		.2byte	0x4
 9854 0c3c F3       		.byte	0xf3
 9855 0c3d 01       		.uleb128 0x1
 9856 0c3e 50       		.byte	0x50
 9857 0c3f 9F       		.byte	0x9f
 9858 0c40 00000000 		.4byte	0
 9859 0c44 00000000 		.4byte	0
 9860              	.LLST85:
 9861 0c48 06000000 		.4byte	.LVL280
 9862 0c4c 64000000 		.4byte	.LVL289
 9863 0c50 0100     		.2byte	0x1
 9864 0c52 54       		.byte	0x54
 9865 0c53 00000000 		.4byte	0
 9866 0c57 00000000 		.4byte	0
 9867              	.LLST86:
 9868 0c5b 58000000 		.4byte	.LVL286
 9869 0c5f 62000000 		.4byte	.LVL287
 9870 0c63 0200     		.2byte	0x2
 9871 0c65 31       		.byte	0x31
 9872 0c66 9F       		.byte	0x9f
 9873 0c67 64000000 		.4byte	.LVL288
 9874 0c6b 74000000 		.4byte	.LFE58
 9875 0c6f 0100     		.2byte	0x1
 9876 0c71 50       		.byte	0x50
 9877 0c72 00000000 		.4byte	0
 9878 0c76 00000000 		.4byte	0
 9879              	.LLST87:
 9880 0c7a 00000000 		.4byte	.LVL290
 9881 0c7e 0F000000 		.4byte	.LVL293-1
 9882 0c82 0100     		.2byte	0x1
 9883 0c84 50       		.byte	0x50
 9884 0c85 0F000000 		.4byte	.LVL293-1
 9885 0c89 60000000 		.4byte	.LFE59
 9886 0c8d 0400     		.2byte	0x4
 9887 0c8f F3       		.byte	0xf3
 9888 0c90 01       		.uleb128 0x1
 9889 0c91 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 270


 9890 0c92 9F       		.byte	0x9f
 9891 0c93 00000000 		.4byte	0
 9892 0c97 00000000 		.4byte	0
 9893              	.LLST88:
 9894 0c9b 00000000 		.4byte	.LVL290
 9895 0c9f 08000000 		.4byte	.LVL291
 9896 0ca3 0100     		.2byte	0x1
 9897 0ca5 51       		.byte	0x51
 9898 0ca6 08000000 		.4byte	.LVL291
 9899 0caa 60000000 		.4byte	.LFE59
 9900 0cae 0400     		.2byte	0x4
 9901 0cb0 F3       		.byte	0xf3
 9902 0cb1 01       		.uleb128 0x1
 9903 0cb2 51       		.byte	0x51
 9904 0cb3 9F       		.byte	0x9f
 9905 0cb4 00000000 		.4byte	0
 9906 0cb8 00000000 		.4byte	0
 9907              	.LLST89:
 9908 0cbc 0C000000 		.4byte	.LVL292
 9909 0cc0 50000000 		.4byte	.LVL299
 9910 0cc4 0100     		.2byte	0x1
 9911 0cc6 55       		.byte	0x55
 9912 0cc7 00000000 		.4byte	0
 9913 0ccb 00000000 		.4byte	0
 9914              	.LLST90:
 9915 0ccf 44000000 		.4byte	.LVL296
 9916 0cd3 4E000000 		.4byte	.LVL297
 9917 0cd7 0200     		.2byte	0x2
 9918 0cd9 31       		.byte	0x31
 9919 0cda 9F       		.byte	0x9f
 9920 0cdb 50000000 		.4byte	.LVL298
 9921 0cdf 60000000 		.4byte	.LFE59
 9922 0ce3 0100     		.2byte	0x1
 9923 0ce5 50       		.byte	0x50
 9924 0ce6 00000000 		.4byte	0
 9925 0cea 00000000 		.4byte	0
 9926              	.LLST91:
 9927 0cee 00000000 		.4byte	.LVL301
 9928 0cf2 09000000 		.4byte	.LVL302-1
 9929 0cf6 0100     		.2byte	0x1
 9930 0cf8 50       		.byte	0x50
 9931 0cf9 09000000 		.4byte	.LVL302-1
 9932 0cfd 3A000000 		.4byte	.LVL306
 9933 0d01 0100     		.2byte	0x1
 9934 0d03 54       		.byte	0x54
 9935 0d04 3A000000 		.4byte	.LVL306
 9936 0d08 3C000000 		.4byte	.LVL307
 9937 0d0c 0400     		.2byte	0x4
 9938 0d0e F3       		.byte	0xf3
 9939 0d0f 01       		.uleb128 0x1
 9940 0d10 50       		.byte	0x50
 9941 0d11 9F       		.byte	0x9f
 9942 0d12 3C000000 		.4byte	.LVL307
 9943 0d16 3E000000 		.4byte	.LVL308
 9944 0d1a 0100     		.2byte	0x1
 9945 0d1c 54       		.byte	0x54
 9946 0d1d 3E000000 		.4byte	.LVL308
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 271


 9947 0d21 40000000 		.4byte	.LVL309
 9948 0d25 0400     		.2byte	0x4
 9949 0d27 F3       		.byte	0xf3
 9950 0d28 01       		.uleb128 0x1
 9951 0d29 50       		.byte	0x50
 9952 0d2a 9F       		.byte	0x9f
 9953 0d2b 40000000 		.4byte	.LVL309
 9954 0d2f 42000000 		.4byte	.LVL310
 9955 0d33 0100     		.2byte	0x1
 9956 0d35 54       		.byte	0x54
 9957 0d36 42000000 		.4byte	.LVL310
 9958 0d3a 44000000 		.4byte	.LVL311
 9959 0d3e 0400     		.2byte	0x4
 9960 0d40 F3       		.byte	0xf3
 9961 0d41 01       		.uleb128 0x1
 9962 0d42 50       		.byte	0x50
 9963 0d43 9F       		.byte	0x9f
 9964 0d44 44000000 		.4byte	.LVL311
 9965 0d48 46000000 		.4byte	.LVL312
 9966 0d4c 0100     		.2byte	0x1
 9967 0d4e 54       		.byte	0x54
 9968 0d4f 46000000 		.4byte	.LVL312
 9969 0d53 54000000 		.4byte	.LFE61
 9970 0d57 0400     		.2byte	0x4
 9971 0d59 F3       		.byte	0xf3
 9972 0d5a 01       		.uleb128 0x1
 9973 0d5b 50       		.byte	0x50
 9974 0d5c 9F       		.byte	0x9f
 9975 0d5d 00000000 		.4byte	0
 9976 0d61 00000000 		.4byte	0
 9977              	.LLST92:
 9978 0d65 00000000 		.4byte	.LVL301
 9979 0d69 09000000 		.4byte	.LVL302-1
 9980 0d6d 0100     		.2byte	0x1
 9981 0d6f 51       		.byte	0x51
 9982 0d70 09000000 		.4byte	.LVL302-1
 9983 0d74 4C000000 		.4byte	.LVL315
 9984 0d78 0100     		.2byte	0x1
 9985 0d7a 55       		.byte	0x55
 9986 0d7b 4C000000 		.4byte	.LVL315
 9987 0d7f 54000000 		.4byte	.LFE61
 9988 0d83 0400     		.2byte	0x4
 9989 0d85 F3       		.byte	0xf3
 9990 0d86 01       		.uleb128 0x1
 9991 0d87 51       		.byte	0x51
 9992 0d88 9F       		.byte	0x9f
 9993 0d89 00000000 		.4byte	0
 9994 0d8d 00000000 		.4byte	0
 9995              	.LLST93:
 9996 0d91 38000000 		.4byte	.LVL305
 9997 0d95 3C000000 		.4byte	.LVL307
 9998 0d99 0200     		.2byte	0x2
 9999 0d9b 30       		.byte	0x30
 10000 0d9c 9F       		.byte	0x9f
 10001 0d9d 46000000 		.4byte	.LVL312
 10002 0da1 4C000000 		.4byte	.LVL314
 10003 0da5 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 272


 10004 0da7 54       		.byte	0x54
 10005 0da8 4C000000 		.4byte	.LVL314
 10006 0dac 54000000 		.4byte	.LFE61
 10007 0db0 0100     		.2byte	0x1
 10008 0db2 50       		.byte	0x50
 10009 0db3 00000000 		.4byte	0
 10010 0db7 00000000 		.4byte	0
 10011              	.LLST94:
 10012 0dbb 0E000000 		.4byte	.LVL303
 10013 0dbf 2E000000 		.4byte	.LVL304
 10014 0dc3 0100     		.2byte	0x1
 10015 0dc5 52       		.byte	0x52
 10016 0dc6 3C000000 		.4byte	.LVL307
 10017 0dca 46000000 		.4byte	.LVL312
 10018 0dce 0100     		.2byte	0x1
 10019 0dd0 52       		.byte	0x52
 10020 0dd1 00000000 		.4byte	0
 10021 0dd5 00000000 		.4byte	0
 10022              	.LLST95:
 10023 0dd9 00000000 		.4byte	.LVL316
 10024 0ddd 0C000000 		.4byte	.LVL317
 10025 0de1 0100     		.2byte	0x1
 10026 0de3 50       		.byte	0x50
 10027 0de4 00000000 		.4byte	0
 10028 0de8 00000000 		.4byte	0
 10029              	.LLST96:
 10030 0dec 00000000 		.4byte	.LVL316
 10031 0df0 0E000000 		.4byte	.LVL318
 10032 0df4 0100     		.2byte	0x1
 10033 0df6 51       		.byte	0x51
 10034 0df7 0E000000 		.4byte	.LVL318
 10035 0dfb 10000000 		.4byte	.LVL319
 10036 0dff 0300     		.2byte	0x3
 10037 0e01 71       		.byte	0x71
 10038 0e02 6E       		.sleb128 -18
 10039 0e03 9F       		.byte	0x9f
 10040 0e04 10000000 		.4byte	.LVL319
 10041 0e08 1C000000 		.4byte	.LFE64
 10042 0e0c 0400     		.2byte	0x4
 10043 0e0e F3       		.byte	0xf3
 10044 0e0f 01       		.uleb128 0x1
 10045 0e10 51       		.byte	0x51
 10046 0e11 9F       		.byte	0x9f
 10047 0e12 00000000 		.4byte	0
 10048 0e16 00000000 		.4byte	0
 10049              	.LLST97:
 10050 0e1a 0C000000 		.4byte	.LVL317
 10051 0e1e 12000000 		.4byte	.LVL320
 10052 0e22 0100     		.2byte	0x1
 10053 0e24 50       		.byte	0x50
 10054 0e25 00000000 		.4byte	0
 10055 0e29 00000000 		.4byte	0
 10056              	.LLST98:
 10057 0e2d 00000000 		.4byte	.LVL321
 10058 0e31 0C000000 		.4byte	.LVL322
 10059 0e35 0100     		.2byte	0x1
 10060 0e37 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 273


 10061 0e38 16000000 		.4byte	.LVL327
 10062 0e3c 18000000 		.4byte	.LVL328
 10063 0e40 0100     		.2byte	0x1
 10064 0e42 50       		.byte	0x50
 10065 0e43 00000000 		.4byte	0
 10066 0e47 00000000 		.4byte	0
 10067              	.LLST99:
 10068 0e4b 00000000 		.4byte	.LVL321
 10069 0e4f 0E000000 		.4byte	.LVL323
 10070 0e53 0100     		.2byte	0x1
 10071 0e55 51       		.byte	0x51
 10072 0e56 0E000000 		.4byte	.LVL323
 10073 0e5a 10000000 		.4byte	.LVL324
 10074 0e5e 0300     		.2byte	0x3
 10075 0e60 71       		.byte	0x71
 10076 0e61 6E       		.sleb128 -18
 10077 0e62 9F       		.byte	0x9f
 10078 0e63 10000000 		.4byte	.LVL324
 10079 0e67 16000000 		.4byte	.LVL327
 10080 0e6b 0400     		.2byte	0x4
 10081 0e6d F3       		.byte	0xf3
 10082 0e6e 01       		.uleb128 0x1
 10083 0e6f 51       		.byte	0x51
 10084 0e70 9F       		.byte	0x9f
 10085 0e71 16000000 		.4byte	.LVL327
 10086 0e75 18000000 		.4byte	.LVL328
 10087 0e79 0100     		.2byte	0x1
 10088 0e7b 51       		.byte	0x51
 10089 0e7c 18000000 		.4byte	.LVL328
 10090 0e80 20000000 		.4byte	.LFE65
 10091 0e84 0400     		.2byte	0x4
 10092 0e86 F3       		.byte	0xf3
 10093 0e87 01       		.uleb128 0x1
 10094 0e88 51       		.byte	0x51
 10095 0e89 9F       		.byte	0x9f
 10096 0e8a 00000000 		.4byte	0
 10097 0e8e 00000000 		.4byte	0
 10098              	.LLST100:
 10099 0e92 00000000 		.4byte	.LVL321
 10100 0e96 14000000 		.4byte	.LVL326
 10101 0e9a 0200     		.2byte	0x2
 10102 0e9c 30       		.byte	0x30
 10103 0e9d 9F       		.byte	0x9f
 10104 0e9e 14000000 		.4byte	.LVL326
 10105 0ea2 16000000 		.4byte	.LVL327
 10106 0ea6 0100     		.2byte	0x1
 10107 0ea8 50       		.byte	0x50
 10108 0ea9 16000000 		.4byte	.LVL327
 10109 0ead 18000000 		.4byte	.LVL328
 10110 0eb1 0200     		.2byte	0x2
 10111 0eb3 30       		.byte	0x30
 10112 0eb4 9F       		.byte	0x9f
 10113 0eb5 18000000 		.4byte	.LVL328
 10114 0eb9 20000000 		.4byte	.LFE65
 10115 0ebd 0100     		.2byte	0x1
 10116 0ebf 50       		.byte	0x50
 10117 0ec0 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 274


 10118 0ec4 00000000 		.4byte	0
 10119              	.LLST101:
 10120 0ec8 0C000000 		.4byte	.LVL322
 10121 0ecc 12000000 		.4byte	.LVL325
 10122 0ed0 0100     		.2byte	0x1
 10123 0ed2 50       		.byte	0x50
 10124 0ed3 00000000 		.4byte	0
 10125 0ed7 00000000 		.4byte	0
 10126              	.LLST102:
 10127 0edb 00000000 		.4byte	.LVL329
 10128 0edf 0A000000 		.4byte	.LVL330
 10129 0ee3 0100     		.2byte	0x1
 10130 0ee5 50       		.byte	0x50
 10131 0ee6 00000000 		.4byte	0
 10132 0eea 00000000 		.4byte	0
 10133              	.LLST103:
 10134 0eee 0A000000 		.4byte	.LVL330
 10135 0ef2 0C000000 		.4byte	.LVL331
 10136 0ef6 0100     		.2byte	0x1
 10137 0ef8 50       		.byte	0x50
 10138 0ef9 00000000 		.4byte	0
 10139 0efd 00000000 		.4byte	0
 10140              	.LLST104:
 10141 0f01 0C000000 		.4byte	.LVL331
 10142 0f05 0F000000 		.4byte	.LVL332-1
 10143 0f09 0100     		.2byte	0x1
 10144 0f0b 50       		.byte	0x50
 10145 0f0c 00000000 		.4byte	0
 10146 0f10 00000000 		.4byte	0
 10147              	.LLST105:
 10148 0f14 00000000 		.4byte	.LVL335
 10149 0f18 44000000 		.4byte	.LVL337
 10150 0f1c 0100     		.2byte	0x1
 10151 0f1e 50       		.byte	0x50
 10152 0f1f 44000000 		.4byte	.LVL337
 10153 0f23 6E000000 		.4byte	.LVL340
 10154 0f27 0100     		.2byte	0x1
 10155 0f29 54       		.byte	0x54
 10156 0f2a 6E000000 		.4byte	.LVL340
 10157 0f2e 76000000 		.4byte	.LVL341
 10158 0f32 0100     		.2byte	0x1
 10159 0f34 50       		.byte	0x50
 10160 0f35 76000000 		.4byte	.LVL341
 10161 0f39 76000000 		.4byte	.LVL342
 10162 0f3d 0100     		.2byte	0x1
 10163 0f3f 54       		.byte	0x54
 10164 0f40 76000000 		.4byte	.LVL342
 10165 0f44 80000000 		.4byte	.LFE74
 10166 0f48 0400     		.2byte	0x4
 10167 0f4a F3       		.byte	0xf3
 10168 0f4b 01       		.uleb128 0x1
 10169 0f4c 50       		.byte	0x50
 10170 0f4d 9F       		.byte	0x9f
 10171 0f4e 00000000 		.4byte	0
 10172 0f52 00000000 		.4byte	0
 10173              	.LLST106:
 10174 0f56 04000000 		.4byte	.LVL336
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 275


 10175 0f5a 44000000 		.4byte	.LVL337
 10176 0f5e 0100     		.2byte	0x1
 10177 0f60 50       		.byte	0x50
 10178 0f61 44000000 		.4byte	.LVL337
 10179 0f65 6E000000 		.4byte	.LVL340
 10180 0f69 0100     		.2byte	0x1
 10181 0f6b 54       		.byte	0x54
 10182 0f6c 6E000000 		.4byte	.LVL340
 10183 0f70 76000000 		.4byte	.LVL341
 10184 0f74 0100     		.2byte	0x1
 10185 0f76 50       		.byte	0x50
 10186 0f77 76000000 		.4byte	.LVL341
 10187 0f7b 76000000 		.4byte	.LVL342
 10188 0f7f 0100     		.2byte	0x1
 10189 0f81 54       		.byte	0x54
 10190 0f82 76000000 		.4byte	.LVL342
 10191 0f86 80000000 		.4byte	.LFE74
 10192 0f8a 0400     		.2byte	0x4
 10193 0f8c F3       		.byte	0xf3
 10194 0f8d 01       		.uleb128 0x1
 10195 0f8e 50       		.byte	0x50
 10196 0f8f 9F       		.byte	0x9f
 10197 0f90 00000000 		.4byte	0
 10198 0f94 00000000 		.4byte	0
 10199              	.LLST107:
 10200 0f98 00000000 		.4byte	.LVL343
 10201 0f9c 1C000000 		.4byte	.LVL345
 10202 0fa0 0100     		.2byte	0x1
 10203 0fa2 50       		.byte	0x50
 10204 0fa3 1C000000 		.4byte	.LVL345
 10205 0fa7 4C000000 		.4byte	.LVL348
 10206 0fab 0100     		.2byte	0x1
 10207 0fad 54       		.byte	0x54
 10208 0fae 4C000000 		.4byte	.LVL348
 10209 0fb2 4E000000 		.4byte	.LVL349
 10210 0fb6 0100     		.2byte	0x1
 10211 0fb8 50       		.byte	0x50
 10212 0fb9 4E000000 		.4byte	.LVL349
 10213 0fbd 50000000 		.4byte	.LVL350
 10214 0fc1 0100     		.2byte	0x1
 10215 0fc3 54       		.byte	0x54
 10216 0fc4 50000000 		.4byte	.LVL350
 10217 0fc8 52000000 		.4byte	.LVL351
 10218 0fcc 0100     		.2byte	0x1
 10219 0fce 50       		.byte	0x50
 10220 0fcf 52000000 		.4byte	.LVL351
 10221 0fd3 54000000 		.4byte	.LVL352
 10222 0fd7 0100     		.2byte	0x1
 10223 0fd9 54       		.byte	0x54
 10224 0fda 54000000 		.4byte	.LVL352
 10225 0fde 56000000 		.4byte	.LVL353
 10226 0fe2 0100     		.2byte	0x1
 10227 0fe4 50       		.byte	0x50
 10228 0fe5 56000000 		.4byte	.LVL353
 10229 0fe9 56000000 		.4byte	.LVL354
 10230 0fed 0100     		.2byte	0x1
 10231 0fef 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 276


 10232 0ff0 56000000 		.4byte	.LVL354
 10233 0ff4 60000000 		.4byte	.LFE75
 10234 0ff8 0400     		.2byte	0x4
 10235 0ffa F3       		.byte	0xf3
 10236 0ffb 01       		.uleb128 0x1
 10237 0ffc 50       		.byte	0x50
 10238 0ffd 9F       		.byte	0x9f
 10239 0ffe 00000000 		.4byte	0
 10240 1002 00000000 		.4byte	0
 10241              	.LLST108:
 10242 1006 04000000 		.4byte	.LVL344
 10243 100a 1C000000 		.4byte	.LVL345
 10244 100e 0100     		.2byte	0x1
 10245 1010 50       		.byte	0x50
 10246 1011 1C000000 		.4byte	.LVL345
 10247 1015 4C000000 		.4byte	.LVL348
 10248 1019 0100     		.2byte	0x1
 10249 101b 54       		.byte	0x54
 10250 101c 4C000000 		.4byte	.LVL348
 10251 1020 4E000000 		.4byte	.LVL349
 10252 1024 0100     		.2byte	0x1
 10253 1026 50       		.byte	0x50
 10254 1027 4E000000 		.4byte	.LVL349
 10255 102b 50000000 		.4byte	.LVL350
 10256 102f 0100     		.2byte	0x1
 10257 1031 54       		.byte	0x54
 10258 1032 50000000 		.4byte	.LVL350
 10259 1036 52000000 		.4byte	.LVL351
 10260 103a 0100     		.2byte	0x1
 10261 103c 50       		.byte	0x50
 10262 103d 52000000 		.4byte	.LVL351
 10263 1041 54000000 		.4byte	.LVL352
 10264 1045 0100     		.2byte	0x1
 10265 1047 54       		.byte	0x54
 10266 1048 54000000 		.4byte	.LVL352
 10267 104c 56000000 		.4byte	.LVL353
 10268 1050 0100     		.2byte	0x1
 10269 1052 50       		.byte	0x50
 10270 1053 56000000 		.4byte	.LVL353
 10271 1057 56000000 		.4byte	.LVL354
 10272 105b 0100     		.2byte	0x1
 10273 105d 54       		.byte	0x54
 10274 105e 56000000 		.4byte	.LVL354
 10275 1062 60000000 		.4byte	.LFE75
 10276 1066 0400     		.2byte	0x4
 10277 1068 F3       		.byte	0xf3
 10278 1069 01       		.uleb128 0x1
 10279 106a 50       		.byte	0x50
 10280 106b 9F       		.byte	0x9f
 10281 106c 00000000 		.4byte	0
 10282 1070 00000000 		.4byte	0
 10283              	.LLST109:
 10284 1074 04000000 		.4byte	.LVL344
 10285 1078 48000000 		.4byte	.LVL347
 10286 107c 0200     		.2byte	0x2
 10287 107e 30       		.byte	0x30
 10288 107f 9F       		.byte	0x9f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 277


 10289 1080 48000000 		.4byte	.LVL347
 10290 1084 4C000000 		.4byte	.LVL348
 10291 1088 0200     		.2byte	0x2
 10292 108a 31       		.byte	0x31
 10293 108b 9F       		.byte	0x9f
 10294 108c 4C000000 		.4byte	.LVL348
 10295 1090 56000000 		.4byte	.LVL353
 10296 1094 0200     		.2byte	0x2
 10297 1096 30       		.byte	0x30
 10298 1097 9F       		.byte	0x9f
 10299 1098 56000000 		.4byte	.LVL353
 10300 109c 60000000 		.4byte	.LFE75
 10301 10a0 0100     		.2byte	0x1
 10302 10a2 50       		.byte	0x50
 10303 10a3 00000000 		.4byte	0
 10304 10a7 00000000 		.4byte	0
 10305              	.LLST110:
 10306 10ab 00000000 		.4byte	.LVL356
 10307 10af 09000000 		.4byte	.LVL357-1
 10308 10b3 0100     		.2byte	0x1
 10309 10b5 50       		.byte	0x50
 10310 10b6 09000000 		.4byte	.LVL357-1
 10311 10ba 64000000 		.4byte	.LVL365
 10312 10be 0100     		.2byte	0x1
 10313 10c0 55       		.byte	0x55
 10314 10c1 64000000 		.4byte	.LVL365
 10315 10c5 6C000000 		.4byte	.LFE78
 10316 10c9 0400     		.2byte	0x4
 10317 10cb F3       		.byte	0xf3
 10318 10cc 01       		.uleb128 0x1
 10319 10cd 50       		.byte	0x50
 10320 10ce 9F       		.byte	0x9f
 10321 10cf 00000000 		.4byte	0
 10322 10d3 00000000 		.4byte	0
 10323              	.LLST111:
 10324 10d7 00000000 		.4byte	.LVL356
 10325 10db 09000000 		.4byte	.LVL357-1
 10326 10df 0100     		.2byte	0x1
 10327 10e1 51       		.byte	0x51
 10328 10e2 09000000 		.4byte	.LVL357-1
 10329 10e6 3A000000 		.4byte	.LVL362
 10330 10ea 0100     		.2byte	0x1
 10331 10ec 54       		.byte	0x54
 10332 10ed 3A000000 		.4byte	.LVL362
 10333 10f1 6C000000 		.4byte	.LFE78
 10334 10f5 0400     		.2byte	0x4
 10335 10f7 F3       		.byte	0xf3
 10336 10f8 01       		.uleb128 0x1
 10337 10f9 51       		.byte	0x51
 10338 10fa 9F       		.byte	0x9f
 10339 10fb 00000000 		.4byte	0
 10340 10ff 00000000 		.4byte	0
 10341              	.LLST112:
 10342 1103 3A000000 		.4byte	.LVL362
 10343 1107 64000000 		.4byte	.LVL364
 10344 110b 0100     		.2byte	0x1
 10345 110d 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 278


 10346 110e 64000000 		.4byte	.LVL364
 10347 1112 6C000000 		.4byte	.LFE78
 10348 1116 0100     		.2byte	0x1
 10349 1118 50       		.byte	0x50
 10350 1119 00000000 		.4byte	0
 10351 111d 00000000 		.4byte	0
 10352              	.LLST113:
 10353 1121 00000000 		.4byte	.LVL366
 10354 1125 0D000000 		.4byte	.LVL367-1
 10355 1129 0100     		.2byte	0x1
 10356 112b 50       		.byte	0x50
 10357 112c 0D000000 		.4byte	.LVL367-1
 10358 1130 7A000000 		.4byte	.LVL379
 10359 1134 0100     		.2byte	0x1
 10360 1136 56       		.byte	0x56
 10361 1137 7A000000 		.4byte	.LVL379
 10362 113b 80000000 		.4byte	.LFE79
 10363 113f 0400     		.2byte	0x4
 10364 1141 F3       		.byte	0xf3
 10365 1142 01       		.uleb128 0x1
 10366 1143 50       		.byte	0x50
 10367 1144 9F       		.byte	0x9f
 10368 1145 00000000 		.4byte	0
 10369 1149 00000000 		.4byte	0
 10370              	.LLST114:
 10371 114d 00000000 		.4byte	.LVL366
 10372 1151 0D000000 		.4byte	.LVL367-1
 10373 1155 0100     		.2byte	0x1
 10374 1157 51       		.byte	0x51
 10375 1158 0D000000 		.4byte	.LVL367-1
 10376 115c 7A000000 		.4byte	.LVL380
 10377 1160 0100     		.2byte	0x1
 10378 1162 57       		.byte	0x57
 10379 1163 7A000000 		.4byte	.LVL380
 10380 1167 80000000 		.4byte	.LFE79
 10381 116b 0400     		.2byte	0x4
 10382 116d F3       		.byte	0xf3
 10383 116e 01       		.uleb128 0x1
 10384 116f 51       		.byte	0x51
 10385 1170 9F       		.byte	0x9f
 10386 1171 00000000 		.4byte	0
 10387 1175 00000000 		.4byte	0
 10388              	.LLST115:
 10389 1179 00000000 		.4byte	.LVL366
 10390 117d 0D000000 		.4byte	.LVL367-1
 10391 1181 0100     		.2byte	0x1
 10392 1183 52       		.byte	0x52
 10393 1184 0D000000 		.4byte	.LVL367-1
 10394 1188 66000000 		.4byte	.LVL373
 10395 118c 0100     		.2byte	0x1
 10396 118e 54       		.byte	0x54
 10397 118f 66000000 		.4byte	.LVL373
 10398 1193 68000000 		.4byte	.LVL374
 10399 1197 0400     		.2byte	0x4
 10400 1199 F3       		.byte	0xf3
 10401 119a 01       		.uleb128 0x1
 10402 119b 52       		.byte	0x52
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 279


 10403 119c 9F       		.byte	0x9f
 10404 119d 68000000 		.4byte	.LVL374
 10405 11a1 6A000000 		.4byte	.LVL375
 10406 11a5 0100     		.2byte	0x1
 10407 11a7 54       		.byte	0x54
 10408 11a8 6A000000 		.4byte	.LVL375
 10409 11ac 80000000 		.4byte	.LFE79
 10410 11b0 0400     		.2byte	0x4
 10411 11b2 F3       		.byte	0xf3
 10412 11b3 01       		.uleb128 0x1
 10413 11b4 52       		.byte	0x52
 10414 11b5 9F       		.byte	0x9f
 10415 11b6 00000000 		.4byte	0
 10416 11ba 00000000 		.4byte	0
 10417              	.LLST116:
 10418 11be 00000000 		.4byte	.LVL366
 10419 11c2 0D000000 		.4byte	.LVL367-1
 10420 11c6 0100     		.2byte	0x1
 10421 11c8 53       		.byte	0x53
 10422 11c9 0D000000 		.4byte	.LVL367-1
 10423 11cd 7A000000 		.4byte	.LVL378
 10424 11d1 0100     		.2byte	0x1
 10425 11d3 55       		.byte	0x55
 10426 11d4 7A000000 		.4byte	.LVL378
 10427 11d8 80000000 		.4byte	.LFE79
 10428 11dc 0400     		.2byte	0x4
 10429 11de F3       		.byte	0xf3
 10430 11df 01       		.uleb128 0x1
 10431 11e0 53       		.byte	0x53
 10432 11e1 9F       		.byte	0x9f
 10433 11e2 00000000 		.4byte	0
 10434 11e6 00000000 		.4byte	0
 10435              	.LLST117:
 10436 11ea 64000000 		.4byte	.LVL372
 10437 11ee 68000000 		.4byte	.LVL374
 10438 11f2 0200     		.2byte	0x2
 10439 11f4 31       		.byte	0x31
 10440 11f5 9F       		.byte	0x9f
 10441 11f6 6A000000 		.4byte	.LVL375
 10442 11fa 7A000000 		.4byte	.LVL377
 10443 11fe 0100     		.2byte	0x1
 10444 1200 54       		.byte	0x54
 10445 1201 7A000000 		.4byte	.LVL377
 10446 1205 80000000 		.4byte	.LFE79
 10447 1209 0100     		.2byte	0x1
 10448 120b 50       		.byte	0x50
 10449 120c 00000000 		.4byte	0
 10450 1210 00000000 		.4byte	0
 10451              	.LLST118:
 10452 1214 00000000 		.4byte	.LVL381
 10453 1218 0D000000 		.4byte	.LVL383-1
 10454 121c 0100     		.2byte	0x1
 10455 121e 50       		.byte	0x50
 10456 121f 0D000000 		.4byte	.LVL383-1
 10457 1223 A2000000 		.4byte	.LVL400
 10458 1227 0100     		.2byte	0x1
 10459 1229 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 280


 10460 122a A2000000 		.4byte	.LVL400
 10461 122e AC000000 		.4byte	.LFE80
 10462 1232 0400     		.2byte	0x4
 10463 1234 F3       		.byte	0xf3
 10464 1235 01       		.uleb128 0x1
 10465 1236 50       		.byte	0x50
 10466 1237 9F       		.byte	0x9f
 10467 1238 00000000 		.4byte	0
 10468 123c 00000000 		.4byte	0
 10469              	.LLST119:
 10470 1240 00000000 		.4byte	.LVL381
 10471 1244 0D000000 		.4byte	.LVL383-1
 10472 1248 0100     		.2byte	0x1
 10473 124a 51       		.byte	0x51
 10474 124b 0D000000 		.4byte	.LVL383-1
 10475 124f 3A000000 		.4byte	.LVL385
 10476 1253 0100     		.2byte	0x1
 10477 1255 55       		.byte	0x55
 10478 1256 3A000000 		.4byte	.LVL385
 10479 125a 40000000 		.4byte	.LVL386
 10480 125e 0400     		.2byte	0x4
 10481 1260 F3       		.byte	0xf3
 10482 1261 01       		.uleb128 0x1
 10483 1262 51       		.byte	0x51
 10484 1263 9F       		.byte	0x9f
 10485 1264 40000000 		.4byte	.LVL386
 10486 1268 48000000 		.4byte	.LVL387
 10487 126c 0100     		.2byte	0x1
 10488 126e 55       		.byte	0x55
 10489 126f 48000000 		.4byte	.LVL387
 10490 1273 4A000000 		.4byte	.LVL388
 10491 1277 0400     		.2byte	0x4
 10492 1279 F3       		.byte	0xf3
 10493 127a 01       		.uleb128 0x1
 10494 127b 51       		.byte	0x51
 10495 127c 9F       		.byte	0x9f
 10496 127d 4A000000 		.4byte	.LVL388
 10497 1281 4E000000 		.4byte	.LVL389
 10498 1285 0100     		.2byte	0x1
 10499 1287 55       		.byte	0x55
 10500 1288 4E000000 		.4byte	.LVL389
 10501 128c 50000000 		.4byte	.LVL390
 10502 1290 0300     		.2byte	0x3
 10503 1292 74       		.byte	0x74
 10504 1293 E000     		.sleb128 96
 10505 1295 50000000 		.4byte	.LVL390
 10506 1299 58000000 		.4byte	.LVL391
 10507 129d 0100     		.2byte	0x1
 10508 129f 55       		.byte	0x55
 10509 12a0 58000000 		.4byte	.LVL391
 10510 12a4 5A000000 		.4byte	.LVL392
 10511 12a8 0300     		.2byte	0x3
 10512 12aa 74       		.byte	0x74
 10513 12ab E000     		.sleb128 96
 10514 12ad 5A000000 		.4byte	.LVL392
 10515 12b1 5C000000 		.4byte	.LVL393
 10516 12b5 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 281


 10517 12b7 55       		.byte	0x55
 10518 12b8 5C000000 		.4byte	.LVL393
 10519 12bc 5E000000 		.4byte	.LVL394
 10520 12c0 0400     		.2byte	0x4
 10521 12c2 F3       		.byte	0xf3
 10522 12c3 01       		.uleb128 0x1
 10523 12c4 51       		.byte	0x51
 10524 12c5 9F       		.byte	0x9f
 10525 12c6 5E000000 		.4byte	.LVL394
 10526 12ca 60000000 		.4byte	.LVL395
 10527 12ce 0100     		.2byte	0x1
 10528 12d0 55       		.byte	0x55
 10529 12d1 60000000 		.4byte	.LVL395
 10530 12d5 AC000000 		.4byte	.LFE80
 10531 12d9 0400     		.2byte	0x4
 10532 12db F3       		.byte	0xf3
 10533 12dc 01       		.uleb128 0x1
 10534 12dd 51       		.byte	0x51
 10535 12de 9F       		.byte	0x9f
 10536 12df 00000000 		.4byte	0
 10537 12e3 00000000 		.4byte	0
 10538              	.LLST120:
 10539 12e7 00000000 		.4byte	.LVL381
 10540 12eb 0D000000 		.4byte	.LVL383-1
 10541 12ef 0100     		.2byte	0x1
 10542 12f1 52       		.byte	0x52
 10543 12f2 0D000000 		.4byte	.LVL383-1
 10544 12f6 AC000000 		.4byte	.LFE80
 10545 12fa 0400     		.2byte	0x4
 10546 12fc F3       		.byte	0xf3
 10547 12fd 01       		.uleb128 0x1
 10548 12fe 52       		.byte	0x52
 10549 12ff 9F       		.byte	0x9f
 10550 1300 00000000 		.4byte	0
 10551 1304 00000000 		.4byte	0
 10552              	.LLST121:
 10553 1308 00000000 		.4byte	.LVL381
 10554 130c 0D000000 		.4byte	.LVL383-1
 10555 1310 0100     		.2byte	0x1
 10556 1312 53       		.byte	0x53
 10557 1313 0D000000 		.4byte	.LVL383-1
 10558 1317 A2000000 		.4byte	.LVL402
 10559 131b 0100     		.2byte	0x1
 10560 131d 57       		.byte	0x57
 10561 131e A2000000 		.4byte	.LVL402
 10562 1322 AC000000 		.4byte	.LFE80
 10563 1326 0400     		.2byte	0x4
 10564 1328 F3       		.byte	0xf3
 10565 1329 01       		.uleb128 0x1
 10566 132a 53       		.byte	0x53
 10567 132b 9F       		.byte	0x9f
 10568 132c 00000000 		.4byte	0
 10569 1330 00000000 		.4byte	0
 10570              	.LLST122:
 10571 1334 0A000000 		.4byte	.LVL382
 10572 1338 0D000000 		.4byte	.LVL383-1
 10573 133c 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 282


 10574 133e 50       		.byte	0x50
 10575 133f 0D000000 		.4byte	.LVL383-1
 10576 1343 A2000000 		.4byte	.LVL400
 10577 1347 0100     		.2byte	0x1
 10578 1349 54       		.byte	0x54
 10579 134a A2000000 		.4byte	.LVL400
 10580 134e AC000000 		.4byte	.LFE80
 10581 1352 0400     		.2byte	0x4
 10582 1354 F3       		.byte	0xf3
 10583 1355 01       		.uleb128 0x1
 10584 1356 50       		.byte	0x50
 10585 1357 9F       		.byte	0x9f
 10586 1358 00000000 		.4byte	0
 10587 135c 00000000 		.4byte	0
 10588              	.LLST123:
 10589 1360 0A000000 		.4byte	.LVL382
 10590 1364 60000000 		.4byte	.LVL395
 10591 1368 0200     		.2byte	0x2
 10592 136a 31       		.byte	0x31
 10593 136b 9F       		.byte	0x9f
 10594 136c 60000000 		.4byte	.LVL395
 10595 1370 A2000000 		.4byte	.LVL401
 10596 1374 0100     		.2byte	0x1
 10597 1376 55       		.byte	0x55
 10598 1377 A2000000 		.4byte	.LVL401
 10599 137b AC000000 		.4byte	.LFE80
 10600 137f 0100     		.2byte	0x1
 10601 1381 50       		.byte	0x50
 10602 1382 00000000 		.4byte	0
 10603 1386 00000000 		.4byte	0
 10604              	.LLST124:
 10605 138a 1C000000 		.4byte	.LVL384
 10606 138e 6B000000 		.4byte	.LVL396-1
 10607 1392 0100     		.2byte	0x1
 10608 1394 53       		.byte	0x53
 10609 1395 00000000 		.4byte	0
 10610 1399 00000000 		.4byte	0
 10611              	.LLST125:
 10612 139d 00000000 		.4byte	.LVL403
 10613 13a1 0F000000 		.4byte	.LVL405-1
 10614 13a5 0100     		.2byte	0x1
 10615 13a7 50       		.byte	0x50
 10616 13a8 0F000000 		.4byte	.LVL405-1
 10617 13ac D0000000 		.4byte	.LVL427
 10618 13b0 0100     		.2byte	0x1
 10619 13b2 54       		.byte	0x54
 10620 13b3 D0000000 		.4byte	.LVL427
 10621 13b7 E0000000 		.4byte	.LFE81
 10622 13bb 0400     		.2byte	0x4
 10623 13bd F3       		.byte	0xf3
 10624 13be 01       		.uleb128 0x1
 10625 13bf 50       		.byte	0x50
 10626 13c0 9F       		.byte	0x9f
 10627 13c1 00000000 		.4byte	0
 10628 13c5 00000000 		.4byte	0
 10629              	.LLST126:
 10630 13c9 00000000 		.4byte	.LVL403
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 283


 10631 13cd 0F000000 		.4byte	.LVL405-1
 10632 13d1 0100     		.2byte	0x1
 10633 13d3 51       		.byte	0x51
 10634 13d4 0F000000 		.4byte	.LVL405-1
 10635 13d8 3E000000 		.4byte	.LVL408
 10636 13dc 0100     		.2byte	0x1
 10637 13de 56       		.byte	0x56
 10638 13df 3E000000 		.4byte	.LVL408
 10639 13e3 44000000 		.4byte	.LVL409
 10640 13e7 0400     		.2byte	0x4
 10641 13e9 F3       		.byte	0xf3
 10642 13ea 01       		.uleb128 0x1
 10643 13eb 51       		.byte	0x51
 10644 13ec 9F       		.byte	0x9f
 10645 13ed 44000000 		.4byte	.LVL409
 10646 13f1 4C000000 		.4byte	.LVL410
 10647 13f5 0100     		.2byte	0x1
 10648 13f7 56       		.byte	0x56
 10649 13f8 4C000000 		.4byte	.LVL410
 10650 13fc 4E000000 		.4byte	.LVL411
 10651 1400 0400     		.2byte	0x4
 10652 1402 F3       		.byte	0xf3
 10653 1403 01       		.uleb128 0x1
 10654 1404 51       		.byte	0x51
 10655 1405 9F       		.byte	0x9f
 10656 1406 4E000000 		.4byte	.LVL411
 10657 140a 52000000 		.4byte	.LVL412
 10658 140e 0100     		.2byte	0x1
 10659 1410 56       		.byte	0x56
 10660 1411 52000000 		.4byte	.LVL412
 10661 1415 54000000 		.4byte	.LVL413
 10662 1419 0300     		.2byte	0x3
 10663 141b 74       		.byte	0x74
 10664 141c E000     		.sleb128 96
 10665 141e 54000000 		.4byte	.LVL413
 10666 1422 5C000000 		.4byte	.LVL414
 10667 1426 0100     		.2byte	0x1
 10668 1428 56       		.byte	0x56
 10669 1429 5C000000 		.4byte	.LVL414
 10670 142d 5E000000 		.4byte	.LVL415
 10671 1431 0300     		.2byte	0x3
 10672 1433 74       		.byte	0x74
 10673 1434 E000     		.sleb128 96
 10674 1436 5E000000 		.4byte	.LVL415
 10675 143a 60000000 		.4byte	.LVL416
 10676 143e 0100     		.2byte	0x1
 10677 1440 56       		.byte	0x56
 10678 1441 60000000 		.4byte	.LVL416
 10679 1445 62000000 		.4byte	.LVL417
 10680 1449 0400     		.2byte	0x4
 10681 144b F3       		.byte	0xf3
 10682 144c 01       		.uleb128 0x1
 10683 144d 51       		.byte	0x51
 10684 144e 9F       		.byte	0x9f
 10685 144f 62000000 		.4byte	.LVL417
 10686 1453 64000000 		.4byte	.LVL418
 10687 1457 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 284


 10688 1459 56       		.byte	0x56
 10689 145a 64000000 		.4byte	.LVL418
 10690 145e E0000000 		.4byte	.LFE81
 10691 1462 0400     		.2byte	0x4
 10692 1464 F3       		.byte	0xf3
 10693 1465 01       		.uleb128 0x1
 10694 1466 51       		.byte	0x51
 10695 1467 9F       		.byte	0x9f
 10696 1468 00000000 		.4byte	0
 10697 146c 00000000 		.4byte	0
 10698              	.LLST127:
 10699 1470 00000000 		.4byte	.LVL403
 10700 1474 0F000000 		.4byte	.LVL405-1
 10701 1478 0100     		.2byte	0x1
 10702 147a 52       		.byte	0x52
 10703 147b 0F000000 		.4byte	.LVL405-1
 10704 147f E0000000 		.4byte	.LFE81
 10705 1483 0400     		.2byte	0x4
 10706 1485 F3       		.byte	0xf3
 10707 1486 01       		.uleb128 0x1
 10708 1487 52       		.byte	0x52
 10709 1488 9F       		.byte	0x9f
 10710 1489 00000000 		.4byte	0
 10711 148d 00000000 		.4byte	0
 10712              	.LLST128:
 10713 1491 00000000 		.4byte	.LVL403
 10714 1495 0F000000 		.4byte	.LVL405-1
 10715 1499 0100     		.2byte	0x1
 10716 149b 53       		.byte	0x53
 10717 149c 0F000000 		.4byte	.LVL405-1
 10718 14a0 D0000000 		.4byte	.LVL428
 10719 14a4 0100     		.2byte	0x1
 10720 14a6 55       		.byte	0x55
 10721 14a7 D0000000 		.4byte	.LVL428
 10722 14ab E0000000 		.4byte	.LFE81
 10723 14af 0400     		.2byte	0x4
 10724 14b1 F3       		.byte	0xf3
 10725 14b2 01       		.uleb128 0x1
 10726 14b3 53       		.byte	0x53
 10727 14b4 9F       		.byte	0x9f
 10728 14b5 00000000 		.4byte	0
 10729 14b9 00000000 		.4byte	0
 10730              	.LLST129:
 10731 14bd 0C000000 		.4byte	.LVL404
 10732 14c1 0F000000 		.4byte	.LVL405-1
 10733 14c5 0100     		.2byte	0x1
 10734 14c7 50       		.byte	0x50
 10735 14c8 0F000000 		.4byte	.LVL405-1
 10736 14cc D0000000 		.4byte	.LVL427
 10737 14d0 0100     		.2byte	0x1
 10738 14d2 54       		.byte	0x54
 10739 14d3 D0000000 		.4byte	.LVL427
 10740 14d7 E0000000 		.4byte	.LFE81
 10741 14db 0400     		.2byte	0x4
 10742 14dd F3       		.byte	0xf3
 10743 14de 01       		.uleb128 0x1
 10744 14df 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 285


 10745 14e0 9F       		.byte	0x9f
 10746 14e1 00000000 		.4byte	0
 10747 14e5 00000000 		.4byte	0
 10748              	.LLST130:
 10749 14e9 20000000 		.4byte	.LVL407
 10750 14ed 6A000000 		.4byte	.LVL419
 10751 14f1 0100     		.2byte	0x1
 10752 14f3 53       		.byte	0x53
 10753 14f4 00000000 		.4byte	0
 10754 14f8 00000000 		.4byte	0
 10755              	.LLST131:
 10756 14fc 0C000000 		.4byte	.LVL404
 10757 1500 64000000 		.4byte	.LVL418
 10758 1504 0200     		.2byte	0x2
 10759 1506 31       		.byte	0x31
 10760 1507 9F       		.byte	0x9f
 10761 1508 64000000 		.4byte	.LVL418
 10762 150c D0000000 		.4byte	.LVL429
 10763 1510 0100     		.2byte	0x1
 10764 1512 56       		.byte	0x56
 10765 1513 D0000000 		.4byte	.LVL429
 10766 1517 E0000000 		.4byte	.LFE81
 10767 151b 0100     		.2byte	0x1
 10768 151d 50       		.byte	0x50
 10769 151e 00000000 		.4byte	0
 10770 1522 00000000 		.4byte	0
 10771              	.LLST132:
 10772 1526 12000000 		.4byte	.LVL406
 10773 152a 74000000 		.4byte	.LVL420
 10774 152e 0100     		.2byte	0x1
 10775 1530 50       		.byte	0x50
 10776 1531 74000000 		.4byte	.LVL420
 10777 1535 9A000000 		.4byte	.LVL423
 10778 1539 0200     		.2byte	0x2
 10779 153b 91       		.byte	0x91
 10780 153c 64       		.sleb128 -28
 10781 153d 9A000000 		.4byte	.LVL423
 10782 1541 A0000000 		.4byte	.LVL424
 10783 1545 0100     		.2byte	0x1
 10784 1547 50       		.byte	0x50
 10785 1548 A0000000 		.4byte	.LVL424
 10786 154c E0000000 		.4byte	.LFE81
 10787 1550 0200     		.2byte	0x2
 10788 1552 91       		.byte	0x91
 10789 1553 64       		.sleb128 -28
 10790 1554 00000000 		.4byte	0
 10791 1558 00000000 		.4byte	0
 10792              	.LLST133:
 10793 155c 00000000 		.4byte	.LVL430
 10794 1560 09000000 		.4byte	.LVL432-1
 10795 1564 0100     		.2byte	0x1
 10796 1566 50       		.byte	0x50
 10797 1567 09000000 		.4byte	.LVL432-1
 10798 156b 7E000000 		.4byte	.LVL442
 10799 156f 0100     		.2byte	0x1
 10800 1571 54       		.byte	0x54
 10801 1572 7E000000 		.4byte	.LVL442
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 286


 10802 1576 8C000000 		.4byte	.LFE82
 10803 157a 0400     		.2byte	0x4
 10804 157c F3       		.byte	0xf3
 10805 157d 01       		.uleb128 0x1
 10806 157e 50       		.byte	0x50
 10807 157f 9F       		.byte	0x9f
 10808 1580 00000000 		.4byte	0
 10809 1584 00000000 		.4byte	0
 10810              	.LLST134:
 10811 1588 00000000 		.4byte	.LVL430
 10812 158c 09000000 		.4byte	.LVL432-1
 10813 1590 0100     		.2byte	0x1
 10814 1592 51       		.byte	0x51
 10815 1593 09000000 		.4byte	.LVL432-1
 10816 1597 7E000000 		.4byte	.LVL444
 10817 159b 0100     		.2byte	0x1
 10818 159d 56       		.byte	0x56
 10819 159e 7E000000 		.4byte	.LVL444
 10820 15a2 8C000000 		.4byte	.LFE82
 10821 15a6 0400     		.2byte	0x4
 10822 15a8 F3       		.byte	0xf3
 10823 15a9 01       		.uleb128 0x1
 10824 15aa 51       		.byte	0x51
 10825 15ab 9F       		.byte	0x9f
 10826 15ac 00000000 		.4byte	0
 10827 15b0 00000000 		.4byte	0
 10828              	.LLST135:
 10829 15b4 06000000 		.4byte	.LVL431
 10830 15b8 09000000 		.4byte	.LVL432-1
 10831 15bc 0100     		.2byte	0x1
 10832 15be 50       		.byte	0x50
 10833 15bf 09000000 		.4byte	.LVL432-1
 10834 15c3 7E000000 		.4byte	.LVL442
 10835 15c7 0100     		.2byte	0x1
 10836 15c9 54       		.byte	0x54
 10837 15ca 7E000000 		.4byte	.LVL442
 10838 15ce 8C000000 		.4byte	.LFE82
 10839 15d2 0400     		.2byte	0x4
 10840 15d4 F3       		.byte	0xf3
 10841 15d5 01       		.uleb128 0x1
 10842 15d6 50       		.byte	0x50
 10843 15d7 9F       		.byte	0x9f
 10844 15d8 00000000 		.4byte	0
 10845 15dc 00000000 		.4byte	0
 10846              	.LLST136:
 10847 15e0 10000000 		.4byte	.LVL434
 10848 15e4 2D000000 		.4byte	.LVL436-1
 10849 15e8 0100     		.2byte	0x1
 10850 15ea 52       		.byte	0x52
 10851 15eb 50000000 		.4byte	.LVL438
 10852 15ef 5B000000 		.4byte	.LVL440-1
 10853 15f3 0100     		.2byte	0x1
 10854 15f5 52       		.byte	0x52
 10855 15f6 00000000 		.4byte	0
 10856 15fa 00000000 		.4byte	0
 10857              	.LLST137:
 10858 15fe 0C000000 		.4byte	.LVL433
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 287


 10859 1602 2A000000 		.4byte	.LVL435
 10860 1606 0100     		.2byte	0x1
 10861 1608 50       		.byte	0x50
 10862 1609 2A000000 		.4byte	.LVL435
 10863 160d 50000000 		.4byte	.LVL438
 10864 1611 0100     		.2byte	0x1
 10865 1613 55       		.byte	0x55
 10866 1614 50000000 		.4byte	.LVL438
 10867 1618 56000000 		.4byte	.LVL439
 10868 161c 0100     		.2byte	0x1
 10869 161e 50       		.byte	0x50
 10870 161f 56000000 		.4byte	.LVL439
 10871 1623 7E000000 		.4byte	.LVL443
 10872 1627 0100     		.2byte	0x1
 10873 1629 55       		.byte	0x55
 10874 162a 00000000 		.4byte	0
 10875 162e 00000000 		.4byte	0
 10876              	.LLST138:
 10877 1632 00000000 		.4byte	.LVL445
 10878 1636 0A000000 		.4byte	.LVL446
 10879 163a 0100     		.2byte	0x1
 10880 163c 50       		.byte	0x50
 10881 163d 00000000 		.4byte	0
 10882 1641 00000000 		.4byte	0
 10883              	.LLST139:
 10884 1645 0A000000 		.4byte	.LVL446
 10885 1649 1E000000 		.4byte	.LVL449
 10886 164d 0100     		.2byte	0x1
 10887 164f 54       		.byte	0x54
 10888 1650 20000000 		.4byte	.LVL450
 10889 1654 22000000 		.4byte	.LVL451
 10890 1658 0100     		.2byte	0x1
 10891 165a 54       		.byte	0x54
 10892 165b 00000000 		.4byte	0
 10893 165f 00000000 		.4byte	0
 10894              	.LLST140:
 10895 1663 1C000000 		.4byte	.LVL448
 10896 1667 20000000 		.4byte	.LVL450
 10897 166b 0200     		.2byte	0x2
 10898 166d 31       		.byte	0x31
 10899 166e 9F       		.byte	0x9f
 10900 166f 22000000 		.4byte	.LVL451
 10901 1673 28000000 		.4byte	.LVL453
 10902 1677 0100     		.2byte	0x1
 10903 1679 54       		.byte	0x54
 10904 167a 28000000 		.4byte	.LVL453
 10905 167e 30000000 		.4byte	.LFE83
 10906 1682 0100     		.2byte	0x1
 10907 1684 50       		.byte	0x50
 10908 1685 00000000 		.4byte	0
 10909 1689 00000000 		.4byte	0
 10910              		.section	.debug_aranges,"",%progbits
 10911 0000 BC010000 		.4byte	0x1bc
 10912 0004 0200     		.2byte	0x2
 10913 0006 00000000 		.4byte	.Ldebug_info0
 10914 000a 04       		.byte	0x4
 10915 000b 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 288


 10916 000c 0000     		.2byte	0
 10917 000e 0000     		.2byte	0
 10918 0010 00000000 		.4byte	.LFB43
 10919 0014 3C000000 		.4byte	.LFE43-.LFB43
 10920 0018 00000000 		.4byte	.LFB68
 10921 001c 14000000 		.4byte	.LFE68-.LFB68
 10922 0020 00000000 		.4byte	.LFB71
 10923 0024 30000000 		.4byte	.LFE71-.LFB71
 10924 0028 00000000 		.4byte	.LFB70
 10925 002c 12000000 		.4byte	.LFE70-.LFB70
 10926 0030 00000000 		.4byte	.LFB33
 10927 0034 AC000000 		.4byte	.LFE33-.LFB33
 10928 0038 00000000 		.4byte	.LFB66
 10929 003c 58000000 		.4byte	.LFE66-.LFB66
 10930 0040 00000000 		.4byte	.LFB34
 10931 0044 8C000000 		.4byte	.LFE34-.LFB34
 10932 0048 00000000 		.4byte	.LFB84
 10933 004c 64000000 		.4byte	.LFE84-.LFB84
 10934 0050 00000000 		.4byte	.LFB32
 10935 0054 5E000000 		.4byte	.LFE32-.LFB32
 10936 0058 00000000 		.4byte	.LFB35
 10937 005c 78000000 		.4byte	.LFE35-.LFB35
 10938 0060 00000000 		.4byte	.LFB38
 10939 0064 68000000 		.4byte	.LFE38-.LFB38
 10940 0068 00000000 		.4byte	.LFB39
 10941 006c 20000000 		.4byte	.LFE39-.LFB39
 10942 0070 00000000 		.4byte	.LFB40
 10943 0074 20000000 		.4byte	.LFE40-.LFB40
 10944 0078 00000000 		.4byte	.LFB41
 10945 007c BC000000 		.4byte	.LFE41-.LFB41
 10946 0080 00000000 		.4byte	.LFB44
 10947 0084 64000000 		.4byte	.LFE44-.LFB44
 10948 0088 00000000 		.4byte	.LFB45
 10949 008c 7C000000 		.4byte	.LFE45-.LFB45
 10950 0090 00000000 		.4byte	.LFB46
 10951 0094 48000000 		.4byte	.LFE46-.LFB46
 10952 0098 00000000 		.4byte	.LFB47
 10953 009c 14000000 		.4byte	.LFE47-.LFB47
 10954 00a0 00000000 		.4byte	.LFB48
 10955 00a4 10000000 		.4byte	.LFE48-.LFB48
 10956 00a8 00000000 		.4byte	.LFB50
 10957 00ac 0C000000 		.4byte	.LFE50-.LFB50
 10958 00b0 00000000 		.4byte	.LFB51
 10959 00b4 0C000000 		.4byte	.LFE51-.LFB51
 10960 00b8 00000000 		.4byte	.LFB52
 10961 00bc 0C000000 		.4byte	.LFE52-.LFB52
 10962 00c0 00000000 		.4byte	.LFB53
 10963 00c4 10000000 		.4byte	.LFE53-.LFB53
 10964 00c8 00000000 		.4byte	.LFB54
 10965 00cc D8000000 		.4byte	.LFE54-.LFB54
 10966 00d0 00000000 		.4byte	.LFB49
 10967 00d4 C8000000 		.4byte	.LFE49-.LFB49
 10968 00d8 00000000 		.4byte	.LFB36
 10969 00dc 5C000000 		.4byte	.LFE36-.LFB36
 10970 00e0 00000000 		.4byte	.LFB37
 10971 00e4 24000000 		.4byte	.LFE37-.LFB37
 10972 00e8 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 289


 10973 00ec 48000000 		.4byte	.LFE67-.LFB67
 10974 00f0 00000000 		.4byte	.LFB63
 10975 00f4 08000000 		.4byte	.LFE63-.LFB63
 10976 00f8 00000000 		.4byte	.LFB55
 10977 00fc B4000000 		.4byte	.LFE55-.LFB55
 10978 0100 00000000 		.4byte	.LFB42
 10979 0104 80000000 		.4byte	.LFE42-.LFB42
 10980 0108 00000000 		.4byte	.LFB56
 10981 010c 1C000000 		.4byte	.LFE56-.LFB56
 10982 0110 00000000 		.4byte	.LFB57
 10983 0114 28000000 		.4byte	.LFE57-.LFB57
 10984 0118 00000000 		.4byte	.LFB58
 10985 011c 74000000 		.4byte	.LFE58-.LFB58
 10986 0120 00000000 		.4byte	.LFB59
 10987 0124 60000000 		.4byte	.LFE59-.LFB59
 10988 0128 00000000 		.4byte	.LFB60
 10989 012c 10000000 		.4byte	.LFE60-.LFB60
 10990 0130 00000000 		.4byte	.LFB61
 10991 0134 54000000 		.4byte	.LFE61-.LFB61
 10992 0138 00000000 		.4byte	.LFB62
 10993 013c 0C000000 		.4byte	.LFE62-.LFB62
 10994 0140 00000000 		.4byte	.LFB64
 10995 0144 1C000000 		.4byte	.LFE64-.LFB64
 10996 0148 00000000 		.4byte	.LFB65
 10997 014c 20000000 		.4byte	.LFE65-.LFB65
 10998 0150 00000000 		.4byte	.LFB69
 10999 0154 18000000 		.4byte	.LFE69-.LFB69
 11000 0158 00000000 		.4byte	.LFB72
 11001 015c 0C000000 		.4byte	.LFE72-.LFB72
 11002 0160 00000000 		.4byte	.LFB73
 11003 0164 20000000 		.4byte	.LFE73-.LFB73
 11004 0168 00000000 		.4byte	.LFB74
 11005 016c 80000000 		.4byte	.LFE74-.LFB74
 11006 0170 00000000 		.4byte	.LFB75
 11007 0174 60000000 		.4byte	.LFE75-.LFB75
 11008 0178 00000000 		.4byte	.LFB76
 11009 017c 18000000 		.4byte	.LFE76-.LFB76
 11010 0180 00000000 		.4byte	.LFB77
 11011 0184 1C000000 		.4byte	.LFE77-.LFB77
 11012 0188 00000000 		.4byte	.LFB78
 11013 018c 6C000000 		.4byte	.LFE78-.LFB78
 11014 0190 00000000 		.4byte	.LFB79
 11015 0194 80000000 		.4byte	.LFE79-.LFB79
 11016 0198 00000000 		.4byte	.LFB80
 11017 019c AC000000 		.4byte	.LFE80-.LFB80
 11018 01a0 00000000 		.4byte	.LFB81
 11019 01a4 E0000000 		.4byte	.LFE81-.LFB81
 11020 01a8 00000000 		.4byte	.LFB82
 11021 01ac 8C000000 		.4byte	.LFE82-.LFB82
 11022 01b0 00000000 		.4byte	.LFB83
 11023 01b4 30000000 		.4byte	.LFE83-.LFB83
 11024 01b8 00000000 		.4byte	0
 11025 01bc 00000000 		.4byte	0
 11026              		.section	.debug_ranges,"",%progbits
 11027              	.Ldebug_ranges0:
 11028 0000 0A000000 		.4byte	.LBB3
 11029 0004 32000000 		.4byte	.LBE3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 290


 11030 0008 36000000 		.4byte	.LBB5
 11031 000c B2000000 		.4byte	.LBE5
 11032 0010 00000000 		.4byte	0
 11033 0014 00000000 		.4byte	0
 11034 0018 0A000000 		.4byte	.LBB7
 11035 001c 1E000000 		.4byte	.LBE7
 11036 0020 22000000 		.4byte	.LBB8
 11037 0024 2A000000 		.4byte	.LBE8
 11038 0028 32000000 		.4byte	.LBB9
 11039 002c 4A000000 		.4byte	.LBE9
 11040 0030 00000000 		.4byte	0
 11041 0034 00000000 		.4byte	0
 11042 0038 00000000 		.4byte	.LFB43
 11043 003c 3C000000 		.4byte	.LFE43
 11044 0040 00000000 		.4byte	.LFB68
 11045 0044 14000000 		.4byte	.LFE68
 11046 0048 00000000 		.4byte	.LFB71
 11047 004c 30000000 		.4byte	.LFE71
 11048 0050 00000000 		.4byte	.LFB70
 11049 0054 12000000 		.4byte	.LFE70
 11050 0058 00000000 		.4byte	.LFB33
 11051 005c AC000000 		.4byte	.LFE33
 11052 0060 00000000 		.4byte	.LFB66
 11053 0064 58000000 		.4byte	.LFE66
 11054 0068 00000000 		.4byte	.LFB34
 11055 006c 8C000000 		.4byte	.LFE34
 11056 0070 00000000 		.4byte	.LFB84
 11057 0074 64000000 		.4byte	.LFE84
 11058 0078 00000000 		.4byte	.LFB32
 11059 007c 5E000000 		.4byte	.LFE32
 11060 0080 00000000 		.4byte	.LFB35
 11061 0084 78000000 		.4byte	.LFE35
 11062 0088 00000000 		.4byte	.LFB38
 11063 008c 68000000 		.4byte	.LFE38
 11064 0090 00000000 		.4byte	.LFB39
 11065 0094 20000000 		.4byte	.LFE39
 11066 0098 00000000 		.4byte	.LFB40
 11067 009c 20000000 		.4byte	.LFE40
 11068 00a0 00000000 		.4byte	.LFB41
 11069 00a4 BC000000 		.4byte	.LFE41
 11070 00a8 00000000 		.4byte	.LFB44
 11071 00ac 64000000 		.4byte	.LFE44
 11072 00b0 00000000 		.4byte	.LFB45
 11073 00b4 7C000000 		.4byte	.LFE45
 11074 00b8 00000000 		.4byte	.LFB46
 11075 00bc 48000000 		.4byte	.LFE46
 11076 00c0 00000000 		.4byte	.LFB47
 11077 00c4 14000000 		.4byte	.LFE47
 11078 00c8 00000000 		.4byte	.LFB48
 11079 00cc 10000000 		.4byte	.LFE48
 11080 00d0 00000000 		.4byte	.LFB50
 11081 00d4 0C000000 		.4byte	.LFE50
 11082 00d8 00000000 		.4byte	.LFB51
 11083 00dc 0C000000 		.4byte	.LFE51
 11084 00e0 00000000 		.4byte	.LFB52
 11085 00e4 0C000000 		.4byte	.LFE52
 11086 00e8 00000000 		.4byte	.LFB53
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 291


 11087 00ec 10000000 		.4byte	.LFE53
 11088 00f0 00000000 		.4byte	.LFB54
 11089 00f4 D8000000 		.4byte	.LFE54
 11090 00f8 00000000 		.4byte	.LFB49
 11091 00fc C8000000 		.4byte	.LFE49
 11092 0100 00000000 		.4byte	.LFB36
 11093 0104 5C000000 		.4byte	.LFE36
 11094 0108 00000000 		.4byte	.LFB37
 11095 010c 24000000 		.4byte	.LFE37
 11096 0110 00000000 		.4byte	.LFB67
 11097 0114 48000000 		.4byte	.LFE67
 11098 0118 00000000 		.4byte	.LFB63
 11099 011c 08000000 		.4byte	.LFE63
 11100 0120 00000000 		.4byte	.LFB55
 11101 0124 B4000000 		.4byte	.LFE55
 11102 0128 00000000 		.4byte	.LFB42
 11103 012c 80000000 		.4byte	.LFE42
 11104 0130 00000000 		.4byte	.LFB56
 11105 0134 1C000000 		.4byte	.LFE56
 11106 0138 00000000 		.4byte	.LFB57
 11107 013c 28000000 		.4byte	.LFE57
 11108 0140 00000000 		.4byte	.LFB58
 11109 0144 74000000 		.4byte	.LFE58
 11110 0148 00000000 		.4byte	.LFB59
 11111 014c 60000000 		.4byte	.LFE59
 11112 0150 00000000 		.4byte	.LFB60
 11113 0154 10000000 		.4byte	.LFE60
 11114 0158 00000000 		.4byte	.LFB61
 11115 015c 54000000 		.4byte	.LFE61
 11116 0160 00000000 		.4byte	.LFB62
 11117 0164 0C000000 		.4byte	.LFE62
 11118 0168 00000000 		.4byte	.LFB64
 11119 016c 1C000000 		.4byte	.LFE64
 11120 0170 00000000 		.4byte	.LFB65
 11121 0174 20000000 		.4byte	.LFE65
 11122 0178 00000000 		.4byte	.LFB69
 11123 017c 18000000 		.4byte	.LFE69
 11124 0180 00000000 		.4byte	.LFB72
 11125 0184 0C000000 		.4byte	.LFE72
 11126 0188 00000000 		.4byte	.LFB73
 11127 018c 20000000 		.4byte	.LFE73
 11128 0190 00000000 		.4byte	.LFB74
 11129 0194 80000000 		.4byte	.LFE74
 11130 0198 00000000 		.4byte	.LFB75
 11131 019c 60000000 		.4byte	.LFE75
 11132 01a0 00000000 		.4byte	.LFB76
 11133 01a4 18000000 		.4byte	.LFE76
 11134 01a8 00000000 		.4byte	.LFB77
 11135 01ac 1C000000 		.4byte	.LFE77
 11136 01b0 00000000 		.4byte	.LFB78
 11137 01b4 6C000000 		.4byte	.LFE78
 11138 01b8 00000000 		.4byte	.LFB79
 11139 01bc 80000000 		.4byte	.LFE79
 11140 01c0 00000000 		.4byte	.LFB80
 11141 01c4 AC000000 		.4byte	.LFE80
 11142 01c8 00000000 		.4byte	.LFB81
 11143 01cc E0000000 		.4byte	.LFE81
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 292


 11144 01d0 00000000 		.4byte	.LFB82
 11145 01d4 8C000000 		.4byte	.LFE82
 11146 01d8 00000000 		.4byte	.LFB83
 11147 01dc 30000000 		.4byte	.LFE83
 11148 01e0 00000000 		.4byte	0
 11149 01e4 00000000 		.4byte	0
 11150              		.section	.debug_line,"",%progbits
 11151              	.Ldebug_line0:
 11152 0000 330B0000 		.section	.debug_str,"MS",%progbits,1
 11152      02009402 
 11152      00000201 
 11152      FB0E0D00 
 11152      01010101 
 11153              	.LASF69:
 11154 0000 70635461 		.ascii	"pcTaskName\000"
 11154      736B4E61 
 11154      6D6500
 11155              	.LASF36:
 11156 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 11156      6D626572 
 11156      4F664974 
 11156      656D7300 
 11157              	.LASF223:
 11158 001b 76506F72 		.ascii	"vPortExitCritical\000"
 11158      74457869 
 11158      74437269 
 11158      74696361 
 11158      6C00
 11159              	.LASF230:
 11160 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 11160      74537461 
 11160      72745363 
 11160      68656475 
 11160      6C657200 
 11161              	.LASF67:
 11162 0041 75785072 		.ascii	"uxPriority\000"
 11162      696F7269 
 11162      747900
 11163              	.LASF147:
 11164 004c 7078436F 		.ascii	"pxConstList\000"
 11164      6E73744C 
 11164      69737400 
 11165              	.LASF106:
 11166 0058 70785374 		.ascii	"pxStateList\000"
 11166      6174654C 
 11166      69737400 
 11167              	.LASF44:
 11168 0064 65537573 		.ascii	"eSuspended\000"
 11168      70656E64 
 11168      656400
 11169              	.LASF224:
 11170 006f 76506F72 		.ascii	"vPortYield\000"
 11170      74596965 
 11170      6C6400
 11171              	.LASF46:
 11172 007a 65496E76 		.ascii	"eInvalid\000"
 11172      616C6964 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 293


 11172      00
 11173              	.LASF133:
 11174 0083 75785065 		.ascii	"uxPendedCounts\000"
 11174      6E646564 
 11174      436F756E 
 11174      747300
 11175              	.LASF163:
 11176 0092 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 11176      6B536574 
 11176      54687265 
 11176      61644C6F 
 11176      63616C53 
 11177              	.LASF184:
 11178 00b4 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11178      7473546F 
 11178      436C6561 
 11178      724F6E45 
 11178      78697400 
 11179              	.LASF86:
 11180 00c8 70727649 		.ascii	"prvInitialiseNewTask\000"
 11180      6E697469 
 11180      616C6973 
 11180      654E6577 
 11180      5461736B 
 11181              	.LASF172:
 11182 00dd 78546173 		.ascii	"xTaskGetSchedulerState\000"
 11182      6B476574 
 11182      53636865 
 11182      64756C65 
 11182      72537461 
 11183              	.LASF193:
 11184 00f4 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11184      67686572 
 11184      5072696F 
 11184      72697479 
 11184      5461736B 
 11185              	.LASF48:
 11186 010e 654E6F41 		.ascii	"eNoAction\000"
 11186      6374696F 
 11186      6E00
 11187              	.LASF207:
 11188 0118 7578546F 		.ascii	"uxTopReadyPriority\000"
 11188      70526561 
 11188      64795072 
 11188      696F7269 
 11188      747900
 11189              	.LASF0:
 11190 012b 756E7369 		.ascii	"unsigned int\000"
 11190      676E6564 
 11190      20696E74 
 11190      00
 11191              	.LASF151:
 11192 0138 70784576 		.ascii	"pxEventList\000"
 11192      656E744C 
 11192      69737400 
 11193              	.LASF208:
 11194 0144 78536368 		.ascii	"xSchedulerRunning\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 294


 11194      6564756C 
 11194      65725275 
 11194      6E6E696E 
 11194      6700
 11195              	.LASF37:
 11196 0156 7078496E 		.ascii	"pxIndex\000"
 11196      64657800 
 11197              	.LASF173:
 11198 015e 76546173 		.ascii	"vTaskPriorityInherit\000"
 11198      6B507269 
 11198      6F726974 
 11198      79496E68 
 11198      65726974 
 11199              	.LASF22:
 11200 0173 53746163 		.ascii	"StackType_t\000"
 11200      6B547970 
 11200      655F7400 
 11201              	.LASF54:
 11202 017f 7854494D 		.ascii	"xTIME_OUT\000"
 11202      455F4F55 
 11202      5400
 11203              	.LASF203:
 11204 0189 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11204      6C657465 
 11204      64546173 
 11204      6B735761 
 11204      6974696E 
 11205              	.LASF32:
 11206 01a6 784C4953 		.ascii	"xLIST_ITEM\000"
 11206      545F4954 
 11206      454D00
 11207              	.LASF196:
 11208 01b1 70785265 		.ascii	"pxReadyTasksLists\000"
 11208      61647954 
 11208      61736B73 
 11208      4C697374 
 11208      7300
 11209              	.LASF191:
 11210 01c3 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11210      6967696E 
 11210      616C4E6F 
 11210      74696679 
 11210      53746174 
 11211              	.LASF157:
 11212 01d9 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11212      6B536574 
 11212      54696D65 
 11212      4F757453 
 11212      74617465 
 11213              	.LASF192:
 11214 01ee 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11214      6B47656E 
 11214      65726963 
 11214      4E6F7469 
 11214      66794672 
 11215              	.LASF82:
 11216 0208 70756353 		.ascii	"pucStackByte\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 295


 11216      7461636B 
 11216      42797465 
 11216      00
 11217              	.LASF197:
 11218 0215 7844656C 		.ascii	"xDelayedTaskList1\000"
 11218      61796564 
 11218      5461736B 
 11218      4C697374 
 11218      3100
 11219              	.LASF198:
 11220 0227 7844656C 		.ascii	"xDelayedTaskList2\000"
 11220      61796564 
 11220      5461736B 
 11220      4C697374 
 11220      3200
 11221              	.LASF55:
 11222 0239 784F7665 		.ascii	"xOverflowCount\000"
 11222      72666C6F 
 11222      77436F75 
 11222      6E7400
 11223              	.LASF221:
 11224 0248 76506F72 		.ascii	"vPortEnterCritical\000"
 11224      74456E74 
 11224      65724372 
 11224      69746963 
 11224      616C00
 11225              	.LASF61:
 11226 025b 756C5061 		.ascii	"ulParameters\000"
 11226      72616D65 
 11226      74657273 
 11226      00
 11227              	.LASF105:
 11228 0268 65526574 		.ascii	"eReturn\000"
 11228      75726E00 
 11229              	.LASF118:
 11230 0270 78546173 		.ascii	"xTaskToResume\000"
 11230      6B546F52 
 11230      6573756D 
 11230      6500
 11231              	.LASF108:
 11232 027e 75785265 		.ascii	"uxReturn\000"
 11232      7475726E 
 11232      00
 11233              	.LASF177:
 11234 0287 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11234      736B4765 
 11234      744E756D 
 11234      6265724F 
 11234      66546173 
 11235              	.LASF75:
 11236 029e 74736B54 		.ascii	"tskTCB\000"
 11236      434200
 11237              	.LASF120:
 11238 02a5 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11238      76656449 
 11238      6E746572 
 11238      72757074 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 296


 11238      53746174 
 11239              	.LASF18:
 11240 02bc 75696E74 		.ascii	"uint32_t\000"
 11240      33325F74 
 11240      00
 11241              	.LASF74:
 11242 02c5 75634E6F 		.ascii	"ucNotifyState\000"
 11242      74696679 
 11242      53746174 
 11242      6500
 11243              	.LASF225:
 11244 02d3 75784C69 		.ascii	"uxListRemove\000"
 11244      73745265 
 11244      6D6F7665 
 11244      00
 11245              	.LASF116:
 11246 02e0 78596965 		.ascii	"xYieldRequired\000"
 11246      6C645265 
 11246      71756972 
 11246      656400
 11247              	.LASF186:
 11248 02ef 78546173 		.ascii	"xTaskGenericNotify\000"
 11248      6B47656E 
 11248      65726963 
 11248      4E6F7469 
 11248      667900
 11249              	.LASF19:
 11250 0302 666C6F61 		.ascii	"float\000"
 11250      7400
 11251              	.LASF154:
 11252 0308 7078556E 		.ascii	"pxUnblockedTCB\000"
 11252      626C6F63 
 11252      6B656454 
 11252      434200
 11253              	.LASF235:
 11254 0317 433A5C55 		.ascii	"C:\\Users\\Xwx47\\Documents\\Creator\\FreeRTOS_49-4"
 11254      73657273 
 11254      5C587778 
 11254      34375C44 
 11254      6F63756D 
 11255 0345 3278785C 		.ascii	"2xx\\Blinky_FreeRTOS9.cydsn\000"
 11255      426C696E 
 11255      6B795F46 
 11255      72656552 
 11255      544F5339 
 11256              	.LASF101:
 11257 0360 75735374 		.ascii	"usStackDepth\000"
 11257      61636B44 
 11257      65707468 
 11257      00
 11258              	.LASF180:
 11259 036d 78436C65 		.ascii	"xClearCountOnExit\000"
 11259      6172436F 
 11259      756E744F 
 11259      6E457869 
 11259      7400
 11260              	.LASF51:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 297


 11261 037f 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11261      56616C75 
 11261      65576974 
 11261      684F7665 
 11261      72777269 
 11262              	.LASF13:
 11263 0396 6C6F6E67 		.ascii	"long long unsigned int\000"
 11263      206C6F6E 
 11263      6720756E 
 11263      7369676E 
 11263      65642069 
 11264              	.LASF125:
 11265 03ad 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11265      6B476574 
 11265      5469636B 
 11265      436F756E 
 11265      7446726F 
 11266              	.LASF110:
 11267 03c6 75785361 		.ascii	"uxSavedInterruptState\000"
 11267      76656449 
 11267      6E746572 
 11267      72757074 
 11267      53746174 
 11268              	.LASF183:
 11269 03dc 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11269      7473546F 
 11269      436C6561 
 11269      724F6E45 
 11269      6E747279 
 11270              	.LASF201:
 11271 03f1 7850656E 		.ascii	"xPendingReadyList\000"
 11271      64696E67 
 11271      52656164 
 11271      794C6973 
 11271      7400
 11272              	.LASF28:
 11273 0403 70785072 		.ascii	"pxPrevious\000"
 11273      6576696F 
 11273      757300
 11274              	.LASF202:
 11275 040e 78546173 		.ascii	"xTasksWaitingTermination\000"
 11275      6B735761 
 11275      6974696E 
 11275      67546572 
 11275      6D696E61 
 11276              	.LASF8:
 11277 0427 5F5F7569 		.ascii	"__uint16_t\000"
 11277      6E743136 
 11277      5F7400
 11278              	.LASF168:
 11279 0432 70765265 		.ascii	"pvReturn\000"
 11279      7475726E 
 11279      00
 11280              	.LASF119:
 11281 043b 78546173 		.ascii	"xTaskResumeFromISR\000"
 11281      6B526573 
 11281      756D6546 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 298


 11281      726F6D49 
 11281      535200
 11282              	.LASF227:
 11283 044e 7076506F 		.ascii	"pvPortMalloc\000"
 11283      72744D61 
 11283      6C6C6F63 
 11283      00
 11284              	.LASF161:
 11285 045b 76546173 		.ascii	"vTaskSuspendAll\000"
 11285      6B537573 
 11285      70656E64 
 11285      416C6C00 
 11286              	.LASF169:
 11287 046b 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11287      736B4765 
 11287      74537461 
 11287      636B4869 
 11287      67685761 
 11288              	.LASF128:
 11289 0487 78546173 		.ascii	"xTaskIncrementTick\000"
 11289      6B496E63 
 11289      72656D65 
 11289      6E745469 
 11289      636B00
 11290              	.LASF72:
 11291 049a 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 11291      72656164 
 11291      4C6F6361 
 11291      6C53746F 
 11291      72616765 
 11292              	.LASF233:
 11293 04b7 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11293      43313120 
 11293      352E342E 
 11293      31203230 
 11293      31363036 
 11294 04ea 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 11294      20726576 
 11294      6973696F 
 11294      6E203233 
 11294      37373135 
 11295 051d 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11295      66756E63 
 11295      74696F6E 
 11295      2D736563 
 11295      74696F6E 
 11296              	.LASF53:
 11297 0545 654E6F74 		.ascii	"eNotifyAction\000"
 11297      69667941 
 11297      6374696F 
 11297      6E00
 11298              	.LASF4:
 11299 0553 73697A65 		.ascii	"size_t\000"
 11299      5F7400
 11300              	.LASF50:
 11301 055a 65496E63 		.ascii	"eIncrement\000"
 11301      72656D65 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 299


 11301      6E7400
 11302              	.LASF33:
 11303 0565 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11303      495F4C49 
 11303      53545F49 
 11303      54454D00 
 11304              	.LASF206:
 11305 0575 78546963 		.ascii	"xTickCount\000"
 11305      6B436F75 
 11305      6E7400
 11306              	.LASF35:
 11307 0580 784C4953 		.ascii	"xLIST\000"
 11307      5400
 11308              	.LASF122:
 11309 0586 76546173 		.ascii	"vTaskEndScheduler\000"
 11309      6B456E64 
 11309      53636865 
 11309      64756C65 
 11309      7200
 11310              	.LASF107:
 11311 0598 75785461 		.ascii	"uxTaskPriorityGet\000"
 11311      736B5072 
 11311      696F7269 
 11311      74794765 
 11311      7400
 11312              	.LASF100:
 11313 05aa 78436F6E 		.ascii	"xConstTickCount\000"
 11313      73745469 
 11313      636B436F 
 11313      756E7400 
 11314              	.LASF222:
 11315 05ba 764C6973 		.ascii	"vListInsertEnd\000"
 11315      74496E73 
 11315      65727445 
 11315      6E6400
 11316              	.LASF204:
 11317 05c9 78537573 		.ascii	"xSuspendedTaskList\000"
 11317      70656E64 
 11317      65645461 
 11317      736B4C69 
 11317      737400
 11318              	.LASF88:
 11319 05dc 70634E61 		.ascii	"pcName\000"
 11319      6D6500
 11320              	.LASF234:
 11321 05e3 2E2E5C46 		.ascii	"..\\FreeRTOS9\\tasks.c\000"
 11321      72656552 
 11321      544F5339 
 11321      5C746173 
 11321      6B732E63 
 11322              	.LASF164:
 11323 05f8 78546173 		.ascii	"xTaskToSet\000"
 11323      6B546F53 
 11323      657400
 11324              	.LASF63:
 11325 0603 74736B54 		.ascii	"tskTaskControlBlock\000"
 11325      61736B43 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 300


 11325      6F6E7472 
 11325      6F6C426C 
 11325      6F636B00 
 11326              	.LASF200:
 11327 0617 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11327      6572666C 
 11327      6F774465 
 11327      6C617965 
 11327      64546173 
 11328              	.LASF150:
 11329 0631 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11329      6B506C61 
 11329      63654F6E 
 11329      4576656E 
 11329      744C6973 
 11330              	.LASF138:
 11331 0647 76546173 		.ascii	"vTaskDelay\000"
 11331      6B44656C 
 11331      617900
 11332              	.LASF178:
 11333 0652 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11333      736B496E 
 11333      6372656D 
 11333      656E744D 
 11333      75746578 
 11334              	.LASF73:
 11335 0670 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11335      74696669 
 11335      65645661 
 11335      6C756500 
 11336              	.LASF71:
 11337 0680 75784D75 		.ascii	"uxMutexesHeld\000"
 11337      74657865 
 11337      7348656C 
 11337      6400
 11338              	.LASF175:
 11339 068e 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11339      6B507269 
 11339      6F726974 
 11339      79446973 
 11339      696E6865 
 11340              	.LASF153:
 11341 06a6 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11341      6B52656D 
 11341      6F766546 
 11341      726F6D45 
 11341      76656E74 
 11342              	.LASF15:
 11343 06bf 63686172 		.ascii	"char\000"
 11343      00
 11344              	.LASF31:
 11345 06c4 4C697374 		.ascii	"ListItem_t\000"
 11345      4974656D 
 11345      5F7400
 11346              	.LASF52:
 11347 06cf 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11347      56616C75 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 301


 11347      65576974 
 11347      686F7574 
 11347      4F766572 
 11348              	.LASF182:
 11349 06e9 78546173 		.ascii	"xTaskNotifyWait\000"
 11349      6B4E6F74 
 11349      69667957 
 11349      61697400 
 11350              	.LASF24:
 11351 06f9 55426173 		.ascii	"UBaseType_t\000"
 11351      65547970 
 11351      655F7400 
 11352              	.LASF89:
 11353 0705 756C5374 		.ascii	"ulStackDepth\000"
 11353      61636B44 
 11353      65707468 
 11353      00
 11354              	.LASF137:
 11355 0712 7853686F 		.ascii	"xShouldDelay\000"
 11355      756C6444 
 11355      656C6179 
 11355      00
 11356              	.LASF142:
 11357 071f 70727649 		.ascii	"prvIdleTask\000"
 11357      646C6554 
 11357      61736B00 
 11358              	.LASF38:
 11359 072b 784C6973 		.ascii	"xListEnd\000"
 11359      74456E64 
 11359      00
 11360              	.LASF141:
 11361 0734 784C6973 		.ascii	"xListIsEmpty\000"
 11361      74497345 
 11361      6D707479 
 11361      00
 11362              	.LASF179:
 11363 0741 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11363      736B4E6F 
 11363      74696679 
 11363      54616B65 
 11363      00
 11364              	.LASF34:
 11365 0752 4D696E69 		.ascii	"MiniListItem_t\000"
 11365      4C697374 
 11365      4974656D 
 11365      5F7400
 11366              	.LASF103:
 11367 0761 78546173 		.ascii	"xTaskCreate\000"
 11367      6B437265 
 11367      61746500 
 11368              	.LASF95:
 11369 076d 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11369      64644E65 
 11369      77546173 
 11369      6B546F52 
 11369      65616479 
 11370              	.LASF16:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 302


 11371 0786 75696E74 		.ascii	"uint8_t\000"
 11371      385F7400 
 11372              	.LASF42:
 11373 078e 65526561 		.ascii	"eReady\000"
 11373      647900
 11374              	.LASF104:
 11375 0795 65546173 		.ascii	"eTaskGetState\000"
 11375      6B476574 
 11375      53746174 
 11375      6500
 11376              	.LASF92:
 11377 07a3 70784E65 		.ascii	"pxNewTCB\000"
 11377      77544342 
 11377      00
 11378              	.LASF87:
 11379 07ac 70785461 		.ascii	"pxTaskCode\000"
 11379      736B436F 
 11379      646500
 11380              	.LASF62:
 11381 07b7 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11381      72795265 
 11381      67696F6E 
 11381      5F7400
 11382              	.LASF213:
 11383 07c6 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11383      74546173 
 11383      6B556E62 
 11383      6C6F636B 
 11383      54696D65 
 11384              	.LASF219:
 11385 07db 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11385      7274496E 
 11385      69746961 
 11385      6C697365 
 11385      53746163 
 11386              	.LASF1:
 11387 07f1 6C6F6E67 		.ascii	"long long int\000"
 11387      206C6F6E 
 11387      6720696E 
 11387      7400
 11388              	.LASF45:
 11389 07ff 6544656C 		.ascii	"eDeleted\000"
 11389      65746564 
 11389      00
 11390              	.LASF60:
 11391 0808 756C4C65 		.ascii	"ulLengthInBytes\000"
 11391      6E677468 
 11391      496E4279 
 11391      74657300 
 11392              	.LASF23:
 11393 0818 42617365 		.ascii	"BaseType_t\000"
 11393      54797065 
 11393      5F7400
 11394              	.LASF145:
 11395 0823 756C4368 		.ascii	"ulCheckValue\000"
 11395      65636B56 
 11395      616C7565 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 303


 11395      00
 11396              	.LASF84:
 11397 0830 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11397      65736574 
 11397      4E657874 
 11397      5461736B 
 11397      556E626C 
 11398              	.LASF56:
 11399 084c 7854696D 		.ascii	"xTimeOnEntering\000"
 11399      654F6E45 
 11399      6E746572 
 11399      696E6700 
 11400              	.LASF113:
 11401 085c 75784E65 		.ascii	"uxNewPriority\000"
 11401      77507269 
 11401      6F726974 
 11401      7900
 11402              	.LASF21:
 11403 086a 5461736B 		.ascii	"TaskFunction_t\000"
 11403      46756E63 
 11403      74696F6E 
 11403      5F7400
 11404              	.LASF27:
 11405 0879 70784E65 		.ascii	"pxNext\000"
 11405      787400
 11406              	.LASF190:
 11407 0880 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11407      72657669 
 11407      6F75734E 
 11407      6F746966 
 11407      69636174 
 11408              	.LASF217:
 11409 089d 6D656D73 		.ascii	"memset\000"
 11409      657400
 11410              	.LASF158:
 11411 08a4 70785469 		.ascii	"pxTimeOut\000"
 11411      6D654F75 
 11411      7400
 11412              	.LASF139:
 11413 08ae 78546963 		.ascii	"xTicksToDelay\000"
 11413      6B73546F 
 11413      44656C61 
 11413      7900
 11414              	.LASF109:
 11415 08bc 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11415      736B5072 
 11415      696F7269 
 11415      74794765 
 11415      7446726F 
 11416              	.LASF83:
 11417 08d5 756C436F 		.ascii	"ulCount\000"
 11417      756E7400 
 11418              	.LASF57:
 11419 08dd 54696D65 		.ascii	"TimeOut_t\000"
 11419      4F75745F 
 11419      7400
 11420              	.LASF212:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 304


 11421 08e7 75785461 		.ascii	"uxTaskNumber\000"
 11421      736B4E75 
 11421      6D626572 
 11421      00
 11422              	.LASF40:
 11423 08f4 5461736B 		.ascii	"TaskHandle_t\000"
 11423      48616E64 
 11423      6C655F74 
 11423      00
 11424              	.LASF189:
 11425 0901 65416374 		.ascii	"eAction\000"
 11425      696F6E00 
 11426              	.LASF176:
 11427 0909 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11427      736B5265 
 11427      73657445 
 11427      76656E74 
 11427      4974656D 
 11428              	.LASF112:
 11429 0923 76546173 		.ascii	"vTaskPrioritySet\000"
 11429      6B507269 
 11429      6F726974 
 11429      79536574 
 11429      00
 11430              	.LASF228:
 11431 0934 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 11431      74496E74 
 11431      65727275 
 11431      70744D61 
 11431      736B4672 
 11432              	.LASF47:
 11433 094e 65546173 		.ascii	"eTaskState\000"
 11433      6B537461 
 11433      746500
 11434              	.LASF39:
 11435 0959 4C697374 		.ascii	"List_t\000"
 11435      5F7400
 11436              	.LASF127:
 11437 0960 78546173 		.ascii	"xTaskToQuery\000"
 11437      6B546F51 
 11437      75657279 
 11437      00
 11438              	.LASF25:
 11439 096d 5469636B 		.ascii	"TickType_t\000"
 11439      54797065 
 11439      5F7400
 11440              	.LASF187:
 11441 0978 78546173 		.ascii	"xTaskToNotify\000"
 11441      6B546F4E 
 11441      6F746966 
 11441      7900
 11442              	.LASF81:
 11443 0986 78546173 		.ascii	"xTask\000"
 11443      6B00
 11444              	.LASF49:
 11445 098c 65536574 		.ascii	"eSetBits\000"
 11445      42697473 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 305


 11445      00
 11446              	.LASF2:
 11447 0995 6C6F6E67 		.ascii	"long double\000"
 11447      20646F75 
 11447      626C6500 
 11448              	.LASF58:
 11449 09a1 784D454D 		.ascii	"xMEMORY_REGION\000"
 11449      4F52595F 
 11449      52454749 
 11449      4F4E00
 11450              	.LASF17:
 11451 09b0 75696E74 		.ascii	"uint16_t\000"
 11451      31365F74 
 11451      00
 11452              	.LASF111:
 11453 09b9 76546173 		.ascii	"vTaskDelete\000"
 11453      6B44656C 
 11453      65746500 
 11454              	.LASF143:
 11455 09c5 76546173 		.ascii	"vTaskSwitchContext\000"
 11455      6B537769 
 11455      74636843 
 11455      6F6E7465 
 11455      787400
 11456              	.LASF211:
 11457 09d8 784E756D 		.ascii	"xNumOfOverflows\000"
 11457      4F664F76 
 11457      6572666C 
 11457      6F777300 
 11458              	.LASF30:
 11459 09e8 7076436F 		.ascii	"pvContainer\000"
 11459      6E746169 
 11459      6E657200 
 11460              	.LASF214:
 11461 09f4 7849646C 		.ascii	"xIdleTaskHandle\000"
 11461      65546173 
 11461      6B48616E 
 11461      646C6500 
 11462              	.LASF232:
 11463 0a04 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 11463      6C696361 
 11463      74696F6E 
 11463      53746163 
 11463      6B4F7665 
 11464              	.LASF7:
 11465 0a22 73686F72 		.ascii	"short int\000"
 11465      7420696E 
 11465      7400
 11466              	.LASF218:
 11467 0a2c 764C6973 		.ascii	"vListInitialiseItem\000"
 11467      74496E69 
 11467      7469616C 
 11467      69736549 
 11467      74656D00 
 11468              	.LASF90:
 11469 0a40 70765061 		.ascii	"pvParameters\000"
 11469      72616D65 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 306


 11469      74657273 
 11469      00
 11470              	.LASF26:
 11471 0a4d 78497465 		.ascii	"xItemValue\000"
 11471      6D56616C 
 11471      756500
 11472              	.LASF10:
 11473 0a58 6C6F6E67 		.ascii	"long int\000"
 11473      20696E74 
 11473      00
 11474              	.LASF131:
 11475 0a61 78546173 		.ascii	"xTaskResumeAll\000"
 11475      6B526573 
 11475      756D6541 
 11475      6C6C00
 11476              	.LASF194:
 11477 0a70 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11477      6B4E6F74 
 11477      69667947 
 11477      69766546 
 11477      726F6D49 
 11478              	.LASF199:
 11479 0a87 70784465 		.ascii	"pxDelayedTaskList\000"
 11479      6C617965 
 11479      64546173 
 11479      6B4C6973 
 11479      7400
 11480              	.LASF123:
 11481 0a99 78546173 		.ascii	"xTaskGetTickCount\000"
 11481      6B476574 
 11481      5469636B 
 11481      436F756E 
 11481      7400
 11482              	.LASF79:
 11483 0aab 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11483      61736B49 
 11483      73546173 
 11483      6B537573 
 11483      70656E64 
 11484              	.LASF129:
 11485 0ac2 78537769 		.ascii	"xSwitchRequired\000"
 11485      74636852 
 11485      65717569 
 11485      72656400 
 11486              	.LASF174:
 11487 0ad2 70784D75 		.ascii	"pxMutexHolder\000"
 11487      74657848 
 11487      6F6C6465 
 11487      7200
 11488              	.LASF68:
 11489 0ae0 70785374 		.ascii	"pxStack\000"
 11489      61636B00 
 11490              	.LASF102:
 11491 0ae8 78546173 		.ascii	"xTaskToDelete\000"
 11491      6B546F44 
 11491      656C6574 
 11491      6500
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 307


 11492              	.LASF188:
 11493 0af6 756C5661 		.ascii	"ulValue\000"
 11493      6C756500 
 11494              	.LASF149:
 11495 0afe 78546173 		.ascii	"xTaskToSuspend\000"
 11495      6B546F53 
 11495      75737065 
 11495      6E6400
 11496              	.LASF159:
 11497 0b0d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11497      6B436865 
 11497      636B466F 
 11497      7254696D 
 11497      654F7574 
 11498              	.LASF231:
 11499 0b22 76506F72 		.ascii	"vPortEndScheduler\000"
 11499      74456E64 
 11499      53636865 
 11499      64756C65 
 11499      7200
 11500              	.LASF216:
 11501 0b34 76506F72 		.ascii	"vPortFree\000"
 11501      74467265 
 11501      6500
 11502              	.LASF135:
 11503 0b3e 70785072 		.ascii	"pxPreviousWakeTime\000"
 11503      6576696F 
 11503      75735761 
 11503      6B655469 
 11503      6D6500
 11504              	.LASF5:
 11505 0b51 5F5F7569 		.ascii	"__uint8_t\000"
 11505      6E74385F 
 11505      7400
 11506              	.LASF165:
 11507 0b5b 78496E64 		.ascii	"xIndex\000"
 11507      657800
 11508              	.LASF185:
 11509 0b62 70756C4E 		.ascii	"pulNotificationValue\000"
 11509      6F746966 
 11509      69636174 
 11509      696F6E56 
 11509      616C7565 
 11510              	.LASF77:
 11511 0b77 78526574 		.ascii	"xReturn\000"
 11511      75726E00 
 11512              	.LASF14:
 11513 0b7f 73697A65 		.ascii	"sizetype\000"
 11513      74797065 
 11513      00
 11514              	.LASF162:
 11515 0b88 76546173 		.ascii	"vTaskMissedYield\000"
 11515      6B4D6973 
 11515      73656459 
 11515      69656C64 
 11515      00
 11516              	.LASF209:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 308


 11517 0b99 75785065 		.ascii	"uxPendedTicks\000"
 11517      6E646564 
 11517      5469636B 
 11517      7300
 11518              	.LASF12:
 11519 0ba7 6C6F6E67 		.ascii	"long unsigned int\000"
 11519      20756E73 
 11519      69676E65 
 11519      6420696E 
 11519      7400
 11520              	.LASF170:
 11521 0bb9 70756345 		.ascii	"pucEndOfStack\000"
 11521      6E644F66 
 11521      53746163 
 11521      6B00
 11522              	.LASF126:
 11523 0bc7 70635461 		.ascii	"pcTaskGetName\000"
 11523      736B4765 
 11523      744E616D 
 11523      6500
 11524              	.LASF124:
 11525 0bd5 78546963 		.ascii	"xTicks\000"
 11525      6B7300
 11526              	.LASF121:
 11527 0bdc 76546173 		.ascii	"vTaskStartScheduler\000"
 11527      6B537461 
 11527      72745363 
 11527      68656475 
 11527      6C657200 
 11528              	.LASF98:
 11529 0bf0 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11529      426C6F63 
 11529      6B496E64 
 11529      6566696E 
 11529      6974656C 
 11530              	.LASF41:
 11531 0c06 6552756E 		.ascii	"eRunning\000"
 11531      6E696E67 
 11531      00
 11532              	.LASF144:
 11533 0c0f 70756C53 		.ascii	"pulStack\000"
 11533      7461636B 
 11533      00
 11534              	.LASF167:
 11535 0c18 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 11535      736B4765 
 11535      74546872 
 11535      6561644C 
 11535      6F63616C 
 11536              	.LASF59:
 11537 0c3b 70764261 		.ascii	"pvBaseAddress\000"
 11537      73654164 
 11537      64726573 
 11537      7300
 11538              	.LASF130:
 11539 0c49 70785465 		.ascii	"pxTemp\000"
 11539      6D7000
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 309


 11540              	.LASF6:
 11541 0c50 756E7369 		.ascii	"unsigned char\000"
 11541      676E6564 
 11541      20636861 
 11541      7200
 11542              	.LASF152:
 11543 0c5e 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11543      6B506C61 
 11543      63654F6E 
 11543      556E6F72 
 11543      64657265 
 11544              	.LASF155:
 11545 0c7d 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11545      6B52656D 
 11545      6F766546 
 11545      726F6D55 
 11545      6E6F7264 
 11546              	.LASF11:
 11547 0c9f 5F5F7569 		.ascii	"__uint32_t\000"
 11547      6E743332 
 11547      5F7400
 11548              	.LASF195:
 11549 0caa 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11549      6B4E6F74 
 11549      69667953 
 11549      74617465 
 11549      436C6561 
 11550              	.LASF220:
 11551 0cc0 764C6973 		.ascii	"vListInitialise\000"
 11551      74496E69 
 11551      7469616C 
 11551      69736500 
 11552              	.LASF160:
 11553 0cd0 70785469 		.ascii	"pxTicksToWait\000"
 11553      636B7354 
 11553      6F576169 
 11553      7400
 11554              	.LASF226:
 11555 0cde 764C6973 		.ascii	"vListInsert\000"
 11555      74496E73 
 11555      65727400 
 11556              	.LASF146:
 11557 0cea 7578546F 		.ascii	"uxTopPriority\000"
 11557      70507269 
 11557      6F726974 
 11557      7900
 11558              	.LASF70:
 11559 0cf8 75784261 		.ascii	"uxBasePriority\000"
 11559      73655072 
 11559      696F7269 
 11559      747900
 11560              	.LASF134:
 11561 0d07 76546173 		.ascii	"vTaskDelayUntil\000"
 11561      6B44656C 
 11561      6179556E 
 11561      74696C00 
 11562              	.LASF66:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 310


 11563 0d17 78457665 		.ascii	"xEventListItem\000"
 11563      6E744C69 
 11563      73744974 
 11563      656D00
 11564              	.LASF115:
 11565 0d26 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11565      696F7269 
 11565      74795573 
 11565      65644F6E 
 11565      456E7472 
 11566              	.LASF76:
 11567 0d3c 5443425F 		.ascii	"TCB_t\000"
 11567      7400
 11568              	.LASF97:
 11569 0d42 78546963 		.ascii	"xTicksToWait\000"
 11569      6B73546F 
 11569      57616974 
 11569      00
 11570              	.LASF29:
 11571 0d4f 70764F77 		.ascii	"pvOwner\000"
 11571      6E657200 
 11572              	.LASF85:
 11573 0d57 70727644 		.ascii	"prvDeleteTCB\000"
 11573      656C6574 
 11573      65544342 
 11573      00
 11574              	.LASF43:
 11575 0d64 65426C6F 		.ascii	"eBlocked\000"
 11575      636B6564 
 11575      00
 11576              	.LASF148:
 11577 0d6d 76546173 		.ascii	"vTaskSuspend\000"
 11577      6B537573 
 11577      70656E64 
 11577      00
 11578              	.LASF229:
 11579 0d7a 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 11579      6172496E 
 11579      74657272 
 11579      7570744D 
 11579      61736B46 
 11580              	.LASF132:
 11581 0d95 78416C72 		.ascii	"xAlreadyYielded\000"
 11581      65616479 
 11581      5969656C 
 11581      64656400 
 11582              	.LASF171:
 11583 0da5 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11583      6B476574 
 11583      43757272 
 11583      656E7454 
 11583      61736B48 
 11584              	.LASF80:
 11585 0dbf 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 11585      61736B43 
 11585      6865636B 
 11585      46726565 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 311


 11585      53746163 
 11586              	.LASF93:
 11587 0dda 78526567 		.ascii	"xRegions\000"
 11587      696F6E73 
 11587      00
 11588              	.LASF96:
 11589 0de3 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 11589      64644375 
 11589      7272656E 
 11589      74546173 
 11589      6B546F44 
 11590              	.LASF236:
 11591 0e02 70784375 		.ascii	"pxCurrentTCB\000"
 11591      7272656E 
 11591      74544342 
 11591      00
 11592              	.LASF205:
 11593 0e0f 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 11593      7272656E 
 11593      744E756D 
 11593      6265724F 
 11593      66546173 
 11594              	.LASF136:
 11595 0e26 7854696D 		.ascii	"xTimeIncrement\000"
 11595      65496E63 
 11595      72656D65 
 11595      6E7400
 11596              	.LASF3:
 11597 0e35 7369676E 		.ascii	"signed char\000"
 11597      65642063 
 11597      68617200 
 11598              	.LASF9:
 11599 0e41 73686F72 		.ascii	"short unsigned int\000"
 11599      7420756E 
 11599      7369676E 
 11599      65642069 
 11599      6E7400
 11600              	.LASF99:
 11601 0e54 7854696D 		.ascii	"xTimeToWake\000"
 11601      65546F57 
 11601      616B6500 
 11602              	.LASF65:
 11603 0e60 78537461 		.ascii	"xStateListItem\000"
 11603      74654C69 
 11603      73744974 
 11603      656D00
 11604              	.LASF78:
 11605 0e6f 70785443 		.ascii	"pxTCB\000"
 11605      4200
 11606              	.LASF20:
 11607 0e75 646F7562 		.ascii	"double\000"
 11607      6C6500
 11608              	.LASF215:
 11609 0e7c 75785363 		.ascii	"uxSchedulerSuspended\000"
 11609      68656475 
 11609      6C657253 
 11609      75737065 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccP3Gzbe.s 			page 312


 11609      6E646564 
 11610              	.LASF64:
 11611 0e91 7078546F 		.ascii	"pxTopOfStack\000"
 11611      704F6653 
 11611      7461636B 
 11611      00
 11612              	.LASF117:
 11613 0e9e 76546173 		.ascii	"vTaskResume\000"
 11613      6B526573 
 11613      756D6500 
 11614              	.LASF94:
 11615 0eaa 70727649 		.ascii	"prvInitialiseTaskLists\000"
 11615      6E697469 
 11615      616C6973 
 11615      65546173 
 11615      6B4C6973 
 11616              	.LASF156:
 11617 0ec1 70784576 		.ascii	"pxEventListItem\000"
 11617      656E744C 
 11617      69737449 
 11617      74656D00 
 11618              	.LASF166:
 11619 0ed1 70765661 		.ascii	"pvValue\000"
 11619      6C756500 
 11620              	.LASF91:
 11621 0ed9 70784372 		.ascii	"pxCreatedTask\000"
 11621      65617465 
 11621      64546173 
 11621      6B00
 11622              	.LASF140:
 11623 0ee7 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 11623      6865636B 
 11623      5461736B 
 11623      73576169 
 11623      74696E67 
 11624              	.LASF181:
 11625 0f07 756C5265 		.ascii	"ulReturn\000"
 11625      7475726E 
 11625      00
 11626              	.LASF114:
 11627 0f10 75784375 		.ascii	"uxCurrentBasePriority\000"
 11627      7272656E 
 11627      74426173 
 11627      65507269 
 11627      6F726974 
 11628              	.LASF210:
 11629 0f26 78596965 		.ascii	"xYieldPending\000"
 11629      6C645065 
 11629      6E64696E 
 11629      6700
 11630              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
