ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.code	16
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB43:
  26              		.file 1 "..\\FreeRTOS10\\tasks.c"
   1:..\FreeRTOS10/tasks.c **** /*
   2:..\FreeRTOS10/tasks.c ****  * FreeRTOS Kernel V10.0.0
   3:..\FreeRTOS10/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\FreeRTOS10/tasks.c ****  *
   5:..\FreeRTOS10/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\FreeRTOS10/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\FreeRTOS10/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\FreeRTOS10/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\FreeRTOS10/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\FreeRTOS10/tasks.c ****  * subject to the following conditions:
  11:..\FreeRTOS10/tasks.c ****  *
  12:..\FreeRTOS10/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\FreeRTOS10/tasks.c ****  * copies or substantial portions of the Software. If you wish to use our Amazon
  14:..\FreeRTOS10/tasks.c ****  * FreeRTOS name, please do so in a fair use way that does not cause confusion.
  15:..\FreeRTOS10/tasks.c ****  *
  16:..\FreeRTOS10/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:..\FreeRTOS10/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  18:..\FreeRTOS10/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  19:..\FreeRTOS10/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  20:..\FreeRTOS10/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  21:..\FreeRTOS10/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  22:..\FreeRTOS10/tasks.c ****  *
  23:..\FreeRTOS10/tasks.c ****  * http://www.FreeRTOS.org
  24:..\FreeRTOS10/tasks.c ****  * http://aws.amazon.com/freertos
  25:..\FreeRTOS10/tasks.c ****  *
  26:..\FreeRTOS10/tasks.c ****  * 1 tab == 4 spaces!
  27:..\FreeRTOS10/tasks.c ****  */
  28:..\FreeRTOS10/tasks.c **** 
  29:..\FreeRTOS10/tasks.c **** /* Standard includes. */
  30:..\FreeRTOS10/tasks.c **** #include <stdlib.h>
  31:..\FreeRTOS10/tasks.c **** #include <string.h>
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 2


  32:..\FreeRTOS10/tasks.c **** 
  33:..\FreeRTOS10/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:..\FreeRTOS10/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  35:..\FreeRTOS10/tasks.c **** task.h is included from an application file. */
  36:..\FreeRTOS10/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:..\FreeRTOS10/tasks.c **** 
  38:..\FreeRTOS10/tasks.c **** /* FreeRTOS includes. */
  39:..\FreeRTOS10/tasks.c **** #include "FreeRTOS.h"
  40:..\FreeRTOS10/tasks.c **** #include "task.h"
  41:..\FreeRTOS10/tasks.c **** #include "timers.h"
  42:..\FreeRTOS10/tasks.c **** #include "stack_macros.h"
  43:..\FreeRTOS10/tasks.c **** 
  44:..\FreeRTOS10/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:..\FreeRTOS10/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:..\FreeRTOS10/tasks.c **** header files above, but not in this file, in order to generate the correct
  47:..\FreeRTOS10/tasks.c **** privileged Vs unprivileged linkage and placement. */
  48:..\FreeRTOS10/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:..\FreeRTOS10/tasks.c **** 
  50:..\FreeRTOS10/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:..\FreeRTOS10/tasks.c **** functions but without including stdio.h here. */
  52:..\FreeRTOS10/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:..\FreeRTOS10/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  54:..\FreeRTOS10/tasks.c **** 	to generate human readable text from the raw data generated by the
  55:..\FreeRTOS10/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  56:..\FreeRTOS10/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  57:..\FreeRTOS10/tasks.c **** 	#include <stdio.h>
  58:..\FreeRTOS10/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  59:..\FreeRTOS10/tasks.c **** 
  60:..\FreeRTOS10/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  61:..\FreeRTOS10/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  62:..\FreeRTOS10/tasks.c **** 	performed just because a higher priority task has been woken. */
  63:..\FreeRTOS10/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  64:..\FreeRTOS10/tasks.c **** #else
  65:..\FreeRTOS10/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  66:..\FreeRTOS10/tasks.c **** #endif
  67:..\FreeRTOS10/tasks.c **** 
  68:..\FreeRTOS10/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:..\FreeRTOS10/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  70:..\FreeRTOS10/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  71:..\FreeRTOS10/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  72:..\FreeRTOS10/tasks.c **** 
  73:..\FreeRTOS10/tasks.c **** /*
  74:..\FreeRTOS10/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  75:..\FreeRTOS10/tasks.c ****  * is used purely for checking the high water mark for tasks.
  76:..\FreeRTOS10/tasks.c ****  */
  77:..\FreeRTOS10/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  78:..\FreeRTOS10/tasks.c **** 
  79:..\FreeRTOS10/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  80:..\FreeRTOS10/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  81:..\FreeRTOS10/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  82:..\FreeRTOS10/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  83:..\FreeRTOS10/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  84:..\FreeRTOS10/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  85:..\FreeRTOS10/tasks.c **** settings allow a task to be created using either statically or dynamically
  86:..\FreeRTOS10/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  87:..\FreeRTOS10/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  88:..\FreeRTOS10/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 3


  89:..\FreeRTOS10/tasks.c **** made to free the RAM that was allocated statically.
  90:..\FreeRTOS10/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  91:..\FreeRTOS10/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  92:..\FreeRTOS10/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  93:..\FreeRTOS10/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  94:..\FreeRTOS10/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  95:..\FreeRTOS10/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  96:..\FreeRTOS10/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  97:..\FreeRTOS10/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  98:..\FreeRTOS10/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  99:..\FreeRTOS10/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 100:..\FreeRTOS10/tasks.c **** 
 101:..\FreeRTOS10/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 102:..\FreeRTOS10/tasks.c **** value so the high water mark can be determined.  If none of the following are
 103:..\FreeRTOS10/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 104:..\FreeRTOS10/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 105:..\FreeRTOS10/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 106:..\FreeRTOS10/tasks.c **** #else
 107:..\FreeRTOS10/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 108:..\FreeRTOS10/tasks.c **** #endif
 109:..\FreeRTOS10/tasks.c **** 
 110:..\FreeRTOS10/tasks.c **** /*
 111:..\FreeRTOS10/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 112:..\FreeRTOS10/tasks.c ****  */
 113:..\FreeRTOS10/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\FreeRTOS10/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\FreeRTOS10/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\FreeRTOS10/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\FreeRTOS10/tasks.c **** 
 118:..\FreeRTOS10/tasks.c **** /*
 119:..\FreeRTOS10/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\FreeRTOS10/tasks.c ****  * global, rather than file scope.
 121:..\FreeRTOS10/tasks.c ****  */
 122:..\FreeRTOS10/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\FreeRTOS10/tasks.c **** 	#define static
 124:..\FreeRTOS10/tasks.c **** #endif
 125:..\FreeRTOS10/tasks.c **** 
 126:..\FreeRTOS10/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\FreeRTOS10/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\FreeRTOS10/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\FreeRTOS10/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\FreeRTOS10/tasks.c **** #endif
 131:..\FreeRTOS10/tasks.c **** 
 132:..\FreeRTOS10/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\FreeRTOS10/tasks.c **** 
 134:..\FreeRTOS10/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\FreeRTOS10/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\FreeRTOS10/tasks.c **** 	microcontroller architecture. */
 137:..\FreeRTOS10/tasks.c **** 
 138:..\FreeRTOS10/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\FreeRTOS10/tasks.c **** 	state task. */
 140:..\FreeRTOS10/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\FreeRTOS10/tasks.c **** 	{																									\
 142:..\FreeRTOS10/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\FreeRTOS10/tasks.c **** 		{																								\
 144:..\FreeRTOS10/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\FreeRTOS10/tasks.c **** 		}																								\
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 4


 146:..\FreeRTOS10/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\FreeRTOS10/tasks.c **** 
 148:..\FreeRTOS10/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\FreeRTOS10/tasks.c **** 
 150:..\FreeRTOS10/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\FreeRTOS10/tasks.c **** 	{																									\
 152:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\FreeRTOS10/tasks.c **** 																										\
 154:..\FreeRTOS10/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\FreeRTOS10/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\FreeRTOS10/tasks.c **** 		{																								\
 157:..\FreeRTOS10/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\FreeRTOS10/tasks.c **** 			--uxTopPriority;																			\
 159:..\FreeRTOS10/tasks.c **** 		}																								\
 160:..\FreeRTOS10/tasks.c **** 																										\
 161:..\FreeRTOS10/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\FreeRTOS10/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\FreeRTOS10/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\FreeRTOS10/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\FreeRTOS10/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\FreeRTOS10/tasks.c **** 
 167:..\FreeRTOS10/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\FreeRTOS10/tasks.c **** 
 169:..\FreeRTOS10/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\FreeRTOS10/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\FreeRTOS10/tasks.c **** 	being used. */
 172:..\FreeRTOS10/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\FreeRTOS10/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\FreeRTOS10/tasks.c **** 
 175:..\FreeRTOS10/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\FreeRTOS10/tasks.c **** 
 177:..\FreeRTOS10/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\FreeRTOS10/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\FreeRTOS10/tasks.c **** 	architecture being used. */
 180:..\FreeRTOS10/tasks.c **** 
 181:..\FreeRTOS10/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:..\FreeRTOS10/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:..\FreeRTOS10/tasks.c **** 
 184:..\FreeRTOS10/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\FreeRTOS10/tasks.c **** 
 186:..\FreeRTOS10/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\FreeRTOS10/tasks.c **** 	{																								\
 188:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\FreeRTOS10/tasks.c **** 																									\
 190:..\FreeRTOS10/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\FreeRTOS10/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\FreeRTOS10/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\FreeRTOS10/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\FreeRTOS10/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\FreeRTOS10/tasks.c **** 
 196:..\FreeRTOS10/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\FreeRTOS10/tasks.c **** 
 198:..\FreeRTOS10/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\FreeRTOS10/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\FreeRTOS10/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\FreeRTOS10/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\FreeRTOS10/tasks.c **** 	{																									\
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 5


 203:..\FreeRTOS10/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\FreeRTOS10/tasks.c **** 		{																								\
 205:..\FreeRTOS10/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\FreeRTOS10/tasks.c **** 		}																								\
 207:..\FreeRTOS10/tasks.c **** 	}
 208:..\FreeRTOS10/tasks.c **** 
 209:..\FreeRTOS10/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\FreeRTOS10/tasks.c **** 
 211:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 212:..\FreeRTOS10/tasks.c **** 
 213:..\FreeRTOS10/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\FreeRTOS10/tasks.c **** count overflows. */
 215:..\FreeRTOS10/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\FreeRTOS10/tasks.c **** {																									\
 217:..\FreeRTOS10/tasks.c **** 	List_t *pxTemp;																					\
 218:..\FreeRTOS10/tasks.c **** 																									\
 219:..\FreeRTOS10/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\FreeRTOS10/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\FreeRTOS10/tasks.c **** 																									\
 222:..\FreeRTOS10/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\FreeRTOS10/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\FreeRTOS10/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\FreeRTOS10/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\FreeRTOS10/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\FreeRTOS10/tasks.c **** }
 228:..\FreeRTOS10/tasks.c **** 
 229:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 230:..\FreeRTOS10/tasks.c **** 
 231:..\FreeRTOS10/tasks.c **** /*
 232:..\FreeRTOS10/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\FreeRTOS10/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\FreeRTOS10/tasks.c ****  */
 235:..\FreeRTOS10/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\FreeRTOS10/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\FreeRTOS10/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\FreeRTOS10/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:..\FreeRTOS10/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 241:..\FreeRTOS10/tasks.c **** 
 242:..\FreeRTOS10/tasks.c **** /*
 243:..\FreeRTOS10/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\FreeRTOS10/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\FreeRTOS10/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\FreeRTOS10/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\FreeRTOS10/tasks.c ****  */
 248:..\FreeRTOS10/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:..\FreeRTOS10/tasks.c **** 
 250:..\FreeRTOS10/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\FreeRTOS10/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\FreeRTOS10/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\FreeRTOS10/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\FreeRTOS10/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\FreeRTOS10/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\FreeRTOS10/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\FreeRTOS10/tasks.c **** to its original value when it is released. */
 258:..\FreeRTOS10/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\FreeRTOS10/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 6


 260:..\FreeRTOS10/tasks.c **** #else
 261:..\FreeRTOS10/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\FreeRTOS10/tasks.c **** #endif
 263:..\FreeRTOS10/tasks.c **** 
 264:..\FreeRTOS10/tasks.c **** /*
 265:..\FreeRTOS10/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\FreeRTOS10/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\FreeRTOS10/tasks.c ****  * (the task's run time environment, including register values)
 268:..\FreeRTOS10/tasks.c ****  */
 269:..\FreeRTOS10/tasks.c **** typedef struct tskTaskControlBlock
 270:..\FreeRTOS10/tasks.c **** {
 271:..\FreeRTOS10/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\FreeRTOS10/tasks.c **** 
 273:..\FreeRTOS10/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\FreeRTOS10/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\FreeRTOS10/tasks.c **** 	#endif
 276:..\FreeRTOS10/tasks.c **** 
 277:..\FreeRTOS10/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\FreeRTOS10/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\FreeRTOS10/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\FreeRTOS10/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\FreeRTOS10/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\FreeRTOS10/tasks.c **** 
 283:..\FreeRTOS10/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\FreeRTOS10/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\FreeRTOS10/tasks.c **** 	#endif
 286:..\FreeRTOS10/tasks.c **** 
 287:..\FreeRTOS10/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\FreeRTOS10/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\FreeRTOS10/tasks.c **** 	#endif
 290:..\FreeRTOS10/tasks.c **** 
 291:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\FreeRTOS10/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\FreeRTOS10/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\FreeRTOS10/tasks.c **** 	#endif
 295:..\FreeRTOS10/tasks.c **** 
 296:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:..\FreeRTOS10/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\FreeRTOS10/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\FreeRTOS10/tasks.c **** 	#endif
 300:..\FreeRTOS10/tasks.c **** 
 301:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\FreeRTOS10/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\FreeRTOS10/tasks.c **** 	#endif
 304:..\FreeRTOS10/tasks.c **** 
 305:..\FreeRTOS10/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\FreeRTOS10/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\FreeRTOS10/tasks.c **** 	#endif
 308:..\FreeRTOS10/tasks.c **** 
 309:..\FreeRTOS10/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\FreeRTOS10/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\FreeRTOS10/tasks.c **** 	#endif
 312:..\FreeRTOS10/tasks.c **** 
 313:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\FreeRTOS10/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\FreeRTOS10/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\FreeRTOS10/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 7


 317:..\FreeRTOS10/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\FreeRTOS10/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\FreeRTOS10/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\FreeRTOS10/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\FreeRTOS10/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\FreeRTOS10/tasks.c **** 	#endif
 323:..\FreeRTOS10/tasks.c **** 
 324:..\FreeRTOS10/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\FreeRTOS10/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\FreeRTOS10/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\FreeRTOS10/tasks.c **** 	#endif
 328:..\FreeRTOS10/tasks.c **** 
 329:..\FreeRTOS10/tasks.c **** 	/* See the comments above the definition of
 330:..\FreeRTOS10/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\FreeRTOS10/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:..\FreeRTOS10/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\FreeRTOS10/tasks.c **** 	#endif
 334:..\FreeRTOS10/tasks.c **** 
 335:..\FreeRTOS10/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\FreeRTOS10/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\FreeRTOS10/tasks.c **** 	#endif
 338:..\FreeRTOS10/tasks.c **** 
 339:..\FreeRTOS10/tasks.c **** } tskTCB;
 340:..\FreeRTOS10/tasks.c **** 
 341:..\FreeRTOS10/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\FreeRTOS10/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\FreeRTOS10/tasks.c **** typedef tskTCB TCB_t;
 344:..\FreeRTOS10/tasks.c **** 
 345:..\FreeRTOS10/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\FreeRTOS10/tasks.c **** which static variables must be declared volatile. */
 347:..\FreeRTOS10/tasks.c **** 
 348:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:..\FreeRTOS10/tasks.c **** 
 350:..\FreeRTOS10/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:..\FreeRTOS10/tasks.c **** 
 358:..\FreeRTOS10/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:..\FreeRTOS10/tasks.c **** 
 360:..\FreeRTOS10/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:..\FreeRTOS10/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:..\FreeRTOS10/tasks.c **** 
 363:..\FreeRTOS10/tasks.c **** #endif
 364:..\FreeRTOS10/tasks.c **** 
 365:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:..\FreeRTOS10/tasks.c **** 
 367:..\FreeRTOS10/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:..\FreeRTOS10/tasks.c **** 
 369:..\FreeRTOS10/tasks.c **** #endif
 370:..\FreeRTOS10/tasks.c **** 
 371:..\FreeRTOS10/tasks.c **** /* Other file private variables. --------------------------------*/
 372:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 8


 374:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:..\FreeRTOS10/tasks.c **** 
 383:..\FreeRTOS10/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:..\FreeRTOS10/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:..\FreeRTOS10/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:..\FreeRTOS10/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:..\FreeRTOS10/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:..\FreeRTOS10/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:..\FreeRTOS10/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:..\FreeRTOS10/tasks.c **** accessed from a critical section. */
 391:..\FreeRTOS10/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:..\FreeRTOS10/tasks.c **** 
 393:..\FreeRTOS10/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:..\FreeRTOS10/tasks.c **** 
 395:..\FreeRTOS10/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:..\FreeRTOS10/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:..\FreeRTOS10/tasks.c **** 
 398:..\FreeRTOS10/tasks.c **** #endif
 399:..\FreeRTOS10/tasks.c **** 
 400:..\FreeRTOS10/tasks.c **** /*lint -restore */
 401:..\FreeRTOS10/tasks.c **** 
 402:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 403:..\FreeRTOS10/tasks.c **** 
 404:..\FreeRTOS10/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:..\FreeRTOS10/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:..\FreeRTOS10/tasks.c **** 
 407:..\FreeRTOS10/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:..\FreeRTOS10/tasks.c **** 
 409:..\FreeRTOS10/tasks.c **** #endif
 410:..\FreeRTOS10/tasks.c **** 
 411:..\FreeRTOS10/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:..\FreeRTOS10/tasks.c **** 
 413:..\FreeRTOS10/tasks.c **** 	extern void vApplicationTickHook( void );
 414:..\FreeRTOS10/tasks.c **** 
 415:..\FreeRTOS10/tasks.c **** #endif
 416:..\FreeRTOS10/tasks.c **** 
 417:..\FreeRTOS10/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:..\FreeRTOS10/tasks.c **** 
 419:..\FreeRTOS10/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:..\FreeRTOS10/tasks.c **** 
 421:..\FreeRTOS10/tasks.c **** #endif
 422:..\FreeRTOS10/tasks.c **** 
 423:..\FreeRTOS10/tasks.c **** /* File private functions. --------------------------------*/
 424:..\FreeRTOS10/tasks.c **** 
 425:..\FreeRTOS10/tasks.c **** /**
 426:..\FreeRTOS10/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:..\FreeRTOS10/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:..\FreeRTOS10/tasks.c ****  * is in any other state.
 429:..\FreeRTOS10/tasks.c ****  */
 430:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 9


 431:..\FreeRTOS10/tasks.c **** 
 432:..\FreeRTOS10/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:..\FreeRTOS10/tasks.c **** 
 434:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:..\FreeRTOS10/tasks.c **** 
 436:..\FreeRTOS10/tasks.c **** /*
 437:..\FreeRTOS10/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:..\FreeRTOS10/tasks.c ****  * automatically upon the creation of the first task.
 439:..\FreeRTOS10/tasks.c ****  */
 440:..\FreeRTOS10/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:..\FreeRTOS10/tasks.c **** 
 442:..\FreeRTOS10/tasks.c **** /*
 443:..\FreeRTOS10/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:..\FreeRTOS10/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:..\FreeRTOS10/tasks.c ****  * creation of the first user task.
 446:..\FreeRTOS10/tasks.c ****  *
 447:..\FreeRTOS10/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:..\FreeRTOS10/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:..\FreeRTOS10/tasks.c ****  *
 450:..\FreeRTOS10/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:..\FreeRTOS10/tasks.c ****  *
 452:..\FreeRTOS10/tasks.c ****  */
 453:..\FreeRTOS10/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:..\FreeRTOS10/tasks.c **** 
 455:..\FreeRTOS10/tasks.c **** /*
 456:..\FreeRTOS10/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:..\FreeRTOS10/tasks.c ****  * including the stack pointed to by the TCB.
 458:..\FreeRTOS10/tasks.c ****  *
 459:..\FreeRTOS10/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:..\FreeRTOS10/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:..\FreeRTOS10/tasks.c ****  */
 462:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:..\FreeRTOS10/tasks.c **** 
 464:..\FreeRTOS10/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:..\FreeRTOS10/tasks.c **** 
 466:..\FreeRTOS10/tasks.c **** #endif
 467:..\FreeRTOS10/tasks.c **** 
 468:..\FreeRTOS10/tasks.c **** /*
 469:..\FreeRTOS10/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:..\FreeRTOS10/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:..\FreeRTOS10/tasks.c ****  * and its TCB deleted.
 472:..\FreeRTOS10/tasks.c ****  */
 473:..\FreeRTOS10/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:..\FreeRTOS10/tasks.c **** 
 475:..\FreeRTOS10/tasks.c **** /*
 476:..\FreeRTOS10/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:..\FreeRTOS10/tasks.c ****  * either the current or the overflow delayed task list.
 478:..\FreeRTOS10/tasks.c ****  */
 479:..\FreeRTOS10/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:..\FreeRTOS10/tasks.c **** 
 481:..\FreeRTOS10/tasks.c **** /*
 482:..\FreeRTOS10/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:..\FreeRTOS10/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:..\FreeRTOS10/tasks.c ****  * a suspended list, etc.).
 485:..\FreeRTOS10/tasks.c ****  *
 486:..\FreeRTOS10/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:..\FreeRTOS10/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 10


 488:..\FreeRTOS10/tasks.c ****  */
 489:..\FreeRTOS10/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:..\FreeRTOS10/tasks.c **** 
 491:..\FreeRTOS10/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:..\FreeRTOS10/tasks.c **** 
 493:..\FreeRTOS10/tasks.c **** #endif
 494:..\FreeRTOS10/tasks.c **** 
 495:..\FreeRTOS10/tasks.c **** /*
 496:..\FreeRTOS10/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:..\FreeRTOS10/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:..\FreeRTOS10/tasks.c ****  */
 499:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:..\FreeRTOS10/tasks.c **** 
 501:..\FreeRTOS10/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:..\FreeRTOS10/tasks.c **** 
 503:..\FreeRTOS10/tasks.c **** #endif
 504:..\FreeRTOS10/tasks.c **** 
 505:..\FreeRTOS10/tasks.c **** /*
 506:..\FreeRTOS10/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:..\FreeRTOS10/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:..\FreeRTOS10/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:..\FreeRTOS10/tasks.c ****  */
 510:..\FreeRTOS10/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:..\FreeRTOS10/tasks.c **** 
 512:..\FreeRTOS10/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:..\FreeRTOS10/tasks.c **** 
 514:..\FreeRTOS10/tasks.c **** #endif
 515:..\FreeRTOS10/tasks.c **** 
 516:..\FreeRTOS10/tasks.c **** /*
 517:..\FreeRTOS10/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:..\FreeRTOS10/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:..\FreeRTOS10/tasks.c ****  *
 520:..\FreeRTOS10/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:..\FreeRTOS10/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:..\FreeRTOS10/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:..\FreeRTOS10/tasks.c ****  * set to a value other than 1.
 524:..\FreeRTOS10/tasks.c ****  */
 525:..\FreeRTOS10/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:..\FreeRTOS10/tasks.c **** 
 527:..\FreeRTOS10/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:..\FreeRTOS10/tasks.c **** 
 529:..\FreeRTOS10/tasks.c **** #endif
 530:..\FreeRTOS10/tasks.c **** 
 531:..\FreeRTOS10/tasks.c **** /*
 532:..\FreeRTOS10/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:..\FreeRTOS10/tasks.c ****  * will exit the Blocked state.
 534:..\FreeRTOS10/tasks.c ****  */
 535:..\FreeRTOS10/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:..\FreeRTOS10/tasks.c **** 
 537:..\FreeRTOS10/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:..\FreeRTOS10/tasks.c **** 
 539:..\FreeRTOS10/tasks.c **** 	/*
 540:..\FreeRTOS10/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:..\FreeRTOS10/tasks.c **** 	 * human readable tables of task information.
 542:..\FreeRTOS10/tasks.c **** 	 */
 543:..\FreeRTOS10/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 11


 545:..\FreeRTOS10/tasks.c **** #endif
 546:..\FreeRTOS10/tasks.c **** 
 547:..\FreeRTOS10/tasks.c **** /*
 548:..\FreeRTOS10/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:..\FreeRTOS10/tasks.c ****  * dynamically to fill in the structure's members.
 550:..\FreeRTOS10/tasks.c ****  */
 551:..\FreeRTOS10/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:..\FreeRTOS10/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:..\FreeRTOS10/tasks.c **** 									const uint32_t ulStackDepth,
 554:..\FreeRTOS10/tasks.c **** 									void * const pvParameters,
 555:..\FreeRTOS10/tasks.c **** 									UBaseType_t uxPriority,
 556:..\FreeRTOS10/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:..\FreeRTOS10/tasks.c **** 									TCB_t *pxNewTCB,
 558:..\FreeRTOS10/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:..\FreeRTOS10/tasks.c **** 
 560:..\FreeRTOS10/tasks.c **** /*
 561:..\FreeRTOS10/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:..\FreeRTOS10/tasks.c ****  * under the control of the scheduler.
 563:..\FreeRTOS10/tasks.c ****  */
 564:..\FreeRTOS10/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:..\FreeRTOS10/tasks.c **** 
 566:..\FreeRTOS10/tasks.c **** /*
 567:..\FreeRTOS10/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:..\FreeRTOS10/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:..\FreeRTOS10/tasks.c ****  * called by the function.
 570:..\FreeRTOS10/tasks.c ****  */
 571:..\FreeRTOS10/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:..\FreeRTOS10/tasks.c **** 
 573:..\FreeRTOS10/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:..\FreeRTOS10/tasks.c **** 
 575:..\FreeRTOS10/tasks.c **** #endif
 576:..\FreeRTOS10/tasks.c **** 
 577:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 578:..\FreeRTOS10/tasks.c **** 
 579:..\FreeRTOS10/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:..\FreeRTOS10/tasks.c **** 
 581:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:..\FreeRTOS10/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:..\FreeRTOS10/tasks.c **** 									const uint32_t ulStackDepth,
 584:..\FreeRTOS10/tasks.c **** 									void * const pvParameters,
 585:..\FreeRTOS10/tasks.c **** 									UBaseType_t uxPriority,
 586:..\FreeRTOS10/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:..\FreeRTOS10/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:..\FreeRTOS10/tasks.c **** 	{
 589:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNewTCB;
 590:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xReturn;
 591:..\FreeRTOS10/tasks.c **** 
 592:..\FreeRTOS10/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:..\FreeRTOS10/tasks.c **** 
 595:..\FreeRTOS10/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:..\FreeRTOS10/tasks.c **** 		{
 597:..\FreeRTOS10/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:..\FreeRTOS10/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:..\FreeRTOS10/tasks.c **** 			structure. */
 600:..\FreeRTOS10/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:..\FreeRTOS10/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 12


 602:..\FreeRTOS10/tasks.c **** 		}
 603:..\FreeRTOS10/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:..\FreeRTOS10/tasks.c **** 
 605:..\FreeRTOS10/tasks.c **** 
 606:..\FreeRTOS10/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:..\FreeRTOS10/tasks.c **** 		{
 608:..\FreeRTOS10/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:..\FreeRTOS10/tasks.c **** 			function - use them. */
 610:..\FreeRTOS10/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:..\FreeRTOS10/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:..\FreeRTOS10/tasks.c **** 
 613:..\FreeRTOS10/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:..\FreeRTOS10/tasks.c **** 			{
 615:..\FreeRTOS10/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:..\FreeRTOS10/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:..\FreeRTOS10/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:..\FreeRTOS10/tasks.c **** 			}
 619:..\FreeRTOS10/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:..\FreeRTOS10/tasks.c **** 
 621:..\FreeRTOS10/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:..\FreeRTOS10/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:..\FreeRTOS10/tasks.c **** 		}
 624:..\FreeRTOS10/tasks.c **** 		else
 625:..\FreeRTOS10/tasks.c **** 		{
 626:..\FreeRTOS10/tasks.c **** 			xReturn = NULL;
 627:..\FreeRTOS10/tasks.c **** 		}
 628:..\FreeRTOS10/tasks.c **** 
 629:..\FreeRTOS10/tasks.c **** 		return xReturn;
 630:..\FreeRTOS10/tasks.c **** 	}
 631:..\FreeRTOS10/tasks.c **** 
 632:..\FreeRTOS10/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 634:..\FreeRTOS10/tasks.c **** 
 635:..\FreeRTOS10/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:..\FreeRTOS10/tasks.c **** 
 637:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:..\FreeRTOS10/tasks.c **** 	{
 639:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNewTCB;
 640:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:..\FreeRTOS10/tasks.c **** 
 642:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:..\FreeRTOS10/tasks.c **** 
 645:..\FreeRTOS10/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:..\FreeRTOS10/tasks.c **** 		{
 647:..\FreeRTOS10/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:..\FreeRTOS10/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:..\FreeRTOS10/tasks.c **** 			not static allocation is being used. */
 650:..\FreeRTOS10/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:..\FreeRTOS10/tasks.c **** 
 652:..\FreeRTOS10/tasks.c **** 			/* Store the stack location in the TCB. */
 653:..\FreeRTOS10/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:..\FreeRTOS10/tasks.c **** 
 655:..\FreeRTOS10/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:..\FreeRTOS10/tasks.c **** 			{
 657:..\FreeRTOS10/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:..\FreeRTOS10/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 13


 659:..\FreeRTOS10/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 660:..\FreeRTOS10/tasks.c **** 			}
 661:..\FreeRTOS10/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:..\FreeRTOS10/tasks.c **** 
 663:..\FreeRTOS10/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:..\FreeRTOS10/tasks.c **** 									pxTaskDefinition->pcName,
 665:..\FreeRTOS10/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:..\FreeRTOS10/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:..\FreeRTOS10/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:..\FreeRTOS10/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:..\FreeRTOS10/tasks.c **** 									pxTaskDefinition->xRegions );
 670:..\FreeRTOS10/tasks.c **** 
 671:..\FreeRTOS10/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:..\FreeRTOS10/tasks.c **** 			xReturn = pdPASS;
 673:..\FreeRTOS10/tasks.c **** 		}
 674:..\FreeRTOS10/tasks.c **** 
 675:..\FreeRTOS10/tasks.c **** 		return xReturn;
 676:..\FreeRTOS10/tasks.c **** 	}
 677:..\FreeRTOS10/tasks.c **** 
 678:..\FreeRTOS10/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 680:..\FreeRTOS10/tasks.c **** 
 681:..\FreeRTOS10/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:..\FreeRTOS10/tasks.c **** 
 683:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:..\FreeRTOS10/tasks.c **** 	{
 685:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNewTCB;
 686:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:..\FreeRTOS10/tasks.c **** 
 688:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:..\FreeRTOS10/tasks.c **** 
 690:..\FreeRTOS10/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:..\FreeRTOS10/tasks.c **** 		{
 692:..\FreeRTOS10/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:..\FreeRTOS10/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:..\FreeRTOS10/tasks.c **** 			not static allocation is being used. */
 695:..\FreeRTOS10/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:..\FreeRTOS10/tasks.c **** 
 697:..\FreeRTOS10/tasks.c **** 			if( pxNewTCB != NULL )
 698:..\FreeRTOS10/tasks.c **** 			{
 699:..\FreeRTOS10/tasks.c **** 				/* Store the stack location in the TCB. */
 700:..\FreeRTOS10/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:..\FreeRTOS10/tasks.c **** 
 702:..\FreeRTOS10/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:..\FreeRTOS10/tasks.c **** 				{
 704:..\FreeRTOS10/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:..\FreeRTOS10/tasks.c **** 					this task had a statically allocated stack in case it is
 706:..\FreeRTOS10/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:..\FreeRTOS10/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:..\FreeRTOS10/tasks.c **** 				}
 709:..\FreeRTOS10/tasks.c **** 				#endif
 710:..\FreeRTOS10/tasks.c **** 
 711:..\FreeRTOS10/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:..\FreeRTOS10/tasks.c **** 										pxTaskDefinition->pcName,
 713:..\FreeRTOS10/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:..\FreeRTOS10/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:..\FreeRTOS10/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 14


 716:..\FreeRTOS10/tasks.c **** 										pxCreatedTask, pxNewTCB,
 717:..\FreeRTOS10/tasks.c **** 										pxTaskDefinition->xRegions );
 718:..\FreeRTOS10/tasks.c **** 
 719:..\FreeRTOS10/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:..\FreeRTOS10/tasks.c **** 				xReturn = pdPASS;
 721:..\FreeRTOS10/tasks.c **** 			}
 722:..\FreeRTOS10/tasks.c **** 		}
 723:..\FreeRTOS10/tasks.c **** 
 724:..\FreeRTOS10/tasks.c **** 		return xReturn;
 725:..\FreeRTOS10/tasks.c **** 	}
 726:..\FreeRTOS10/tasks.c **** 
 727:..\FreeRTOS10/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 729:..\FreeRTOS10/tasks.c **** 
 730:..\FreeRTOS10/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:..\FreeRTOS10/tasks.c **** 
 732:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:..\FreeRTOS10/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:..\FreeRTOS10/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:..\FreeRTOS10/tasks.c **** 							void * const pvParameters,
 736:..\FreeRTOS10/tasks.c **** 							UBaseType_t uxPriority,
 737:..\FreeRTOS10/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:..\FreeRTOS10/tasks.c **** 	{
 739:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNewTCB;
 740:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
 741:..\FreeRTOS10/tasks.c **** 
 742:..\FreeRTOS10/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:..\FreeRTOS10/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:..\FreeRTOS10/tasks.c **** 		the TCB then the stack. */
 745:..\FreeRTOS10/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:..\FreeRTOS10/tasks.c **** 		{
 747:..\FreeRTOS10/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:..\FreeRTOS10/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:..\FreeRTOS10/tasks.c **** 			allocation is being used. */
 750:..\FreeRTOS10/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:..\FreeRTOS10/tasks.c **** 
 752:..\FreeRTOS10/tasks.c **** 			if( pxNewTCB != NULL )
 753:..\FreeRTOS10/tasks.c **** 			{
 754:..\FreeRTOS10/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:..\FreeRTOS10/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:..\FreeRTOS10/tasks.c **** 				be deleted later if required. */
 757:..\FreeRTOS10/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:..\FreeRTOS10/tasks.c **** 
 759:..\FreeRTOS10/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:..\FreeRTOS10/tasks.c **** 				{
 761:..\FreeRTOS10/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:..\FreeRTOS10/tasks.c **** 					vPortFree( pxNewTCB );
 763:..\FreeRTOS10/tasks.c **** 					pxNewTCB = NULL;
 764:..\FreeRTOS10/tasks.c **** 				}
 765:..\FreeRTOS10/tasks.c **** 			}
 766:..\FreeRTOS10/tasks.c **** 		}
 767:..\FreeRTOS10/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:..\FreeRTOS10/tasks.c **** 		{
 769:..\FreeRTOS10/tasks.c **** 		StackType_t *pxStack;
 770:..\FreeRTOS10/tasks.c **** 
 771:..\FreeRTOS10/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:..\FreeRTOS10/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 15


 773:..\FreeRTOS10/tasks.c **** 
 774:..\FreeRTOS10/tasks.c **** 			if( pxStack != NULL )
 775:..\FreeRTOS10/tasks.c **** 			{
 776:..\FreeRTOS10/tasks.c **** 				/* Allocate space for the TCB. */
 777:..\FreeRTOS10/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:..\FreeRTOS10/tasks.c **** 
 779:..\FreeRTOS10/tasks.c **** 				if( pxNewTCB != NULL )
 780:..\FreeRTOS10/tasks.c **** 				{
 781:..\FreeRTOS10/tasks.c **** 					/* Store the stack location in the TCB. */
 782:..\FreeRTOS10/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:..\FreeRTOS10/tasks.c **** 				}
 784:..\FreeRTOS10/tasks.c **** 				else
 785:..\FreeRTOS10/tasks.c **** 				{
 786:..\FreeRTOS10/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:..\FreeRTOS10/tasks.c **** 					it again. */
 788:..\FreeRTOS10/tasks.c **** 					vPortFree( pxStack );
 789:..\FreeRTOS10/tasks.c **** 				}
 790:..\FreeRTOS10/tasks.c **** 			}
 791:..\FreeRTOS10/tasks.c **** 			else
 792:..\FreeRTOS10/tasks.c **** 			{
 793:..\FreeRTOS10/tasks.c **** 				pxNewTCB = NULL;
 794:..\FreeRTOS10/tasks.c **** 			}
 795:..\FreeRTOS10/tasks.c **** 		}
 796:..\FreeRTOS10/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:..\FreeRTOS10/tasks.c **** 
 798:..\FreeRTOS10/tasks.c **** 		if( pxNewTCB != NULL )
 799:..\FreeRTOS10/tasks.c **** 		{
 800:..\FreeRTOS10/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:..\FreeRTOS10/tasks.c **** 			{
 802:..\FreeRTOS10/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:..\FreeRTOS10/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:..\FreeRTOS10/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:..\FreeRTOS10/tasks.c **** 			}
 806:..\FreeRTOS10/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:..\FreeRTOS10/tasks.c **** 
 808:..\FreeRTOS10/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:..\FreeRTOS10/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:..\FreeRTOS10/tasks.c **** 			xReturn = pdPASS;
 811:..\FreeRTOS10/tasks.c **** 		}
 812:..\FreeRTOS10/tasks.c **** 		else
 813:..\FreeRTOS10/tasks.c **** 		{
 814:..\FreeRTOS10/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:..\FreeRTOS10/tasks.c **** 		}
 816:..\FreeRTOS10/tasks.c **** 
 817:..\FreeRTOS10/tasks.c **** 		return xReturn;
 818:..\FreeRTOS10/tasks.c **** 	}
 819:..\FreeRTOS10/tasks.c **** 
 820:..\FreeRTOS10/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 822:..\FreeRTOS10/tasks.c **** 
 823:..\FreeRTOS10/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:..\FreeRTOS10/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:..\FreeRTOS10/tasks.c **** 									const uint32_t ulStackDepth,
 826:..\FreeRTOS10/tasks.c **** 									void * const pvParameters,
 827:..\FreeRTOS10/tasks.c **** 									UBaseType_t uxPriority,
 828:..\FreeRTOS10/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:..\FreeRTOS10/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 16


 830:..\FreeRTOS10/tasks.c **** 									const MemoryRegion_t * const xRegions )
 831:..\FreeRTOS10/tasks.c **** {
 832:..\FreeRTOS10/tasks.c **** StackType_t *pxTopOfStack;
 833:..\FreeRTOS10/tasks.c **** UBaseType_t x;
 834:..\FreeRTOS10/tasks.c **** 
 835:..\FreeRTOS10/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:..\FreeRTOS10/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:..\FreeRTOS10/tasks.c **** 		BaseType_t xRunPrivileged;
 838:..\FreeRTOS10/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:..\FreeRTOS10/tasks.c **** 		{
 840:..\FreeRTOS10/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:..\FreeRTOS10/tasks.c **** 		}
 842:..\FreeRTOS10/tasks.c **** 		else
 843:..\FreeRTOS10/tasks.c **** 		{
 844:..\FreeRTOS10/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:..\FreeRTOS10/tasks.c **** 		}
 846:..\FreeRTOS10/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:..\FreeRTOS10/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:..\FreeRTOS10/tasks.c **** 
 849:..\FreeRTOS10/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:..\FreeRTOS10/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:..\FreeRTOS10/tasks.c **** 	{
 852:..\FreeRTOS10/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:..\FreeRTOS10/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:..\FreeRTOS10/tasks.c **** 	}
 855:..\FreeRTOS10/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:..\FreeRTOS10/tasks.c **** 
 857:..\FreeRTOS10/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:..\FreeRTOS10/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:..\FreeRTOS10/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:..\FreeRTOS10/tasks.c **** 	by the port. */
 861:..\FreeRTOS10/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:..\FreeRTOS10/tasks.c **** 	{
 863:..\FreeRTOS10/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:..\FreeRTOS10/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:..\FreeRTOS10/tasks.c **** 
 866:..\FreeRTOS10/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:..\FreeRTOS10/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:..\FreeRTOS10/tasks.c **** 
 869:..\FreeRTOS10/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:..\FreeRTOS10/tasks.c **** 		{
 871:..\FreeRTOS10/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:..\FreeRTOS10/tasks.c **** 			debugging. */
 873:..\FreeRTOS10/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:..\FreeRTOS10/tasks.c **** 		}
 875:..\FreeRTOS10/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:..\FreeRTOS10/tasks.c **** 	}
 877:..\FreeRTOS10/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:..\FreeRTOS10/tasks.c **** 	{
 879:..\FreeRTOS10/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:..\FreeRTOS10/tasks.c **** 
 881:..\FreeRTOS10/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:..\FreeRTOS10/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:..\FreeRTOS10/tasks.c **** 
 884:..\FreeRTOS10/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:..\FreeRTOS10/tasks.c **** 		performed. */
 886:..\FreeRTOS10/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 17


 887:..\FreeRTOS10/tasks.c **** 	}
 888:..\FreeRTOS10/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:..\FreeRTOS10/tasks.c **** 
 890:..\FreeRTOS10/tasks.c **** 	/* Store the task name in the TCB. */
 891:..\FreeRTOS10/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\FreeRTOS10/tasks.c **** 	{
 893:..\FreeRTOS10/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\FreeRTOS10/tasks.c **** 
 895:..\FreeRTOS10/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\FreeRTOS10/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\FreeRTOS10/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:..\FreeRTOS10/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:..\FreeRTOS10/tasks.c **** 		{
 900:..\FreeRTOS10/tasks.c **** 			break;
 901:..\FreeRTOS10/tasks.c **** 		}
 902:..\FreeRTOS10/tasks.c **** 		else
 903:..\FreeRTOS10/tasks.c **** 		{
 904:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:..\FreeRTOS10/tasks.c **** 		}
 906:..\FreeRTOS10/tasks.c **** 	}
 907:..\FreeRTOS10/tasks.c **** 
 908:..\FreeRTOS10/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:..\FreeRTOS10/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\FreeRTOS10/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\FreeRTOS10/tasks.c **** 
 912:..\FreeRTOS10/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:..\FreeRTOS10/tasks.c **** 	remove the privilege bit if one is present. */
 914:..\FreeRTOS10/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:..\FreeRTOS10/tasks.c **** 	{
 916:..\FreeRTOS10/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:..\FreeRTOS10/tasks.c **** 	}
 918:..\FreeRTOS10/tasks.c **** 	else
 919:..\FreeRTOS10/tasks.c **** 	{
 920:..\FreeRTOS10/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:..\FreeRTOS10/tasks.c **** 	}
 922:..\FreeRTOS10/tasks.c **** 
 923:..\FreeRTOS10/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:..\FreeRTOS10/tasks.c **** 	{
 926:..\FreeRTOS10/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:..\FreeRTOS10/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:..\FreeRTOS10/tasks.c **** 	}
 929:..\FreeRTOS10/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:..\FreeRTOS10/tasks.c **** 
 931:..\FreeRTOS10/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:..\FreeRTOS10/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:..\FreeRTOS10/tasks.c **** 
 934:..\FreeRTOS10/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:..\FreeRTOS10/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:..\FreeRTOS10/tasks.c **** 
 938:..\FreeRTOS10/tasks.c **** 	/* Event lists are always in priority order. */
 939:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:..\FreeRTOS10/tasks.c **** 
 942:..\FreeRTOS10/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:..\FreeRTOS10/tasks.c **** 	{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 18


 944:..\FreeRTOS10/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 945:..\FreeRTOS10/tasks.c **** 	}
 946:..\FreeRTOS10/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:..\FreeRTOS10/tasks.c **** 
 948:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:..\FreeRTOS10/tasks.c **** 	{
 950:..\FreeRTOS10/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:..\FreeRTOS10/tasks.c **** 	}
 952:..\FreeRTOS10/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:..\FreeRTOS10/tasks.c **** 
 954:..\FreeRTOS10/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:..\FreeRTOS10/tasks.c **** 	{
 956:..\FreeRTOS10/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:..\FreeRTOS10/tasks.c **** 	}
 958:..\FreeRTOS10/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:..\FreeRTOS10/tasks.c **** 
 960:..\FreeRTOS10/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:..\FreeRTOS10/tasks.c **** 	{
 962:..\FreeRTOS10/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:..\FreeRTOS10/tasks.c **** 	}
 964:..\FreeRTOS10/tasks.c **** 	#else
 965:..\FreeRTOS10/tasks.c **** 	{
 966:..\FreeRTOS10/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:..\FreeRTOS10/tasks.c **** 		( void ) xRegions;
 968:..\FreeRTOS10/tasks.c **** 	}
 969:..\FreeRTOS10/tasks.c **** 	#endif
 970:..\FreeRTOS10/tasks.c **** 
 971:..\FreeRTOS10/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:..\FreeRTOS10/tasks.c **** 	{
 973:..\FreeRTOS10/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:..\FreeRTOS10/tasks.c **** 		{
 975:..\FreeRTOS10/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:..\FreeRTOS10/tasks.c **** 		}
 977:..\FreeRTOS10/tasks.c **** 	}
 978:..\FreeRTOS10/tasks.c **** 	#endif
 979:..\FreeRTOS10/tasks.c **** 
 980:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:..\FreeRTOS10/tasks.c **** 	{
 982:..\FreeRTOS10/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:..\FreeRTOS10/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:..\FreeRTOS10/tasks.c **** 	}
 985:..\FreeRTOS10/tasks.c **** 	#endif
 986:..\FreeRTOS10/tasks.c **** 
 987:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:..\FreeRTOS10/tasks.c **** 	{
 989:..\FreeRTOS10/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:..\FreeRTOS10/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:..\FreeRTOS10/tasks.c **** 	}
 992:..\FreeRTOS10/tasks.c **** 	#endif
 993:..\FreeRTOS10/tasks.c **** 
 994:..\FreeRTOS10/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:..\FreeRTOS10/tasks.c **** 	{
 996:..\FreeRTOS10/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:..\FreeRTOS10/tasks.c **** 	}
 998:..\FreeRTOS10/tasks.c **** 	#endif
 999:..\FreeRTOS10/tasks.c **** 
1000:..\FreeRTOS10/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 19


1001:..\FreeRTOS10/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1002:..\FreeRTOS10/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:..\FreeRTOS10/tasks.c **** 	the top of stack variable is updated. */
1004:..\FreeRTOS10/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:..\FreeRTOS10/tasks.c **** 	{
1006:..\FreeRTOS10/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:..\FreeRTOS10/tasks.c **** 	}
1008:..\FreeRTOS10/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:..\FreeRTOS10/tasks.c **** 	{
1010:..\FreeRTOS10/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:..\FreeRTOS10/tasks.c **** 	}
1012:..\FreeRTOS10/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:..\FreeRTOS10/tasks.c **** 
1014:..\FreeRTOS10/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:..\FreeRTOS10/tasks.c **** 	{
1016:..\FreeRTOS10/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:..\FreeRTOS10/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:..\FreeRTOS10/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:..\FreeRTOS10/tasks.c **** 	}
1020:..\FreeRTOS10/tasks.c **** 	else
1021:..\FreeRTOS10/tasks.c **** 	{
1022:..\FreeRTOS10/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:..\FreeRTOS10/tasks.c **** 	}
1024:..\FreeRTOS10/tasks.c **** }
1025:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1026:..\FreeRTOS10/tasks.c **** 
1027:..\FreeRTOS10/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:..\FreeRTOS10/tasks.c **** {
1029:..\FreeRTOS10/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:..\FreeRTOS10/tasks.c **** 	updated. */
1031:..\FreeRTOS10/tasks.c **** 	taskENTER_CRITICAL();
1032:..\FreeRTOS10/tasks.c **** 	{
1033:..\FreeRTOS10/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:..\FreeRTOS10/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:..\FreeRTOS10/tasks.c **** 		{
1036:..\FreeRTOS10/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:..\FreeRTOS10/tasks.c **** 			the suspended state - make this the current task. */
1038:..\FreeRTOS10/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:..\FreeRTOS10/tasks.c **** 
1040:..\FreeRTOS10/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:..\FreeRTOS10/tasks.c **** 			{
1042:..\FreeRTOS10/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:..\FreeRTOS10/tasks.c **** 				initialisation required.  We will not recover if this call
1044:..\FreeRTOS10/tasks.c **** 				fails, but we will report the failure. */
1045:..\FreeRTOS10/tasks.c **** 				prvInitialiseTaskLists();
1046:..\FreeRTOS10/tasks.c **** 			}
1047:..\FreeRTOS10/tasks.c **** 			else
1048:..\FreeRTOS10/tasks.c **** 			{
1049:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:..\FreeRTOS10/tasks.c **** 			}
1051:..\FreeRTOS10/tasks.c **** 		}
1052:..\FreeRTOS10/tasks.c **** 		else
1053:..\FreeRTOS10/tasks.c **** 		{
1054:..\FreeRTOS10/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:..\FreeRTOS10/tasks.c **** 			current task if it is the highest priority task to be created
1056:..\FreeRTOS10/tasks.c **** 			so far. */
1057:..\FreeRTOS10/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 20


1058:..\FreeRTOS10/tasks.c **** 			{
1059:..\FreeRTOS10/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:..\FreeRTOS10/tasks.c **** 				{
1061:..\FreeRTOS10/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:..\FreeRTOS10/tasks.c **** 				}
1063:..\FreeRTOS10/tasks.c **** 				else
1064:..\FreeRTOS10/tasks.c **** 				{
1065:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:..\FreeRTOS10/tasks.c **** 				}
1067:..\FreeRTOS10/tasks.c **** 			}
1068:..\FreeRTOS10/tasks.c **** 			else
1069:..\FreeRTOS10/tasks.c **** 			{
1070:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:..\FreeRTOS10/tasks.c **** 			}
1072:..\FreeRTOS10/tasks.c **** 		}
1073:..\FreeRTOS10/tasks.c **** 
1074:..\FreeRTOS10/tasks.c **** 		uxTaskNumber++;
1075:..\FreeRTOS10/tasks.c **** 
1076:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:..\FreeRTOS10/tasks.c **** 		{
1078:..\FreeRTOS10/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:..\FreeRTOS10/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:..\FreeRTOS10/tasks.c **** 		}
1081:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:..\FreeRTOS10/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:..\FreeRTOS10/tasks.c **** 
1084:..\FreeRTOS10/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:..\FreeRTOS10/tasks.c **** 
1086:..\FreeRTOS10/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:..\FreeRTOS10/tasks.c **** 	}
1088:..\FreeRTOS10/tasks.c **** 	taskEXIT_CRITICAL();
1089:..\FreeRTOS10/tasks.c **** 
1090:..\FreeRTOS10/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:..\FreeRTOS10/tasks.c **** 	{
1092:..\FreeRTOS10/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:..\FreeRTOS10/tasks.c **** 		then it should run now. */
1094:..\FreeRTOS10/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:..\FreeRTOS10/tasks.c **** 		{
1096:..\FreeRTOS10/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:..\FreeRTOS10/tasks.c **** 		}
1098:..\FreeRTOS10/tasks.c **** 		else
1099:..\FreeRTOS10/tasks.c **** 		{
1100:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:..\FreeRTOS10/tasks.c **** 		}
1102:..\FreeRTOS10/tasks.c **** 	}
1103:..\FreeRTOS10/tasks.c **** 	else
1104:..\FreeRTOS10/tasks.c **** 	{
1105:..\FreeRTOS10/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:..\FreeRTOS10/tasks.c **** 	}
1107:..\FreeRTOS10/tasks.c **** }
1108:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1109:..\FreeRTOS10/tasks.c **** 
1110:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:..\FreeRTOS10/tasks.c **** 
1112:..\FreeRTOS10/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:..\FreeRTOS10/tasks.c **** 	{
1114:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 21


1115:..\FreeRTOS10/tasks.c **** 
1116:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
1117:..\FreeRTOS10/tasks.c **** 		{
1118:..\FreeRTOS10/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:..\FreeRTOS10/tasks.c **** 			being deleted. */
1120:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:..\FreeRTOS10/tasks.c **** 
1122:..\FreeRTOS10/tasks.c **** 			/* Remove task from the ready list. */
1123:..\FreeRTOS10/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:..\FreeRTOS10/tasks.c **** 			{
1125:..\FreeRTOS10/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:..\FreeRTOS10/tasks.c **** 			}
1127:..\FreeRTOS10/tasks.c **** 			else
1128:..\FreeRTOS10/tasks.c **** 			{
1129:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:..\FreeRTOS10/tasks.c **** 			}
1131:..\FreeRTOS10/tasks.c **** 
1132:..\FreeRTOS10/tasks.c **** 			/* Is the task waiting on an event also? */
1133:..\FreeRTOS10/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:..\FreeRTOS10/tasks.c **** 			{
1135:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:..\FreeRTOS10/tasks.c **** 			}
1137:..\FreeRTOS10/tasks.c **** 			else
1138:..\FreeRTOS10/tasks.c **** 			{
1139:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:..\FreeRTOS10/tasks.c **** 			}
1141:..\FreeRTOS10/tasks.c **** 
1142:..\FreeRTOS10/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:..\FreeRTOS10/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:..\FreeRTOS10/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:..\FreeRTOS10/tasks.c **** 			not return. */
1146:..\FreeRTOS10/tasks.c **** 			uxTaskNumber++;
1147:..\FreeRTOS10/tasks.c **** 
1148:..\FreeRTOS10/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:..\FreeRTOS10/tasks.c **** 			{
1150:..\FreeRTOS10/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:..\FreeRTOS10/tasks.c **** 				task itself, as a context switch to another task is required.
1152:..\FreeRTOS10/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:..\FreeRTOS10/tasks.c **** 				check the termination list and free up any memory allocated by
1154:..\FreeRTOS10/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:..\FreeRTOS10/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:..\FreeRTOS10/tasks.c **** 
1157:..\FreeRTOS10/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:..\FreeRTOS10/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:..\FreeRTOS10/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:..\FreeRTOS10/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:..\FreeRTOS10/tasks.c **** 
1162:..\FreeRTOS10/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:..\FreeRTOS10/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:..\FreeRTOS10/tasks.c **** 				after which it is not possible to yield away from this task -
1165:..\FreeRTOS10/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:..\FreeRTOS10/tasks.c **** 				required. */
1167:..\FreeRTOS10/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:..\FreeRTOS10/tasks.c **** 			}
1169:..\FreeRTOS10/tasks.c **** 			else
1170:..\FreeRTOS10/tasks.c **** 			{
1171:..\FreeRTOS10/tasks.c **** 				--uxCurrentNumberOfTasks;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 22


1172:..\FreeRTOS10/tasks.c **** 				prvDeleteTCB( pxTCB );
1173:..\FreeRTOS10/tasks.c **** 
1174:..\FreeRTOS10/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:..\FreeRTOS10/tasks.c **** 				the task that has just been deleted. */
1176:..\FreeRTOS10/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:..\FreeRTOS10/tasks.c **** 			}
1178:..\FreeRTOS10/tasks.c **** 
1179:..\FreeRTOS10/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:..\FreeRTOS10/tasks.c **** 		}
1181:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
1182:..\FreeRTOS10/tasks.c **** 
1183:..\FreeRTOS10/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:..\FreeRTOS10/tasks.c **** 		been deleted. */
1185:..\FreeRTOS10/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:..\FreeRTOS10/tasks.c **** 		{
1187:..\FreeRTOS10/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:..\FreeRTOS10/tasks.c **** 			{
1189:..\FreeRTOS10/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:..\FreeRTOS10/tasks.c **** 				portYIELD_WITHIN_API();
1191:..\FreeRTOS10/tasks.c **** 			}
1192:..\FreeRTOS10/tasks.c **** 			else
1193:..\FreeRTOS10/tasks.c **** 			{
1194:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:..\FreeRTOS10/tasks.c **** 			}
1196:..\FreeRTOS10/tasks.c **** 		}
1197:..\FreeRTOS10/tasks.c **** 	}
1198:..\FreeRTOS10/tasks.c **** 
1199:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1201:..\FreeRTOS10/tasks.c **** 
1202:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:..\FreeRTOS10/tasks.c **** 
1204:..\FreeRTOS10/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:..\FreeRTOS10/tasks.c **** 	{
1206:..\FreeRTOS10/tasks.c **** 	TickType_t xTimeToWake;
1207:..\FreeRTOS10/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:..\FreeRTOS10/tasks.c **** 
1209:..\FreeRTOS10/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:..\FreeRTOS10/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:..\FreeRTOS10/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:..\FreeRTOS10/tasks.c **** 
1213:..\FreeRTOS10/tasks.c **** 		vTaskSuspendAll();
1214:..\FreeRTOS10/tasks.c **** 		{
1215:..\FreeRTOS10/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:..\FreeRTOS10/tasks.c **** 			block. */
1217:..\FreeRTOS10/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:..\FreeRTOS10/tasks.c **** 
1219:..\FreeRTOS10/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:..\FreeRTOS10/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:..\FreeRTOS10/tasks.c **** 
1222:..\FreeRTOS10/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:..\FreeRTOS10/tasks.c **** 			{
1224:..\FreeRTOS10/tasks.c **** 				/* The tick count has overflowed since this function was
1225:..\FreeRTOS10/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:..\FreeRTOS10/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:..\FreeRTOS10/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:..\FreeRTOS10/tasks.c **** 				is the case it is as if neither time had overflowed. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 23


1229:..\FreeRTOS10/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1230:..\FreeRTOS10/tasks.c **** 				{
1231:..\FreeRTOS10/tasks.c **** 					xShouldDelay = pdTRUE;
1232:..\FreeRTOS10/tasks.c **** 				}
1233:..\FreeRTOS10/tasks.c **** 				else
1234:..\FreeRTOS10/tasks.c **** 				{
1235:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:..\FreeRTOS10/tasks.c **** 				}
1237:..\FreeRTOS10/tasks.c **** 			}
1238:..\FreeRTOS10/tasks.c **** 			else
1239:..\FreeRTOS10/tasks.c **** 			{
1240:..\FreeRTOS10/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:..\FreeRTOS10/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:..\FreeRTOS10/tasks.c **** 				tick time is less than the wake time. */
1243:..\FreeRTOS10/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:..\FreeRTOS10/tasks.c **** 				{
1245:..\FreeRTOS10/tasks.c **** 					xShouldDelay = pdTRUE;
1246:..\FreeRTOS10/tasks.c **** 				}
1247:..\FreeRTOS10/tasks.c **** 				else
1248:..\FreeRTOS10/tasks.c **** 				{
1249:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:..\FreeRTOS10/tasks.c **** 				}
1251:..\FreeRTOS10/tasks.c **** 			}
1252:..\FreeRTOS10/tasks.c **** 
1253:..\FreeRTOS10/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:..\FreeRTOS10/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:..\FreeRTOS10/tasks.c **** 
1256:..\FreeRTOS10/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:..\FreeRTOS10/tasks.c **** 			{
1258:..\FreeRTOS10/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:..\FreeRTOS10/tasks.c **** 
1260:..\FreeRTOS10/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:..\FreeRTOS10/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:..\FreeRTOS10/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:..\FreeRTOS10/tasks.c **** 			}
1264:..\FreeRTOS10/tasks.c **** 			else
1265:..\FreeRTOS10/tasks.c **** 			{
1266:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:..\FreeRTOS10/tasks.c **** 			}
1268:..\FreeRTOS10/tasks.c **** 		}
1269:..\FreeRTOS10/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:..\FreeRTOS10/tasks.c **** 
1271:..\FreeRTOS10/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:..\FreeRTOS10/tasks.c **** 		have put ourselves to sleep. */
1273:..\FreeRTOS10/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:..\FreeRTOS10/tasks.c **** 		{
1275:..\FreeRTOS10/tasks.c **** 			portYIELD_WITHIN_API();
1276:..\FreeRTOS10/tasks.c **** 		}
1277:..\FreeRTOS10/tasks.c **** 		else
1278:..\FreeRTOS10/tasks.c **** 		{
1279:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:..\FreeRTOS10/tasks.c **** 		}
1281:..\FreeRTOS10/tasks.c **** 	}
1282:..\FreeRTOS10/tasks.c **** 
1283:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1285:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 24


1286:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1287:..\FreeRTOS10/tasks.c **** 
1288:..\FreeRTOS10/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:..\FreeRTOS10/tasks.c **** 	{
1290:..\FreeRTOS10/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:..\FreeRTOS10/tasks.c **** 
1292:..\FreeRTOS10/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:..\FreeRTOS10/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:..\FreeRTOS10/tasks.c **** 		{
1295:..\FreeRTOS10/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:..\FreeRTOS10/tasks.c **** 			vTaskSuspendAll();
1297:..\FreeRTOS10/tasks.c **** 			{
1298:..\FreeRTOS10/tasks.c **** 				traceTASK_DELAY();
1299:..\FreeRTOS10/tasks.c **** 
1300:..\FreeRTOS10/tasks.c **** 				/* A task that is removed from the event list while the
1301:..\FreeRTOS10/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:..\FreeRTOS10/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:..\FreeRTOS10/tasks.c **** 				is resumed.
1304:..\FreeRTOS10/tasks.c **** 
1305:..\FreeRTOS10/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:..\FreeRTOS10/tasks.c **** 				executing task. */
1307:..\FreeRTOS10/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:..\FreeRTOS10/tasks.c **** 			}
1309:..\FreeRTOS10/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:..\FreeRTOS10/tasks.c **** 		}
1311:..\FreeRTOS10/tasks.c **** 		else
1312:..\FreeRTOS10/tasks.c **** 		{
1313:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:..\FreeRTOS10/tasks.c **** 		}
1315:..\FreeRTOS10/tasks.c **** 
1316:..\FreeRTOS10/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:..\FreeRTOS10/tasks.c **** 		have put ourselves to sleep. */
1318:..\FreeRTOS10/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:..\FreeRTOS10/tasks.c **** 		{
1320:..\FreeRTOS10/tasks.c **** 			portYIELD_WITHIN_API();
1321:..\FreeRTOS10/tasks.c **** 		}
1322:..\FreeRTOS10/tasks.c **** 		else
1323:..\FreeRTOS10/tasks.c **** 		{
1324:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:..\FreeRTOS10/tasks.c **** 		}
1326:..\FreeRTOS10/tasks.c **** 	}
1327:..\FreeRTOS10/tasks.c **** 
1328:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1330:..\FreeRTOS10/tasks.c **** 
1331:..\FreeRTOS10/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:..\FreeRTOS10/tasks.c **** 
1333:..\FreeRTOS10/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:..\FreeRTOS10/tasks.c **** 	{
1335:..\FreeRTOS10/tasks.c **** 	eTaskState eReturn;
1336:..\FreeRTOS10/tasks.c **** 	List_t *pxStateList;
1337:..\FreeRTOS10/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:..\FreeRTOS10/tasks.c **** 
1339:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTCB );
1340:..\FreeRTOS10/tasks.c **** 
1341:..\FreeRTOS10/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:..\FreeRTOS10/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 25


1343:..\FreeRTOS10/tasks.c **** 			/* The task calling this function is querying its own state. */
1344:..\FreeRTOS10/tasks.c **** 			eReturn = eRunning;
1345:..\FreeRTOS10/tasks.c **** 		}
1346:..\FreeRTOS10/tasks.c **** 		else
1347:..\FreeRTOS10/tasks.c **** 		{
1348:..\FreeRTOS10/tasks.c **** 			taskENTER_CRITICAL();
1349:..\FreeRTOS10/tasks.c **** 			{
1350:..\FreeRTOS10/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:..\FreeRTOS10/tasks.c **** 			}
1352:..\FreeRTOS10/tasks.c **** 			taskEXIT_CRITICAL();
1353:..\FreeRTOS10/tasks.c **** 
1354:..\FreeRTOS10/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:..\FreeRTOS10/tasks.c **** 			{
1356:..\FreeRTOS10/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:..\FreeRTOS10/tasks.c **** 				lists. */
1358:..\FreeRTOS10/tasks.c **** 				eReturn = eBlocked;
1359:..\FreeRTOS10/tasks.c **** 			}
1360:..\FreeRTOS10/tasks.c **** 
1361:..\FreeRTOS10/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:..\FreeRTOS10/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:..\FreeRTOS10/tasks.c **** 				{
1364:..\FreeRTOS10/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:..\FreeRTOS10/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:..\FreeRTOS10/tasks.c **** 					indefinitely? */
1367:..\FreeRTOS10/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:..\FreeRTOS10/tasks.c **** 					{
1369:..\FreeRTOS10/tasks.c **** 						eReturn = eSuspended;
1370:..\FreeRTOS10/tasks.c **** 					}
1371:..\FreeRTOS10/tasks.c **** 					else
1372:..\FreeRTOS10/tasks.c **** 					{
1373:..\FreeRTOS10/tasks.c **** 						eReturn = eBlocked;
1374:..\FreeRTOS10/tasks.c **** 					}
1375:..\FreeRTOS10/tasks.c **** 				}
1376:..\FreeRTOS10/tasks.c **** 			#endif
1377:..\FreeRTOS10/tasks.c **** 
1378:..\FreeRTOS10/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:..\FreeRTOS10/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:..\FreeRTOS10/tasks.c **** 				{
1381:..\FreeRTOS10/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:..\FreeRTOS10/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:..\FreeRTOS10/tasks.c **** 					all. */
1384:..\FreeRTOS10/tasks.c **** 					eReturn = eDeleted;
1385:..\FreeRTOS10/tasks.c **** 				}
1386:..\FreeRTOS10/tasks.c **** 			#endif
1387:..\FreeRTOS10/tasks.c **** 
1388:..\FreeRTOS10/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:..\FreeRTOS10/tasks.c **** 			{
1390:..\FreeRTOS10/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:..\FreeRTOS10/tasks.c **** 				Ready (including pending ready) state. */
1392:..\FreeRTOS10/tasks.c **** 				eReturn = eReady;
1393:..\FreeRTOS10/tasks.c **** 			}
1394:..\FreeRTOS10/tasks.c **** 		}
1395:..\FreeRTOS10/tasks.c **** 
1396:..\FreeRTOS10/tasks.c **** 		return eReturn;
1397:..\FreeRTOS10/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:..\FreeRTOS10/tasks.c **** 
1399:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_eTaskGetState */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 26


1400:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1401:..\FreeRTOS10/tasks.c **** 
1402:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:..\FreeRTOS10/tasks.c **** 
1404:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:..\FreeRTOS10/tasks.c **** 	{
1406:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
1407:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxReturn;
1408:..\FreeRTOS10/tasks.c **** 
1409:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
1410:..\FreeRTOS10/tasks.c **** 		{
1411:..\FreeRTOS10/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:..\FreeRTOS10/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:..\FreeRTOS10/tasks.c **** 		}
1416:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
1417:..\FreeRTOS10/tasks.c **** 
1418:..\FreeRTOS10/tasks.c **** 		return uxReturn;
1419:..\FreeRTOS10/tasks.c **** 	}
1420:..\FreeRTOS10/tasks.c **** 
1421:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1423:..\FreeRTOS10/tasks.c **** 
1424:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:..\FreeRTOS10/tasks.c **** 
1426:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:..\FreeRTOS10/tasks.c **** 	{
1428:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
1429:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:..\FreeRTOS10/tasks.c **** 
1431:..\FreeRTOS10/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:..\FreeRTOS10/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:..\FreeRTOS10/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:..\FreeRTOS10/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:..\FreeRTOS10/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:..\FreeRTOS10/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:..\FreeRTOS10/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:..\FreeRTOS10/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:..\FreeRTOS10/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:..\FreeRTOS10/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:..\FreeRTOS10/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:..\FreeRTOS10/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:..\FreeRTOS10/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:..\FreeRTOS10/tasks.c **** 		provided on the following link:
1446:..\FreeRTOS10/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:..\FreeRTOS10/tasks.c **** 
1449:..\FreeRTOS10/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:..\FreeRTOS10/tasks.c **** 		{
1451:..\FreeRTOS10/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:..\FreeRTOS10/tasks.c **** 			task that is being queried. */
1453:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:..\FreeRTOS10/tasks.c **** 		}
1456:..\FreeRTOS10/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 27


1457:..\FreeRTOS10/tasks.c **** 
1458:..\FreeRTOS10/tasks.c **** 		return uxReturn;
1459:..\FreeRTOS10/tasks.c **** 	}
1460:..\FreeRTOS10/tasks.c **** 
1461:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1463:..\FreeRTOS10/tasks.c **** 
1464:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:..\FreeRTOS10/tasks.c **** 
1466:..\FreeRTOS10/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:..\FreeRTOS10/tasks.c **** 	{
1468:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
1469:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:..\FreeRTOS10/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:..\FreeRTOS10/tasks.c **** 
1472:..\FreeRTOS10/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:..\FreeRTOS10/tasks.c **** 
1474:..\FreeRTOS10/tasks.c **** 		/* Ensure the new priority is valid. */
1475:..\FreeRTOS10/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:..\FreeRTOS10/tasks.c **** 		{
1477:..\FreeRTOS10/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:..\FreeRTOS10/tasks.c **** 		}
1479:..\FreeRTOS10/tasks.c **** 		else
1480:..\FreeRTOS10/tasks.c **** 		{
1481:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:..\FreeRTOS10/tasks.c **** 		}
1483:..\FreeRTOS10/tasks.c **** 
1484:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
1485:..\FreeRTOS10/tasks.c **** 		{
1486:..\FreeRTOS10/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:..\FreeRTOS10/tasks.c **** 			task that is being changed. */
1488:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:..\FreeRTOS10/tasks.c **** 
1490:..\FreeRTOS10/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:..\FreeRTOS10/tasks.c **** 
1492:..\FreeRTOS10/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:..\FreeRTOS10/tasks.c **** 			{
1494:..\FreeRTOS10/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:..\FreeRTOS10/tasks.c **** 			}
1496:..\FreeRTOS10/tasks.c **** 			#else
1497:..\FreeRTOS10/tasks.c **** 			{
1498:..\FreeRTOS10/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:..\FreeRTOS10/tasks.c **** 			}
1500:..\FreeRTOS10/tasks.c **** 			#endif
1501:..\FreeRTOS10/tasks.c **** 
1502:..\FreeRTOS10/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:..\FreeRTOS10/tasks.c **** 			{
1504:..\FreeRTOS10/tasks.c **** 				/* The priority change may have readied a task of higher
1505:..\FreeRTOS10/tasks.c **** 				priority than the calling task. */
1506:..\FreeRTOS10/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:..\FreeRTOS10/tasks.c **** 				{
1508:..\FreeRTOS10/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:..\FreeRTOS10/tasks.c **** 					{
1510:..\FreeRTOS10/tasks.c **** 						/* The priority of a task other than the currently
1511:..\FreeRTOS10/tasks.c **** 						running task is being raised.  Is the priority being
1512:..\FreeRTOS10/tasks.c **** 						raised above that of the running task? */
1513:..\FreeRTOS10/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 28


1514:..\FreeRTOS10/tasks.c **** 						{
1515:..\FreeRTOS10/tasks.c **** 							xYieldRequired = pdTRUE;
1516:..\FreeRTOS10/tasks.c **** 						}
1517:..\FreeRTOS10/tasks.c **** 						else
1518:..\FreeRTOS10/tasks.c **** 						{
1519:..\FreeRTOS10/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:..\FreeRTOS10/tasks.c **** 						}
1521:..\FreeRTOS10/tasks.c **** 					}
1522:..\FreeRTOS10/tasks.c **** 					else
1523:..\FreeRTOS10/tasks.c **** 					{
1524:..\FreeRTOS10/tasks.c **** 						/* The priority of the running task is being raised,
1525:..\FreeRTOS10/tasks.c **** 						but the running task must already be the highest
1526:..\FreeRTOS10/tasks.c **** 						priority task able to run so no yield is required. */
1527:..\FreeRTOS10/tasks.c **** 					}
1528:..\FreeRTOS10/tasks.c **** 				}
1529:..\FreeRTOS10/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:..\FreeRTOS10/tasks.c **** 				{
1531:..\FreeRTOS10/tasks.c **** 					/* Setting the priority of the running task down means
1532:..\FreeRTOS10/tasks.c **** 					there may now be another task of higher priority that
1533:..\FreeRTOS10/tasks.c **** 					is ready to execute. */
1534:..\FreeRTOS10/tasks.c **** 					xYieldRequired = pdTRUE;
1535:..\FreeRTOS10/tasks.c **** 				}
1536:..\FreeRTOS10/tasks.c **** 				else
1537:..\FreeRTOS10/tasks.c **** 				{
1538:..\FreeRTOS10/tasks.c **** 					/* Setting the priority of any other task down does not
1539:..\FreeRTOS10/tasks.c **** 					require a yield as the running task must be above the
1540:..\FreeRTOS10/tasks.c **** 					new priority of the task being modified. */
1541:..\FreeRTOS10/tasks.c **** 				}
1542:..\FreeRTOS10/tasks.c **** 
1543:..\FreeRTOS10/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:..\FreeRTOS10/tasks.c **** 				before its uxPriority member is changed so the
1545:..\FreeRTOS10/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:..\FreeRTOS10/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:..\FreeRTOS10/tasks.c **** 
1548:..\FreeRTOS10/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:..\FreeRTOS10/tasks.c **** 				{
1550:..\FreeRTOS10/tasks.c **** 					/* Only change the priority being used if the task is not
1551:..\FreeRTOS10/tasks.c **** 					currently using an inherited priority. */
1552:..\FreeRTOS10/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:..\FreeRTOS10/tasks.c **** 					{
1554:..\FreeRTOS10/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:..\FreeRTOS10/tasks.c **** 					}
1556:..\FreeRTOS10/tasks.c **** 					else
1557:..\FreeRTOS10/tasks.c **** 					{
1558:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:..\FreeRTOS10/tasks.c **** 					}
1560:..\FreeRTOS10/tasks.c **** 
1561:..\FreeRTOS10/tasks.c **** 					/* The base priority gets set whatever. */
1562:..\FreeRTOS10/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:..\FreeRTOS10/tasks.c **** 				}
1564:..\FreeRTOS10/tasks.c **** 				#else
1565:..\FreeRTOS10/tasks.c **** 				{
1566:..\FreeRTOS10/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:..\FreeRTOS10/tasks.c **** 				}
1568:..\FreeRTOS10/tasks.c **** 				#endif
1569:..\FreeRTOS10/tasks.c **** 
1570:..\FreeRTOS10/tasks.c **** 				/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 29


1571:..\FreeRTOS10/tasks.c **** 				being used for anything else. */
1572:..\FreeRTOS10/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:..\FreeRTOS10/tasks.c **** 				{
1574:..\FreeRTOS10/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:..\FreeRTOS10/tasks.c **** 				}
1576:..\FreeRTOS10/tasks.c **** 				else
1577:..\FreeRTOS10/tasks.c **** 				{
1578:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:..\FreeRTOS10/tasks.c **** 				}
1580:..\FreeRTOS10/tasks.c **** 
1581:..\FreeRTOS10/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:..\FreeRTOS10/tasks.c **** 				nothing more than change its priority variable. However, if
1583:..\FreeRTOS10/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:..\FreeRTOS10/tasks.c **** 				in the list appropriate to its new priority. */
1585:..\FreeRTOS10/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:..\FreeRTOS10/tasks.c **** 				{
1587:..\FreeRTOS10/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:..\FreeRTOS10/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:..\FreeRTOS10/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:..\FreeRTOS10/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:..\FreeRTOS10/tasks.c **** 					{
1592:..\FreeRTOS10/tasks.c **** 						/* It is known that the task is in its ready list so
1593:..\FreeRTOS10/tasks.c **** 						there is no need to check again and the port level
1594:..\FreeRTOS10/tasks.c **** 						reset macro can be called directly. */
1595:..\FreeRTOS10/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:..\FreeRTOS10/tasks.c **** 					}
1597:..\FreeRTOS10/tasks.c **** 					else
1598:..\FreeRTOS10/tasks.c **** 					{
1599:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:..\FreeRTOS10/tasks.c **** 					}
1601:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:..\FreeRTOS10/tasks.c **** 				}
1603:..\FreeRTOS10/tasks.c **** 				else
1604:..\FreeRTOS10/tasks.c **** 				{
1605:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:..\FreeRTOS10/tasks.c **** 				}
1607:..\FreeRTOS10/tasks.c **** 
1608:..\FreeRTOS10/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:..\FreeRTOS10/tasks.c **** 				{
1610:..\FreeRTOS10/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:..\FreeRTOS10/tasks.c **** 				}
1612:..\FreeRTOS10/tasks.c **** 				else
1613:..\FreeRTOS10/tasks.c **** 				{
1614:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:..\FreeRTOS10/tasks.c **** 				}
1616:..\FreeRTOS10/tasks.c **** 
1617:..\FreeRTOS10/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:..\FreeRTOS10/tasks.c **** 				optimised task selection is not being used. */
1619:..\FreeRTOS10/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:..\FreeRTOS10/tasks.c **** 			}
1621:..\FreeRTOS10/tasks.c **** 		}
1622:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
1623:..\FreeRTOS10/tasks.c **** 	}
1624:..\FreeRTOS10/tasks.c **** 
1625:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1627:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 30


1628:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1629:..\FreeRTOS10/tasks.c **** 
1630:..\FreeRTOS10/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:..\FreeRTOS10/tasks.c **** 	{
1632:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
1633:..\FreeRTOS10/tasks.c **** 
1634:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
1635:..\FreeRTOS10/tasks.c **** 		{
1636:..\FreeRTOS10/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:..\FreeRTOS10/tasks.c **** 			being suspended. */
1638:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:..\FreeRTOS10/tasks.c **** 
1640:..\FreeRTOS10/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:..\FreeRTOS10/tasks.c **** 
1642:..\FreeRTOS10/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:..\FreeRTOS10/tasks.c **** 			suspended list. */
1644:..\FreeRTOS10/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:..\FreeRTOS10/tasks.c **** 			{
1646:..\FreeRTOS10/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:..\FreeRTOS10/tasks.c **** 			}
1648:..\FreeRTOS10/tasks.c **** 			else
1649:..\FreeRTOS10/tasks.c **** 			{
1650:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:..\FreeRTOS10/tasks.c **** 			}
1652:..\FreeRTOS10/tasks.c **** 
1653:..\FreeRTOS10/tasks.c **** 			/* Is the task waiting on an event also? */
1654:..\FreeRTOS10/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:..\FreeRTOS10/tasks.c **** 			{
1656:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:..\FreeRTOS10/tasks.c **** 			}
1658:..\FreeRTOS10/tasks.c **** 			else
1659:..\FreeRTOS10/tasks.c **** 			{
1660:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:..\FreeRTOS10/tasks.c **** 			}
1662:..\FreeRTOS10/tasks.c **** 
1663:..\FreeRTOS10/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:..\FreeRTOS10/tasks.c **** 
1665:..\FreeRTOS10/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:..\FreeRTOS10/tasks.c **** 			{
1667:..\FreeRTOS10/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:..\FreeRTOS10/tasks.c **** 				{
1669:..\FreeRTOS10/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:..\FreeRTOS10/tasks.c **** 					now suspended, so no notification was received. */
1671:..\FreeRTOS10/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:..\FreeRTOS10/tasks.c **** 				}
1673:..\FreeRTOS10/tasks.c **** 			}
1674:..\FreeRTOS10/tasks.c **** 			#endif
1675:..\FreeRTOS10/tasks.c **** 		}
1676:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
1677:..\FreeRTOS10/tasks.c **** 
1678:..\FreeRTOS10/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:..\FreeRTOS10/tasks.c **** 		{
1680:..\FreeRTOS10/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:..\FreeRTOS10/tasks.c **** 			task that is now in the Suspended state. */
1682:..\FreeRTOS10/tasks.c **** 			taskENTER_CRITICAL();
1683:..\FreeRTOS10/tasks.c **** 			{
1684:..\FreeRTOS10/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 31


1685:..\FreeRTOS10/tasks.c **** 			}
1686:..\FreeRTOS10/tasks.c **** 			taskEXIT_CRITICAL();
1687:..\FreeRTOS10/tasks.c **** 		}
1688:..\FreeRTOS10/tasks.c **** 		else
1689:..\FreeRTOS10/tasks.c **** 		{
1690:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:..\FreeRTOS10/tasks.c **** 		}
1692:..\FreeRTOS10/tasks.c **** 
1693:..\FreeRTOS10/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:..\FreeRTOS10/tasks.c **** 		{
1695:..\FreeRTOS10/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:..\FreeRTOS10/tasks.c **** 			{
1697:..\FreeRTOS10/tasks.c **** 				/* The current task has just been suspended. */
1698:..\FreeRTOS10/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:..\FreeRTOS10/tasks.c **** 				portYIELD_WITHIN_API();
1700:..\FreeRTOS10/tasks.c **** 			}
1701:..\FreeRTOS10/tasks.c **** 			else
1702:..\FreeRTOS10/tasks.c **** 			{
1703:..\FreeRTOS10/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:..\FreeRTOS10/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:..\FreeRTOS10/tasks.c **** 				must be adjusted to point to a different task. */
1706:..\FreeRTOS10/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:..\FreeRTOS10/tasks.c **** 				{
1708:..\FreeRTOS10/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:..\FreeRTOS10/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:..\FreeRTOS10/tasks.c **** 					be set to point to it no matter what its relative priority
1711:..\FreeRTOS10/tasks.c **** 					is. */
1712:..\FreeRTOS10/tasks.c **** 					pxCurrentTCB = NULL;
1713:..\FreeRTOS10/tasks.c **** 				}
1714:..\FreeRTOS10/tasks.c **** 				else
1715:..\FreeRTOS10/tasks.c **** 				{
1716:..\FreeRTOS10/tasks.c **** 					vTaskSwitchContext();
1717:..\FreeRTOS10/tasks.c **** 				}
1718:..\FreeRTOS10/tasks.c **** 			}
1719:..\FreeRTOS10/tasks.c **** 		}
1720:..\FreeRTOS10/tasks.c **** 		else
1721:..\FreeRTOS10/tasks.c **** 		{
1722:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:..\FreeRTOS10/tasks.c **** 		}
1724:..\FreeRTOS10/tasks.c **** 	}
1725:..\FreeRTOS10/tasks.c **** 
1726:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1728:..\FreeRTOS10/tasks.c **** 
1729:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:..\FreeRTOS10/tasks.c **** 
1731:..\FreeRTOS10/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:..\FreeRTOS10/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:..\FreeRTOS10/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 32


1736:..\FreeRTOS10/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1737:..\FreeRTOS10/tasks.c **** 		section. */
1738:..\FreeRTOS10/tasks.c **** 
1739:..\FreeRTOS10/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:..\FreeRTOS10/tasks.c **** 		configASSERT( xTask );
1741:..\FreeRTOS10/tasks.c **** 
1742:..\FreeRTOS10/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:..\FreeRTOS10/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1743 0
  34 0000 0D4B     		ldr	r3, .L10
  35 0002 4269     		ldr	r2, [r0, #20]
  36 0004 9A42     		cmp	r2, r3
  37 0006 01D1     		bne	.L5
  38 0008 0123     		movs	r3, #1
  39 000a 00E0     		b	.L2
  40              	.L5:
  41 000c 0023     		movs	r3, #0
  42              	.L2:
  43              		.loc 1 1743 0 is_stmt 0 discriminator 4
  44 000e 002B     		cmp	r3, #0
  45 0010 0BD0     		beq	.L6
1744:..\FreeRTOS10/tasks.c **** 		{
1745:..\FreeRTOS10/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:..\FreeRTOS10/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  46              		.loc 1 1746 0 is_stmt 1
  47 0012 816A     		ldr	r1, [r0, #40]
  48 0014 084A     		ldr	r2, .L10
  49 0016 1432     		adds	r2, r2, #20
  50 0018 9142     		cmp	r1, r2
  51 001a 08D0     		beq	.L7
1747:..\FreeRTOS10/tasks.c **** 			{
1748:..\FreeRTOS10/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:..\FreeRTOS10/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:..\FreeRTOS10/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  52              		.loc 1 1750 0
  53 001c 0029     		cmp	r1, #0
  54 001e 00D0     		beq	.L4
  55 0020 0023     		movs	r3, #0
  56              	.L4:
  57              		.loc 1 1750 0 is_stmt 0 discriminator 4
  58 0022 002B     		cmp	r3, #0
  59 0024 05D1     		bne	.L9
1733:..\FreeRTOS10/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  60              		.loc 1 1733 0 is_stmt 1
  61 0026 0020     		movs	r0, #0
  62              	.LVL1:
  63 0028 04E0     		b	.L3
  64              	.LVL2:
  65              	.L6:
  66 002a 0020     		movs	r0, #0
  67              	.LVL3:
  68 002c 02E0     		b	.L3
  69              	.LVL4:
  70              	.L7:
  71 002e 0020     		movs	r0, #0
  72              	.LVL5:
  73 0030 00E0     		b	.L3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 33


  74              	.LVL6:
  75              	.L9:
1751:..\FreeRTOS10/tasks.c **** 				{
1752:..\FreeRTOS10/tasks.c **** 					xReturn = pdTRUE;
  76              		.loc 1 1752 0
  77 0032 0120     		movs	r0, #1
  78              	.LVL7:
  79              	.L3:
1753:..\FreeRTOS10/tasks.c **** 				}
1754:..\FreeRTOS10/tasks.c **** 				else
1755:..\FreeRTOS10/tasks.c **** 				{
1756:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:..\FreeRTOS10/tasks.c **** 				}
1758:..\FreeRTOS10/tasks.c **** 			}
1759:..\FreeRTOS10/tasks.c **** 			else
1760:..\FreeRTOS10/tasks.c **** 			{
1761:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:..\FreeRTOS10/tasks.c **** 			}
1763:..\FreeRTOS10/tasks.c **** 		}
1764:..\FreeRTOS10/tasks.c **** 		else
1765:..\FreeRTOS10/tasks.c **** 		{
1766:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:..\FreeRTOS10/tasks.c **** 		}
1768:..\FreeRTOS10/tasks.c **** 
1769:..\FreeRTOS10/tasks.c **** 		return xReturn;
1770:..\FreeRTOS10/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1770 0
  81              		@ sp needed
  82 0034 7047     		bx	lr
  83              	.L11:
  84 0036 C046     		.align	2
  85              	.L10:
  86 0038 00000000 		.word	.LANCHOR0
  87              		.cfi_endproc
  88              	.LFE43:
  89              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  90              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  91              		.align	2
  92              		.code	16
  93              		.thumb_func
  94              		.type	prvTaskCheckFreeStackSpace, %function
  95              	prvTaskCheckFreeStackSpace:
  96              	.LFB69:
1771:..\FreeRTOS10/tasks.c **** 
1772:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1774:..\FreeRTOS10/tasks.c **** 
1775:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:..\FreeRTOS10/tasks.c **** 
1777:..\FreeRTOS10/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:..\FreeRTOS10/tasks.c **** 	{
1779:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:..\FreeRTOS10/tasks.c **** 
1781:..\FreeRTOS10/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:..\FreeRTOS10/tasks.c **** 		configASSERT( xTaskToResume );
1783:..\FreeRTOS10/tasks.c **** 
1784:..\FreeRTOS10/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 34


1785:..\FreeRTOS10/tasks.c **** 		currently executing task. */
1786:..\FreeRTOS10/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:..\FreeRTOS10/tasks.c **** 		{
1788:..\FreeRTOS10/tasks.c **** 			taskENTER_CRITICAL();
1789:..\FreeRTOS10/tasks.c **** 			{
1790:..\FreeRTOS10/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:..\FreeRTOS10/tasks.c **** 				{
1792:..\FreeRTOS10/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:..\FreeRTOS10/tasks.c **** 
1794:..\FreeRTOS10/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:..\FreeRTOS10/tasks.c **** 					suspended because this is inside a critical section. */
1796:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:..\FreeRTOS10/tasks.c **** 
1799:..\FreeRTOS10/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:..\FreeRTOS10/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:..\FreeRTOS10/tasks.c **** 					{
1802:..\FreeRTOS10/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:..\FreeRTOS10/tasks.c **** 						but will leave the lists in the correct state for the
1804:..\FreeRTOS10/tasks.c **** 						next yield. */
1805:..\FreeRTOS10/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:..\FreeRTOS10/tasks.c **** 					}
1807:..\FreeRTOS10/tasks.c **** 					else
1808:..\FreeRTOS10/tasks.c **** 					{
1809:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:..\FreeRTOS10/tasks.c **** 					}
1811:..\FreeRTOS10/tasks.c **** 				}
1812:..\FreeRTOS10/tasks.c **** 				else
1813:..\FreeRTOS10/tasks.c **** 				{
1814:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:..\FreeRTOS10/tasks.c **** 				}
1816:..\FreeRTOS10/tasks.c **** 			}
1817:..\FreeRTOS10/tasks.c **** 			taskEXIT_CRITICAL();
1818:..\FreeRTOS10/tasks.c **** 		}
1819:..\FreeRTOS10/tasks.c **** 		else
1820:..\FreeRTOS10/tasks.c **** 		{
1821:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:..\FreeRTOS10/tasks.c **** 		}
1823:..\FreeRTOS10/tasks.c **** 	}
1824:..\FreeRTOS10/tasks.c **** 
1825:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:..\FreeRTOS10/tasks.c **** 
1827:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1828:..\FreeRTOS10/tasks.c **** 
1829:..\FreeRTOS10/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:..\FreeRTOS10/tasks.c **** 
1831:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:..\FreeRTOS10/tasks.c **** 	{
1833:..\FreeRTOS10/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:..\FreeRTOS10/tasks.c **** 
1837:..\FreeRTOS10/tasks.c **** 		configASSERT( xTaskToResume );
1838:..\FreeRTOS10/tasks.c **** 
1839:..\FreeRTOS10/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:..\FreeRTOS10/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:..\FreeRTOS10/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 35


1842:..\FreeRTOS10/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:..\FreeRTOS10/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:..\FreeRTOS10/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:..\FreeRTOS10/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:..\FreeRTOS10/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:..\FreeRTOS10/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:..\FreeRTOS10/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:..\FreeRTOS10/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:..\FreeRTOS10/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:..\FreeRTOS10/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:..\FreeRTOS10/tasks.c **** 		provided on the following link:
1854:..\FreeRTOS10/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:..\FreeRTOS10/tasks.c **** 
1857:..\FreeRTOS10/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:..\FreeRTOS10/tasks.c **** 		{
1859:..\FreeRTOS10/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:..\FreeRTOS10/tasks.c **** 			{
1861:..\FreeRTOS10/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:..\FreeRTOS10/tasks.c **** 
1863:..\FreeRTOS10/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:..\FreeRTOS10/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:..\FreeRTOS10/tasks.c **** 				{
1866:..\FreeRTOS10/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:..\FreeRTOS10/tasks.c **** 					suspended list to the ready list directly. */
1868:..\FreeRTOS10/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:..\FreeRTOS10/tasks.c **** 					{
1870:..\FreeRTOS10/tasks.c **** 						xYieldRequired = pdTRUE;
1871:..\FreeRTOS10/tasks.c **** 					}
1872:..\FreeRTOS10/tasks.c **** 					else
1873:..\FreeRTOS10/tasks.c **** 					{
1874:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:..\FreeRTOS10/tasks.c **** 					}
1876:..\FreeRTOS10/tasks.c **** 
1877:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:..\FreeRTOS10/tasks.c **** 				}
1880:..\FreeRTOS10/tasks.c **** 				else
1881:..\FreeRTOS10/tasks.c **** 				{
1882:..\FreeRTOS10/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:..\FreeRTOS10/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:..\FreeRTOS10/tasks.c **** 					unsuspended. */
1885:..\FreeRTOS10/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1886:..\FreeRTOS10/tasks.c **** 				}
1887:..\FreeRTOS10/tasks.c **** 			}
1888:..\FreeRTOS10/tasks.c **** 			else
1889:..\FreeRTOS10/tasks.c **** 			{
1890:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:..\FreeRTOS10/tasks.c **** 			}
1892:..\FreeRTOS10/tasks.c **** 		}
1893:..\FreeRTOS10/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:..\FreeRTOS10/tasks.c **** 
1895:..\FreeRTOS10/tasks.c **** 		return xYieldRequired;
1896:..\FreeRTOS10/tasks.c **** 	}
1897:..\FreeRTOS10/tasks.c **** 
1898:..\FreeRTOS10/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 36


1899:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
1900:..\FreeRTOS10/tasks.c **** 
1901:..\FreeRTOS10/tasks.c **** void vTaskStartScheduler( void )
1902:..\FreeRTOS10/tasks.c **** {
1903:..\FreeRTOS10/tasks.c **** BaseType_t xReturn;
1904:..\FreeRTOS10/tasks.c **** 
1905:..\FreeRTOS10/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:..\FreeRTOS10/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:..\FreeRTOS10/tasks.c **** 	{
1908:..\FreeRTOS10/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:..\FreeRTOS10/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:..\FreeRTOS10/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:..\FreeRTOS10/tasks.c **** 
1912:..\FreeRTOS10/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:..\FreeRTOS10/tasks.c **** 		address of the RAM then create the idle task. */
1914:..\FreeRTOS10/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:..\FreeRTOS10/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:..\FreeRTOS10/tasks.c **** 												configIDLE_TASK_NAME,
1917:..\FreeRTOS10/tasks.c **** 												ulIdleTaskStackSize,
1918:..\FreeRTOS10/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:..\FreeRTOS10/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:..\FreeRTOS10/tasks.c **** 												pxIdleTaskStackBuffer,
1921:..\FreeRTOS10/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:..\FreeRTOS10/tasks.c **** 
1923:..\FreeRTOS10/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:..\FreeRTOS10/tasks.c **** 		{
1925:..\FreeRTOS10/tasks.c **** 			xReturn = pdPASS;
1926:..\FreeRTOS10/tasks.c **** 		}
1927:..\FreeRTOS10/tasks.c **** 		else
1928:..\FreeRTOS10/tasks.c **** 		{
1929:..\FreeRTOS10/tasks.c **** 			xReturn = pdFAIL;
1930:..\FreeRTOS10/tasks.c **** 		}
1931:..\FreeRTOS10/tasks.c **** 	}
1932:..\FreeRTOS10/tasks.c **** 	#else
1933:..\FreeRTOS10/tasks.c **** 	{
1934:..\FreeRTOS10/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:..\FreeRTOS10/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:..\FreeRTOS10/tasks.c **** 								configIDLE_TASK_NAME,
1937:..\FreeRTOS10/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:..\FreeRTOS10/tasks.c **** 								( void * ) NULL,
1939:..\FreeRTOS10/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:..\FreeRTOS10/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:..\FreeRTOS10/tasks.c **** 	}
1942:..\FreeRTOS10/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:..\FreeRTOS10/tasks.c **** 
1944:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:..\FreeRTOS10/tasks.c **** 	{
1946:..\FreeRTOS10/tasks.c **** 		if( xReturn == pdPASS )
1947:..\FreeRTOS10/tasks.c **** 		{
1948:..\FreeRTOS10/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:..\FreeRTOS10/tasks.c **** 		}
1950:..\FreeRTOS10/tasks.c **** 		else
1951:..\FreeRTOS10/tasks.c **** 		{
1952:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:..\FreeRTOS10/tasks.c **** 		}
1954:..\FreeRTOS10/tasks.c **** 	}
1955:..\FreeRTOS10/tasks.c **** 	#endif /* configUSE_TIMERS */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 37


1956:..\FreeRTOS10/tasks.c **** 
1957:..\FreeRTOS10/tasks.c **** 	if( xReturn == pdPASS )
1958:..\FreeRTOS10/tasks.c **** 	{
1959:..\FreeRTOS10/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:..\FreeRTOS10/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:..\FreeRTOS10/tasks.c **** 		the only macro called by the function. */
1962:..\FreeRTOS10/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:..\FreeRTOS10/tasks.c **** 		{
1964:..\FreeRTOS10/tasks.c **** 			freertos_tasks_c_additions_init();
1965:..\FreeRTOS10/tasks.c **** 		}
1966:..\FreeRTOS10/tasks.c **** 		#endif
1967:..\FreeRTOS10/tasks.c **** 
1968:..\FreeRTOS10/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:..\FreeRTOS10/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:..\FreeRTOS10/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:..\FreeRTOS10/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:..\FreeRTOS10/tasks.c **** 		starts to run. */
1973:..\FreeRTOS10/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:..\FreeRTOS10/tasks.c **** 
1975:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:..\FreeRTOS10/tasks.c **** 		{
1977:..\FreeRTOS10/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:..\FreeRTOS10/tasks.c **** 			structure specific to the task that will run first. */
1979:..\FreeRTOS10/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:..\FreeRTOS10/tasks.c **** 		}
1981:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1982:..\FreeRTOS10/tasks.c **** 
1983:..\FreeRTOS10/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:..\FreeRTOS10/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:..\FreeRTOS10/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:..\FreeRTOS10/tasks.c **** 
1987:..\FreeRTOS10/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:..\FreeRTOS10/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:..\FreeRTOS10/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:..\FreeRTOS10/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:..\FreeRTOS10/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:..\FreeRTOS10/tasks.c **** 		FreeRTOSConfig.h file. */
1993:..\FreeRTOS10/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:..\FreeRTOS10/tasks.c **** 
1995:..\FreeRTOS10/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:..\FreeRTOS10/tasks.c **** 		portable interface. */
1997:..\FreeRTOS10/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:..\FreeRTOS10/tasks.c **** 		{
1999:..\FreeRTOS10/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:..\FreeRTOS10/tasks.c **** 			function will not return. */
2001:..\FreeRTOS10/tasks.c **** 		}
2002:..\FreeRTOS10/tasks.c **** 		else
2003:..\FreeRTOS10/tasks.c **** 		{
2004:..\FreeRTOS10/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:..\FreeRTOS10/tasks.c **** 		}
2006:..\FreeRTOS10/tasks.c **** 	}
2007:..\FreeRTOS10/tasks.c **** 	else
2008:..\FreeRTOS10/tasks.c **** 	{
2009:..\FreeRTOS10/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:..\FreeRTOS10/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:..\FreeRTOS10/tasks.c **** 		or the timer task. */
2012:..\FreeRTOS10/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 38


2013:..\FreeRTOS10/tasks.c **** 	}
2014:..\FreeRTOS10/tasks.c **** 
2015:..\FreeRTOS10/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:..\FreeRTOS10/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:..\FreeRTOS10/tasks.c **** 	( void ) xIdleTaskHandle;
2018:..\FreeRTOS10/tasks.c **** }
2019:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2020:..\FreeRTOS10/tasks.c **** 
2021:..\FreeRTOS10/tasks.c **** void vTaskEndScheduler( void )
2022:..\FreeRTOS10/tasks.c **** {
2023:..\FreeRTOS10/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:..\FreeRTOS10/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:..\FreeRTOS10/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:..\FreeRTOS10/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:..\FreeRTOS10/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:..\FreeRTOS10/tasks.c **** 	vPortEndScheduler();
2029:..\FreeRTOS10/tasks.c **** }
2030:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2031:..\FreeRTOS10/tasks.c **** 
2032:..\FreeRTOS10/tasks.c **** void vTaskSuspendAll( void )
2033:..\FreeRTOS10/tasks.c **** {
2034:..\FreeRTOS10/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:..\FreeRTOS10/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:..\FreeRTOS10/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:..\FreeRTOS10/tasks.c **** 	http://goo.gl/wu4acr */
2038:..\FreeRTOS10/tasks.c **** 	++uxSchedulerSuspended;
2039:..\FreeRTOS10/tasks.c **** }
2040:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2041:..\FreeRTOS10/tasks.c **** 
2042:..\FreeRTOS10/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:..\FreeRTOS10/tasks.c **** 
2044:..\FreeRTOS10/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:..\FreeRTOS10/tasks.c **** 	{
2046:..\FreeRTOS10/tasks.c **** 	TickType_t xReturn;
2047:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:..\FreeRTOS10/tasks.c **** 
2049:..\FreeRTOS10/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:..\FreeRTOS10/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:..\FreeRTOS10/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:..\FreeRTOS10/tasks.c **** 		running. */
2053:..\FreeRTOS10/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:..\FreeRTOS10/tasks.c **** 		{
2055:..\FreeRTOS10/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:..\FreeRTOS10/tasks.c **** 			{
2057:..\FreeRTOS10/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:..\FreeRTOS10/tasks.c **** 			}
2059:..\FreeRTOS10/tasks.c **** 		}
2060:..\FreeRTOS10/tasks.c **** 		#else
2061:..\FreeRTOS10/tasks.c **** 		{
2062:..\FreeRTOS10/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:..\FreeRTOS10/tasks.c **** 
2064:..\FreeRTOS10/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:..\FreeRTOS10/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:..\FreeRTOS10/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:..\FreeRTOS10/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:..\FreeRTOS10/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:..\FreeRTOS10/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 39


2070:..\FreeRTOS10/tasks.c **** 			{
2071:..\FreeRTOS10/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:..\FreeRTOS10/tasks.c **** 			}
2073:..\FreeRTOS10/tasks.c **** 		}
2074:..\FreeRTOS10/tasks.c **** 		#endif
2075:..\FreeRTOS10/tasks.c **** 
2076:..\FreeRTOS10/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:..\FreeRTOS10/tasks.c **** 		{
2078:..\FreeRTOS10/tasks.c **** 			xReturn = 0;
2079:..\FreeRTOS10/tasks.c **** 		}
2080:..\FreeRTOS10/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:..\FreeRTOS10/tasks.c **** 		{
2082:..\FreeRTOS10/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:..\FreeRTOS10/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:..\FreeRTOS10/tasks.c **** 			processed. */
2085:..\FreeRTOS10/tasks.c **** 			xReturn = 0;
2086:..\FreeRTOS10/tasks.c **** 		}
2087:..\FreeRTOS10/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:..\FreeRTOS10/tasks.c **** 		{
2089:..\FreeRTOS10/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:..\FreeRTOS10/tasks.c **** 			idle priority.  This path can only be reached if
2091:..\FreeRTOS10/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:..\FreeRTOS10/tasks.c **** 			xReturn = 0;
2093:..\FreeRTOS10/tasks.c **** 		}
2094:..\FreeRTOS10/tasks.c **** 		else
2095:..\FreeRTOS10/tasks.c **** 		{
2096:..\FreeRTOS10/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:..\FreeRTOS10/tasks.c **** 		}
2098:..\FreeRTOS10/tasks.c **** 
2099:..\FreeRTOS10/tasks.c **** 		return xReturn;
2100:..\FreeRTOS10/tasks.c **** 	}
2101:..\FreeRTOS10/tasks.c **** 
2102:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2104:..\FreeRTOS10/tasks.c **** 
2105:..\FreeRTOS10/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:..\FreeRTOS10/tasks.c **** {
2107:..\FreeRTOS10/tasks.c **** TCB_t *pxTCB = NULL;
2108:..\FreeRTOS10/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:..\FreeRTOS10/tasks.c **** 
2110:..\FreeRTOS10/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:..\FreeRTOS10/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:..\FreeRTOS10/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:..\FreeRTOS10/tasks.c **** 
2114:..\FreeRTOS10/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:..\FreeRTOS10/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:..\FreeRTOS10/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:..\FreeRTOS10/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:..\FreeRTOS10/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:..\FreeRTOS10/tasks.c **** 	taskENTER_CRITICAL();
2120:..\FreeRTOS10/tasks.c **** 	{
2121:..\FreeRTOS10/tasks.c **** 		--uxSchedulerSuspended;
2122:..\FreeRTOS10/tasks.c **** 
2123:..\FreeRTOS10/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:..\FreeRTOS10/tasks.c **** 		{
2125:..\FreeRTOS10/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 40


2127:..\FreeRTOS10/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:..\FreeRTOS10/tasks.c **** 				appropriate ready list. */
2129:..\FreeRTOS10/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:..\FreeRTOS10/tasks.c **** 				{
2131:..\FreeRTOS10/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2132:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:..\FreeRTOS10/tasks.c **** 
2136:..\FreeRTOS10/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:..\FreeRTOS10/tasks.c **** 					task then a yield must be performed. */
2138:..\FreeRTOS10/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:..\FreeRTOS10/tasks.c **** 					{
2140:..\FreeRTOS10/tasks.c **** 						xYieldPending = pdTRUE;
2141:..\FreeRTOS10/tasks.c **** 					}
2142:..\FreeRTOS10/tasks.c **** 					else
2143:..\FreeRTOS10/tasks.c **** 					{
2144:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:..\FreeRTOS10/tasks.c **** 					}
2146:..\FreeRTOS10/tasks.c **** 				}
2147:..\FreeRTOS10/tasks.c **** 
2148:..\FreeRTOS10/tasks.c **** 				if( pxTCB != NULL )
2149:..\FreeRTOS10/tasks.c **** 				{
2150:..\FreeRTOS10/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:..\FreeRTOS10/tasks.c **** 					which may have prevented the next unblock time from being
2152:..\FreeRTOS10/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2153:..\FreeRTOS10/tasks.c **** 					important for low power tickless implementations, where
2154:..\FreeRTOS10/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:..\FreeRTOS10/tasks.c **** 					state. */
2156:..\FreeRTOS10/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:..\FreeRTOS10/tasks.c **** 				}
2158:..\FreeRTOS10/tasks.c **** 
2159:..\FreeRTOS10/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:..\FreeRTOS10/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:..\FreeRTOS10/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:..\FreeRTOS10/tasks.c **** 				time. */
2163:..\FreeRTOS10/tasks.c **** 				{
2164:..\FreeRTOS10/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:..\FreeRTOS10/tasks.c **** 
2166:..\FreeRTOS10/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:..\FreeRTOS10/tasks.c **** 					{
2168:..\FreeRTOS10/tasks.c **** 						do
2169:..\FreeRTOS10/tasks.c **** 						{
2170:..\FreeRTOS10/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2171:..\FreeRTOS10/tasks.c **** 							{
2172:..\FreeRTOS10/tasks.c **** 								xYieldPending = pdTRUE;
2173:..\FreeRTOS10/tasks.c **** 							}
2174:..\FreeRTOS10/tasks.c **** 							else
2175:..\FreeRTOS10/tasks.c **** 							{
2176:..\FreeRTOS10/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:..\FreeRTOS10/tasks.c **** 							}
2178:..\FreeRTOS10/tasks.c **** 							--uxPendedCounts;
2179:..\FreeRTOS10/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:..\FreeRTOS10/tasks.c **** 
2181:..\FreeRTOS10/tasks.c **** 						uxPendedTicks = 0;
2182:..\FreeRTOS10/tasks.c **** 					}
2183:..\FreeRTOS10/tasks.c **** 					else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 41


2184:..\FreeRTOS10/tasks.c **** 					{
2185:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:..\FreeRTOS10/tasks.c **** 					}
2187:..\FreeRTOS10/tasks.c **** 				}
2188:..\FreeRTOS10/tasks.c **** 
2189:..\FreeRTOS10/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:..\FreeRTOS10/tasks.c **** 				{
2191:..\FreeRTOS10/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:..\FreeRTOS10/tasks.c **** 					{
2193:..\FreeRTOS10/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:..\FreeRTOS10/tasks.c **** 					}
2195:..\FreeRTOS10/tasks.c **** 					#endif
2196:..\FreeRTOS10/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:..\FreeRTOS10/tasks.c **** 				}
2198:..\FreeRTOS10/tasks.c **** 				else
2199:..\FreeRTOS10/tasks.c **** 				{
2200:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:..\FreeRTOS10/tasks.c **** 				}
2202:..\FreeRTOS10/tasks.c **** 			}
2203:..\FreeRTOS10/tasks.c **** 		}
2204:..\FreeRTOS10/tasks.c **** 		else
2205:..\FreeRTOS10/tasks.c **** 		{
2206:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:..\FreeRTOS10/tasks.c **** 		}
2208:..\FreeRTOS10/tasks.c **** 	}
2209:..\FreeRTOS10/tasks.c **** 	taskEXIT_CRITICAL();
2210:..\FreeRTOS10/tasks.c **** 
2211:..\FreeRTOS10/tasks.c **** 	return xAlreadyYielded;
2212:..\FreeRTOS10/tasks.c **** }
2213:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2214:..\FreeRTOS10/tasks.c **** 
2215:..\FreeRTOS10/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:..\FreeRTOS10/tasks.c **** {
2217:..\FreeRTOS10/tasks.c **** TickType_t xTicks;
2218:..\FreeRTOS10/tasks.c **** 
2219:..\FreeRTOS10/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:..\FreeRTOS10/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:..\FreeRTOS10/tasks.c **** 	{
2222:..\FreeRTOS10/tasks.c **** 		xTicks = xTickCount;
2223:..\FreeRTOS10/tasks.c **** 	}
2224:..\FreeRTOS10/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:..\FreeRTOS10/tasks.c **** 
2226:..\FreeRTOS10/tasks.c **** 	return xTicks;
2227:..\FreeRTOS10/tasks.c **** }
2228:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2229:..\FreeRTOS10/tasks.c **** 
2230:..\FreeRTOS10/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:..\FreeRTOS10/tasks.c **** {
2232:..\FreeRTOS10/tasks.c **** TickType_t xReturn;
2233:..\FreeRTOS10/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:..\FreeRTOS10/tasks.c **** 
2235:..\FreeRTOS10/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:..\FreeRTOS10/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:..\FreeRTOS10/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:..\FreeRTOS10/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:..\FreeRTOS10/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:..\FreeRTOS10/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 42


2241:..\FreeRTOS10/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:..\FreeRTOS10/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:..\FreeRTOS10/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:..\FreeRTOS10/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:..\FreeRTOS10/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:..\FreeRTOS10/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:..\FreeRTOS10/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:..\FreeRTOS10/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:..\FreeRTOS10/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:..\FreeRTOS10/tasks.c **** 
2251:..\FreeRTOS10/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:..\FreeRTOS10/tasks.c **** 	{
2253:..\FreeRTOS10/tasks.c **** 		xReturn = xTickCount;
2254:..\FreeRTOS10/tasks.c **** 	}
2255:..\FreeRTOS10/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:..\FreeRTOS10/tasks.c **** 
2257:..\FreeRTOS10/tasks.c **** 	return xReturn;
2258:..\FreeRTOS10/tasks.c **** }
2259:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2260:..\FreeRTOS10/tasks.c **** 
2261:..\FreeRTOS10/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:..\FreeRTOS10/tasks.c **** {
2263:..\FreeRTOS10/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:..\FreeRTOS10/tasks.c **** 	BaseType_t. */
2265:..\FreeRTOS10/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:..\FreeRTOS10/tasks.c **** }
2267:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2268:..\FreeRTOS10/tasks.c **** 
2269:..\FreeRTOS10/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:..\FreeRTOS10/tasks.c **** {
2271:..\FreeRTOS10/tasks.c **** TCB_t *pxTCB;
2272:..\FreeRTOS10/tasks.c **** 
2273:..\FreeRTOS10/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:..\FreeRTOS10/tasks.c **** 	queried. */
2275:..\FreeRTOS10/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTCB );
2277:..\FreeRTOS10/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:..\FreeRTOS10/tasks.c **** }
2279:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2280:..\FreeRTOS10/tasks.c **** 
2281:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:..\FreeRTOS10/tasks.c **** 
2283:..\FreeRTOS10/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:..\FreeRTOS10/tasks.c **** 	{
2285:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:..\FreeRTOS10/tasks.c **** 	UBaseType_t x;
2287:..\FreeRTOS10/tasks.c **** 	char cNextChar;
2288:..\FreeRTOS10/tasks.c **** 
2289:..\FreeRTOS10/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:..\FreeRTOS10/tasks.c **** 
2291:..\FreeRTOS10/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:..\FreeRTOS10/tasks.c **** 		{
2293:..\FreeRTOS10/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:..\FreeRTOS10/tasks.c **** 
2295:..\FreeRTOS10/tasks.c **** 			do
2296:..\FreeRTOS10/tasks.c **** 			{
2297:..\FreeRTOS10/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 43


2298:..\FreeRTOS10/tasks.c **** 
2299:..\FreeRTOS10/tasks.c **** 				/* Check each character in the name looking for a match or
2300:..\FreeRTOS10/tasks.c **** 				mismatch. */
2301:..\FreeRTOS10/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:..\FreeRTOS10/tasks.c **** 				{
2303:..\FreeRTOS10/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:..\FreeRTOS10/tasks.c **** 
2305:..\FreeRTOS10/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:..\FreeRTOS10/tasks.c **** 					{
2307:..\FreeRTOS10/tasks.c **** 						/* Characters didn't match. */
2308:..\FreeRTOS10/tasks.c **** 						break;
2309:..\FreeRTOS10/tasks.c **** 					}
2310:..\FreeRTOS10/tasks.c **** 					else if( cNextChar == 0x00 )
2311:..\FreeRTOS10/tasks.c **** 					{
2312:..\FreeRTOS10/tasks.c **** 						/* Both strings terminated, a match must have been
2313:..\FreeRTOS10/tasks.c **** 						found. */
2314:..\FreeRTOS10/tasks.c **** 						pxReturn = pxNextTCB;
2315:..\FreeRTOS10/tasks.c **** 						break;
2316:..\FreeRTOS10/tasks.c **** 					}
2317:..\FreeRTOS10/tasks.c **** 					else
2318:..\FreeRTOS10/tasks.c **** 					{
2319:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:..\FreeRTOS10/tasks.c **** 					}
2321:..\FreeRTOS10/tasks.c **** 				}
2322:..\FreeRTOS10/tasks.c **** 
2323:..\FreeRTOS10/tasks.c **** 				if( pxReturn != NULL )
2324:..\FreeRTOS10/tasks.c **** 				{
2325:..\FreeRTOS10/tasks.c **** 					/* The handle has been found. */
2326:..\FreeRTOS10/tasks.c **** 					break;
2327:..\FreeRTOS10/tasks.c **** 				}
2328:..\FreeRTOS10/tasks.c **** 
2329:..\FreeRTOS10/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:..\FreeRTOS10/tasks.c **** 		}
2331:..\FreeRTOS10/tasks.c **** 		else
2332:..\FreeRTOS10/tasks.c **** 		{
2333:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:..\FreeRTOS10/tasks.c **** 		}
2335:..\FreeRTOS10/tasks.c **** 
2336:..\FreeRTOS10/tasks.c **** 		return pxReturn;
2337:..\FreeRTOS10/tasks.c **** 	}
2338:..\FreeRTOS10/tasks.c **** 
2339:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2341:..\FreeRTOS10/tasks.c **** 
2342:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:..\FreeRTOS10/tasks.c **** 
2344:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:..\FreeRTOS10/tasks.c **** 	{
2346:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:..\FreeRTOS10/tasks.c **** 	TCB_t* pxTCB;
2348:..\FreeRTOS10/tasks.c **** 
2349:..\FreeRTOS10/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:..\FreeRTOS10/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:..\FreeRTOS10/tasks.c **** 
2352:..\FreeRTOS10/tasks.c **** 		vTaskSuspendAll();
2353:..\FreeRTOS10/tasks.c **** 		{
2354:..\FreeRTOS10/tasks.c **** 			/* Search the ready lists. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 44


2355:..\FreeRTOS10/tasks.c **** 			do
2356:..\FreeRTOS10/tasks.c **** 			{
2357:..\FreeRTOS10/tasks.c **** 				uxQueue--;
2358:..\FreeRTOS10/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:..\FreeRTOS10/tasks.c **** 
2360:..\FreeRTOS10/tasks.c **** 				if( pxTCB != NULL )
2361:..\FreeRTOS10/tasks.c **** 				{
2362:..\FreeRTOS10/tasks.c **** 					/* Found the handle. */
2363:..\FreeRTOS10/tasks.c **** 					break;
2364:..\FreeRTOS10/tasks.c **** 				}
2365:..\FreeRTOS10/tasks.c **** 
2366:..\FreeRTOS10/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:..\FreeRTOS10/tasks.c **** 
2368:..\FreeRTOS10/tasks.c **** 			/* Search the delayed lists. */
2369:..\FreeRTOS10/tasks.c **** 			if( pxTCB == NULL )
2370:..\FreeRTOS10/tasks.c **** 			{
2371:..\FreeRTOS10/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:..\FreeRTOS10/tasks.c **** 			}
2373:..\FreeRTOS10/tasks.c **** 
2374:..\FreeRTOS10/tasks.c **** 			if( pxTCB == NULL )
2375:..\FreeRTOS10/tasks.c **** 			{
2376:..\FreeRTOS10/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:..\FreeRTOS10/tasks.c **** 			}
2378:..\FreeRTOS10/tasks.c **** 
2379:..\FreeRTOS10/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:..\FreeRTOS10/tasks.c **** 			{
2381:..\FreeRTOS10/tasks.c **** 				if( pxTCB == NULL )
2382:..\FreeRTOS10/tasks.c **** 				{
2383:..\FreeRTOS10/tasks.c **** 					/* Search the suspended list. */
2384:..\FreeRTOS10/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:..\FreeRTOS10/tasks.c **** 				}
2386:..\FreeRTOS10/tasks.c **** 			}
2387:..\FreeRTOS10/tasks.c **** 			#endif
2388:..\FreeRTOS10/tasks.c **** 
2389:..\FreeRTOS10/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:..\FreeRTOS10/tasks.c **** 			{
2391:..\FreeRTOS10/tasks.c **** 				if( pxTCB == NULL )
2392:..\FreeRTOS10/tasks.c **** 				{
2393:..\FreeRTOS10/tasks.c **** 					/* Search the deleted list. */
2394:..\FreeRTOS10/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:..\FreeRTOS10/tasks.c **** 				}
2396:..\FreeRTOS10/tasks.c **** 			}
2397:..\FreeRTOS10/tasks.c **** 			#endif
2398:..\FreeRTOS10/tasks.c **** 		}
2399:..\FreeRTOS10/tasks.c **** 		( void ) xTaskResumeAll();
2400:..\FreeRTOS10/tasks.c **** 
2401:..\FreeRTOS10/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:..\FreeRTOS10/tasks.c **** 	}
2403:..\FreeRTOS10/tasks.c **** 
2404:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2406:..\FreeRTOS10/tasks.c **** 
2407:..\FreeRTOS10/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:..\FreeRTOS10/tasks.c **** 
2409:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:..\FreeRTOS10/tasks.c **** 	{
2411:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 45


2412:..\FreeRTOS10/tasks.c **** 
2413:..\FreeRTOS10/tasks.c **** 		vTaskSuspendAll();
2414:..\FreeRTOS10/tasks.c **** 		{
2415:..\FreeRTOS10/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:..\FreeRTOS10/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:..\FreeRTOS10/tasks.c **** 			{
2418:..\FreeRTOS10/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:..\FreeRTOS10/tasks.c **** 				task in the Ready state. */
2420:..\FreeRTOS10/tasks.c **** 				do
2421:..\FreeRTOS10/tasks.c **** 				{
2422:..\FreeRTOS10/tasks.c **** 					uxQueue--;
2423:..\FreeRTOS10/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:..\FreeRTOS10/tasks.c **** 
2425:..\FreeRTOS10/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:..\FreeRTOS10/tasks.c **** 
2427:..\FreeRTOS10/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:..\FreeRTOS10/tasks.c **** 				task in the Blocked state. */
2429:..\FreeRTOS10/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:..\FreeRTOS10/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:..\FreeRTOS10/tasks.c **** 
2432:..\FreeRTOS10/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:..\FreeRTOS10/tasks.c **** 				{
2434:..\FreeRTOS10/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:..\FreeRTOS10/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:..\FreeRTOS10/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:..\FreeRTOS10/tasks.c **** 				}
2438:..\FreeRTOS10/tasks.c **** 				#endif
2439:..\FreeRTOS10/tasks.c **** 
2440:..\FreeRTOS10/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:..\FreeRTOS10/tasks.c **** 				{
2442:..\FreeRTOS10/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:..\FreeRTOS10/tasks.c **** 					each task in the Suspended state. */
2444:..\FreeRTOS10/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:..\FreeRTOS10/tasks.c **** 				}
2446:..\FreeRTOS10/tasks.c **** 				#endif
2447:..\FreeRTOS10/tasks.c **** 
2448:..\FreeRTOS10/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:..\FreeRTOS10/tasks.c **** 				{
2450:..\FreeRTOS10/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:..\FreeRTOS10/tasks.c **** 					{
2452:..\FreeRTOS10/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:..\FreeRTOS10/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:..\FreeRTOS10/tasks.c **** 						#else
2455:..\FreeRTOS10/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:..\FreeRTOS10/tasks.c **** 						#endif
2457:..\FreeRTOS10/tasks.c **** 					}
2458:..\FreeRTOS10/tasks.c **** 				}
2459:..\FreeRTOS10/tasks.c **** 				#else
2460:..\FreeRTOS10/tasks.c **** 				{
2461:..\FreeRTOS10/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:..\FreeRTOS10/tasks.c **** 					{
2463:..\FreeRTOS10/tasks.c **** 						*pulTotalRunTime = 0;
2464:..\FreeRTOS10/tasks.c **** 					}
2465:..\FreeRTOS10/tasks.c **** 				}
2466:..\FreeRTOS10/tasks.c **** 				#endif
2467:..\FreeRTOS10/tasks.c **** 			}
2468:..\FreeRTOS10/tasks.c **** 			else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 46


2469:..\FreeRTOS10/tasks.c **** 			{
2470:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:..\FreeRTOS10/tasks.c **** 			}
2472:..\FreeRTOS10/tasks.c **** 		}
2473:..\FreeRTOS10/tasks.c **** 		( void ) xTaskResumeAll();
2474:..\FreeRTOS10/tasks.c **** 
2475:..\FreeRTOS10/tasks.c **** 		return uxTask;
2476:..\FreeRTOS10/tasks.c **** 	}
2477:..\FreeRTOS10/tasks.c **** 
2478:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2480:..\FreeRTOS10/tasks.c **** 
2481:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:..\FreeRTOS10/tasks.c **** 
2483:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:..\FreeRTOS10/tasks.c **** 	{
2485:..\FreeRTOS10/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:..\FreeRTOS10/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:..\FreeRTOS10/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:..\FreeRTOS10/tasks.c **** 		return xIdleTaskHandle;
2489:..\FreeRTOS10/tasks.c **** 	}
2490:..\FreeRTOS10/tasks.c **** 
2491:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2493:..\FreeRTOS10/tasks.c **** 
2494:..\FreeRTOS10/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2495:..\FreeRTOS10/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:..\FreeRTOS10/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:..\FreeRTOS10/tasks.c **** 1. */
2498:..\FreeRTOS10/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:..\FreeRTOS10/tasks.c **** 
2500:..\FreeRTOS10/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:..\FreeRTOS10/tasks.c **** 	{
2502:..\FreeRTOS10/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:..\FreeRTOS10/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:..\FreeRTOS10/tasks.c **** 		each stepped tick. */
2505:..\FreeRTOS10/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:..\FreeRTOS10/tasks.c **** 		xTickCount += xTicksToJump;
2507:..\FreeRTOS10/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:..\FreeRTOS10/tasks.c **** 	}
2509:..\FreeRTOS10/tasks.c **** 
2510:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2512:..\FreeRTOS10/tasks.c **** 
2513:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:..\FreeRTOS10/tasks.c **** 
2515:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:..\FreeRTOS10/tasks.c **** 	{
2517:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
2519:..\FreeRTOS10/tasks.c **** 
2520:..\FreeRTOS10/tasks.c **** 		configASSERT( pxTCB );
2521:..\FreeRTOS10/tasks.c **** 
2522:..\FreeRTOS10/tasks.c **** 		vTaskSuspendAll();
2523:..\FreeRTOS10/tasks.c **** 		{
2524:..\FreeRTOS10/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:..\FreeRTOS10/tasks.c **** 			it is actually in the Blocked state. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 47


2526:..\FreeRTOS10/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:..\FreeRTOS10/tasks.c **** 			{
2528:..\FreeRTOS10/tasks.c **** 				xReturn = pdPASS;
2529:..\FreeRTOS10/tasks.c **** 
2530:..\FreeRTOS10/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:..\FreeRTOS10/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:..\FreeRTOS10/tasks.c **** 				scheduler is suspended. */
2533:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:..\FreeRTOS10/tasks.c **** 
2535:..\FreeRTOS10/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:..\FreeRTOS10/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:..\FreeRTOS10/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:..\FreeRTOS10/tasks.c **** 				is used. */
2539:..\FreeRTOS10/tasks.c **** 				taskENTER_CRITICAL();
2540:..\FreeRTOS10/tasks.c **** 				{
2541:..\FreeRTOS10/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:..\FreeRTOS10/tasks.c **** 					{
2543:..\FreeRTOS10/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:..\FreeRTOS10/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:..\FreeRTOS10/tasks.c **** 					}
2546:..\FreeRTOS10/tasks.c **** 					else
2547:..\FreeRTOS10/tasks.c **** 					{
2548:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:..\FreeRTOS10/tasks.c **** 					}
2550:..\FreeRTOS10/tasks.c **** 				}
2551:..\FreeRTOS10/tasks.c **** 				taskEXIT_CRITICAL();
2552:..\FreeRTOS10/tasks.c **** 
2553:..\FreeRTOS10/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:..\FreeRTOS10/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:..\FreeRTOS10/tasks.c **** 
2556:..\FreeRTOS10/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:..\FreeRTOS10/tasks.c **** 				switch if preemption is turned off. */
2558:..\FreeRTOS10/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:..\FreeRTOS10/tasks.c **** 				{
2560:..\FreeRTOS10/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:..\FreeRTOS10/tasks.c **** 					performed if the unblocked task has a priority that is
2562:..\FreeRTOS10/tasks.c **** 					equal to or higher than the currently executing task. */
2563:..\FreeRTOS10/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:..\FreeRTOS10/tasks.c **** 					{
2565:..\FreeRTOS10/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:..\FreeRTOS10/tasks.c **** 						is unsuspended. */
2567:..\FreeRTOS10/tasks.c **** 						xYieldPending = pdTRUE;
2568:..\FreeRTOS10/tasks.c **** 					}
2569:..\FreeRTOS10/tasks.c **** 					else
2570:..\FreeRTOS10/tasks.c **** 					{
2571:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\FreeRTOS10/tasks.c **** 					}
2573:..\FreeRTOS10/tasks.c **** 				}
2574:..\FreeRTOS10/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:..\FreeRTOS10/tasks.c **** 			}
2576:..\FreeRTOS10/tasks.c **** 			else
2577:..\FreeRTOS10/tasks.c **** 			{
2578:..\FreeRTOS10/tasks.c **** 				xReturn = pdFAIL;
2579:..\FreeRTOS10/tasks.c **** 			}
2580:..\FreeRTOS10/tasks.c **** 		}
2581:..\FreeRTOS10/tasks.c **** 		( void ) xTaskResumeAll();
2582:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 48


2583:..\FreeRTOS10/tasks.c **** 		return xReturn;
2584:..\FreeRTOS10/tasks.c **** 	}
2585:..\FreeRTOS10/tasks.c **** 
2586:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
2588:..\FreeRTOS10/tasks.c **** 
2589:..\FreeRTOS10/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:..\FreeRTOS10/tasks.c **** {
2591:..\FreeRTOS10/tasks.c **** TCB_t * pxTCB;
2592:..\FreeRTOS10/tasks.c **** TickType_t xItemValue;
2593:..\FreeRTOS10/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:..\FreeRTOS10/tasks.c **** 
2595:..\FreeRTOS10/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:..\FreeRTOS10/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:..\FreeRTOS10/tasks.c **** 	tasks to be unblocked. */
2598:..\FreeRTOS10/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:..\FreeRTOS10/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:..\FreeRTOS10/tasks.c **** 	{
2601:..\FreeRTOS10/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:..\FreeRTOS10/tasks.c **** 		block. */
2603:..\FreeRTOS10/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:..\FreeRTOS10/tasks.c **** 
2605:..\FreeRTOS10/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:..\FreeRTOS10/tasks.c **** 		delayed lists if it wraps to 0. */
2607:..\FreeRTOS10/tasks.c **** 		xTickCount = xConstTickCount;
2608:..\FreeRTOS10/tasks.c **** 
2609:..\FreeRTOS10/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:..\FreeRTOS10/tasks.c **** 		{
2611:..\FreeRTOS10/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:..\FreeRTOS10/tasks.c **** 		}
2613:..\FreeRTOS10/tasks.c **** 		else
2614:..\FreeRTOS10/tasks.c **** 		{
2615:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:..\FreeRTOS10/tasks.c **** 		}
2617:..\FreeRTOS10/tasks.c **** 
2618:..\FreeRTOS10/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:..\FreeRTOS10/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:..\FreeRTOS10/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:..\FreeRTOS10/tasks.c **** 		look any further down the list. */
2622:..\FreeRTOS10/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:..\FreeRTOS10/tasks.c **** 		{
2624:..\FreeRTOS10/tasks.c **** 			for( ;; )
2625:..\FreeRTOS10/tasks.c **** 			{
2626:..\FreeRTOS10/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2627:..\FreeRTOS10/tasks.c **** 				{
2628:..\FreeRTOS10/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:..\FreeRTOS10/tasks.c **** 					to the maximum possible value so it is extremely
2630:..\FreeRTOS10/tasks.c **** 					unlikely that the
2631:..\FreeRTOS10/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:..\FreeRTOS10/tasks.c **** 					next time through. */
2633:..\FreeRTOS10/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:..\FreeRTOS10/tasks.c **** 					break;
2635:..\FreeRTOS10/tasks.c **** 				}
2636:..\FreeRTOS10/tasks.c **** 				else
2637:..\FreeRTOS10/tasks.c **** 				{
2638:..\FreeRTOS10/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:..\FreeRTOS10/tasks.c **** 					item at the head of the delayed list.  This is the time
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 49


2640:..\FreeRTOS10/tasks.c **** 					at which the task at the head of the delayed list must
2641:..\FreeRTOS10/tasks.c **** 					be removed from the Blocked state. */
2642:..\FreeRTOS10/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:..\FreeRTOS10/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:..\FreeRTOS10/tasks.c **** 
2645:..\FreeRTOS10/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:..\FreeRTOS10/tasks.c **** 					{
2647:..\FreeRTOS10/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:..\FreeRTOS10/tasks.c **** 						item value is the time at which the task at the head
2649:..\FreeRTOS10/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:..\FreeRTOS10/tasks.c **** 						state -	so record the item value in
2651:..\FreeRTOS10/tasks.c **** 						xNextTaskUnblockTime. */
2652:..\FreeRTOS10/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:..\FreeRTOS10/tasks.c **** 						break;
2654:..\FreeRTOS10/tasks.c **** 					}
2655:..\FreeRTOS10/tasks.c **** 					else
2656:..\FreeRTOS10/tasks.c **** 					{
2657:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:..\FreeRTOS10/tasks.c **** 					}
2659:..\FreeRTOS10/tasks.c **** 
2660:..\FreeRTOS10/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:..\FreeRTOS10/tasks.c **** 
2663:..\FreeRTOS10/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:..\FreeRTOS10/tasks.c **** 					it from the event list. */
2665:..\FreeRTOS10/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2666:..\FreeRTOS10/tasks.c **** 					{
2667:..\FreeRTOS10/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:..\FreeRTOS10/tasks.c **** 					}
2669:..\FreeRTOS10/tasks.c **** 					else
2670:..\FreeRTOS10/tasks.c **** 					{
2671:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:..\FreeRTOS10/tasks.c **** 					}
2673:..\FreeRTOS10/tasks.c **** 
2674:..\FreeRTOS10/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:..\FreeRTOS10/tasks.c **** 					list. */
2676:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:..\FreeRTOS10/tasks.c **** 
2678:..\FreeRTOS10/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:..\FreeRTOS10/tasks.c **** 					context switch if preemption is turned off. */
2680:..\FreeRTOS10/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:..\FreeRTOS10/tasks.c **** 					{
2682:..\FreeRTOS10/tasks.c **** 						/* Preemption is on, but a context switch should
2683:..\FreeRTOS10/tasks.c **** 						only be performed if the unblocked task has a
2684:..\FreeRTOS10/tasks.c **** 						priority that is equal to or higher than the
2685:..\FreeRTOS10/tasks.c **** 						currently executing task. */
2686:..\FreeRTOS10/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:..\FreeRTOS10/tasks.c **** 						{
2688:..\FreeRTOS10/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:..\FreeRTOS10/tasks.c **** 						}
2690:..\FreeRTOS10/tasks.c **** 						else
2691:..\FreeRTOS10/tasks.c **** 						{
2692:..\FreeRTOS10/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:..\FreeRTOS10/tasks.c **** 						}
2694:..\FreeRTOS10/tasks.c **** 					}
2695:..\FreeRTOS10/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:..\FreeRTOS10/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 50


2697:..\FreeRTOS10/tasks.c **** 			}
2698:..\FreeRTOS10/tasks.c **** 		}
2699:..\FreeRTOS10/tasks.c **** 
2700:..\FreeRTOS10/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:..\FreeRTOS10/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:..\FreeRTOS10/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:..\FreeRTOS10/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:..\FreeRTOS10/tasks.c **** 		{
2705:..\FreeRTOS10/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:..\FreeRTOS10/tasks.c **** 			{
2707:..\FreeRTOS10/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:..\FreeRTOS10/tasks.c **** 			}
2709:..\FreeRTOS10/tasks.c **** 			else
2710:..\FreeRTOS10/tasks.c **** 			{
2711:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:..\FreeRTOS10/tasks.c **** 			}
2713:..\FreeRTOS10/tasks.c **** 		}
2714:..\FreeRTOS10/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:..\FreeRTOS10/tasks.c **** 
2716:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:..\FreeRTOS10/tasks.c **** 		{
2718:..\FreeRTOS10/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:..\FreeRTOS10/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:..\FreeRTOS10/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:..\FreeRTOS10/tasks.c **** 			{
2722:..\FreeRTOS10/tasks.c **** 				vApplicationTickHook();
2723:..\FreeRTOS10/tasks.c **** 			}
2724:..\FreeRTOS10/tasks.c **** 			else
2725:..\FreeRTOS10/tasks.c **** 			{
2726:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:..\FreeRTOS10/tasks.c **** 			}
2728:..\FreeRTOS10/tasks.c **** 		}
2729:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:..\FreeRTOS10/tasks.c **** 	}
2731:..\FreeRTOS10/tasks.c **** 	else
2732:..\FreeRTOS10/tasks.c **** 	{
2733:..\FreeRTOS10/tasks.c **** 		++uxPendedTicks;
2734:..\FreeRTOS10/tasks.c **** 
2735:..\FreeRTOS10/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:..\FreeRTOS10/tasks.c **** 		scheduler is locked. */
2737:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:..\FreeRTOS10/tasks.c **** 		{
2739:..\FreeRTOS10/tasks.c **** 			vApplicationTickHook();
2740:..\FreeRTOS10/tasks.c **** 		}
2741:..\FreeRTOS10/tasks.c **** 		#endif
2742:..\FreeRTOS10/tasks.c **** 	}
2743:..\FreeRTOS10/tasks.c **** 
2744:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:..\FreeRTOS10/tasks.c **** 	{
2746:..\FreeRTOS10/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:..\FreeRTOS10/tasks.c **** 		{
2748:..\FreeRTOS10/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:..\FreeRTOS10/tasks.c **** 		}
2750:..\FreeRTOS10/tasks.c **** 		else
2751:..\FreeRTOS10/tasks.c **** 		{
2752:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:..\FreeRTOS10/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 51


2754:..\FreeRTOS10/tasks.c **** 	}
2755:..\FreeRTOS10/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:..\FreeRTOS10/tasks.c **** 
2757:..\FreeRTOS10/tasks.c **** 	return xSwitchRequired;
2758:..\FreeRTOS10/tasks.c **** }
2759:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2760:..\FreeRTOS10/tasks.c **** 
2761:..\FreeRTOS10/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:..\FreeRTOS10/tasks.c **** 
2763:..\FreeRTOS10/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:..\FreeRTOS10/tasks.c **** 	{
2765:..\FreeRTOS10/tasks.c **** 	TCB_t *xTCB;
2766:..\FreeRTOS10/tasks.c **** 
2767:..\FreeRTOS10/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:..\FreeRTOS10/tasks.c **** 		getting set. */
2769:..\FreeRTOS10/tasks.c **** 		if( xTask == NULL )
2770:..\FreeRTOS10/tasks.c **** 		{
2771:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:..\FreeRTOS10/tasks.c **** 		}
2773:..\FreeRTOS10/tasks.c **** 		else
2774:..\FreeRTOS10/tasks.c **** 		{
2775:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:..\FreeRTOS10/tasks.c **** 		}
2777:..\FreeRTOS10/tasks.c **** 
2778:..\FreeRTOS10/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:..\FreeRTOS10/tasks.c **** 		the value can be accessed from an interrupt. */
2780:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
2781:..\FreeRTOS10/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
2783:..\FreeRTOS10/tasks.c **** 	}
2784:..\FreeRTOS10/tasks.c **** 
2785:..\FreeRTOS10/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2787:..\FreeRTOS10/tasks.c **** 
2788:..\FreeRTOS10/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:..\FreeRTOS10/tasks.c **** 
2790:..\FreeRTOS10/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:..\FreeRTOS10/tasks.c **** 	{
2792:..\FreeRTOS10/tasks.c **** 	TCB_t *xTCB;
2793:..\FreeRTOS10/tasks.c **** 	TaskHookFunction_t xReturn;
2794:..\FreeRTOS10/tasks.c **** 
2795:..\FreeRTOS10/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:..\FreeRTOS10/tasks.c **** 		if( xTask == NULL )
2797:..\FreeRTOS10/tasks.c **** 		{
2798:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:..\FreeRTOS10/tasks.c **** 		}
2800:..\FreeRTOS10/tasks.c **** 		else
2801:..\FreeRTOS10/tasks.c **** 		{
2802:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:..\FreeRTOS10/tasks.c **** 		}
2804:..\FreeRTOS10/tasks.c **** 
2805:..\FreeRTOS10/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:..\FreeRTOS10/tasks.c **** 		the value can be accessed from an interrupt. */
2807:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
2808:..\FreeRTOS10/tasks.c **** 		{
2809:..\FreeRTOS10/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:..\FreeRTOS10/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 52


2811:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
2812:..\FreeRTOS10/tasks.c **** 
2813:..\FreeRTOS10/tasks.c **** 		return xReturn;
2814:..\FreeRTOS10/tasks.c **** 	}
2815:..\FreeRTOS10/tasks.c **** 
2816:..\FreeRTOS10/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2818:..\FreeRTOS10/tasks.c **** 
2819:..\FreeRTOS10/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:..\FreeRTOS10/tasks.c **** 
2821:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:..\FreeRTOS10/tasks.c **** 	{
2823:..\FreeRTOS10/tasks.c **** 	TCB_t *xTCB;
2824:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
2825:..\FreeRTOS10/tasks.c **** 
2826:..\FreeRTOS10/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:..\FreeRTOS10/tasks.c **** 		if( xTask == NULL )
2828:..\FreeRTOS10/tasks.c **** 		{
2829:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:..\FreeRTOS10/tasks.c **** 		}
2831:..\FreeRTOS10/tasks.c **** 		else
2832:..\FreeRTOS10/tasks.c **** 		{
2833:..\FreeRTOS10/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:..\FreeRTOS10/tasks.c **** 		}
2835:..\FreeRTOS10/tasks.c **** 
2836:..\FreeRTOS10/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2837:..\FreeRTOS10/tasks.c **** 		{
2838:..\FreeRTOS10/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:..\FreeRTOS10/tasks.c **** 		}
2840:..\FreeRTOS10/tasks.c **** 		else
2841:..\FreeRTOS10/tasks.c **** 		{
2842:..\FreeRTOS10/tasks.c **** 			xReturn = pdFAIL;
2843:..\FreeRTOS10/tasks.c **** 		}
2844:..\FreeRTOS10/tasks.c **** 
2845:..\FreeRTOS10/tasks.c **** 		return xReturn;
2846:..\FreeRTOS10/tasks.c **** 	}
2847:..\FreeRTOS10/tasks.c **** 
2848:..\FreeRTOS10/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2850:..\FreeRTOS10/tasks.c **** 
2851:..\FreeRTOS10/tasks.c **** void vTaskSwitchContext( void )
2852:..\FreeRTOS10/tasks.c **** {
2853:..\FreeRTOS10/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:..\FreeRTOS10/tasks.c **** 	{
2855:..\FreeRTOS10/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:..\FreeRTOS10/tasks.c **** 		switch. */
2857:..\FreeRTOS10/tasks.c **** 		xYieldPending = pdTRUE;
2858:..\FreeRTOS10/tasks.c **** 	}
2859:..\FreeRTOS10/tasks.c **** 	else
2860:..\FreeRTOS10/tasks.c **** 	{
2861:..\FreeRTOS10/tasks.c **** 		xYieldPending = pdFALSE;
2862:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:..\FreeRTOS10/tasks.c **** 
2864:..\FreeRTOS10/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:..\FreeRTOS10/tasks.c **** 		{
2866:..\FreeRTOS10/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:..\FreeRTOS10/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 53


2868:..\FreeRTOS10/tasks.c **** 				#else
2869:..\FreeRTOS10/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:..\FreeRTOS10/tasks.c **** 				#endif
2871:..\FreeRTOS10/tasks.c **** 
2872:..\FreeRTOS10/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:..\FreeRTOS10/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:..\FreeRTOS10/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:..\FreeRTOS10/tasks.c **** 				protection here so count values are only valid until the timer
2876:..\FreeRTOS10/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:..\FreeRTOS10/tasks.c **** 				against suspect run time stat counter implementations - which
2878:..\FreeRTOS10/tasks.c **** 				are provided by the application, not the kernel. */
2879:..\FreeRTOS10/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:..\FreeRTOS10/tasks.c **** 				{
2881:..\FreeRTOS10/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:..\FreeRTOS10/tasks.c **** 				}
2883:..\FreeRTOS10/tasks.c **** 				else
2884:..\FreeRTOS10/tasks.c **** 				{
2885:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:..\FreeRTOS10/tasks.c **** 				}
2887:..\FreeRTOS10/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:..\FreeRTOS10/tasks.c **** 		}
2889:..\FreeRTOS10/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:..\FreeRTOS10/tasks.c **** 
2891:..\FreeRTOS10/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:..\FreeRTOS10/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:..\FreeRTOS10/tasks.c **** 
2894:..\FreeRTOS10/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:..\FreeRTOS10/tasks.c **** 		optimised asm code. */
2896:..\FreeRTOS10/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:..\FreeRTOS10/tasks.c **** 
2899:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:..\FreeRTOS10/tasks.c **** 		{
2901:..\FreeRTOS10/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:..\FreeRTOS10/tasks.c **** 			structure specific to this task. */
2903:..\FreeRTOS10/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:..\FreeRTOS10/tasks.c **** 		}
2905:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:..\FreeRTOS10/tasks.c **** 	}
2907:..\FreeRTOS10/tasks.c **** }
2908:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2909:..\FreeRTOS10/tasks.c **** 
2910:..\FreeRTOS10/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:..\FreeRTOS10/tasks.c **** {
2912:..\FreeRTOS10/tasks.c **** 	configASSERT( pxEventList );
2913:..\FreeRTOS10/tasks.c **** 
2914:..\FreeRTOS10/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:..\FreeRTOS10/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:..\FreeRTOS10/tasks.c **** 
2917:..\FreeRTOS10/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:..\FreeRTOS10/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:..\FreeRTOS10/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:..\FreeRTOS10/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:..\FreeRTOS10/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:..\FreeRTOS10/tasks.c **** 
2923:..\FreeRTOS10/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:..\FreeRTOS10/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 54


2925:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2926:..\FreeRTOS10/tasks.c **** 
2927:..\FreeRTOS10/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:..\FreeRTOS10/tasks.c **** {
2929:..\FreeRTOS10/tasks.c **** 	configASSERT( pxEventList );
2930:..\FreeRTOS10/tasks.c **** 
2931:..\FreeRTOS10/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:..\FreeRTOS10/tasks.c **** 	the event groups implementation. */
2933:..\FreeRTOS10/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:..\FreeRTOS10/tasks.c **** 
2935:..\FreeRTOS10/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:..\FreeRTOS10/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:..\FreeRTOS10/tasks.c **** 	task that is not in the Blocked state. */
2938:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:..\FreeRTOS10/tasks.c **** 
2940:..\FreeRTOS10/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:..\FreeRTOS10/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:..\FreeRTOS10/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:..\FreeRTOS10/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:..\FreeRTOS10/tasks.c **** 	the task level). */
2945:..\FreeRTOS10/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:..\FreeRTOS10/tasks.c **** 
2947:..\FreeRTOS10/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:..\FreeRTOS10/tasks.c **** }
2949:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2950:..\FreeRTOS10/tasks.c **** 
2951:..\FreeRTOS10/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:..\FreeRTOS10/tasks.c **** 
2953:..\FreeRTOS10/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:..\FreeRTOS10/tasks.c **** 	{
2955:..\FreeRTOS10/tasks.c **** 		configASSERT( pxEventList );
2956:..\FreeRTOS10/tasks.c **** 
2957:..\FreeRTOS10/tasks.c **** 		/* This function should not be called by application code hence the
2958:..\FreeRTOS10/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:..\FreeRTOS10/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:..\FreeRTOS10/tasks.c **** 		it should be called with the scheduler suspended. */
2961:..\FreeRTOS10/tasks.c **** 
2962:..\FreeRTOS10/tasks.c **** 
2963:..\FreeRTOS10/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:..\FreeRTOS10/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:..\FreeRTOS10/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:..\FreeRTOS10/tasks.c **** 		can be used in place of vListInsert. */
2967:..\FreeRTOS10/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:..\FreeRTOS10/tasks.c **** 
2969:..\FreeRTOS10/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:..\FreeRTOS10/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:..\FreeRTOS10/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:..\FreeRTOS10/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:..\FreeRTOS10/tasks.c **** 		{
2974:..\FreeRTOS10/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:..\FreeRTOS10/tasks.c **** 		}
2976:..\FreeRTOS10/tasks.c **** 
2977:..\FreeRTOS10/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:..\FreeRTOS10/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:..\FreeRTOS10/tasks.c **** 	}
2980:..\FreeRTOS10/tasks.c **** 
2981:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TIMERS */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 55


2982:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
2983:..\FreeRTOS10/tasks.c **** 
2984:..\FreeRTOS10/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:..\FreeRTOS10/tasks.c **** {
2986:..\FreeRTOS10/tasks.c **** TCB_t *pxUnblockedTCB;
2987:..\FreeRTOS10/tasks.c **** BaseType_t xReturn;
2988:..\FreeRTOS10/tasks.c **** 
2989:..\FreeRTOS10/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:..\FreeRTOS10/tasks.c **** 	called from a critical section within an ISR. */
2991:..\FreeRTOS10/tasks.c **** 
2992:..\FreeRTOS10/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:..\FreeRTOS10/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:..\FreeRTOS10/tasks.c **** 	the delayed list, and add it to the ready list.
2995:..\FreeRTOS10/tasks.c **** 
2996:..\FreeRTOS10/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:..\FreeRTOS10/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:..\FreeRTOS10/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:..\FreeRTOS10/tasks.c **** 
3000:..\FreeRTOS10/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:..\FreeRTOS10/tasks.c **** 	pxEventList is not empty. */
3002:..\FreeRTOS10/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:..\FreeRTOS10/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:..\FreeRTOS10/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:..\FreeRTOS10/tasks.c **** 
3006:..\FreeRTOS10/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:..\FreeRTOS10/tasks.c **** 	{
3008:..\FreeRTOS10/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:..\FreeRTOS10/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:..\FreeRTOS10/tasks.c **** 	}
3011:..\FreeRTOS10/tasks.c **** 	else
3012:..\FreeRTOS10/tasks.c **** 	{
3013:..\FreeRTOS10/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:..\FreeRTOS10/tasks.c **** 		pending until the scheduler is resumed. */
3015:..\FreeRTOS10/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:..\FreeRTOS10/tasks.c **** 	}
3017:..\FreeRTOS10/tasks.c **** 
3018:..\FreeRTOS10/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:..\FreeRTOS10/tasks.c **** 	{
3020:..\FreeRTOS10/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:..\FreeRTOS10/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:..\FreeRTOS10/tasks.c **** 		it should force a context switch now. */
3023:..\FreeRTOS10/tasks.c **** 		xReturn = pdTRUE;
3024:..\FreeRTOS10/tasks.c **** 
3025:..\FreeRTOS10/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:..\FreeRTOS10/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:..\FreeRTOS10/tasks.c **** 		xYieldPending = pdTRUE;
3028:..\FreeRTOS10/tasks.c **** 	}
3029:..\FreeRTOS10/tasks.c **** 	else
3030:..\FreeRTOS10/tasks.c **** 	{
3031:..\FreeRTOS10/tasks.c **** 		xReturn = pdFALSE;
3032:..\FreeRTOS10/tasks.c **** 	}
3033:..\FreeRTOS10/tasks.c **** 
3034:..\FreeRTOS10/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:..\FreeRTOS10/tasks.c **** 	{
3036:..\FreeRTOS10/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:..\FreeRTOS10/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:..\FreeRTOS10/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 56


3039:..\FreeRTOS10/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:..\FreeRTOS10/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:..\FreeRTOS10/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:..\FreeRTOS10/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:..\FreeRTOS10/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:..\FreeRTOS10/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:..\FreeRTOS10/tasks.c **** 	}
3046:..\FreeRTOS10/tasks.c **** 	#endif
3047:..\FreeRTOS10/tasks.c **** 
3048:..\FreeRTOS10/tasks.c **** 	return xReturn;
3049:..\FreeRTOS10/tasks.c **** }
3050:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3051:..\FreeRTOS10/tasks.c **** 
3052:..\FreeRTOS10/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:..\FreeRTOS10/tasks.c **** {
3054:..\FreeRTOS10/tasks.c **** TCB_t *pxUnblockedTCB;
3055:..\FreeRTOS10/tasks.c **** 
3056:..\FreeRTOS10/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:..\FreeRTOS10/tasks.c **** 	the event flags implementation. */
3058:..\FreeRTOS10/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:..\FreeRTOS10/tasks.c **** 
3060:..\FreeRTOS10/tasks.c **** 	/* Store the new item value in the event list. */
3061:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:..\FreeRTOS10/tasks.c **** 
3063:..\FreeRTOS10/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:..\FreeRTOS10/tasks.c **** 	event flags. */
3065:..\FreeRTOS10/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:..\FreeRTOS10/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:..\FreeRTOS10/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:..\FreeRTOS10/tasks.c **** 
3069:..\FreeRTOS10/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:..\FreeRTOS10/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:..\FreeRTOS10/tasks.c **** 	lists. */
3072:..\FreeRTOS10/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:..\FreeRTOS10/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:..\FreeRTOS10/tasks.c **** 
3075:..\FreeRTOS10/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:..\FreeRTOS10/tasks.c **** 	{
3077:..\FreeRTOS10/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:..\FreeRTOS10/tasks.c **** 		a context switch is required.  This function is called with the
3079:..\FreeRTOS10/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:..\FreeRTOS10/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:..\FreeRTOS10/tasks.c **** 		xYieldPending = pdTRUE;
3082:..\FreeRTOS10/tasks.c **** 	}
3083:..\FreeRTOS10/tasks.c **** }
3084:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3085:..\FreeRTOS10/tasks.c **** 
3086:..\FreeRTOS10/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:..\FreeRTOS10/tasks.c **** {
3088:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTimeOut );
3089:..\FreeRTOS10/tasks.c **** 	taskENTER_CRITICAL();
3090:..\FreeRTOS10/tasks.c **** 	{
3091:..\FreeRTOS10/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:..\FreeRTOS10/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:..\FreeRTOS10/tasks.c **** 	}
3094:..\FreeRTOS10/tasks.c **** 	taskEXIT_CRITICAL();
3095:..\FreeRTOS10/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 57


3096:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3097:..\FreeRTOS10/tasks.c **** 
3098:..\FreeRTOS10/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:..\FreeRTOS10/tasks.c **** {
3100:..\FreeRTOS10/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:..\FreeRTOS10/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:..\FreeRTOS10/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:..\FreeRTOS10/tasks.c **** }
3104:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3105:..\FreeRTOS10/tasks.c **** 
3106:..\FreeRTOS10/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:..\FreeRTOS10/tasks.c **** {
3108:..\FreeRTOS10/tasks.c **** BaseType_t xReturn;
3109:..\FreeRTOS10/tasks.c **** 
3110:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTimeOut );
3111:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTicksToWait );
3112:..\FreeRTOS10/tasks.c **** 
3113:..\FreeRTOS10/tasks.c **** 	taskENTER_CRITICAL();
3114:..\FreeRTOS10/tasks.c **** 	{
3115:..\FreeRTOS10/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:..\FreeRTOS10/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:..\FreeRTOS10/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:..\FreeRTOS10/tasks.c **** 
3119:..\FreeRTOS10/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:..\FreeRTOS10/tasks.c **** 			{
3122:..\FreeRTOS10/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:..\FreeRTOS10/tasks.c **** 				but has the same result. */
3124:..\FreeRTOS10/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:..\FreeRTOS10/tasks.c **** 				xReturn = pdTRUE;
3126:..\FreeRTOS10/tasks.c **** 			}
3127:..\FreeRTOS10/tasks.c **** 			else
3128:..\FreeRTOS10/tasks.c **** 		#endif
3129:..\FreeRTOS10/tasks.c **** 
3130:..\FreeRTOS10/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:..\FreeRTOS10/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:..\FreeRTOS10/tasks.c **** 			{
3133:..\FreeRTOS10/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:..\FreeRTOS10/tasks.c **** 				specified is the maximum block time then the task should block
3135:..\FreeRTOS10/tasks.c **** 				indefinitely, and therefore never time out. */
3136:..\FreeRTOS10/tasks.c **** 				xReturn = pdFALSE;
3137:..\FreeRTOS10/tasks.c **** 			}
3138:..\FreeRTOS10/tasks.c **** 			else
3139:..\FreeRTOS10/tasks.c **** 		#endif
3140:..\FreeRTOS10/tasks.c **** 
3141:..\FreeRTOS10/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:..\FreeRTOS10/tasks.c **** 		{
3143:..\FreeRTOS10/tasks.c **** 			/* The tick count is greater than the time at which
3144:..\FreeRTOS10/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:..\FreeRTOS10/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:..\FreeRTOS10/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:..\FreeRTOS10/tasks.c **** 			was called. */
3148:..\FreeRTOS10/tasks.c **** 			xReturn = pdTRUE;
3149:..\FreeRTOS10/tasks.c **** 		}
3150:..\FreeRTOS10/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:..\FreeRTOS10/tasks.c **** 		{
3152:..\FreeRTOS10/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 58


3153:..\FreeRTOS10/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:..\FreeRTOS10/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:..\FreeRTOS10/tasks.c **** 			xReturn = pdFALSE;
3156:..\FreeRTOS10/tasks.c **** 		}
3157:..\FreeRTOS10/tasks.c **** 		else
3158:..\FreeRTOS10/tasks.c **** 		{
3159:..\FreeRTOS10/tasks.c **** 			*pxTicksToWait = 0;
3160:..\FreeRTOS10/tasks.c **** 			xReturn = pdTRUE;
3161:..\FreeRTOS10/tasks.c **** 		}
3162:..\FreeRTOS10/tasks.c **** 	}
3163:..\FreeRTOS10/tasks.c **** 	taskEXIT_CRITICAL();
3164:..\FreeRTOS10/tasks.c **** 
3165:..\FreeRTOS10/tasks.c **** 	return xReturn;
3166:..\FreeRTOS10/tasks.c **** }
3167:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3168:..\FreeRTOS10/tasks.c **** 
3169:..\FreeRTOS10/tasks.c **** void vTaskMissedYield( void )
3170:..\FreeRTOS10/tasks.c **** {
3171:..\FreeRTOS10/tasks.c **** 	xYieldPending = pdTRUE;
3172:..\FreeRTOS10/tasks.c **** }
3173:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3174:..\FreeRTOS10/tasks.c **** 
3175:..\FreeRTOS10/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:..\FreeRTOS10/tasks.c **** 
3177:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:..\FreeRTOS10/tasks.c **** 	{
3179:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxReturn;
3180:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3181:..\FreeRTOS10/tasks.c **** 
3182:..\FreeRTOS10/tasks.c **** 		if( xTask != NULL )
3183:..\FreeRTOS10/tasks.c **** 		{
3184:..\FreeRTOS10/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:..\FreeRTOS10/tasks.c **** 		}
3187:..\FreeRTOS10/tasks.c **** 		else
3188:..\FreeRTOS10/tasks.c **** 		{
3189:..\FreeRTOS10/tasks.c **** 			uxReturn = 0U;
3190:..\FreeRTOS10/tasks.c **** 		}
3191:..\FreeRTOS10/tasks.c **** 
3192:..\FreeRTOS10/tasks.c **** 		return uxReturn;
3193:..\FreeRTOS10/tasks.c **** 	}
3194:..\FreeRTOS10/tasks.c **** 
3195:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3197:..\FreeRTOS10/tasks.c **** 
3198:..\FreeRTOS10/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:..\FreeRTOS10/tasks.c **** 
3200:..\FreeRTOS10/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:..\FreeRTOS10/tasks.c **** 	{
3202:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3203:..\FreeRTOS10/tasks.c **** 
3204:..\FreeRTOS10/tasks.c **** 		if( xTask != NULL )
3205:..\FreeRTOS10/tasks.c **** 		{
3206:..\FreeRTOS10/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:..\FreeRTOS10/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:..\FreeRTOS10/tasks.c **** 		}
3209:..\FreeRTOS10/tasks.c **** 	}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 59


3210:..\FreeRTOS10/tasks.c **** 
3211:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:..\FreeRTOS10/tasks.c **** 
3213:..\FreeRTOS10/tasks.c **** /*
3214:..\FreeRTOS10/tasks.c ****  * -----------------------------------------------------------
3215:..\FreeRTOS10/tasks.c ****  * The Idle task.
3216:..\FreeRTOS10/tasks.c ****  * ----------------------------------------------------------
3217:..\FreeRTOS10/tasks.c ****  *
3218:..\FreeRTOS10/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:..\FreeRTOS10/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:..\FreeRTOS10/tasks.c ****  *
3221:..\FreeRTOS10/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:..\FreeRTOS10/tasks.c ****  *
3223:..\FreeRTOS10/tasks.c ****  */
3224:..\FreeRTOS10/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:..\FreeRTOS10/tasks.c **** {
3226:..\FreeRTOS10/tasks.c **** 	/* Stop warnings. */
3227:..\FreeRTOS10/tasks.c **** 	( void ) pvParameters;
3228:..\FreeRTOS10/tasks.c **** 
3229:..\FreeRTOS10/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:..\FreeRTOS10/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:..\FreeRTOS10/tasks.c **** 
3232:..\FreeRTOS10/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:..\FreeRTOS10/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:..\FreeRTOS10/tasks.c **** 	any. */
3235:..\FreeRTOS10/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3236:..\FreeRTOS10/tasks.c **** 
3237:..\FreeRTOS10/tasks.c **** 	for( ;; )
3238:..\FreeRTOS10/tasks.c **** 	{
3239:..\FreeRTOS10/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:..\FreeRTOS10/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:..\FreeRTOS10/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:..\FreeRTOS10/tasks.c **** 
3243:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:..\FreeRTOS10/tasks.c **** 		{
3245:..\FreeRTOS10/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:..\FreeRTOS10/tasks.c **** 			see if any other task has become available.  If we are using
3247:..\FreeRTOS10/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:..\FreeRTOS10/tasks.c **** 			will automatically get the processor anyway. */
3249:..\FreeRTOS10/tasks.c **** 			taskYIELD();
3250:..\FreeRTOS10/tasks.c **** 		}
3251:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:..\FreeRTOS10/tasks.c **** 
3253:..\FreeRTOS10/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:..\FreeRTOS10/tasks.c **** 		{
3255:..\FreeRTOS10/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:..\FreeRTOS10/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:..\FreeRTOS10/tasks.c **** 			to run then the idle task should yield before the end of the
3258:..\FreeRTOS10/tasks.c **** 			timeslice.
3259:..\FreeRTOS10/tasks.c **** 
3260:..\FreeRTOS10/tasks.c **** 			A critical region is not required here as we are just reading from
3261:..\FreeRTOS10/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:..\FreeRTOS10/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:..\FreeRTOS10/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:..\FreeRTOS10/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:..\FreeRTOS10/tasks.c **** 			{
3266:..\FreeRTOS10/tasks.c **** 				taskYIELD();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 60


3267:..\FreeRTOS10/tasks.c **** 			}
3268:..\FreeRTOS10/tasks.c **** 			else
3269:..\FreeRTOS10/tasks.c **** 			{
3270:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:..\FreeRTOS10/tasks.c **** 			}
3272:..\FreeRTOS10/tasks.c **** 		}
3273:..\FreeRTOS10/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:..\FreeRTOS10/tasks.c **** 
3275:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:..\FreeRTOS10/tasks.c **** 		{
3277:..\FreeRTOS10/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:..\FreeRTOS10/tasks.c **** 
3279:..\FreeRTOS10/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:..\FreeRTOS10/tasks.c **** 			allows the application designer to add background functionality
3281:..\FreeRTOS10/tasks.c **** 			without the overhead of a separate task.
3282:..\FreeRTOS10/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:..\FreeRTOS10/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:..\FreeRTOS10/tasks.c **** 			vApplicationIdleHook();
3285:..\FreeRTOS10/tasks.c **** 		}
3286:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:..\FreeRTOS10/tasks.c **** 
3288:..\FreeRTOS10/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:..\FreeRTOS10/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:..\FreeRTOS10/tasks.c **** 		user defined low power mode	implementations require
3291:..\FreeRTOS10/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3293:..\FreeRTOS10/tasks.c **** 		{
3294:..\FreeRTOS10/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:..\FreeRTOS10/tasks.c **** 
3296:..\FreeRTOS10/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:..\FreeRTOS10/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:..\FreeRTOS10/tasks.c **** 			test of the expected idle time is performed without the
3299:..\FreeRTOS10/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:..\FreeRTOS10/tasks.c **** 			valid. */
3301:..\FreeRTOS10/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:..\FreeRTOS10/tasks.c **** 
3303:..\FreeRTOS10/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:..\FreeRTOS10/tasks.c **** 			{
3305:..\FreeRTOS10/tasks.c **** 				vTaskSuspendAll();
3306:..\FreeRTOS10/tasks.c **** 				{
3307:..\FreeRTOS10/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:..\FreeRTOS10/tasks.c **** 					time can be sampled again, and this time its value can
3309:..\FreeRTOS10/tasks.c **** 					be used. */
3310:..\FreeRTOS10/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:..\FreeRTOS10/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:..\FreeRTOS10/tasks.c **** 
3313:..\FreeRTOS10/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:..\FreeRTOS10/tasks.c **** 					if the application does not want
3315:..\FreeRTOS10/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:..\FreeRTOS10/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:..\FreeRTOS10/tasks.c **** 
3318:..\FreeRTOS10/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:..\FreeRTOS10/tasks.c **** 					{
3320:..\FreeRTOS10/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:..\FreeRTOS10/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:..\FreeRTOS10/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:..\FreeRTOS10/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 61


3324:..\FreeRTOS10/tasks.c **** 					else
3325:..\FreeRTOS10/tasks.c **** 					{
3326:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:..\FreeRTOS10/tasks.c **** 					}
3328:..\FreeRTOS10/tasks.c **** 				}
3329:..\FreeRTOS10/tasks.c **** 				( void ) xTaskResumeAll();
3330:..\FreeRTOS10/tasks.c **** 			}
3331:..\FreeRTOS10/tasks.c **** 			else
3332:..\FreeRTOS10/tasks.c **** 			{
3333:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:..\FreeRTOS10/tasks.c **** 			}
3335:..\FreeRTOS10/tasks.c **** 		}
3336:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:..\FreeRTOS10/tasks.c **** 	}
3338:..\FreeRTOS10/tasks.c **** }
3339:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3340:..\FreeRTOS10/tasks.c **** 
3341:..\FreeRTOS10/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:..\FreeRTOS10/tasks.c **** 
3343:..\FreeRTOS10/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:..\FreeRTOS10/tasks.c **** 	{
3345:..\FreeRTOS10/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:..\FreeRTOS10/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:..\FreeRTOS10/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:..\FreeRTOS10/tasks.c **** 
3349:..\FreeRTOS10/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3350:..\FreeRTOS10/tasks.c **** 		{
3351:..\FreeRTOS10/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:..\FreeRTOS10/tasks.c **** 			eReturn = eAbortSleep;
3353:..\FreeRTOS10/tasks.c **** 		}
3354:..\FreeRTOS10/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:..\FreeRTOS10/tasks.c **** 		{
3356:..\FreeRTOS10/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:..\FreeRTOS10/tasks.c **** 			eReturn = eAbortSleep;
3358:..\FreeRTOS10/tasks.c **** 		}
3359:..\FreeRTOS10/tasks.c **** 		else
3360:..\FreeRTOS10/tasks.c **** 		{
3361:..\FreeRTOS10/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:..\FreeRTOS10/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:..\FreeRTOS10/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:..\FreeRTOS10/tasks.c **** 			interrupts. */
3365:..\FreeRTOS10/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:..\FreeRTOS10/tasks.c **** 			{
3367:..\FreeRTOS10/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:..\FreeRTOS10/tasks.c **** 			}
3369:..\FreeRTOS10/tasks.c **** 			else
3370:..\FreeRTOS10/tasks.c **** 			{
3371:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:..\FreeRTOS10/tasks.c **** 			}
3373:..\FreeRTOS10/tasks.c **** 		}
3374:..\FreeRTOS10/tasks.c **** 
3375:..\FreeRTOS10/tasks.c **** 		return eReturn;
3376:..\FreeRTOS10/tasks.c **** 	}
3377:..\FreeRTOS10/tasks.c **** 
3378:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3380:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 62


3381:..\FreeRTOS10/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:..\FreeRTOS10/tasks.c **** 
3383:..\FreeRTOS10/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:..\FreeRTOS10/tasks.c **** 	{
3385:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3386:..\FreeRTOS10/tasks.c **** 
3387:..\FreeRTOS10/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:..\FreeRTOS10/tasks.c **** 		{
3389:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:..\FreeRTOS10/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:..\FreeRTOS10/tasks.c **** 		}
3392:..\FreeRTOS10/tasks.c **** 	}
3393:..\FreeRTOS10/tasks.c **** 
3394:..\FreeRTOS10/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3396:..\FreeRTOS10/tasks.c **** 
3397:..\FreeRTOS10/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:..\FreeRTOS10/tasks.c **** 
3399:..\FreeRTOS10/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:..\FreeRTOS10/tasks.c **** 	{
3401:..\FreeRTOS10/tasks.c **** 	void *pvReturn = NULL;
3402:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3403:..\FreeRTOS10/tasks.c **** 
3404:..\FreeRTOS10/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:..\FreeRTOS10/tasks.c **** 		{
3406:..\FreeRTOS10/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3407:..\FreeRTOS10/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:..\FreeRTOS10/tasks.c **** 		}
3409:..\FreeRTOS10/tasks.c **** 		else
3410:..\FreeRTOS10/tasks.c **** 		{
3411:..\FreeRTOS10/tasks.c **** 			pvReturn = NULL;
3412:..\FreeRTOS10/tasks.c **** 		}
3413:..\FreeRTOS10/tasks.c **** 
3414:..\FreeRTOS10/tasks.c **** 		return pvReturn;
3415:..\FreeRTOS10/tasks.c **** 	}
3416:..\FreeRTOS10/tasks.c **** 
3417:..\FreeRTOS10/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3419:..\FreeRTOS10/tasks.c **** 
3420:..\FreeRTOS10/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:..\FreeRTOS10/tasks.c **** 
3422:..\FreeRTOS10/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:..\FreeRTOS10/tasks.c **** 	{
3424:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3425:..\FreeRTOS10/tasks.c **** 
3426:..\FreeRTOS10/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:..\FreeRTOS10/tasks.c **** 		the calling task. */
3428:..\FreeRTOS10/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:..\FreeRTOS10/tasks.c **** 
3430:..\FreeRTOS10/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:..\FreeRTOS10/tasks.c **** 	}
3432:..\FreeRTOS10/tasks.c **** 
3433:..\FreeRTOS10/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3435:..\FreeRTOS10/tasks.c **** 
3436:..\FreeRTOS10/tasks.c **** static void prvInitialiseTaskLists( void )
3437:..\FreeRTOS10/tasks.c **** {
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 63


3438:..\FreeRTOS10/tasks.c **** UBaseType_t uxPriority;
3439:..\FreeRTOS10/tasks.c **** 
3440:..\FreeRTOS10/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:..\FreeRTOS10/tasks.c **** 	{
3442:..\FreeRTOS10/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3443:..\FreeRTOS10/tasks.c **** 	}
3444:..\FreeRTOS10/tasks.c **** 
3445:..\FreeRTOS10/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:..\FreeRTOS10/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:..\FreeRTOS10/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:..\FreeRTOS10/tasks.c **** 
3449:..\FreeRTOS10/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:..\FreeRTOS10/tasks.c **** 	{
3451:..\FreeRTOS10/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:..\FreeRTOS10/tasks.c **** 	}
3453:..\FreeRTOS10/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:..\FreeRTOS10/tasks.c **** 
3455:..\FreeRTOS10/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:..\FreeRTOS10/tasks.c **** 	{
3457:..\FreeRTOS10/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:..\FreeRTOS10/tasks.c **** 	}
3459:..\FreeRTOS10/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:..\FreeRTOS10/tasks.c **** 
3461:..\FreeRTOS10/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:..\FreeRTOS10/tasks.c **** 	using list2. */
3463:..\FreeRTOS10/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3464:..\FreeRTOS10/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:..\FreeRTOS10/tasks.c **** }
3466:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3467:..\FreeRTOS10/tasks.c **** 
3468:..\FreeRTOS10/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:..\FreeRTOS10/tasks.c **** {
3470:..\FreeRTOS10/tasks.c **** 
3471:..\FreeRTOS10/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:..\FreeRTOS10/tasks.c **** 
3473:..\FreeRTOS10/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:..\FreeRTOS10/tasks.c **** 	{
3475:..\FreeRTOS10/tasks.c **** 		TCB_t *pxTCB;
3476:..\FreeRTOS10/tasks.c **** 
3477:..\FreeRTOS10/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:..\FreeRTOS10/tasks.c **** 		being called too often in the idle task. */
3479:..\FreeRTOS10/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:..\FreeRTOS10/tasks.c **** 		{
3481:..\FreeRTOS10/tasks.c **** 			taskENTER_CRITICAL();
3482:..\FreeRTOS10/tasks.c **** 			{
3483:..\FreeRTOS10/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:..\FreeRTOS10/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:..\FreeRTOS10/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:..\FreeRTOS10/tasks.c **** 			}
3488:..\FreeRTOS10/tasks.c **** 			taskEXIT_CRITICAL();
3489:..\FreeRTOS10/tasks.c **** 
3490:..\FreeRTOS10/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:..\FreeRTOS10/tasks.c **** 		}
3492:..\FreeRTOS10/tasks.c **** 	}
3493:..\FreeRTOS10/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:..\FreeRTOS10/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 64


3495:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3496:..\FreeRTOS10/tasks.c **** 
3497:..\FreeRTOS10/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:..\FreeRTOS10/tasks.c **** 
3499:..\FreeRTOS10/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:..\FreeRTOS10/tasks.c **** 	{
3501:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3502:..\FreeRTOS10/tasks.c **** 
3503:..\FreeRTOS10/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:..\FreeRTOS10/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:..\FreeRTOS10/tasks.c **** 
3506:..\FreeRTOS10/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:..\FreeRTOS10/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:..\FreeRTOS10/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:..\FreeRTOS10/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:..\FreeRTOS10/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:..\FreeRTOS10/tasks.c **** 
3512:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:..\FreeRTOS10/tasks.c **** 		{
3514:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:..\FreeRTOS10/tasks.c **** 		}
3516:..\FreeRTOS10/tasks.c **** 		#else
3517:..\FreeRTOS10/tasks.c **** 		{
3518:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:..\FreeRTOS10/tasks.c **** 		}
3520:..\FreeRTOS10/tasks.c **** 		#endif
3521:..\FreeRTOS10/tasks.c **** 
3522:..\FreeRTOS10/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:..\FreeRTOS10/tasks.c **** 		{
3524:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:..\FreeRTOS10/tasks.c **** 		}
3526:..\FreeRTOS10/tasks.c **** 		#else
3527:..\FreeRTOS10/tasks.c **** 		{
3528:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:..\FreeRTOS10/tasks.c **** 		}
3530:..\FreeRTOS10/tasks.c **** 		#endif
3531:..\FreeRTOS10/tasks.c **** 
3532:..\FreeRTOS10/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:..\FreeRTOS10/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:..\FreeRTOS10/tasks.c **** 		state is just set to whatever is passed in. */
3535:..\FreeRTOS10/tasks.c **** 		if( eState != eInvalid )
3536:..\FreeRTOS10/tasks.c **** 		{
3537:..\FreeRTOS10/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:..\FreeRTOS10/tasks.c **** 			{
3539:..\FreeRTOS10/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:..\FreeRTOS10/tasks.c **** 			}
3541:..\FreeRTOS10/tasks.c **** 			else
3542:..\FreeRTOS10/tasks.c **** 			{
3543:..\FreeRTOS10/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:..\FreeRTOS10/tasks.c **** 
3545:..\FreeRTOS10/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:..\FreeRTOS10/tasks.c **** 				{
3547:..\FreeRTOS10/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:..\FreeRTOS10/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:..\FreeRTOS10/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:..\FreeRTOS10/tasks.c **** 					if( eState == eSuspended )
3551:..\FreeRTOS10/tasks.c **** 					{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 65


3552:..\FreeRTOS10/tasks.c **** 						vTaskSuspendAll();
3553:..\FreeRTOS10/tasks.c **** 						{
3554:..\FreeRTOS10/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:..\FreeRTOS10/tasks.c **** 							{
3556:..\FreeRTOS10/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3557:..\FreeRTOS10/tasks.c **** 							}
3558:..\FreeRTOS10/tasks.c **** 						}
3559:..\FreeRTOS10/tasks.c **** 						( void ) xTaskResumeAll();
3560:..\FreeRTOS10/tasks.c **** 					}
3561:..\FreeRTOS10/tasks.c **** 				}
3562:..\FreeRTOS10/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:..\FreeRTOS10/tasks.c **** 			}
3564:..\FreeRTOS10/tasks.c **** 		}
3565:..\FreeRTOS10/tasks.c **** 		else
3566:..\FreeRTOS10/tasks.c **** 		{
3567:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:..\FreeRTOS10/tasks.c **** 		}
3569:..\FreeRTOS10/tasks.c **** 
3570:..\FreeRTOS10/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:..\FreeRTOS10/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:..\FreeRTOS10/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:..\FreeRTOS10/tasks.c **** 		{
3574:..\FreeRTOS10/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:..\FreeRTOS10/tasks.c **** 			{
3576:..\FreeRTOS10/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:..\FreeRTOS10/tasks.c **** 			}
3578:..\FreeRTOS10/tasks.c **** 			#else
3579:..\FreeRTOS10/tasks.c **** 			{
3580:..\FreeRTOS10/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:..\FreeRTOS10/tasks.c **** 			}
3582:..\FreeRTOS10/tasks.c **** 			#endif
3583:..\FreeRTOS10/tasks.c **** 		}
3584:..\FreeRTOS10/tasks.c **** 		else
3585:..\FreeRTOS10/tasks.c **** 		{
3586:..\FreeRTOS10/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:..\FreeRTOS10/tasks.c **** 		}
3588:..\FreeRTOS10/tasks.c **** 	}
3589:..\FreeRTOS10/tasks.c **** 
3590:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3592:..\FreeRTOS10/tasks.c **** 
3593:..\FreeRTOS10/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:..\FreeRTOS10/tasks.c **** 
3595:..\FreeRTOS10/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:..\FreeRTOS10/tasks.c **** 	{
3597:..\FreeRTOS10/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTask = 0;
3599:..\FreeRTOS10/tasks.c **** 
3600:..\FreeRTOS10/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:..\FreeRTOS10/tasks.c **** 		{
3602:..\FreeRTOS10/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:..\FreeRTOS10/tasks.c **** 
3604:..\FreeRTOS10/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:..\FreeRTOS10/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:..\FreeRTOS10/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:..\FreeRTOS10/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:..\FreeRTOS10/tasks.c **** 			do
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 66


3609:..\FreeRTOS10/tasks.c **** 			{
3610:..\FreeRTOS10/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:..\FreeRTOS10/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:..\FreeRTOS10/tasks.c **** 				uxTask++;
3613:..\FreeRTOS10/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3614:..\FreeRTOS10/tasks.c **** 		}
3615:..\FreeRTOS10/tasks.c **** 		else
3616:..\FreeRTOS10/tasks.c **** 		{
3617:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:..\FreeRTOS10/tasks.c **** 		}
3619:..\FreeRTOS10/tasks.c **** 
3620:..\FreeRTOS10/tasks.c **** 		return uxTask;
3621:..\FreeRTOS10/tasks.c **** 	}
3622:..\FreeRTOS10/tasks.c **** 
3623:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3625:..\FreeRTOS10/tasks.c **** 
3626:..\FreeRTOS10/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:..\FreeRTOS10/tasks.c **** 
3628:..\FreeRTOS10/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:..\FreeRTOS10/tasks.c **** 	{
  97              		.loc 1 3629 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL8:
3630:..\FreeRTOS10/tasks.c **** 	uint32_t ulCount = 0U;
 103              		.loc 1 3630 0
 104 0000 0023     		movs	r3, #0
3631:..\FreeRTOS10/tasks.c **** 
3632:..\FreeRTOS10/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 105              		.loc 1 3632 0
 106 0002 01E0     		b	.L13
 107              	.LVL9:
 108              	.L14:
3633:..\FreeRTOS10/tasks.c **** 		{
3634:..\FreeRTOS10/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 109              		.loc 1 3634 0
 110 0004 0130     		adds	r0, r0, #1
 111              	.LVL10:
3635:..\FreeRTOS10/tasks.c **** 			ulCount++;
 112              		.loc 1 3635 0
 113 0006 0133     		adds	r3, r3, #1
 114              	.LVL11:
 115              	.L13:
3632:..\FreeRTOS10/tasks.c **** 		{
 116              		.loc 1 3632 0
 117 0008 0278     		ldrb	r2, [r0]
 118 000a A52A     		cmp	r2, #165
 119 000c FAD0     		beq	.L14
3636:..\FreeRTOS10/tasks.c **** 		}
3637:..\FreeRTOS10/tasks.c **** 
3638:..\FreeRTOS10/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 120              		.loc 1 3638 0
 121 000e 9B08     		lsrs	r3, r3, #2
 122              	.LVL12:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 67


3639:..\FreeRTOS10/tasks.c **** 
3640:..\FreeRTOS10/tasks.c **** 		return ( uint16_t ) ulCount;
 123              		.loc 1 3640 0
 124 0010 98B2     		uxth	r0, r3
 125              	.LVL13:
3641:..\FreeRTOS10/tasks.c **** 	}
 126              		.loc 1 3641 0
 127              		@ sp needed
 128 0012 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE69:
 131              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 132              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 133              		.align	2
 134              		.code	16
 135              		.thumb_func
 136              		.type	prvResetNextTaskUnblockTime, %function
 137              	prvResetNextTaskUnblockTime:
 138              	.LFB72:
3642:..\FreeRTOS10/tasks.c **** 
3643:..\FreeRTOS10/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3645:..\FreeRTOS10/tasks.c **** 
3646:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:..\FreeRTOS10/tasks.c **** 
3648:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:..\FreeRTOS10/tasks.c **** 	{
3650:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
3651:..\FreeRTOS10/tasks.c **** 	uint8_t *pucEndOfStack;
3652:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxReturn;
3653:..\FreeRTOS10/tasks.c **** 
3654:..\FreeRTOS10/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:..\FreeRTOS10/tasks.c **** 
3656:..\FreeRTOS10/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:..\FreeRTOS10/tasks.c **** 		{
3658:..\FreeRTOS10/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:..\FreeRTOS10/tasks.c **** 		}
3660:..\FreeRTOS10/tasks.c **** 		#else
3661:..\FreeRTOS10/tasks.c **** 		{
3662:..\FreeRTOS10/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:..\FreeRTOS10/tasks.c **** 		}
3664:..\FreeRTOS10/tasks.c **** 		#endif
3665:..\FreeRTOS10/tasks.c **** 
3666:..\FreeRTOS10/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3667:..\FreeRTOS10/tasks.c **** 
3668:..\FreeRTOS10/tasks.c **** 		return uxReturn;
3669:..\FreeRTOS10/tasks.c **** 	}
3670:..\FreeRTOS10/tasks.c **** 
3671:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3673:..\FreeRTOS10/tasks.c **** 
3674:..\FreeRTOS10/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:..\FreeRTOS10/tasks.c **** 
3676:..\FreeRTOS10/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:..\FreeRTOS10/tasks.c **** 	{
3678:..\FreeRTOS10/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:..\FreeRTOS10/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 68


3680:..\FreeRTOS10/tasks.c **** 		want to allocate and clean RAM statically. */
3681:..\FreeRTOS10/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:..\FreeRTOS10/tasks.c **** 
3683:..\FreeRTOS10/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:..\FreeRTOS10/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:..\FreeRTOS10/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:..\FreeRTOS10/tasks.c **** 		{
3687:..\FreeRTOS10/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:..\FreeRTOS10/tasks.c **** 		}
3689:..\FreeRTOS10/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:..\FreeRTOS10/tasks.c **** 
3691:..\FreeRTOS10/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:..\FreeRTOS10/tasks.c **** 		{
3693:..\FreeRTOS10/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:..\FreeRTOS10/tasks.c **** 			the stack and TCB. */
3695:..\FreeRTOS10/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:..\FreeRTOS10/tasks.c **** 			vPortFree( pxTCB );
3697:..\FreeRTOS10/tasks.c **** 		}
3698:..\FreeRTOS10/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:..\FreeRTOS10/tasks.c **** 		{
3700:..\FreeRTOS10/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:..\FreeRTOS10/tasks.c **** 			check what was statically allocated before trying to free the
3702:..\FreeRTOS10/tasks.c **** 			memory. */
3703:..\FreeRTOS10/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:..\FreeRTOS10/tasks.c **** 			{
3705:..\FreeRTOS10/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:..\FreeRTOS10/tasks.c **** 				must be freed. */
3707:..\FreeRTOS10/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:..\FreeRTOS10/tasks.c **** 				vPortFree( pxTCB );
3709:..\FreeRTOS10/tasks.c **** 			}
3710:..\FreeRTOS10/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:..\FreeRTOS10/tasks.c **** 			{
3712:..\FreeRTOS10/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:..\FreeRTOS10/tasks.c **** 				only memory that must be freed. */
3714:..\FreeRTOS10/tasks.c **** 				vPortFree( pxTCB );
3715:..\FreeRTOS10/tasks.c **** 			}
3716:..\FreeRTOS10/tasks.c **** 			else
3717:..\FreeRTOS10/tasks.c **** 			{
3718:..\FreeRTOS10/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:..\FreeRTOS10/tasks.c **** 				nothing needs to be freed. */
3720:..\FreeRTOS10/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:..\FreeRTOS10/tasks.c **** 			}
3723:..\FreeRTOS10/tasks.c **** 		}
3724:..\FreeRTOS10/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:..\FreeRTOS10/tasks.c **** 	}
3726:..\FreeRTOS10/tasks.c **** 
3727:..\FreeRTOS10/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3729:..\FreeRTOS10/tasks.c **** 
3730:..\FreeRTOS10/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:..\FreeRTOS10/tasks.c **** {
 139              		.loc 1 3731 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 69


3732:..\FreeRTOS10/tasks.c **** TCB_t *pxTCB;
3733:..\FreeRTOS10/tasks.c **** 
3734:..\FreeRTOS10/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 144              		.loc 1 3734 0
 145 0000 0A4B     		ldr	r3, .L20
 146 0002 9B6A     		ldr	r3, [r3, #40]
 147 0004 1B68     		ldr	r3, [r3]
 148 0006 002B     		cmp	r3, #0
 149 0008 01D1     		bne	.L19
 150 000a 0133     		adds	r3, r3, #1
 151 000c 00E0     		b	.L16
 152              	.L19:
 153 000e 0023     		movs	r3, #0
 154              	.L16:
 155              		.loc 1 3734 0 is_stmt 0 discriminator 4
 156 0010 002B     		cmp	r3, #0
 157 0012 04D0     		beq	.L17
3735:..\FreeRTOS10/tasks.c **** 	{
3736:..\FreeRTOS10/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:..\FreeRTOS10/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:..\FreeRTOS10/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:..\FreeRTOS10/tasks.c **** 		there is an item in the delayed list. */
3740:..\FreeRTOS10/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 158              		.loc 1 3740 0 is_stmt 1
 159 0014 0122     		movs	r2, #1
 160 0016 5242     		rsbs	r2, r2, #0
 161 0018 044B     		ldr	r3, .L20
 162 001a DA62     		str	r2, [r3, #44]
 163 001c 05E0     		b	.L15
 164              	.L17:
3741:..\FreeRTOS10/tasks.c **** 	}
3742:..\FreeRTOS10/tasks.c **** 	else
3743:..\FreeRTOS10/tasks.c **** 	{
3744:..\FreeRTOS10/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:..\FreeRTOS10/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:..\FreeRTOS10/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:..\FreeRTOS10/tasks.c **** 		from the Blocked state. */
3748:..\FreeRTOS10/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 165              		.loc 1 3748 0
 166 001e 034B     		ldr	r3, .L20
 167 0020 9A6A     		ldr	r2, [r3, #40]
 168 0022 D268     		ldr	r2, [r2, #12]
 169 0024 D268     		ldr	r2, [r2, #12]
 170              	.LVL14:
3749:..\FreeRTOS10/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 171              		.loc 1 3749 0
 172 0026 5268     		ldr	r2, [r2, #4]
 173              	.LVL15:
 174 0028 DA62     		str	r2, [r3, #44]
 175              	.L15:
3750:..\FreeRTOS10/tasks.c **** 	}
3751:..\FreeRTOS10/tasks.c **** }
 176              		.loc 1 3751 0
 177              		@ sp needed
 178 002a 7047     		bx	lr
 179              	.L21:
 180              		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 70


 181              	.L20:
 182 002c 00000000 		.word	.LANCHOR0
 183              		.cfi_endproc
 184              	.LFE72:
 185              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 186              		.section	.text.prvDeleteTCB,"ax",%progbits
 187              		.align	2
 188              		.code	16
 189              		.thumb_func
 190              		.type	prvDeleteTCB, %function
 191              	prvDeleteTCB:
 192              	.LFB71:
3677:..\FreeRTOS10/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 193              		.loc 1 3677 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL16:
 198 0000 10B5     		push	{r4, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 0400     		movs	r4, r0
3695:..\FreeRTOS10/tasks.c **** 			vPortFree( pxTCB );
 203              		.loc 1 3695 0
 204 0004 006B     		ldr	r0, [r0, #48]
 205              	.LVL17:
 206 0006 FFF7FEFF 		bl	vPortFree
 207              	.LVL18:
3696:..\FreeRTOS10/tasks.c **** 		}
 208              		.loc 1 3696 0
 209 000a 2000     		movs	r0, r4
 210 000c FFF7FEFF 		bl	vPortFree
 211              	.LVL19:
3725:..\FreeRTOS10/tasks.c **** 
 212              		.loc 1 3725 0
 213              		@ sp needed
 214              	.LVL20:
 215 0010 10BD     		pop	{r4, pc}
 216              		.cfi_endproc
 217              	.LFE71:
 218              		.size	prvDeleteTCB, .-prvDeleteTCB
 219 0012 C046     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 220              		.align	2
 221              		.code	16
 222              		.thumb_func
 223              		.type	prvInitialiseNewTask, %function
 224              	prvInitialiseNewTask:
 225              	.LFB33:
 831:..\FreeRTOS10/tasks.c **** StackType_t *pxTopOfStack;
 226              		.loc 1 831 0
 227              		.cfi_startproc
 228              		@ args = 16, pretend = 0, frame = 8
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL21:
 231 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 232              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 71


 233              		.cfi_offset 4, -20
 234              		.cfi_offset 5, -16
 235              		.cfi_offset 6, -12
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 83B0     		sub	sp, sp, #12
 239              		.cfi_def_cfa_offset 32
 240 0004 0090     		str	r0, [sp]
 241 0006 0D00     		movs	r5, r1
 242 0008 1700     		movs	r7, r2
 243 000a 0193     		str	r3, [sp, #4]
 244 000c 089C     		ldr	r4, [sp, #32]
 245 000e 0A9E     		ldr	r6, [sp, #40]
 853:..\FreeRTOS10/tasks.c **** 	}
 246              		.loc 1 853 0
 247 0010 9200     		lsls	r2, r2, #2
 248              	.LVL22:
 249 0012 A521     		movs	r1, #165
 250              	.LVL23:
 251 0014 306B     		ldr	r0, [r6, #48]
 252              	.LVL24:
 253 0016 FFF7FEFF 		bl	memset
 254              	.LVL25:
 863:..\FreeRTOS10/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 255              		.loc 1 863 0
 256 001a 234B     		ldr	r3, .L32
 257 001c FB18     		adds	r3, r7, r3
 258 001e 9B00     		lsls	r3, r3, #2
 259 0020 326B     		ldr	r2, [r6, #48]
 260 0022 9446     		mov	ip, r2
 261 0024 6344     		add	r3, r3, ip
 262              	.LVL26:
 864:..\FreeRTOS10/tasks.c **** 
 263              		.loc 1 864 0
 264 0026 0722     		movs	r2, #7
 265 0028 9343     		bics	r3, r2
 266              	.LVL27:
 267 002a 1F00     		movs	r7, r3
 268              	.LVL28:
 891:..\FreeRTOS10/tasks.c **** 	{
 269              		.loc 1 891 0
 270 002c 0023     		movs	r3, #0
 271              	.LVL29:
 272 002e 08E0     		b	.L24
 273              	.LVL30:
 274              	.L26:
 893:..\FreeRTOS10/tasks.c **** 
 275              		.loc 1 893 0
 276 0030 E918     		adds	r1, r5, r3
 277 0032 0878     		ldrb	r0, [r1]
 278 0034 F218     		adds	r2, r6, r3
 279 0036 3432     		adds	r2, r2, #52
 280 0038 1070     		strb	r0, [r2]
 898:..\FreeRTOS10/tasks.c **** 		{
 281              		.loc 1 898 0
 282 003a 0A78     		ldrb	r2, [r1]
 283 003c 002A     		cmp	r2, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 72


 284 003e 02D0     		beq	.L25
 891:..\FreeRTOS10/tasks.c **** 	{
 285              		.loc 1 891 0 discriminator 2
 286 0040 0133     		adds	r3, r3, #1
 287              	.LVL31:
 288              	.L24:
 891:..\FreeRTOS10/tasks.c **** 	{
 289              		.loc 1 891 0 is_stmt 0 discriminator 1
 290 0042 0F2B     		cmp	r3, #15
 291 0044 F4D9     		bls	.L26
 292              	.L25:
 910:..\FreeRTOS10/tasks.c **** 
 293              		.loc 1 910 0 is_stmt 1
 294 0046 0022     		movs	r2, #0
 295 0048 4323     		movs	r3, #67
 296              	.LVL32:
 297 004a F254     		strb	r2, [r6, r3]
 914:..\FreeRTOS10/tasks.c **** 	{
 298              		.loc 1 914 0
 299 004c 042C     		cmp	r4, #4
 300 004e 00D9     		bls	.L27
 916:..\FreeRTOS10/tasks.c **** 	}
 301              		.loc 1 916 0
 302 0050 0424     		movs	r4, #4
 303              	.L27:
 304              	.LVL33:
 923:..\FreeRTOS10/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 305              		.loc 1 923 0
 306 0052 F462     		str	r4, [r6, #44]
 926:..\FreeRTOS10/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 307              		.loc 1 926 0
 308 0054 7464     		str	r4, [r6, #68]
 927:..\FreeRTOS10/tasks.c **** 	}
 309              		.loc 1 927 0
 310 0056 0023     		movs	r3, #0
 311 0058 B364     		str	r3, [r6, #72]
 931:..\FreeRTOS10/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 312              		.loc 1 931 0
 313 005a 301D     		adds	r0, r6, #4
 314 005c FFF7FEFF 		bl	vListInitialiseItem
 315              	.LVL34:
 932:..\FreeRTOS10/tasks.c **** 
 316              		.loc 1 932 0
 317 0060 3000     		movs	r0, r6
 318 0062 1830     		adds	r0, r0, #24
 319 0064 FFF7FEFF 		bl	vListInitialiseItem
 320              	.LVL35:
 936:..\FreeRTOS10/tasks.c **** 
 321              		.loc 1 936 0
 322 0068 3661     		str	r6, [r6, #16]
 939:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 323              		.loc 1 939 0
 324 006a 0523     		movs	r3, #5
 325 006c 1C1B     		subs	r4, r3, r4
 326              	.LVL36:
 327 006e B461     		str	r4, [r6, #24]
 940:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 73


 328              		.loc 1 940 0
 329 0070 7662     		str	r6, [r6, #36]
 330              	.LVL37:
 973:..\FreeRTOS10/tasks.c **** 		{
 331              		.loc 1 973 0
 332 0072 0022     		movs	r2, #0
 333 0074 06E0     		b	.L28
 334              	.LVL38:
 335              	.L29:
 975:..\FreeRTOS10/tasks.c **** 		}
 336              		.loc 1 975 0 discriminator 3
 337 0076 1300     		movs	r3, r2
 338 0078 1233     		adds	r3, r3, #18
 339 007a 9B00     		lsls	r3, r3, #2
 340 007c F318     		adds	r3, r6, r3
 341 007e 0021     		movs	r1, #0
 342 0080 5960     		str	r1, [r3, #4]
 973:..\FreeRTOS10/tasks.c **** 		{
 343              		.loc 1 973 0 discriminator 3
 344 0082 0132     		adds	r2, r2, #1
 345              	.LVL39:
 346              	.L28:
 973:..\FreeRTOS10/tasks.c **** 		{
 347              		.loc 1 973 0 is_stmt 0 discriminator 1
 348 0084 042A     		cmp	r2, #4
 349 0086 F6D9     		bls	.L29
 982:..\FreeRTOS10/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 350              		.loc 1 982 0 is_stmt 1
 351 0088 0023     		movs	r3, #0
 352 008a 3366     		str	r3, [r6, #96]
 983:..\FreeRTOS10/tasks.c **** 	}
 353              		.loc 1 983 0
 354 008c 6422     		movs	r2, #100
 355              	.LVL40:
 356 008e B354     		strb	r3, [r6, r2]
1010:..\FreeRTOS10/tasks.c **** 	}
 357              		.loc 1 1010 0
 358 0090 019A     		ldr	r2, [sp, #4]
 359 0092 0099     		ldr	r1, [sp]
 360 0094 3800     		movs	r0, r7
 361 0096 FFF7FEFF 		bl	pxPortInitialiseStack
 362              	.LVL41:
 363 009a 3060     		str	r0, [r6]
1014:..\FreeRTOS10/tasks.c **** 	{
 364              		.loc 1 1014 0
 365 009c 099B     		ldr	r3, [sp, #36]
 366 009e 002B     		cmp	r3, #0
 367 00a0 00D0     		beq	.L23
1018:..\FreeRTOS10/tasks.c **** 	}
 368              		.loc 1 1018 0
 369 00a2 1E60     		str	r6, [r3]
 370              	.L23:
1024:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 371              		.loc 1 1024 0
 372 00a4 03B0     		add	sp, sp, #12
 373              	.LVL42:
 374              		@ sp needed
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 74


 375              	.LVL43:
 376              	.LVL44:
 377 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 378              	.L33:
 379              		.align	2
 380              	.L32:
 381 00a8 FFFFFF3F 		.word	1073741823
 382              		.cfi_endproc
 383              	.LFE33:
 384              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 385              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 386              		.align	2
 387              		.code	16
 388              		.thumb_func
 389              		.type	prvInitialiseTaskLists, %function
 390              	prvInitialiseTaskLists:
 391              	.LFB67:
3437:..\FreeRTOS10/tasks.c **** UBaseType_t uxPriority;
 392              		.loc 1 3437 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 397              		.cfi_def_cfa_offset 24
 398              		.cfi_offset 3, -24
 399              		.cfi_offset 4, -20
 400              		.cfi_offset 5, -16
 401              		.cfi_offset 6, -12
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404              	.LVL45:
3440:..\FreeRTOS10/tasks.c **** 	{
 405              		.loc 1 3440 0
 406 0002 0024     		movs	r4, #0
 407 0004 08E0     		b	.L35
 408              	.LVL46:
 409              	.L36:
3442:..\FreeRTOS10/tasks.c **** 	}
 410              		.loc 1 3442 0 discriminator 3
 411 0006 A200     		lsls	r2, r4, #2
 412 0008 1219     		adds	r2, r2, r4
 413 000a 9300     		lsls	r3, r2, #2
 414 000c 1048     		ldr	r0, .L37
 415 000e 3030     		adds	r0, r0, #48
 416 0010 C018     		adds	r0, r0, r3
 417 0012 FFF7FEFF 		bl	vListInitialise
 418              	.LVL47:
3440:..\FreeRTOS10/tasks.c **** 	{
 419              		.loc 1 3440 0 discriminator 3
 420 0016 0134     		adds	r4, r4, #1
 421              	.LVL48:
 422              	.L35:
3440:..\FreeRTOS10/tasks.c **** 	{
 423              		.loc 1 3440 0 is_stmt 0 discriminator 1
 424 0018 042C     		cmp	r4, #4
 425 001a F4D9     		bls	.L36
3445:..\FreeRTOS10/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 75


 426              		.loc 1 3445 0 is_stmt 1
 427 001c 0D4C     		ldr	r4, .L37+4
 428              	.LVL49:
 429 001e 2700     		movs	r7, r4
 430 0020 1437     		adds	r7, r7, #20
 431 0022 3800     		movs	r0, r7
 432 0024 FFF7FEFF 		bl	vListInitialise
 433              	.LVL50:
3446:..\FreeRTOS10/tasks.c **** 	vListInitialise( &xPendingReadyList );
 434              		.loc 1 3446 0
 435 0028 2600     		movs	r6, r4
 436 002a 2836     		adds	r6, r6, #40
 437 002c 3000     		movs	r0, r6
 438 002e FFF7FEFF 		bl	vListInitialise
 439              	.LVL51:
3447:..\FreeRTOS10/tasks.c **** 
 440              		.loc 1 3447 0
 441 0032 074D     		ldr	r5, .L37
 442 0034 2800     		movs	r0, r5
 443 0036 1430     		adds	r0, r0, #20
 444 0038 FFF7FEFF 		bl	vListInitialise
 445              	.LVL52:
3451:..\FreeRTOS10/tasks.c **** 	}
 446              		.loc 1 3451 0
 447 003c 2000     		movs	r0, r4
 448 003e 3C30     		adds	r0, r0, #60
 449 0040 FFF7FEFF 		bl	vListInitialise
 450              	.LVL53:
3457:..\FreeRTOS10/tasks.c **** 	}
 451              		.loc 1 3457 0
 452 0044 2800     		movs	r0, r5
 453 0046 FFF7FEFF 		bl	vListInitialise
 454              	.LVL54:
3463:..\FreeRTOS10/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 455              		.loc 1 3463 0
 456 004a AF62     		str	r7, [r5, #40]
3464:..\FreeRTOS10/tasks.c **** }
 457              		.loc 1 3464 0
 458 004c 2665     		str	r6, [r4, #80]
3465:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 459              		.loc 1 3465 0
 460              		@ sp needed
 461 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 462              	.L38:
 463              		.align	2
 464              	.L37:
 465 0050 00000000 		.word	.LANCHOR0
 466 0054 80000000 		.word	.LANCHOR1
 467              		.cfi_endproc
 468              	.LFE67:
 469              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 470              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 471              		.align	2
 472              		.code	16
 473              		.thumb_func
 474              		.type	prvAddNewTaskToReadyList, %function
 475              	prvAddNewTaskToReadyList:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 76


 476              	.LFB34:
1028:..\FreeRTOS10/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 477              		.loc 1 1028 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL55:
 482 0000 10B5     		push	{r4, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 4, -8
 485              		.cfi_offset 14, -4
 486 0002 0400     		movs	r4, r0
1031:..\FreeRTOS10/tasks.c **** 	{
 487              		.loc 1 1031 0
 488 0004 FFF7FEFF 		bl	vPortEnterCritical
 489              	.LVL56:
1033:..\FreeRTOS10/tasks.c **** 		if( pxCurrentTCB == NULL )
 490              		.loc 1 1033 0
 491 0008 1E4B     		ldr	r3, .L44
 492 000a 5A6D     		ldr	r2, [r3, #84]
 493 000c 0132     		adds	r2, r2, #1
 494 000e 5A65     		str	r2, [r3, #84]
1034:..\FreeRTOS10/tasks.c **** 		{
 495              		.loc 1 1034 0
 496 0010 9B6D     		ldr	r3, [r3, #88]
 497 0012 002B     		cmp	r3, #0
 498 0014 07D1     		bne	.L40
1038:..\FreeRTOS10/tasks.c **** 
 499              		.loc 1 1038 0
 500 0016 1B4B     		ldr	r3, .L44
 501 0018 9C65     		str	r4, [r3, #88]
1040:..\FreeRTOS10/tasks.c **** 			{
 502              		.loc 1 1040 0
 503 001a 5B6D     		ldr	r3, [r3, #84]
 504 001c 012B     		cmp	r3, #1
 505 001e 0ED1     		bne	.L41
1045:..\FreeRTOS10/tasks.c **** 			}
 506              		.loc 1 1045 0
 507 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 508              	.LVL57:
 509 0024 0BE0     		b	.L41
 510              	.L40:
1057:..\FreeRTOS10/tasks.c **** 			{
 511              		.loc 1 1057 0
 512 0026 174B     		ldr	r3, .L44
 513 0028 DB6D     		ldr	r3, [r3, #92]
 514 002a 002B     		cmp	r3, #0
 515 002c 07D1     		bne	.L41
1059:..\FreeRTOS10/tasks.c **** 				{
 516              		.loc 1 1059 0
 517 002e 154B     		ldr	r3, .L44
 518 0030 9B6D     		ldr	r3, [r3, #88]
 519 0032 DB6A     		ldr	r3, [r3, #44]
 520 0034 E26A     		ldr	r2, [r4, #44]
 521 0036 9342     		cmp	r3, r2
 522 0038 01D8     		bhi	.L41
1061:..\FreeRTOS10/tasks.c **** 				}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 77


 523              		.loc 1 1061 0
 524 003a 124B     		ldr	r3, .L44
 525 003c 9C65     		str	r4, [r3, #88]
 526              	.L41:
1074:..\FreeRTOS10/tasks.c **** 
 527              		.loc 1 1074 0
 528 003e 114A     		ldr	r2, .L44
 529 0040 136E     		ldr	r3, [r2, #96]
 530 0042 0133     		adds	r3, r3, #1
 531 0044 1366     		str	r3, [r2, #96]
1084:..\FreeRTOS10/tasks.c **** 
 532              		.loc 1 1084 0
 533 0046 E36A     		ldr	r3, [r4, #44]
 534 0048 526E     		ldr	r2, [r2, #100]
 535 004a 9342     		cmp	r3, r2
 536 004c 01D9     		bls	.L42
1084:..\FreeRTOS10/tasks.c **** 
 537              		.loc 1 1084 0 is_stmt 0 discriminator 1
 538 004e 0D4A     		ldr	r2, .L44
 539 0050 5366     		str	r3, [r2, #100]
 540              	.L42:
1084:..\FreeRTOS10/tasks.c **** 
 541              		.loc 1 1084 0 discriminator 3
 542 0052 211D     		adds	r1, r4, #4
 543 0054 9A00     		lsls	r2, r3, #2
 544 0056 D318     		adds	r3, r2, r3
 545 0058 9A00     		lsls	r2, r3, #2
 546 005a 0B48     		ldr	r0, .L44+4
 547 005c 3030     		adds	r0, r0, #48
 548 005e 8018     		adds	r0, r0, r2
 549 0060 FFF7FEFF 		bl	vListInsertEnd
 550              	.LVL58:
1088:..\FreeRTOS10/tasks.c **** 
 551              		.loc 1 1088 0 is_stmt 1 discriminator 3
 552 0064 FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL59:
1090:..\FreeRTOS10/tasks.c **** 	{
 554              		.loc 1 1090 0 discriminator 3
 555 0068 064B     		ldr	r3, .L44
 556 006a DB6D     		ldr	r3, [r3, #92]
 557 006c 002B     		cmp	r3, #0
 558 006e 07D0     		beq	.L39
1094:..\FreeRTOS10/tasks.c **** 		{
 559              		.loc 1 1094 0
 560 0070 044B     		ldr	r3, .L44
 561 0072 9B6D     		ldr	r3, [r3, #88]
 562 0074 DA6A     		ldr	r2, [r3, #44]
 563 0076 E36A     		ldr	r3, [r4, #44]
 564 0078 9A42     		cmp	r2, r3
 565 007a 01D2     		bcs	.L39
1096:..\FreeRTOS10/tasks.c **** 		}
 566              		.loc 1 1096 0
 567 007c FFF7FEFF 		bl	vPortYield
 568              	.LVL60:
 569              	.L39:
1107:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 570              		.loc 1 1107 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 78


 571              		@ sp needed
 572              	.LVL61:
 573 0080 10BD     		pop	{r4, pc}
 574              	.L45:
 575 0082 C046     		.align	2
 576              	.L44:
 577 0084 80000000 		.word	.LANCHOR1
 578 0088 00000000 		.word	.LANCHOR0
 579              		.cfi_endproc
 580              	.LFE34:
 581              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 582              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 583              		.align	2
 584              		.code	16
 585              		.thumb_func
 586              		.type	prvCheckTasksWaitingTermination, %function
 587              	prvCheckTasksWaitingTermination:
 588              	.LFB68:
3469:..\FreeRTOS10/tasks.c **** 
 589              		.loc 1 3469 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0000 70B5     		push	{r4, r5, r6, lr}
 594              		.cfi_def_cfa_offset 16
 595              		.cfi_offset 4, -16
 596              		.cfi_offset 5, -12
 597              		.cfi_offset 6, -8
 598              		.cfi_offset 14, -4
 599              	.LBB2:
3479:..\FreeRTOS10/tasks.c **** 		{
 600              		.loc 1 3479 0
 601 0002 12E0     		b	.L47
 602              	.L48:
3481:..\FreeRTOS10/tasks.c **** 			{
 603              		.loc 1 3481 0
 604 0004 FFF7FEFF 		bl	vPortEnterCritical
 605              	.LVL62:
3483:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 606              		.loc 1 3483 0
 607 0008 0A4C     		ldr	r4, .L49
 608 000a A36C     		ldr	r3, [r4, #72]
 609 000c DD68     		ldr	r5, [r3, #12]
 610              	.LVL63:
3484:..\FreeRTOS10/tasks.c **** 				--uxCurrentNumberOfTasks;
 611              		.loc 1 3484 0
 612 000e 281D     		adds	r0, r5, #4
 613 0010 FFF7FEFF 		bl	uxListRemove
 614              	.LVL64:
3485:..\FreeRTOS10/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 615              		.loc 1 3485 0
 616 0014 636D     		ldr	r3, [r4, #84]
 617 0016 013B     		subs	r3, r3, #1
 618 0018 6365     		str	r3, [r4, #84]
3486:..\FreeRTOS10/tasks.c **** 			}
 619              		.loc 1 3486 0
 620 001a A36E     		ldr	r3, [r4, #104]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 79


 621 001c 013B     		subs	r3, r3, #1
 622 001e A366     		str	r3, [r4, #104]
3488:..\FreeRTOS10/tasks.c **** 
 623              		.loc 1 3488 0
 624 0020 FFF7FEFF 		bl	vPortExitCritical
 625              	.LVL65:
3490:..\FreeRTOS10/tasks.c **** 		}
 626              		.loc 1 3490 0
 627 0024 2800     		movs	r0, r5
 628 0026 FFF7FEFF 		bl	prvDeleteTCB
 629              	.LVL66:
 630              	.L47:
3479:..\FreeRTOS10/tasks.c **** 		{
 631              		.loc 1 3479 0
 632 002a 024B     		ldr	r3, .L49
 633 002c 9B6E     		ldr	r3, [r3, #104]
 634 002e 002B     		cmp	r3, #0
 635 0030 E8D1     		bne	.L48
 636              	.LBE2:
3494:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 637              		.loc 1 3494 0
 638              		@ sp needed
 639 0032 70BD     		pop	{r4, r5, r6, pc}
 640              	.L50:
 641              		.align	2
 642              	.L49:
 643 0034 80000000 		.word	.LANCHOR1
 644              		.cfi_endproc
 645              	.LFE68:
 646              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 647              		.section	.text.prvIdleTask,"ax",%progbits
 648              		.align	2
 649              		.code	16
 650              		.thumb_func
 651              		.type	prvIdleTask, %function
 652              	prvIdleTask:
 653              	.LFB64:
3225:..\FreeRTOS10/tasks.c **** 	/* Stop warnings. */
 654              		.loc 1 3225 0
 655              		.cfi_startproc
 656              		@ Volatile: function does not return.
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              	.LVL67:
 660 0000 10B5     		push	{r4, lr}
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 4, -8
 663              		.cfi_offset 14, -4
 664              	.LVL68:
 665              	.L52:
3241:..\FreeRTOS10/tasks.c **** 
 666              		.loc 1 3241 0 discriminator 1
 667 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 668              	.LVL69:
 669 0006 FCE7     		b	.L52
 670              		.cfi_endproc
 671              	.LFE64:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 80


 672              		.size	prvIdleTask, .-prvIdleTask
 673              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 674              		.align	2
 675              		.code	16
 676              		.thumb_func
 677              		.type	prvAddCurrentTaskToDelayedList, %function
 678              	prvAddCurrentTaskToDelayedList:
 679              	.LFB86:
3752:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3753:..\FreeRTOS10/tasks.c **** 
3754:..\FreeRTOS10/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:..\FreeRTOS10/tasks.c **** 
3756:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:..\FreeRTOS10/tasks.c **** 	{
3758:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xReturn;
3759:..\FreeRTOS10/tasks.c **** 
3760:..\FreeRTOS10/tasks.c **** 		/* A critical section is not required as this is not called from
3761:..\FreeRTOS10/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:..\FreeRTOS10/tasks.c **** 		individual execution thread. */
3763:..\FreeRTOS10/tasks.c **** 		xReturn = pxCurrentTCB;
3764:..\FreeRTOS10/tasks.c **** 
3765:..\FreeRTOS10/tasks.c **** 		return xReturn;
3766:..\FreeRTOS10/tasks.c **** 	}
3767:..\FreeRTOS10/tasks.c **** 
3768:..\FreeRTOS10/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3770:..\FreeRTOS10/tasks.c **** 
3771:..\FreeRTOS10/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:..\FreeRTOS10/tasks.c **** 
3773:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:..\FreeRTOS10/tasks.c **** 	{
3775:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
3776:..\FreeRTOS10/tasks.c **** 
3777:..\FreeRTOS10/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:..\FreeRTOS10/tasks.c **** 		{
3779:..\FreeRTOS10/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:..\FreeRTOS10/tasks.c **** 		}
3781:..\FreeRTOS10/tasks.c **** 		else
3782:..\FreeRTOS10/tasks.c **** 		{
3783:..\FreeRTOS10/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:..\FreeRTOS10/tasks.c **** 			{
3785:..\FreeRTOS10/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:..\FreeRTOS10/tasks.c **** 			}
3787:..\FreeRTOS10/tasks.c **** 			else
3788:..\FreeRTOS10/tasks.c **** 			{
3789:..\FreeRTOS10/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:..\FreeRTOS10/tasks.c **** 			}
3791:..\FreeRTOS10/tasks.c **** 		}
3792:..\FreeRTOS10/tasks.c **** 
3793:..\FreeRTOS10/tasks.c **** 		return xReturn;
3794:..\FreeRTOS10/tasks.c **** 	}
3795:..\FreeRTOS10/tasks.c **** 
3796:..\FreeRTOS10/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3798:..\FreeRTOS10/tasks.c **** 
3799:..\FreeRTOS10/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 81


3801:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:..\FreeRTOS10/tasks.c **** 	{
3803:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:..\FreeRTOS10/tasks.c **** 
3806:..\FreeRTOS10/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:..\FreeRTOS10/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:..\FreeRTOS10/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:..\FreeRTOS10/tasks.c **** 		if( pxMutexHolder != NULL )
3810:..\FreeRTOS10/tasks.c **** 		{
3811:..\FreeRTOS10/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:..\FreeRTOS10/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:..\FreeRTOS10/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:..\FreeRTOS10/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:..\FreeRTOS10/tasks.c **** 			{
3816:..\FreeRTOS10/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:..\FreeRTOS10/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:..\FreeRTOS10/tasks.c **** 				not being used for anything else. */
3819:..\FreeRTOS10/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:..\FreeRTOS10/tasks.c **** 				{
3821:..\FreeRTOS10/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:..\FreeRTOS10/tasks.c **** 				}
3823:..\FreeRTOS10/tasks.c **** 				else
3824:..\FreeRTOS10/tasks.c **** 				{
3825:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:..\FreeRTOS10/tasks.c **** 				}
3827:..\FreeRTOS10/tasks.c **** 
3828:..\FreeRTOS10/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:..\FreeRTOS10/tasks.c **** 				to be moved into a new list. */
3830:..\FreeRTOS10/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:..\FreeRTOS10/tasks.c **** 				{
3832:..\FreeRTOS10/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:..\FreeRTOS10/tasks.c **** 					{
3834:..\FreeRTOS10/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:..\FreeRTOS10/tasks.c **** 					}
3836:..\FreeRTOS10/tasks.c **** 					else
3837:..\FreeRTOS10/tasks.c **** 					{
3838:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:..\FreeRTOS10/tasks.c **** 					}
3840:..\FreeRTOS10/tasks.c **** 
3841:..\FreeRTOS10/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:..\FreeRTOS10/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:..\FreeRTOS10/tasks.c **** 				}
3845:..\FreeRTOS10/tasks.c **** 				else
3846:..\FreeRTOS10/tasks.c **** 				{
3847:..\FreeRTOS10/tasks.c **** 					/* Just inherit the priority. */
3848:..\FreeRTOS10/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:..\FreeRTOS10/tasks.c **** 				}
3850:..\FreeRTOS10/tasks.c **** 
3851:..\FreeRTOS10/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:..\FreeRTOS10/tasks.c **** 
3853:..\FreeRTOS10/tasks.c **** 				/* Inheritance occurred. */
3854:..\FreeRTOS10/tasks.c **** 				xReturn = pdTRUE;
3855:..\FreeRTOS10/tasks.c **** 			}
3856:..\FreeRTOS10/tasks.c **** 			else
3857:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 82


3858:..\FreeRTOS10/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:..\FreeRTOS10/tasks.c **** 				{
3860:..\FreeRTOS10/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:..\FreeRTOS10/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:..\FreeRTOS10/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:..\FreeRTOS10/tasks.c **** 					priority of the task attempting to take the mutex.
3864:..\FreeRTOS10/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:..\FreeRTOS10/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:..\FreeRTOS10/tasks.c **** 					not been the case. */
3867:..\FreeRTOS10/tasks.c **** 					xReturn = pdTRUE;
3868:..\FreeRTOS10/tasks.c **** 				}
3869:..\FreeRTOS10/tasks.c **** 				else
3870:..\FreeRTOS10/tasks.c **** 				{
3871:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:..\FreeRTOS10/tasks.c **** 				}
3873:..\FreeRTOS10/tasks.c **** 			}
3874:..\FreeRTOS10/tasks.c **** 		}
3875:..\FreeRTOS10/tasks.c **** 		else
3876:..\FreeRTOS10/tasks.c **** 		{
3877:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:..\FreeRTOS10/tasks.c **** 		}
3879:..\FreeRTOS10/tasks.c **** 
3880:..\FreeRTOS10/tasks.c **** 		return xReturn;
3881:..\FreeRTOS10/tasks.c **** 	}
3882:..\FreeRTOS10/tasks.c **** 
3883:..\FreeRTOS10/tasks.c **** #endif /* configUSE_MUTEXES */
3884:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3885:..\FreeRTOS10/tasks.c **** 
3886:..\FreeRTOS10/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:..\FreeRTOS10/tasks.c **** 
3888:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:..\FreeRTOS10/tasks.c **** 	{
3890:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3891:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:..\FreeRTOS10/tasks.c **** 
3893:..\FreeRTOS10/tasks.c **** 		if( pxMutexHolder != NULL )
3894:..\FreeRTOS10/tasks.c **** 		{
3895:..\FreeRTOS10/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:..\FreeRTOS10/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:..\FreeRTOS10/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:..\FreeRTOS10/tasks.c **** 			be the running state task. */
3899:..\FreeRTOS10/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:..\FreeRTOS10/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:..\FreeRTOS10/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3902:..\FreeRTOS10/tasks.c **** 
3903:..\FreeRTOS10/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:..\FreeRTOS10/tasks.c **** 			task? */
3905:..\FreeRTOS10/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:..\FreeRTOS10/tasks.c **** 			{
3907:..\FreeRTOS10/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:..\FreeRTOS10/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:..\FreeRTOS10/tasks.c **** 				{
3910:..\FreeRTOS10/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:..\FreeRTOS10/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:..\FreeRTOS10/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:..\FreeRTOS10/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:..\FreeRTOS10/tasks.c **** 					the holding task from the ready list. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 83


3915:..\FreeRTOS10/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:..\FreeRTOS10/tasks.c **** 					{
3917:..\FreeRTOS10/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:..\FreeRTOS10/tasks.c **** 					}
3919:..\FreeRTOS10/tasks.c **** 					else
3920:..\FreeRTOS10/tasks.c **** 					{
3921:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:..\FreeRTOS10/tasks.c **** 					}
3923:..\FreeRTOS10/tasks.c **** 
3924:..\FreeRTOS10/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:..\FreeRTOS10/tasks.c **** 					new	ready list. */
3926:..\FreeRTOS10/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:..\FreeRTOS10/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:..\FreeRTOS10/tasks.c **** 
3929:..\FreeRTOS10/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:..\FreeRTOS10/tasks.c **** 					any other purpose if this task is running, and it must be
3931:..\FreeRTOS10/tasks.c **** 					running to give back the mutex. */
3932:..\FreeRTOS10/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:..\FreeRTOS10/tasks.c **** 
3935:..\FreeRTOS10/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:..\FreeRTOS10/tasks.c **** 					This is only actually required in the corner case whereby
3937:..\FreeRTOS10/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:..\FreeRTOS10/tasks.c **** 					in an order different to that in which they were taken.
3939:..\FreeRTOS10/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:..\FreeRTOS10/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:..\FreeRTOS10/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:..\FreeRTOS10/tasks.c **** 					a task is waiting on it or not. */
3943:..\FreeRTOS10/tasks.c **** 					xReturn = pdTRUE;
3944:..\FreeRTOS10/tasks.c **** 				}
3945:..\FreeRTOS10/tasks.c **** 				else
3946:..\FreeRTOS10/tasks.c **** 				{
3947:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3948:..\FreeRTOS10/tasks.c **** 				}
3949:..\FreeRTOS10/tasks.c **** 			}
3950:..\FreeRTOS10/tasks.c **** 			else
3951:..\FreeRTOS10/tasks.c **** 			{
3952:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:..\FreeRTOS10/tasks.c **** 			}
3954:..\FreeRTOS10/tasks.c **** 		}
3955:..\FreeRTOS10/tasks.c **** 		else
3956:..\FreeRTOS10/tasks.c **** 		{
3957:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:..\FreeRTOS10/tasks.c **** 		}
3959:..\FreeRTOS10/tasks.c **** 
3960:..\FreeRTOS10/tasks.c **** 		return xReturn;
3961:..\FreeRTOS10/tasks.c **** 	}
3962:..\FreeRTOS10/tasks.c **** 
3963:..\FreeRTOS10/tasks.c **** #endif /* configUSE_MUTEXES */
3964:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
3965:..\FreeRTOS10/tasks.c **** 
3966:..\FreeRTOS10/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:..\FreeRTOS10/tasks.c **** 
3968:..\FreeRTOS10/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:..\FreeRTOS10/tasks.c **** 	{
3970:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 84


3972:..\FreeRTOS10/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:..\FreeRTOS10/tasks.c **** 
3974:..\FreeRTOS10/tasks.c **** 		if( pxMutexHolder != NULL )
3975:..\FreeRTOS10/tasks.c **** 		{
3976:..\FreeRTOS10/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:..\FreeRTOS10/tasks.c **** 			one mutex. */
3978:..\FreeRTOS10/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:..\FreeRTOS10/tasks.c **** 
3980:..\FreeRTOS10/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:..\FreeRTOS10/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:..\FreeRTOS10/tasks.c **** 			holding task's base priority and the priority of the highest
3983:..\FreeRTOS10/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:..\FreeRTOS10/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:..\FreeRTOS10/tasks.c **** 			{
3986:..\FreeRTOS10/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:..\FreeRTOS10/tasks.c **** 			}
3988:..\FreeRTOS10/tasks.c **** 			else
3989:..\FreeRTOS10/tasks.c **** 			{
3990:..\FreeRTOS10/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:..\FreeRTOS10/tasks.c **** 			}
3992:..\FreeRTOS10/tasks.c **** 
3993:..\FreeRTOS10/tasks.c **** 			/* Does the priority need to change? */
3994:..\FreeRTOS10/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:..\FreeRTOS10/tasks.c **** 			{
3996:..\FreeRTOS10/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:..\FreeRTOS10/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:..\FreeRTOS10/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:..\FreeRTOS10/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:..\FreeRTOS10/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:..\FreeRTOS10/tasks.c **** 				{
4002:..\FreeRTOS10/tasks.c **** 					/* If a task has timed out because it already holds the
4003:..\FreeRTOS10/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:..\FreeRTOS10/tasks.c **** 					its own priority. */
4005:..\FreeRTOS10/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:..\FreeRTOS10/tasks.c **** 
4007:..\FreeRTOS10/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:..\FreeRTOS10/tasks.c **** 					priority to facilitate determining the subject task's
4009:..\FreeRTOS10/tasks.c **** 					state. */
4010:..\FreeRTOS10/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:..\FreeRTOS10/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:..\FreeRTOS10/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:..\FreeRTOS10/tasks.c **** 
4014:..\FreeRTOS10/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:..\FreeRTOS10/tasks.c **** 					being used for anything else. */
4016:..\FreeRTOS10/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:..\FreeRTOS10/tasks.c **** 					{
4018:..\FreeRTOS10/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:..\FreeRTOS10/tasks.c **** 					}
4020:..\FreeRTOS10/tasks.c **** 					else
4021:..\FreeRTOS10/tasks.c **** 					{
4022:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:..\FreeRTOS10/tasks.c **** 					}
4024:..\FreeRTOS10/tasks.c **** 
4025:..\FreeRTOS10/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:..\FreeRTOS10/tasks.c **** 					then the task that holds the mutex could be in either the
4027:..\FreeRTOS10/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:..\FreeRTOS10/tasks.c **** 					from its current state list if it is in the Ready state as
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 85


4029:..\FreeRTOS10/tasks.c **** 					the task's priority is going to change and there is one
4030:..\FreeRTOS10/tasks.c **** 					Ready list per priority. */
4031:..\FreeRTOS10/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:..\FreeRTOS10/tasks.c **** 					{
4033:..\FreeRTOS10/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:..\FreeRTOS10/tasks.c **** 						{
4035:..\FreeRTOS10/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:..\FreeRTOS10/tasks.c **** 						}
4037:..\FreeRTOS10/tasks.c **** 						else
4038:..\FreeRTOS10/tasks.c **** 						{
4039:..\FreeRTOS10/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:..\FreeRTOS10/tasks.c **** 						}
4041:..\FreeRTOS10/tasks.c **** 
4042:..\FreeRTOS10/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:..\FreeRTOS10/tasks.c **** 					}
4044:..\FreeRTOS10/tasks.c **** 					else
4045:..\FreeRTOS10/tasks.c **** 					{
4046:..\FreeRTOS10/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:..\FreeRTOS10/tasks.c **** 					}
4048:..\FreeRTOS10/tasks.c **** 				}
4049:..\FreeRTOS10/tasks.c **** 				else
4050:..\FreeRTOS10/tasks.c **** 				{
4051:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:..\FreeRTOS10/tasks.c **** 				}
4053:..\FreeRTOS10/tasks.c **** 			}
4054:..\FreeRTOS10/tasks.c **** 			else
4055:..\FreeRTOS10/tasks.c **** 			{
4056:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:..\FreeRTOS10/tasks.c **** 			}
4058:..\FreeRTOS10/tasks.c **** 		}
4059:..\FreeRTOS10/tasks.c **** 		else
4060:..\FreeRTOS10/tasks.c **** 		{
4061:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4062:..\FreeRTOS10/tasks.c **** 		}
4063:..\FreeRTOS10/tasks.c **** 	}
4064:..\FreeRTOS10/tasks.c **** 
4065:..\FreeRTOS10/tasks.c **** #endif /* configUSE_MUTEXES */
4066:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4067:..\FreeRTOS10/tasks.c **** 
4068:..\FreeRTOS10/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:..\FreeRTOS10/tasks.c **** 
4070:..\FreeRTOS10/tasks.c **** 	void vTaskEnterCritical( void )
4071:..\FreeRTOS10/tasks.c **** 	{
4072:..\FreeRTOS10/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:..\FreeRTOS10/tasks.c **** 
4074:..\FreeRTOS10/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:..\FreeRTOS10/tasks.c **** 		{
4076:..\FreeRTOS10/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:..\FreeRTOS10/tasks.c **** 
4078:..\FreeRTOS10/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:..\FreeRTOS10/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:..\FreeRTOS10/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:..\FreeRTOS10/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:..\FreeRTOS10/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:..\FreeRTOS10/tasks.c **** 			critical section. */
4084:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 86


4086:..\FreeRTOS10/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:..\FreeRTOS10/tasks.c **** 			}
4088:..\FreeRTOS10/tasks.c **** 		}
4089:..\FreeRTOS10/tasks.c **** 		else
4090:..\FreeRTOS10/tasks.c **** 		{
4091:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\FreeRTOS10/tasks.c **** 		}
4093:..\FreeRTOS10/tasks.c **** 	}
4094:..\FreeRTOS10/tasks.c **** 
4095:..\FreeRTOS10/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4097:..\FreeRTOS10/tasks.c **** 
4098:..\FreeRTOS10/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\FreeRTOS10/tasks.c **** 
4100:..\FreeRTOS10/tasks.c **** 	void vTaskExitCritical( void )
4101:..\FreeRTOS10/tasks.c **** 	{
4102:..\FreeRTOS10/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:..\FreeRTOS10/tasks.c **** 		{
4104:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:..\FreeRTOS10/tasks.c **** 			{
4106:..\FreeRTOS10/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:..\FreeRTOS10/tasks.c **** 
4108:..\FreeRTOS10/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:..\FreeRTOS10/tasks.c **** 				{
4110:..\FreeRTOS10/tasks.c **** 					portENABLE_INTERRUPTS();
4111:..\FreeRTOS10/tasks.c **** 				}
4112:..\FreeRTOS10/tasks.c **** 				else
4113:..\FreeRTOS10/tasks.c **** 				{
4114:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:..\FreeRTOS10/tasks.c **** 				}
4116:..\FreeRTOS10/tasks.c **** 			}
4117:..\FreeRTOS10/tasks.c **** 			else
4118:..\FreeRTOS10/tasks.c **** 			{
4119:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:..\FreeRTOS10/tasks.c **** 			}
4121:..\FreeRTOS10/tasks.c **** 		}
4122:..\FreeRTOS10/tasks.c **** 		else
4123:..\FreeRTOS10/tasks.c **** 		{
4124:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:..\FreeRTOS10/tasks.c **** 		}
4126:..\FreeRTOS10/tasks.c **** 	}
4127:..\FreeRTOS10/tasks.c **** 
4128:..\FreeRTOS10/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4130:..\FreeRTOS10/tasks.c **** 
4131:..\FreeRTOS10/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:..\FreeRTOS10/tasks.c **** 
4133:..\FreeRTOS10/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:..\FreeRTOS10/tasks.c **** 	{
4135:..\FreeRTOS10/tasks.c **** 	size_t x;
4136:..\FreeRTOS10/tasks.c **** 
4137:..\FreeRTOS10/tasks.c **** 		/* Start by copying the entire string. */
4138:..\FreeRTOS10/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:..\FreeRTOS10/tasks.c **** 
4140:..\FreeRTOS10/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:..\FreeRTOS10/tasks.c **** 		printed out. */
4142:..\FreeRTOS10/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 87


4143:..\FreeRTOS10/tasks.c **** 		{
4144:..\FreeRTOS10/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:..\FreeRTOS10/tasks.c **** 		}
4146:..\FreeRTOS10/tasks.c **** 
4147:..\FreeRTOS10/tasks.c **** 		/* Terminate. */
4148:..\FreeRTOS10/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:..\FreeRTOS10/tasks.c **** 
4150:..\FreeRTOS10/tasks.c **** 		/* Return the new end of string. */
4151:..\FreeRTOS10/tasks.c **** 		return &( pcBuffer[ x ] );
4152:..\FreeRTOS10/tasks.c **** 	}
4153:..\FreeRTOS10/tasks.c **** 
4154:..\FreeRTOS10/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4156:..\FreeRTOS10/tasks.c **** 
4157:..\FreeRTOS10/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:..\FreeRTOS10/tasks.c **** 
4159:..\FreeRTOS10/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:..\FreeRTOS10/tasks.c **** 	{
4161:..\FreeRTOS10/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:..\FreeRTOS10/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:..\FreeRTOS10/tasks.c **** 	char cStatus;
4164:..\FreeRTOS10/tasks.c **** 
4165:..\FreeRTOS10/tasks.c **** 		/*
4166:..\FreeRTOS10/tasks.c **** 		 * PLEASE NOTE:
4167:..\FreeRTOS10/tasks.c **** 		 *
4168:..\FreeRTOS10/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:..\FreeRTOS10/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:..\FreeRTOS10/tasks.c **** 		 * scheduler.
4171:..\FreeRTOS10/tasks.c **** 		 *
4172:..\FreeRTOS10/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:..\FreeRTOS10/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:..\FreeRTOS10/tasks.c **** 		 * displays task names, states and stack usage.
4175:..\FreeRTOS10/tasks.c **** 		 *
4176:..\FreeRTOS10/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:..\FreeRTOS10/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:..\FreeRTOS10/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:..\FreeRTOS10/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:..\FreeRTOS10/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:..\FreeRTOS10/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:..\FreeRTOS10/tasks.c **** 		 * snprintf() implementation!).
4183:..\FreeRTOS10/tasks.c **** 		 *
4184:..\FreeRTOS10/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:..\FreeRTOS10/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:..\FreeRTOS10/tasks.c **** 		 * through a call to vTaskList().
4187:..\FreeRTOS10/tasks.c **** 		 */
4188:..\FreeRTOS10/tasks.c **** 
4189:..\FreeRTOS10/tasks.c **** 
4190:..\FreeRTOS10/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:..\FreeRTOS10/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:..\FreeRTOS10/tasks.c **** 
4193:..\FreeRTOS10/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:..\FreeRTOS10/tasks.c **** 		function is executing. */
4195:..\FreeRTOS10/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:..\FreeRTOS10/tasks.c **** 
4197:..\FreeRTOS10/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:..\FreeRTOS10/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:..\FreeRTOS10/tasks.c **** 		equate to NULL. */
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 88


4200:..\FreeRTOS10/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:..\FreeRTOS10/tasks.c **** 
4202:..\FreeRTOS10/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:..\FreeRTOS10/tasks.c **** 		{
4204:..\FreeRTOS10/tasks.c **** 			/* Generate the (binary) data. */
4205:..\FreeRTOS10/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:..\FreeRTOS10/tasks.c **** 
4207:..\FreeRTOS10/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:..\FreeRTOS10/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:..\FreeRTOS10/tasks.c **** 			{
4210:..\FreeRTOS10/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:..\FreeRTOS10/tasks.c **** 				{
4212:..\FreeRTOS10/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4213:..\FreeRTOS10/tasks.c **** 										break;
4214:..\FreeRTOS10/tasks.c **** 
4215:..\FreeRTOS10/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4216:..\FreeRTOS10/tasks.c **** 										break;
4217:..\FreeRTOS10/tasks.c **** 
4218:..\FreeRTOS10/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4219:..\FreeRTOS10/tasks.c **** 										break;
4220:..\FreeRTOS10/tasks.c **** 
4221:..\FreeRTOS10/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4222:..\FreeRTOS10/tasks.c **** 										break;
4223:..\FreeRTOS10/tasks.c **** 
4224:..\FreeRTOS10/tasks.c **** 					default:			/* Should not get here, but it is included
4225:..\FreeRTOS10/tasks.c **** 										to prevent static checking errors. */
4226:..\FreeRTOS10/tasks.c **** 										cStatus = 0x00;
4227:..\FreeRTOS10/tasks.c **** 										break;
4228:..\FreeRTOS10/tasks.c **** 				}
4229:..\FreeRTOS10/tasks.c **** 
4230:..\FreeRTOS10/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4231:..\FreeRTOS10/tasks.c **** 				can be printed in tabular form more easily. */
4232:..\FreeRTOS10/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4233:..\FreeRTOS10/tasks.c **** 
4234:..\FreeRTOS10/tasks.c **** 				/* Write the rest of the string. */
4235:..\FreeRTOS10/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4236:..\FreeRTOS10/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4237:..\FreeRTOS10/tasks.c **** 			}
4238:..\FreeRTOS10/tasks.c **** 
4239:..\FreeRTOS10/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4240:..\FreeRTOS10/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4241:..\FreeRTOS10/tasks.c **** 			vPortFree( pxTaskStatusArray );
4242:..\FreeRTOS10/tasks.c **** 		}
4243:..\FreeRTOS10/tasks.c **** 		else
4244:..\FreeRTOS10/tasks.c **** 		{
4245:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4246:..\FreeRTOS10/tasks.c **** 		}
4247:..\FreeRTOS10/tasks.c **** 	}
4248:..\FreeRTOS10/tasks.c **** 
4249:..\FreeRTOS10/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4250:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
4251:..\FreeRTOS10/tasks.c **** 
4252:..\FreeRTOS10/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4253:..\FreeRTOS10/tasks.c **** 
4254:..\FreeRTOS10/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4255:..\FreeRTOS10/tasks.c **** 	{
4256:..\FreeRTOS10/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 89


4257:..\FreeRTOS10/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4258:..\FreeRTOS10/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4259:..\FreeRTOS10/tasks.c **** 
4260:..\FreeRTOS10/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4261:..\FreeRTOS10/tasks.c **** 		{
4262:..\FreeRTOS10/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4263:..\FreeRTOS10/tasks.c **** 		}
4264:..\FreeRTOS10/tasks.c **** 		#endif
4265:..\FreeRTOS10/tasks.c **** 
4266:..\FreeRTOS10/tasks.c **** 		/*
4267:..\FreeRTOS10/tasks.c **** 		 * PLEASE NOTE:
4268:..\FreeRTOS10/tasks.c **** 		 *
4269:..\FreeRTOS10/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4270:..\FreeRTOS10/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4271:..\FreeRTOS10/tasks.c **** 		 * scheduler.
4272:..\FreeRTOS10/tasks.c **** 		 *
4273:..\FreeRTOS10/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4274:..\FreeRTOS10/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4275:..\FreeRTOS10/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4276:..\FreeRTOS10/tasks.c **** 		 * in both absolute and percentage terms.
4277:..\FreeRTOS10/tasks.c **** 		 *
4278:..\FreeRTOS10/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4279:..\FreeRTOS10/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4280:..\FreeRTOS10/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4281:..\FreeRTOS10/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4282:..\FreeRTOS10/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4283:..\FreeRTOS10/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4284:..\FreeRTOS10/tasks.c **** 		 * a full snprintf() implementation!).
4285:..\FreeRTOS10/tasks.c **** 		 *
4286:..\FreeRTOS10/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4287:..\FreeRTOS10/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4288:..\FreeRTOS10/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4289:..\FreeRTOS10/tasks.c **** 		 */
4290:..\FreeRTOS10/tasks.c **** 
4291:..\FreeRTOS10/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4292:..\FreeRTOS10/tasks.c **** 		*pcWriteBuffer = 0x00;
4293:..\FreeRTOS10/tasks.c **** 
4294:..\FreeRTOS10/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4295:..\FreeRTOS10/tasks.c **** 		function is executing. */
4296:..\FreeRTOS10/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4297:..\FreeRTOS10/tasks.c **** 
4298:..\FreeRTOS10/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4299:..\FreeRTOS10/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4300:..\FreeRTOS10/tasks.c **** 		equate to NULL. */
4301:..\FreeRTOS10/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4302:..\FreeRTOS10/tasks.c **** 
4303:..\FreeRTOS10/tasks.c **** 		if( pxTaskStatusArray != NULL )
4304:..\FreeRTOS10/tasks.c **** 		{
4305:..\FreeRTOS10/tasks.c **** 			/* Generate the (binary) data. */
4306:..\FreeRTOS10/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4307:..\FreeRTOS10/tasks.c **** 
4308:..\FreeRTOS10/tasks.c **** 			/* For percentage calculations. */
4309:..\FreeRTOS10/tasks.c **** 			ulTotalTime /= 100UL;
4310:..\FreeRTOS10/tasks.c **** 
4311:..\FreeRTOS10/tasks.c **** 			/* Avoid divide by zero errors. */
4312:..\FreeRTOS10/tasks.c **** 			if( ulTotalTime > 0 )
4313:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 90


4314:..\FreeRTOS10/tasks.c **** 				/* Create a human readable table from the binary data. */
4315:..\FreeRTOS10/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4316:..\FreeRTOS10/tasks.c **** 				{
4317:..\FreeRTOS10/tasks.c **** 					/* What percentage of the total run time has the task used?
4318:..\FreeRTOS10/tasks.c **** 					This will always be rounded down to the nearest integer.
4319:..\FreeRTOS10/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4320:..\FreeRTOS10/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4321:..\FreeRTOS10/tasks.c **** 
4322:..\FreeRTOS10/tasks.c **** 					/* Write the task name to the string, padding with
4323:..\FreeRTOS10/tasks.c **** 					spaces so it can be printed in tabular form more
4324:..\FreeRTOS10/tasks.c **** 					easily. */
4325:..\FreeRTOS10/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4326:..\FreeRTOS10/tasks.c **** 
4327:..\FreeRTOS10/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4328:..\FreeRTOS10/tasks.c **** 					{
4329:..\FreeRTOS10/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4330:..\FreeRTOS10/tasks.c **** 						{
4331:..\FreeRTOS10/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4332:..\FreeRTOS10/tasks.c **** 						}
4333:..\FreeRTOS10/tasks.c **** 						#else
4334:..\FreeRTOS10/tasks.c **** 						{
4335:..\FreeRTOS10/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4336:..\FreeRTOS10/tasks.c **** 							printf() library can be used. */
4337:..\FreeRTOS10/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4338:..\FreeRTOS10/tasks.c **** 						}
4339:..\FreeRTOS10/tasks.c **** 						#endif
4340:..\FreeRTOS10/tasks.c **** 					}
4341:..\FreeRTOS10/tasks.c **** 					else
4342:..\FreeRTOS10/tasks.c **** 					{
4343:..\FreeRTOS10/tasks.c **** 						/* If the percentage is zero here then the task has
4344:..\FreeRTOS10/tasks.c **** 						consumed less than 1% of the total run time. */
4345:..\FreeRTOS10/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4346:..\FreeRTOS10/tasks.c **** 						{
4347:..\FreeRTOS10/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4348:..\FreeRTOS10/tasks.c **** 						}
4349:..\FreeRTOS10/tasks.c **** 						#else
4350:..\FreeRTOS10/tasks.c **** 						{
4351:..\FreeRTOS10/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4352:..\FreeRTOS10/tasks.c **** 							printf() library can be used. */
4353:..\FreeRTOS10/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4354:..\FreeRTOS10/tasks.c **** 						}
4355:..\FreeRTOS10/tasks.c **** 						#endif
4356:..\FreeRTOS10/tasks.c **** 					}
4357:..\FreeRTOS10/tasks.c **** 
4358:..\FreeRTOS10/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4359:..\FreeRTOS10/tasks.c **** 				}
4360:..\FreeRTOS10/tasks.c **** 			}
4361:..\FreeRTOS10/tasks.c **** 			else
4362:..\FreeRTOS10/tasks.c **** 			{
4363:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4364:..\FreeRTOS10/tasks.c **** 			}
4365:..\FreeRTOS10/tasks.c **** 
4366:..\FreeRTOS10/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4367:..\FreeRTOS10/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4368:..\FreeRTOS10/tasks.c **** 			vPortFree( pxTaskStatusArray );
4369:..\FreeRTOS10/tasks.c **** 		}
4370:..\FreeRTOS10/tasks.c **** 		else
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 91


4371:..\FreeRTOS10/tasks.c **** 		{
4372:..\FreeRTOS10/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4373:..\FreeRTOS10/tasks.c **** 		}
4374:..\FreeRTOS10/tasks.c **** 	}
4375:..\FreeRTOS10/tasks.c **** 
4376:..\FreeRTOS10/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4377:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4378:..\FreeRTOS10/tasks.c **** 
4379:..\FreeRTOS10/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4380:..\FreeRTOS10/tasks.c **** {
4381:..\FreeRTOS10/tasks.c **** TickType_t uxReturn;
4382:..\FreeRTOS10/tasks.c **** 
4383:..\FreeRTOS10/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4384:..\FreeRTOS10/tasks.c **** 
4385:..\FreeRTOS10/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4386:..\FreeRTOS10/tasks.c **** 	queues and semaphores. */
4387:..\FreeRTOS10/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4388:..\FreeRTOS10/tasks.c **** 
4389:..\FreeRTOS10/tasks.c **** 	return uxReturn;
4390:..\FreeRTOS10/tasks.c **** }
4391:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4392:..\FreeRTOS10/tasks.c **** 
4393:..\FreeRTOS10/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4394:..\FreeRTOS10/tasks.c **** 
4395:..\FreeRTOS10/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4396:..\FreeRTOS10/tasks.c **** 	{
4397:..\FreeRTOS10/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4398:..\FreeRTOS10/tasks.c **** 		then pxCurrentTCB will be NULL. */
4399:..\FreeRTOS10/tasks.c **** 		if( pxCurrentTCB != NULL )
4400:..\FreeRTOS10/tasks.c **** 		{
4401:..\FreeRTOS10/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4402:..\FreeRTOS10/tasks.c **** 		}
4403:..\FreeRTOS10/tasks.c **** 
4404:..\FreeRTOS10/tasks.c **** 		return pxCurrentTCB;
4405:..\FreeRTOS10/tasks.c **** 	}
4406:..\FreeRTOS10/tasks.c **** 
4407:..\FreeRTOS10/tasks.c **** #endif /* configUSE_MUTEXES */
4408:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4409:..\FreeRTOS10/tasks.c **** 
4410:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4411:..\FreeRTOS10/tasks.c **** 
4412:..\FreeRTOS10/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4413:..\FreeRTOS10/tasks.c **** 	{
4414:..\FreeRTOS10/tasks.c **** 	uint32_t ulReturn;
4415:..\FreeRTOS10/tasks.c **** 
4416:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
4417:..\FreeRTOS10/tasks.c **** 		{
4418:..\FreeRTOS10/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4419:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4420:..\FreeRTOS10/tasks.c **** 			{
4421:..\FreeRTOS10/tasks.c **** 				/* Mark this task as waiting for a notification. */
4422:..\FreeRTOS10/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4423:..\FreeRTOS10/tasks.c **** 
4424:..\FreeRTOS10/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4425:..\FreeRTOS10/tasks.c **** 				{
4426:..\FreeRTOS10/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4427:..\FreeRTOS10/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 92


4428:..\FreeRTOS10/tasks.c **** 
4429:..\FreeRTOS10/tasks.c **** 					/* All ports are written to allow a yield in a critical
4430:..\FreeRTOS10/tasks.c **** 					section (some will yield immediately, others wait until the
4431:..\FreeRTOS10/tasks.c **** 					critical section exits) - but it is not something that
4432:..\FreeRTOS10/tasks.c **** 					application code should ever do. */
4433:..\FreeRTOS10/tasks.c **** 					portYIELD_WITHIN_API();
4434:..\FreeRTOS10/tasks.c **** 				}
4435:..\FreeRTOS10/tasks.c **** 				else
4436:..\FreeRTOS10/tasks.c **** 				{
4437:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4438:..\FreeRTOS10/tasks.c **** 				}
4439:..\FreeRTOS10/tasks.c **** 			}
4440:..\FreeRTOS10/tasks.c **** 			else
4441:..\FreeRTOS10/tasks.c **** 			{
4442:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4443:..\FreeRTOS10/tasks.c **** 			}
4444:..\FreeRTOS10/tasks.c **** 		}
4445:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4446:..\FreeRTOS10/tasks.c **** 
4447:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
4448:..\FreeRTOS10/tasks.c **** 		{
4449:..\FreeRTOS10/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4450:..\FreeRTOS10/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4451:..\FreeRTOS10/tasks.c **** 
4452:..\FreeRTOS10/tasks.c **** 			if( ulReturn != 0UL )
4453:..\FreeRTOS10/tasks.c **** 			{
4454:..\FreeRTOS10/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4455:..\FreeRTOS10/tasks.c **** 				{
4456:..\FreeRTOS10/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4457:..\FreeRTOS10/tasks.c **** 				}
4458:..\FreeRTOS10/tasks.c **** 				else
4459:..\FreeRTOS10/tasks.c **** 				{
4460:..\FreeRTOS10/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4461:..\FreeRTOS10/tasks.c **** 				}
4462:..\FreeRTOS10/tasks.c **** 			}
4463:..\FreeRTOS10/tasks.c **** 			else
4464:..\FreeRTOS10/tasks.c **** 			{
4465:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4466:..\FreeRTOS10/tasks.c **** 			}
4467:..\FreeRTOS10/tasks.c **** 
4468:..\FreeRTOS10/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4469:..\FreeRTOS10/tasks.c **** 		}
4470:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4471:..\FreeRTOS10/tasks.c **** 
4472:..\FreeRTOS10/tasks.c **** 		return ulReturn;
4473:..\FreeRTOS10/tasks.c **** 	}
4474:..\FreeRTOS10/tasks.c **** 
4475:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4476:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4477:..\FreeRTOS10/tasks.c **** 
4478:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4479:..\FreeRTOS10/tasks.c **** 
4480:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4481:..\FreeRTOS10/tasks.c **** 	{
4482:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
4483:..\FreeRTOS10/tasks.c **** 
4484:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 93


4485:..\FreeRTOS10/tasks.c **** 		{
4486:..\FreeRTOS10/tasks.c **** 			/* Only block if a notification is not already pending. */
4487:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4488:..\FreeRTOS10/tasks.c **** 			{
4489:..\FreeRTOS10/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4490:..\FreeRTOS10/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4491:..\FreeRTOS10/tasks.c **** 				clear the value to zero. */
4492:..\FreeRTOS10/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4493:..\FreeRTOS10/tasks.c **** 
4494:..\FreeRTOS10/tasks.c **** 				/* Mark this task as waiting for a notification. */
4495:..\FreeRTOS10/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4496:..\FreeRTOS10/tasks.c **** 
4497:..\FreeRTOS10/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4498:..\FreeRTOS10/tasks.c **** 				{
4499:..\FreeRTOS10/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4500:..\FreeRTOS10/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4501:..\FreeRTOS10/tasks.c **** 
4502:..\FreeRTOS10/tasks.c **** 					/* All ports are written to allow a yield in a critical
4503:..\FreeRTOS10/tasks.c **** 					section (some will yield immediately, others wait until the
4504:..\FreeRTOS10/tasks.c **** 					critical section exits) - but it is not something that
4505:..\FreeRTOS10/tasks.c **** 					application code should ever do. */
4506:..\FreeRTOS10/tasks.c **** 					portYIELD_WITHIN_API();
4507:..\FreeRTOS10/tasks.c **** 				}
4508:..\FreeRTOS10/tasks.c **** 				else
4509:..\FreeRTOS10/tasks.c **** 				{
4510:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4511:..\FreeRTOS10/tasks.c **** 				}
4512:..\FreeRTOS10/tasks.c **** 			}
4513:..\FreeRTOS10/tasks.c **** 			else
4514:..\FreeRTOS10/tasks.c **** 			{
4515:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4516:..\FreeRTOS10/tasks.c **** 			}
4517:..\FreeRTOS10/tasks.c **** 		}
4518:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4519:..\FreeRTOS10/tasks.c **** 
4520:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
4521:..\FreeRTOS10/tasks.c **** 		{
4522:..\FreeRTOS10/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4523:..\FreeRTOS10/tasks.c **** 
4524:..\FreeRTOS10/tasks.c **** 			if( pulNotificationValue != NULL )
4525:..\FreeRTOS10/tasks.c **** 			{
4526:..\FreeRTOS10/tasks.c **** 				/* Output the current notification value, which may or may not
4527:..\FreeRTOS10/tasks.c **** 				have changed. */
4528:..\FreeRTOS10/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4529:..\FreeRTOS10/tasks.c **** 			}
4530:..\FreeRTOS10/tasks.c **** 
4531:..\FreeRTOS10/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4532:..\FreeRTOS10/tasks.c **** 			blocked state (because a notification was already pending) or the
4533:..\FreeRTOS10/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4534:..\FreeRTOS10/tasks.c **** 			unblocked because of a timeout. */
4535:..\FreeRTOS10/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4536:..\FreeRTOS10/tasks.c **** 			{
4537:..\FreeRTOS10/tasks.c **** 				/* A notification was not received. */
4538:..\FreeRTOS10/tasks.c **** 				xReturn = pdFALSE;
4539:..\FreeRTOS10/tasks.c **** 			}
4540:..\FreeRTOS10/tasks.c **** 			else
4541:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 94


4542:..\FreeRTOS10/tasks.c **** 				/* A notification was already pending or a notification was
4543:..\FreeRTOS10/tasks.c **** 				received while the task was waiting. */
4544:..\FreeRTOS10/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4545:..\FreeRTOS10/tasks.c **** 				xReturn = pdTRUE;
4546:..\FreeRTOS10/tasks.c **** 			}
4547:..\FreeRTOS10/tasks.c **** 
4548:..\FreeRTOS10/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4549:..\FreeRTOS10/tasks.c **** 		}
4550:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4551:..\FreeRTOS10/tasks.c **** 
4552:..\FreeRTOS10/tasks.c **** 		return xReturn;
4553:..\FreeRTOS10/tasks.c **** 	}
4554:..\FreeRTOS10/tasks.c **** 
4555:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4556:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4557:..\FreeRTOS10/tasks.c **** 
4558:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4559:..\FreeRTOS10/tasks.c **** 
4560:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4561:..\FreeRTOS10/tasks.c **** 	{
4562:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
4563:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = pdPASS;
4564:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
4565:..\FreeRTOS10/tasks.c **** 
4566:..\FreeRTOS10/tasks.c **** 		configASSERT( xTaskToNotify );
4567:..\FreeRTOS10/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4568:..\FreeRTOS10/tasks.c **** 
4569:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
4570:..\FreeRTOS10/tasks.c **** 		{
4571:..\FreeRTOS10/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4572:..\FreeRTOS10/tasks.c **** 			{
4573:..\FreeRTOS10/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4574:..\FreeRTOS10/tasks.c **** 			}
4575:..\FreeRTOS10/tasks.c **** 
4576:..\FreeRTOS10/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4577:..\FreeRTOS10/tasks.c **** 
4578:..\FreeRTOS10/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4579:..\FreeRTOS10/tasks.c **** 
4580:..\FreeRTOS10/tasks.c **** 			switch( eAction )
4581:..\FreeRTOS10/tasks.c **** 			{
4582:..\FreeRTOS10/tasks.c **** 				case eSetBits	:
4583:..\FreeRTOS10/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4584:..\FreeRTOS10/tasks.c **** 					break;
4585:..\FreeRTOS10/tasks.c **** 
4586:..\FreeRTOS10/tasks.c **** 				case eIncrement	:
4587:..\FreeRTOS10/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4588:..\FreeRTOS10/tasks.c **** 					break;
4589:..\FreeRTOS10/tasks.c **** 
4590:..\FreeRTOS10/tasks.c **** 				case eSetValueWithOverwrite	:
4591:..\FreeRTOS10/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4592:..\FreeRTOS10/tasks.c **** 					break;
4593:..\FreeRTOS10/tasks.c **** 
4594:..\FreeRTOS10/tasks.c **** 				case eSetValueWithoutOverwrite :
4595:..\FreeRTOS10/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4596:..\FreeRTOS10/tasks.c **** 					{
4597:..\FreeRTOS10/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4598:..\FreeRTOS10/tasks.c **** 					}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 95


4599:..\FreeRTOS10/tasks.c **** 					else
4600:..\FreeRTOS10/tasks.c **** 					{
4601:..\FreeRTOS10/tasks.c **** 						/* The value could not be written to the task. */
4602:..\FreeRTOS10/tasks.c **** 						xReturn = pdFAIL;
4603:..\FreeRTOS10/tasks.c **** 					}
4604:..\FreeRTOS10/tasks.c **** 					break;
4605:..\FreeRTOS10/tasks.c **** 
4606:..\FreeRTOS10/tasks.c **** 				case eNoAction:
4607:..\FreeRTOS10/tasks.c **** 					/* The task is being notified without its notify value being
4608:..\FreeRTOS10/tasks.c **** 					updated. */
4609:..\FreeRTOS10/tasks.c **** 					break;
4610:..\FreeRTOS10/tasks.c **** 			}
4611:..\FreeRTOS10/tasks.c **** 
4612:..\FreeRTOS10/tasks.c **** 			traceTASK_NOTIFY();
4613:..\FreeRTOS10/tasks.c **** 
4614:..\FreeRTOS10/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4615:..\FreeRTOS10/tasks.c **** 			notification then unblock it now. */
4616:..\FreeRTOS10/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4617:..\FreeRTOS10/tasks.c **** 			{
4618:..\FreeRTOS10/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4619:..\FreeRTOS10/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4620:..\FreeRTOS10/tasks.c **** 
4621:..\FreeRTOS10/tasks.c **** 				/* The task should not have been on an event list. */
4622:..\FreeRTOS10/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4623:..\FreeRTOS10/tasks.c **** 
4624:..\FreeRTOS10/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4625:..\FreeRTOS10/tasks.c **** 				{
4626:..\FreeRTOS10/tasks.c **** 					/* If a task is blocked waiting for a notification then
4627:..\FreeRTOS10/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4628:..\FreeRTOS10/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4629:..\FreeRTOS10/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4630:..\FreeRTOS10/tasks.c **** 					because it will automatically get reset to a new value when
4631:..\FreeRTOS10/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4632:..\FreeRTOS10/tasks.c **** 					tickless idling is used it might be more important to enter
4633:..\FreeRTOS10/tasks.c **** 					sleep mode at the earliest possible time - so reset
4634:..\FreeRTOS10/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4635:..\FreeRTOS10/tasks.c **** 					earliest possible time. */
4636:..\FreeRTOS10/tasks.c **** 					prvResetNextTaskUnblockTime();
4637:..\FreeRTOS10/tasks.c **** 				}
4638:..\FreeRTOS10/tasks.c **** 				#endif
4639:..\FreeRTOS10/tasks.c **** 
4640:..\FreeRTOS10/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4641:..\FreeRTOS10/tasks.c **** 				{
4642:..\FreeRTOS10/tasks.c **** 					/* The notified task has a priority above the currently
4643:..\FreeRTOS10/tasks.c **** 					executing task so a yield is required. */
4644:..\FreeRTOS10/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4645:..\FreeRTOS10/tasks.c **** 				}
4646:..\FreeRTOS10/tasks.c **** 				else
4647:..\FreeRTOS10/tasks.c **** 				{
4648:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4649:..\FreeRTOS10/tasks.c **** 				}
4650:..\FreeRTOS10/tasks.c **** 			}
4651:..\FreeRTOS10/tasks.c **** 			else
4652:..\FreeRTOS10/tasks.c **** 			{
4653:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4654:..\FreeRTOS10/tasks.c **** 			}
4655:..\FreeRTOS10/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 96


4656:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4657:..\FreeRTOS10/tasks.c **** 
4658:..\FreeRTOS10/tasks.c **** 		return xReturn;
4659:..\FreeRTOS10/tasks.c **** 	}
4660:..\FreeRTOS10/tasks.c **** 
4661:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4662:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4663:..\FreeRTOS10/tasks.c **** 
4664:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4665:..\FreeRTOS10/tasks.c **** 
4666:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4667:..\FreeRTOS10/tasks.c **** 	{
4668:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
4669:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
4670:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn = pdPASS;
4671:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4672:..\FreeRTOS10/tasks.c **** 
4673:..\FreeRTOS10/tasks.c **** 		configASSERT( xTaskToNotify );
4674:..\FreeRTOS10/tasks.c **** 
4675:..\FreeRTOS10/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4676:..\FreeRTOS10/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4677:..\FreeRTOS10/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4678:..\FreeRTOS10/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4679:..\FreeRTOS10/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4680:..\FreeRTOS10/tasks.c **** 		is defined in FreeRTOSConfig.h then
4681:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4682:..\FreeRTOS10/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4683:..\FreeRTOS10/tasks.c **** 		been assigned a priority above the configured maximum system call
4684:..\FreeRTOS10/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4685:..\FreeRTOS10/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4686:..\FreeRTOS10/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4687:..\FreeRTOS10/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4688:..\FreeRTOS10/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4689:..\FreeRTOS10/tasks.c **** 		provided on the following link:
4690:..\FreeRTOS10/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4691:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4692:..\FreeRTOS10/tasks.c **** 
4693:..\FreeRTOS10/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4694:..\FreeRTOS10/tasks.c **** 
4695:..\FreeRTOS10/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4696:..\FreeRTOS10/tasks.c **** 		{
4697:..\FreeRTOS10/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4698:..\FreeRTOS10/tasks.c **** 			{
4699:..\FreeRTOS10/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4700:..\FreeRTOS10/tasks.c **** 			}
4701:..\FreeRTOS10/tasks.c **** 
4702:..\FreeRTOS10/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4703:..\FreeRTOS10/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4704:..\FreeRTOS10/tasks.c **** 
4705:..\FreeRTOS10/tasks.c **** 			switch( eAction )
4706:..\FreeRTOS10/tasks.c **** 			{
4707:..\FreeRTOS10/tasks.c **** 				case eSetBits	:
4708:..\FreeRTOS10/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4709:..\FreeRTOS10/tasks.c **** 					break;
4710:..\FreeRTOS10/tasks.c **** 
4711:..\FreeRTOS10/tasks.c **** 				case eIncrement	:
4712:..\FreeRTOS10/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 97


4713:..\FreeRTOS10/tasks.c **** 					break;
4714:..\FreeRTOS10/tasks.c **** 
4715:..\FreeRTOS10/tasks.c **** 				case eSetValueWithOverwrite	:
4716:..\FreeRTOS10/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4717:..\FreeRTOS10/tasks.c **** 					break;
4718:..\FreeRTOS10/tasks.c **** 
4719:..\FreeRTOS10/tasks.c **** 				case eSetValueWithoutOverwrite :
4720:..\FreeRTOS10/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4721:..\FreeRTOS10/tasks.c **** 					{
4722:..\FreeRTOS10/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4723:..\FreeRTOS10/tasks.c **** 					}
4724:..\FreeRTOS10/tasks.c **** 					else
4725:..\FreeRTOS10/tasks.c **** 					{
4726:..\FreeRTOS10/tasks.c **** 						/* The value could not be written to the task. */
4727:..\FreeRTOS10/tasks.c **** 						xReturn = pdFAIL;
4728:..\FreeRTOS10/tasks.c **** 					}
4729:..\FreeRTOS10/tasks.c **** 					break;
4730:..\FreeRTOS10/tasks.c **** 
4731:..\FreeRTOS10/tasks.c **** 				case eNoAction :
4732:..\FreeRTOS10/tasks.c **** 					/* The task is being notified without its notify value being
4733:..\FreeRTOS10/tasks.c **** 					updated. */
4734:..\FreeRTOS10/tasks.c **** 					break;
4735:..\FreeRTOS10/tasks.c **** 			}
4736:..\FreeRTOS10/tasks.c **** 
4737:..\FreeRTOS10/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4738:..\FreeRTOS10/tasks.c **** 
4739:..\FreeRTOS10/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4740:..\FreeRTOS10/tasks.c **** 			notification then unblock it now. */
4741:..\FreeRTOS10/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4742:..\FreeRTOS10/tasks.c **** 			{
4743:..\FreeRTOS10/tasks.c **** 				/* The task should not have been on an event list. */
4744:..\FreeRTOS10/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4745:..\FreeRTOS10/tasks.c **** 
4746:..\FreeRTOS10/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4747:..\FreeRTOS10/tasks.c **** 				{
4748:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4749:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4750:..\FreeRTOS10/tasks.c **** 				}
4751:..\FreeRTOS10/tasks.c **** 				else
4752:..\FreeRTOS10/tasks.c **** 				{
4753:..\FreeRTOS10/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4754:..\FreeRTOS10/tasks.c **** 					this task pending until the scheduler is resumed. */
4755:..\FreeRTOS10/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4756:..\FreeRTOS10/tasks.c **** 				}
4757:..\FreeRTOS10/tasks.c **** 
4758:..\FreeRTOS10/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4759:..\FreeRTOS10/tasks.c **** 				{
4760:..\FreeRTOS10/tasks.c **** 					/* The notified task has a priority above the currently
4761:..\FreeRTOS10/tasks.c **** 					executing task so a yield is required. */
4762:..\FreeRTOS10/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4763:..\FreeRTOS10/tasks.c **** 					{
4764:..\FreeRTOS10/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4765:..\FreeRTOS10/tasks.c **** 					}
4766:..\FreeRTOS10/tasks.c **** 					else
4767:..\FreeRTOS10/tasks.c **** 					{
4768:..\FreeRTOS10/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4769:..\FreeRTOS10/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 98


4770:..\FreeRTOS10/tasks.c **** 						safe FreeRTOS function. */
4771:..\FreeRTOS10/tasks.c **** 						xYieldPending = pdTRUE;
4772:..\FreeRTOS10/tasks.c **** 					}
4773:..\FreeRTOS10/tasks.c **** 				}
4774:..\FreeRTOS10/tasks.c **** 				else
4775:..\FreeRTOS10/tasks.c **** 				{
4776:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4777:..\FreeRTOS10/tasks.c **** 				}
4778:..\FreeRTOS10/tasks.c **** 			}
4779:..\FreeRTOS10/tasks.c **** 		}
4780:..\FreeRTOS10/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4781:..\FreeRTOS10/tasks.c **** 
4782:..\FreeRTOS10/tasks.c **** 		return xReturn;
4783:..\FreeRTOS10/tasks.c **** 	}
4784:..\FreeRTOS10/tasks.c **** 
4785:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4786:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4787:..\FreeRTOS10/tasks.c **** 
4788:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4789:..\FreeRTOS10/tasks.c **** 
4790:..\FreeRTOS10/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4791:..\FreeRTOS10/tasks.c **** 	{
4792:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
4793:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
4794:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4795:..\FreeRTOS10/tasks.c **** 
4796:..\FreeRTOS10/tasks.c **** 		configASSERT( xTaskToNotify );
4797:..\FreeRTOS10/tasks.c **** 
4798:..\FreeRTOS10/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4799:..\FreeRTOS10/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4800:..\FreeRTOS10/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4801:..\FreeRTOS10/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4802:..\FreeRTOS10/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4803:..\FreeRTOS10/tasks.c **** 		is defined in FreeRTOSConfig.h then
4804:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4805:..\FreeRTOS10/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4806:..\FreeRTOS10/tasks.c **** 		been assigned a priority above the configured maximum system call
4807:..\FreeRTOS10/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4808:..\FreeRTOS10/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4809:..\FreeRTOS10/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4810:..\FreeRTOS10/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4811:..\FreeRTOS10/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4812:..\FreeRTOS10/tasks.c **** 		provided on the following link:
4813:..\FreeRTOS10/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4814:..\FreeRTOS10/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4815:..\FreeRTOS10/tasks.c **** 
4816:..\FreeRTOS10/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4817:..\FreeRTOS10/tasks.c **** 
4818:..\FreeRTOS10/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4819:..\FreeRTOS10/tasks.c **** 		{
4820:..\FreeRTOS10/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4821:..\FreeRTOS10/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4822:..\FreeRTOS10/tasks.c **** 
4823:..\FreeRTOS10/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4824:..\FreeRTOS10/tasks.c **** 			semaphore. */
4825:..\FreeRTOS10/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4826:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 99


4827:..\FreeRTOS10/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4828:..\FreeRTOS10/tasks.c **** 
4829:..\FreeRTOS10/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4830:..\FreeRTOS10/tasks.c **** 			notification then unblock it now. */
4831:..\FreeRTOS10/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4832:..\FreeRTOS10/tasks.c **** 			{
4833:..\FreeRTOS10/tasks.c **** 				/* The task should not have been on an event list. */
4834:..\FreeRTOS10/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4835:..\FreeRTOS10/tasks.c **** 
4836:..\FreeRTOS10/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4837:..\FreeRTOS10/tasks.c **** 				{
4838:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4839:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4840:..\FreeRTOS10/tasks.c **** 				}
4841:..\FreeRTOS10/tasks.c **** 				else
4842:..\FreeRTOS10/tasks.c **** 				{
4843:..\FreeRTOS10/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4844:..\FreeRTOS10/tasks.c **** 					this task pending until the scheduler is resumed. */
4845:..\FreeRTOS10/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4846:..\FreeRTOS10/tasks.c **** 				}
4847:..\FreeRTOS10/tasks.c **** 
4848:..\FreeRTOS10/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4849:..\FreeRTOS10/tasks.c **** 				{
4850:..\FreeRTOS10/tasks.c **** 					/* The notified task has a priority above the currently
4851:..\FreeRTOS10/tasks.c **** 					executing task so a yield is required. */
4852:..\FreeRTOS10/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4853:..\FreeRTOS10/tasks.c **** 					{
4854:..\FreeRTOS10/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4855:..\FreeRTOS10/tasks.c **** 					}
4856:..\FreeRTOS10/tasks.c **** 					else
4857:..\FreeRTOS10/tasks.c **** 					{
4858:..\FreeRTOS10/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4859:..\FreeRTOS10/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4860:..\FreeRTOS10/tasks.c **** 						safe FreeRTOS function. */
4861:..\FreeRTOS10/tasks.c **** 						xYieldPending = pdTRUE;
4862:..\FreeRTOS10/tasks.c **** 					}
4863:..\FreeRTOS10/tasks.c **** 				}
4864:..\FreeRTOS10/tasks.c **** 				else
4865:..\FreeRTOS10/tasks.c **** 				{
4866:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4867:..\FreeRTOS10/tasks.c **** 				}
4868:..\FreeRTOS10/tasks.c **** 			}
4869:..\FreeRTOS10/tasks.c **** 		}
4870:..\FreeRTOS10/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4871:..\FreeRTOS10/tasks.c **** 	}
4872:..\FreeRTOS10/tasks.c **** 
4873:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4874:..\FreeRTOS10/tasks.c **** 
4875:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4876:..\FreeRTOS10/tasks.c **** 
4877:..\FreeRTOS10/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4878:..\FreeRTOS10/tasks.c **** 
4879:..\FreeRTOS10/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4880:..\FreeRTOS10/tasks.c **** 	{
4881:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
4882:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
4883:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 100


4884:..\FreeRTOS10/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4885:..\FreeRTOS10/tasks.c **** 		its notification state cleared. */
4886:..\FreeRTOS10/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4887:..\FreeRTOS10/tasks.c **** 
4888:..\FreeRTOS10/tasks.c **** 		taskENTER_CRITICAL();
4889:..\FreeRTOS10/tasks.c **** 		{
4890:..\FreeRTOS10/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4891:..\FreeRTOS10/tasks.c **** 			{
4892:..\FreeRTOS10/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4893:..\FreeRTOS10/tasks.c **** 				xReturn = pdPASS;
4894:..\FreeRTOS10/tasks.c **** 			}
4895:..\FreeRTOS10/tasks.c **** 			else
4896:..\FreeRTOS10/tasks.c **** 			{
4897:..\FreeRTOS10/tasks.c **** 				xReturn = pdFAIL;
4898:..\FreeRTOS10/tasks.c **** 			}
4899:..\FreeRTOS10/tasks.c **** 		}
4900:..\FreeRTOS10/tasks.c **** 		taskEXIT_CRITICAL();
4901:..\FreeRTOS10/tasks.c **** 
4902:..\FreeRTOS10/tasks.c **** 		return xReturn;
4903:..\FreeRTOS10/tasks.c **** 	}
4904:..\FreeRTOS10/tasks.c **** 
4905:..\FreeRTOS10/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4906:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
4907:..\FreeRTOS10/tasks.c **** 
4908:..\FreeRTOS10/tasks.c **** 
4909:..\FreeRTOS10/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4910:..\FreeRTOS10/tasks.c **** {
 680              		.loc 1 4910 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              	.LVL70:
 685 0000 70B5     		push	{r4, r5, r6, lr}
 686              		.cfi_def_cfa_offset 16
 687              		.cfi_offset 4, -16
 688              		.cfi_offset 5, -12
 689              		.cfi_offset 6, -8
 690              		.cfi_offset 14, -4
 691 0002 0400     		movs	r4, r0
 692 0004 0D00     		movs	r5, r1
4911:..\FreeRTOS10/tasks.c **** TickType_t xTimeToWake;
4912:..\FreeRTOS10/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 693              		.loc 1 4912 0
 694 0006 154B     		ldr	r3, .L57
 695 0008 DE6E     		ldr	r6, [r3, #108]
 696              	.LVL71:
4913:..\FreeRTOS10/tasks.c **** 
4914:..\FreeRTOS10/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4915:..\FreeRTOS10/tasks.c **** 	{
4916:..\FreeRTOS10/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4917:..\FreeRTOS10/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4918:..\FreeRTOS10/tasks.c **** 		when the task leaves the Blocked state. */
4919:..\FreeRTOS10/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4920:..\FreeRTOS10/tasks.c **** 	}
4921:..\FreeRTOS10/tasks.c **** 	#endif
4922:..\FreeRTOS10/tasks.c **** 
4923:..\FreeRTOS10/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 101


4924:..\FreeRTOS10/tasks.c **** 	as the same list item is used for both lists. */
4925:..\FreeRTOS10/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 697              		.loc 1 4925 0
 698 000a 986D     		ldr	r0, [r3, #88]
 699              	.LVL72:
 700 000c 0430     		adds	r0, r0, #4
 701 000e FFF7FEFF 		bl	uxListRemove
 702              	.LVL73:
4926:..\FreeRTOS10/tasks.c **** 	{
4927:..\FreeRTOS10/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4928:..\FreeRTOS10/tasks.c **** 		check, and the port reset macro can be called directly. */
4929:..\FreeRTOS10/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4930:..\FreeRTOS10/tasks.c **** 	}
4931:..\FreeRTOS10/tasks.c **** 	else
4932:..\FreeRTOS10/tasks.c **** 	{
4933:..\FreeRTOS10/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4934:..\FreeRTOS10/tasks.c **** 	}
4935:..\FreeRTOS10/tasks.c **** 
4936:..\FreeRTOS10/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4937:..\FreeRTOS10/tasks.c **** 	{
4938:..\FreeRTOS10/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 703              		.loc 1 4938 0
 704 0012 631C     		adds	r3, r4, #1
 705 0014 08D1     		bne	.L54
 706              		.loc 1 4938 0 is_stmt 0 discriminator 1
 707 0016 002D     		cmp	r5, #0
 708 0018 06D0     		beq	.L54
4939:..\FreeRTOS10/tasks.c **** 		{
4940:..\FreeRTOS10/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4941:..\FreeRTOS10/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4942:..\FreeRTOS10/tasks.c **** 			indefinitely. */
4943:..\FreeRTOS10/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 709              		.loc 1 4943 0 is_stmt 1
 710 001a 104B     		ldr	r3, .L57
 711 001c 996D     		ldr	r1, [r3, #88]
 712 001e 0431     		adds	r1, r1, #4
 713 0020 0F48     		ldr	r0, .L57+4
 714 0022 FFF7FEFF 		bl	vListInsertEnd
 715              	.LVL74:
 716 0026 18E0     		b	.L53
 717              	.L54:
4944:..\FreeRTOS10/tasks.c **** 		}
4945:..\FreeRTOS10/tasks.c **** 		else
4946:..\FreeRTOS10/tasks.c **** 		{
4947:..\FreeRTOS10/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4948:..\FreeRTOS10/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4949:..\FreeRTOS10/tasks.c **** 			kernel will manage it correctly. */
4950:..\FreeRTOS10/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 718              		.loc 1 4950 0
 719 0028 3419     		adds	r4, r6, r4
 720              	.LVL75:
4951:..\FreeRTOS10/tasks.c **** 
4952:..\FreeRTOS10/tasks.c **** 			/* The list item will be inserted in wake time order. */
4953:..\FreeRTOS10/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 721              		.loc 1 4953 0
 722 002a 0C4B     		ldr	r3, .L57
 723 002c 9B6D     		ldr	r3, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 102


 724 002e 5C60     		str	r4, [r3, #4]
4954:..\FreeRTOS10/tasks.c **** 
4955:..\FreeRTOS10/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 725              		.loc 1 4955 0
 726 0030 A642     		cmp	r6, r4
 727 0032 06D9     		bls	.L56
4956:..\FreeRTOS10/tasks.c **** 			{
4957:..\FreeRTOS10/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4958:..\FreeRTOS10/tasks.c **** 				list. */
4959:..\FreeRTOS10/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 728              		.loc 1 4959 0
 729 0034 094B     		ldr	r3, .L57
 730 0036 186D     		ldr	r0, [r3, #80]
 731 0038 996D     		ldr	r1, [r3, #88]
 732 003a 0431     		adds	r1, r1, #4
 733 003c FFF7FEFF 		bl	vListInsert
 734              	.LVL76:
 735 0040 0BE0     		b	.L53
 736              	.L56:
4960:..\FreeRTOS10/tasks.c **** 			}
4961:..\FreeRTOS10/tasks.c **** 			else
4962:..\FreeRTOS10/tasks.c **** 			{
4963:..\FreeRTOS10/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4964:..\FreeRTOS10/tasks.c **** 				is used. */
4965:..\FreeRTOS10/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 737              		.loc 1 4965 0
 738 0042 074D     		ldr	r5, .L57+4
 739              	.LVL77:
 740 0044 A86A     		ldr	r0, [r5, #40]
 741 0046 054B     		ldr	r3, .L57
 742 0048 996D     		ldr	r1, [r3, #88]
 743 004a 0431     		adds	r1, r1, #4
 744 004c FFF7FEFF 		bl	vListInsert
 745              	.LVL78:
4966:..\FreeRTOS10/tasks.c **** 
4967:..\FreeRTOS10/tasks.c **** 				/* If the task entering the blocked state was placed at the
4968:..\FreeRTOS10/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4969:..\FreeRTOS10/tasks.c **** 				needs to be updated too. */
4970:..\FreeRTOS10/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 746              		.loc 1 4970 0
 747 0050 EB6A     		ldr	r3, [r5, #44]
 748 0052 9C42     		cmp	r4, r3
 749 0054 01D2     		bcs	.L53
4971:..\FreeRTOS10/tasks.c **** 				{
4972:..\FreeRTOS10/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 750              		.loc 1 4972 0
 751 0056 024B     		ldr	r3, .L57+4
 752 0058 DC62     		str	r4, [r3, #44]
 753              	.LVL79:
 754              	.L53:
4973:..\FreeRTOS10/tasks.c **** 				}
4974:..\FreeRTOS10/tasks.c **** 				else
4975:..\FreeRTOS10/tasks.c **** 				{
4976:..\FreeRTOS10/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4977:..\FreeRTOS10/tasks.c **** 				}
4978:..\FreeRTOS10/tasks.c **** 			}
4979:..\FreeRTOS10/tasks.c **** 		}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 103


4980:..\FreeRTOS10/tasks.c **** 	}
4981:..\FreeRTOS10/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4982:..\FreeRTOS10/tasks.c **** 	{
4983:..\FreeRTOS10/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4984:..\FreeRTOS10/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4985:..\FreeRTOS10/tasks.c **** 		will manage it correctly. */
4986:..\FreeRTOS10/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4987:..\FreeRTOS10/tasks.c **** 
4988:..\FreeRTOS10/tasks.c **** 		/* The list item will be inserted in wake time order. */
4989:..\FreeRTOS10/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4990:..\FreeRTOS10/tasks.c **** 
4991:..\FreeRTOS10/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4992:..\FreeRTOS10/tasks.c **** 		{
4993:..\FreeRTOS10/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4994:..\FreeRTOS10/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4995:..\FreeRTOS10/tasks.c **** 		}
4996:..\FreeRTOS10/tasks.c **** 		else
4997:..\FreeRTOS10/tasks.c **** 		{
4998:..\FreeRTOS10/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4999:..\FreeRTOS10/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5000:..\FreeRTOS10/tasks.c **** 
5001:..\FreeRTOS10/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5002:..\FreeRTOS10/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5003:..\FreeRTOS10/tasks.c **** 			too. */
5004:..\FreeRTOS10/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5005:..\FreeRTOS10/tasks.c **** 			{
5006:..\FreeRTOS10/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5007:..\FreeRTOS10/tasks.c **** 			}
5008:..\FreeRTOS10/tasks.c **** 			else
5009:..\FreeRTOS10/tasks.c **** 			{
5010:..\FreeRTOS10/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5011:..\FreeRTOS10/tasks.c **** 			}
5012:..\FreeRTOS10/tasks.c **** 		}
5013:..\FreeRTOS10/tasks.c **** 
5014:..\FreeRTOS10/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5015:..\FreeRTOS10/tasks.c **** 		( void ) xCanBlockIndefinitely;
5016:..\FreeRTOS10/tasks.c **** 	}
5017:..\FreeRTOS10/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5018:..\FreeRTOS10/tasks.c **** }
 755              		.loc 1 5018 0
 756              		@ sp needed
 757              	.LVL80:
 758 005a 70BD     		pop	{r4, r5, r6, pc}
 759              	.L58:
 760              		.align	2
 761              	.L57:
 762 005c 80000000 		.word	.LANCHOR1
 763 0060 00000000 		.word	.LANCHOR0
 764              		.cfi_endproc
 765              	.LFE86:
 766              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 767              		.section	.text.xTaskCreate,"ax",%progbits
 768              		.align	2
 769              		.global	xTaskCreate
 770              		.code	16
 771              		.thumb_func
 772              		.type	xTaskCreate, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 104


 773              	xTaskCreate:
 774              	.LFB32:
 738:..\FreeRTOS10/tasks.c **** 	TCB_t *pxNewTCB;
 775              		.loc 1 738 0
 776              		.cfi_startproc
 777              		@ args = 8, pretend = 0, frame = 8
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              	.LVL81:
 780 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 781              		.cfi_def_cfa_offset 20
 782              		.cfi_offset 4, -20
 783              		.cfi_offset 5, -16
 784              		.cfi_offset 6, -12
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 87B0     		sub	sp, sp, #28
 788              		.cfi_def_cfa_offset 48
 789 0004 0490     		str	r0, [sp, #16]
 790 0006 0591     		str	r1, [sp, #20]
 791 0008 1400     		movs	r4, r2
 792 000a 1F00     		movs	r7, r3
 793              	.LBB3:
 772:..\FreeRTOS10/tasks.c **** 
 794              		.loc 1 772 0
 795 000c 9000     		lsls	r0, r2, #2
 796              	.LVL82:
 797 000e FFF7FEFF 		bl	pvPortMalloc
 798              	.LVL83:
 799 0012 061E     		subs	r6, r0, #0
 800              	.LVL84:
 774:..\FreeRTOS10/tasks.c **** 			{
 801              		.loc 1 774 0
 802 0014 0AD0     		beq	.L63
 777:..\FreeRTOS10/tasks.c **** 
 803              		.loc 1 777 0
 804 0016 6820     		movs	r0, #104
 805              	.LVL85:
 806 0018 FFF7FEFF 		bl	pvPortMalloc
 807              	.LVL86:
 808 001c 051E     		subs	r5, r0, #0
 809              	.LVL87:
 779:..\FreeRTOS10/tasks.c **** 				{
 810              		.loc 1 779 0
 811 001e 01D0     		beq	.L61
 782:..\FreeRTOS10/tasks.c **** 				}
 812              		.loc 1 782 0
 813 0020 0663     		str	r6, [r0, #48]
 814 0022 04E0     		b	.L60
 815              	.L61:
 788:..\FreeRTOS10/tasks.c **** 				}
 816              		.loc 1 788 0
 817 0024 3000     		movs	r0, r6
 818              	.LVL88:
 819 0026 FFF7FEFF 		bl	vPortFree
 820              	.LVL89:
 821 002a 00E0     		b	.L60
 822              	.LVL90:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 105


 823              	.L63:
 793:..\FreeRTOS10/tasks.c **** 			}
 824              		.loc 1 793 0
 825 002c 0025     		movs	r5, #0
 826              	.LVL91:
 827              	.L60:
 828              	.LBE3:
 798:..\FreeRTOS10/tasks.c **** 		{
 829              		.loc 1 798 0
 830 002e 002D     		cmp	r5, #0
 831 0030 11D0     		beq	.L64
 808:..\FreeRTOS10/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 832              		.loc 1 808 0
 833 0032 0023     		movs	r3, #0
 834 0034 0393     		str	r3, [sp, #12]
 835 0036 0295     		str	r5, [sp, #8]
 836 0038 0D9B     		ldr	r3, [sp, #52]
 837 003a 0193     		str	r3, [sp, #4]
 838 003c 0C9B     		ldr	r3, [sp, #48]
 839 003e 0093     		str	r3, [sp]
 840 0040 3B00     		movs	r3, r7
 841 0042 2200     		movs	r2, r4
 842 0044 0599     		ldr	r1, [sp, #20]
 843 0046 0498     		ldr	r0, [sp, #16]
 844 0048 FFF7FEFF 		bl	prvInitialiseNewTask
 845              	.LVL92:
 809:..\FreeRTOS10/tasks.c **** 			xReturn = pdPASS;
 846              		.loc 1 809 0
 847 004c 2800     		movs	r0, r5
 848 004e FFF7FEFF 		bl	prvAddNewTaskToReadyList
 849              	.LVL93:
 810:..\FreeRTOS10/tasks.c **** 		}
 850              		.loc 1 810 0
 851 0052 0120     		movs	r0, #1
 852 0054 01E0     		b	.L62
 853              	.LVL94:
 854              	.L64:
 814:..\FreeRTOS10/tasks.c **** 		}
 855              		.loc 1 814 0
 856 0056 0120     		movs	r0, #1
 857 0058 4042     		rsbs	r0, r0, #0
 858              	.L62:
 859              	.LVL95:
 818:..\FreeRTOS10/tasks.c **** 
 860              		.loc 1 818 0
 861 005a 07B0     		add	sp, sp, #28
 862              		@ sp needed
 863              	.LVL96:
 864              	.LVL97:
 865              	.LVL98:
 866 005c F0BD     		pop	{r4, r5, r6, r7, pc}
 867              		.cfi_endproc
 868              	.LFE32:
 869              		.size	xTaskCreate, .-xTaskCreate
 870 005e C046     		.section	.text.vTaskDelete,"ax",%progbits
 871              		.align	2
 872              		.global	vTaskDelete
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 106


 873              		.code	16
 874              		.thumb_func
 875              		.type	vTaskDelete, %function
 876              	vTaskDelete:
 877              	.LFB35:
1113:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 878              		.loc 1 1113 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 0
 881              		@ frame_needed = 0, uses_anonymous_args = 0
 882              	.LVL99:
 883 0000 70B5     		push	{r4, r5, r6, lr}
 884              		.cfi_def_cfa_offset 16
 885              		.cfi_offset 4, -16
 886              		.cfi_offset 5, -12
 887              		.cfi_offset 6, -8
 888              		.cfi_offset 14, -4
 889 0002 0400     		movs	r4, r0
1116:..\FreeRTOS10/tasks.c **** 		{
 890              		.loc 1 1116 0
 891 0004 FFF7FEFF 		bl	vPortEnterCritical
 892              	.LVL100:
1120:..\FreeRTOS10/tasks.c **** 
 893              		.loc 1 1120 0
 894 0008 002C     		cmp	r4, #0
 895 000a 01D1     		bne	.L66
1120:..\FreeRTOS10/tasks.c **** 
 896              		.loc 1 1120 0 is_stmt 0 discriminator 1
 897 000c 194B     		ldr	r3, .L71
 898 000e 9C6D     		ldr	r4, [r3, #88]
 899              	.LVL101:
 900              	.L66:
1123:..\FreeRTOS10/tasks.c **** 			{
 901              		.loc 1 1123 0 is_stmt 1 discriminator 4
 902 0010 251D     		adds	r5, r4, #4
 903 0012 2800     		movs	r0, r5
 904 0014 FFF7FEFF 		bl	uxListRemove
 905              	.LVL102:
1133:..\FreeRTOS10/tasks.c **** 			{
 906              		.loc 1 1133 0 discriminator 4
 907 0018 A36A     		ldr	r3, [r4, #40]
 908 001a 002B     		cmp	r3, #0
 909 001c 03D0     		beq	.L67
1135:..\FreeRTOS10/tasks.c **** 			}
 910              		.loc 1 1135 0
 911 001e 2000     		movs	r0, r4
 912 0020 1830     		adds	r0, r0, #24
 913 0022 FFF7FEFF 		bl	uxListRemove
 914              	.LVL103:
 915              	.L67:
1146:..\FreeRTOS10/tasks.c **** 
 916              		.loc 1 1146 0
 917 0026 134B     		ldr	r3, .L71
 918 0028 1A6E     		ldr	r2, [r3, #96]
 919 002a 0132     		adds	r2, r2, #1
 920 002c 1A66     		str	r2, [r3, #96]
1148:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 107


 921              		.loc 1 1148 0
 922 002e 9B6D     		ldr	r3, [r3, #88]
 923 0030 9C42     		cmp	r4, r3
 924 0032 09D1     		bne	.L68
1155:..\FreeRTOS10/tasks.c **** 
 925              		.loc 1 1155 0
 926 0034 0F4E     		ldr	r6, .L71
 927 0036 3000     		movs	r0, r6
 928 0038 3C30     		adds	r0, r0, #60
 929 003a 2900     		movs	r1, r5
 930 003c FFF7FEFF 		bl	vListInsertEnd
 931              	.LVL104:
1160:..\FreeRTOS10/tasks.c **** 
 932              		.loc 1 1160 0
 933 0040 B36E     		ldr	r3, [r6, #104]
 934 0042 0133     		adds	r3, r3, #1
 935 0044 B366     		str	r3, [r6, #104]
 936 0046 08E0     		b	.L69
 937              	.L68:
1171:..\FreeRTOS10/tasks.c **** 				prvDeleteTCB( pxTCB );
 938              		.loc 1 1171 0
 939 0048 0A4A     		ldr	r2, .L71
 940 004a 536D     		ldr	r3, [r2, #84]
 941 004c 013B     		subs	r3, r3, #1
 942 004e 5365     		str	r3, [r2, #84]
1172:..\FreeRTOS10/tasks.c **** 
 943              		.loc 1 1172 0
 944 0050 2000     		movs	r0, r4
 945 0052 FFF7FEFF 		bl	prvDeleteTCB
 946              	.LVL105:
1176:..\FreeRTOS10/tasks.c **** 			}
 947              		.loc 1 1176 0
 948 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 949              	.LVL106:
 950              	.L69:
1181:..\FreeRTOS10/tasks.c **** 
 951              		.loc 1 1181 0
 952 005a FFF7FEFF 		bl	vPortExitCritical
 953              	.LVL107:
1185:..\FreeRTOS10/tasks.c **** 		{
 954              		.loc 1 1185 0
 955 005e 054B     		ldr	r3, .L71
 956 0060 DB6D     		ldr	r3, [r3, #92]
 957 0062 002B     		cmp	r3, #0
 958 0064 05D0     		beq	.L65
1187:..\FreeRTOS10/tasks.c **** 			{
 959              		.loc 1 1187 0
 960 0066 034B     		ldr	r3, .L71
 961 0068 9B6D     		ldr	r3, [r3, #88]
 962 006a 9C42     		cmp	r4, r3
 963 006c 01D1     		bne	.L65
1190:..\FreeRTOS10/tasks.c **** 			}
 964              		.loc 1 1190 0
 965 006e FFF7FEFF 		bl	vPortYield
 966              	.LVL108:
 967              	.L65:
1197:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 108


 968              		.loc 1 1197 0
 969              		@ sp needed
 970              	.LVL109:
 971              	.LVL110:
 972 0072 70BD     		pop	{r4, r5, r6, pc}
 973              	.L72:
 974              		.align	2
 975              	.L71:
 976 0074 80000000 		.word	.LANCHOR1
 977              		.cfi_endproc
 978              	.LFE35:
 979              		.size	vTaskDelete, .-vTaskDelete
 980              		.section	.text.eTaskGetState,"ax",%progbits
 981              		.align	2
 982              		.global	eTaskGetState
 983              		.code	16
 984              		.thumb_func
 985              		.type	eTaskGetState, %function
 986              	eTaskGetState:
 987              	.LFB38:
1334:..\FreeRTOS10/tasks.c **** 	eTaskState eReturn;
 988              		.loc 1 1334 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              	.LVL111:
 993 0000 70B5     		push	{r4, r5, r6, lr}
 994              		.cfi_def_cfa_offset 16
 995              		.cfi_offset 4, -16
 996              		.cfi_offset 5, -12
 997              		.cfi_offset 6, -8
 998              		.cfi_offset 14, -4
 999 0002 0500     		movs	r5, r0
 1000              	.LVL112:
1341:..\FreeRTOS10/tasks.c **** 		{
 1001              		.loc 1 1341 0
 1002 0004 164B     		ldr	r3, .L82
 1003 0006 9B6D     		ldr	r3, [r3, #88]
 1004 0008 9842     		cmp	r0, r3
 1005 000a 1CD0     		beq	.L76
1348:..\FreeRTOS10/tasks.c **** 			{
 1006              		.loc 1 1348 0
 1007 000c FFF7FEFF 		bl	vPortEnterCritical
 1008              	.LVL113:
1350:..\FreeRTOS10/tasks.c **** 			}
 1009              		.loc 1 1350 0
 1010 0010 6C69     		ldr	r4, [r5, #20]
 1011              	.LVL114:
1352:..\FreeRTOS10/tasks.c **** 
 1012              		.loc 1 1352 0
 1013 0012 FFF7FEFF 		bl	vPortExitCritical
 1014              	.LVL115:
1354:..\FreeRTOS10/tasks.c **** 			{
 1015              		.loc 1 1354 0
 1016 0016 134B     		ldr	r3, .L82+4
 1017 0018 9B6A     		ldr	r3, [r3, #40]
 1018 001a 9C42     		cmp	r4, r3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 109


 1019 001c 15D0     		beq	.L77
1354:..\FreeRTOS10/tasks.c **** 			{
 1020              		.loc 1 1354 0 is_stmt 0 discriminator 1
 1021 001e 104B     		ldr	r3, .L82
 1022 0020 1B6D     		ldr	r3, [r3, #80]
 1023 0022 9C42     		cmp	r4, r3
 1024 0024 13D0     		beq	.L78
1362:..\FreeRTOS10/tasks.c **** 				{
 1025              		.loc 1 1362 0 is_stmt 1
 1026 0026 0F4B     		ldr	r3, .L82+4
 1027 0028 9C42     		cmp	r4, r3
 1028 002a 04D1     		bne	.L75
1367:..\FreeRTOS10/tasks.c **** 					{
 1029              		.loc 1 1367 0
 1030 002c AB6A     		ldr	r3, [r5, #40]
 1031 002e 002B     		cmp	r3, #0
 1032 0030 0FD1     		bne	.L79
1369:..\FreeRTOS10/tasks.c **** 					}
 1033              		.loc 1 1369 0
 1034 0032 0320     		movs	r0, #3
 1035 0034 12E0     		b	.L74
 1036              	.L75:
1379:..\FreeRTOS10/tasks.c **** 				{
 1037              		.loc 1 1379 0
 1038 0036 0A4B     		ldr	r3, .L82
 1039 0038 3C33     		adds	r3, r3, #60
 1040 003a 9C42     		cmp	r4, r3
 1041 003c 0BD0     		beq	.L80
1379:..\FreeRTOS10/tasks.c **** 				{
 1042              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1043 003e 002C     		cmp	r4, #0
 1044 0040 0BD1     		bne	.L81
1384:..\FreeRTOS10/tasks.c **** 				}
 1045              		.loc 1 1384 0 is_stmt 1
 1046 0042 0420     		movs	r0, #4
 1047 0044 0AE0     		b	.L74
 1048              	.LVL116:
 1049              	.L76:
1344:..\FreeRTOS10/tasks.c **** 		}
 1050              		.loc 1 1344 0
 1051 0046 0020     		movs	r0, #0
 1052              	.LVL117:
 1053 0048 08E0     		b	.L74
 1054              	.LVL118:
 1055              	.L77:
1358:..\FreeRTOS10/tasks.c **** 			}
 1056              		.loc 1 1358 0
 1057 004a 0220     		movs	r0, #2
 1058 004c 06E0     		b	.L74
 1059              	.L78:
 1060 004e 0220     		movs	r0, #2
 1061 0050 04E0     		b	.L74
 1062              	.L79:
1373:..\FreeRTOS10/tasks.c **** 					}
 1063              		.loc 1 1373 0
 1064 0052 0220     		movs	r0, #2
 1065 0054 02E0     		b	.L74
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 110


 1066              	.L80:
1384:..\FreeRTOS10/tasks.c **** 				}
 1067              		.loc 1 1384 0
 1068 0056 0420     		movs	r0, #4
 1069 0058 00E0     		b	.L74
 1070              	.L81:
1392:..\FreeRTOS10/tasks.c **** 			}
 1071              		.loc 1 1392 0
 1072 005a 0120     		movs	r0, #1
 1073              	.LVL119:
 1074              	.L74:
1397:..\FreeRTOS10/tasks.c **** 
 1075              		.loc 1 1397 0
 1076              		@ sp needed
 1077              	.LVL120:
 1078 005c 70BD     		pop	{r4, r5, r6, pc}
 1079              	.L83:
 1080 005e C046     		.align	2
 1081              	.L82:
 1082 0060 80000000 		.word	.LANCHOR1
 1083 0064 00000000 		.word	.LANCHOR0
 1084              		.cfi_endproc
 1085              	.LFE38:
 1086              		.size	eTaskGetState, .-eTaskGetState
 1087              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1088              		.align	2
 1089              		.global	uxTaskPriorityGet
 1090              		.code	16
 1091              		.thumb_func
 1092              		.type	uxTaskPriorityGet, %function
 1093              	uxTaskPriorityGet:
 1094              	.LFB39:
1405:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 1095              		.loc 1 1405 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL121:
 1100 0000 10B5     		push	{r4, lr}
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 4, -8
 1103              		.cfi_offset 14, -4
 1104 0002 0400     		movs	r4, r0
1409:..\FreeRTOS10/tasks.c **** 		{
 1105              		.loc 1 1409 0
 1106 0004 FFF7FEFF 		bl	vPortEnterCritical
 1107              	.LVL122:
1413:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1108              		.loc 1 1413 0
 1109 0008 002C     		cmp	r4, #0
 1110 000a 01D1     		bne	.L85
1413:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1111              		.loc 1 1413 0 is_stmt 0 discriminator 1
 1112 000c 034B     		ldr	r3, .L86
 1113 000e 9C6D     		ldr	r4, [r3, #88]
 1114              	.LVL123:
 1115              	.L85:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 111


1414:..\FreeRTOS10/tasks.c **** 		}
 1116              		.loc 1 1414 0 is_stmt 1 discriminator 4
 1117 0010 E46A     		ldr	r4, [r4, #44]
 1118              	.LVL124:
1416:..\FreeRTOS10/tasks.c **** 
 1119              		.loc 1 1416 0 discriminator 4
 1120 0012 FFF7FEFF 		bl	vPortExitCritical
 1121              	.LVL125:
1419:..\FreeRTOS10/tasks.c **** 
 1122              		.loc 1 1419 0 discriminator 4
 1123 0016 2000     		movs	r0, r4
 1124              		@ sp needed
 1125              	.LVL126:
 1126 0018 10BD     		pop	{r4, pc}
 1127              	.L87:
 1128 001a C046     		.align	2
 1129              	.L86:
 1130 001c 80000000 		.word	.LANCHOR1
 1131              		.cfi_endproc
 1132              	.LFE39:
 1133              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1134              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1135              		.align	2
 1136              		.global	uxTaskPriorityGetFromISR
 1137              		.code	16
 1138              		.thumb_func
 1139              		.type	uxTaskPriorityGetFromISR, %function
 1140              	uxTaskPriorityGetFromISR:
 1141              	.LFB40:
1427:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 1142              		.loc 1 1427 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 0
 1145              		@ frame_needed = 0, uses_anonymous_args = 0
 1146              	.LVL127:
 1147 0000 10B5     		push	{r4, lr}
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
 1151 0002 0400     		movs	r4, r0
1449:..\FreeRTOS10/tasks.c **** 		{
 1152              		.loc 1 1449 0
 1153 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1154              	.LVL128:
1453:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1155              		.loc 1 1453 0
 1156 0008 002C     		cmp	r4, #0
 1157 000a 01D1     		bne	.L89
1453:..\FreeRTOS10/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1158              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1159 000c 034B     		ldr	r3, .L90
 1160 000e 9C6D     		ldr	r4, [r3, #88]
 1161              	.LVL129:
 1162              	.L89:
1454:..\FreeRTOS10/tasks.c **** 		}
 1163              		.loc 1 1454 0 is_stmt 1 discriminator 4
 1164 0010 E46A     		ldr	r4, [r4, #44]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 112


 1165              	.LVL130:
1456:..\FreeRTOS10/tasks.c **** 
 1166              		.loc 1 1456 0 discriminator 4
 1167 0012 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1168              	.LVL131:
1459:..\FreeRTOS10/tasks.c **** 
 1169              		.loc 1 1459 0 discriminator 4
 1170 0016 2000     		movs	r0, r4
 1171              		@ sp needed
 1172              	.LVL132:
 1173 0018 10BD     		pop	{r4, pc}
 1174              	.L91:
 1175 001a C046     		.align	2
 1176              	.L90:
 1177 001c 80000000 		.word	.LANCHOR1
 1178              		.cfi_endproc
 1179              	.LFE40:
 1180              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1181              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1182              		.align	2
 1183              		.global	vTaskPrioritySet
 1184              		.code	16
 1185              		.thumb_func
 1186              		.type	vTaskPrioritySet, %function
 1187              	vTaskPrioritySet:
 1188              	.LFB41:
1467:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 1189              		.loc 1 1467 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              	.LVL133:
 1194 0000 70B5     		push	{r4, r5, r6, lr}
 1195              		.cfi_def_cfa_offset 16
 1196              		.cfi_offset 4, -16
 1197              		.cfi_offset 5, -12
 1198              		.cfi_offset 6, -8
 1199              		.cfi_offset 14, -4
 1200 0002 0400     		movs	r4, r0
 1201 0004 0D00     		movs	r5, r1
 1202              	.LVL134:
1475:..\FreeRTOS10/tasks.c **** 		{
 1203              		.loc 1 1475 0
 1204 0006 0429     		cmp	r1, #4
 1205 0008 00D9     		bls	.L93
1477:..\FreeRTOS10/tasks.c **** 		}
 1206              		.loc 1 1477 0
 1207 000a 0425     		movs	r5, #4
 1208              	.L93:
 1209              	.LVL135:
1484:..\FreeRTOS10/tasks.c **** 		{
 1210              		.loc 1 1484 0
 1211 000c FFF7FEFF 		bl	vPortEnterCritical
 1212              	.LVL136:
1488:..\FreeRTOS10/tasks.c **** 
 1213              		.loc 1 1488 0
 1214 0010 002C     		cmp	r4, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 113


 1215 0012 01D1     		bne	.L94
1488:..\FreeRTOS10/tasks.c **** 
 1216              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1217 0014 274B     		ldr	r3, .L108
 1218 0016 9C6D     		ldr	r4, [r3, #88]
 1219              	.LVL137:
 1220              	.L94:
1494:..\FreeRTOS10/tasks.c **** 			}
 1221              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1222 0018 626C     		ldr	r2, [r4, #68]
 1223              	.LVL138:
1502:..\FreeRTOS10/tasks.c **** 			{
 1224              		.loc 1 1502 0 discriminator 4
 1225 001a 9542     		cmp	r5, r2
 1226 001c 47D0     		beq	.L95
1506:..\FreeRTOS10/tasks.c **** 				{
 1227              		.loc 1 1506 0
 1228 001e 0AD9     		bls	.L96
1508:..\FreeRTOS10/tasks.c **** 					{
 1229              		.loc 1 1508 0
 1230 0020 244B     		ldr	r3, .L108
 1231 0022 9B6D     		ldr	r3, [r3, #88]
 1232 0024 9C42     		cmp	r4, r3
 1233 0026 0CD0     		beq	.L104
1513:..\FreeRTOS10/tasks.c **** 						{
 1234              		.loc 1 1513 0
 1235 0028 224B     		ldr	r3, .L108
 1236 002a 9B6D     		ldr	r3, [r3, #88]
 1237 002c DB6A     		ldr	r3, [r3, #44]
 1238 002e 9D42     		cmp	r5, r3
 1239 0030 09D2     		bcs	.L105
1470:..\FreeRTOS10/tasks.c **** 
 1240              		.loc 1 1470 0
 1241 0032 0026     		movs	r6, #0
 1242 0034 0AE0     		b	.L97
 1243              	.L96:
1529:..\FreeRTOS10/tasks.c **** 				{
 1244              		.loc 1 1529 0
 1245 0036 1F4B     		ldr	r3, .L108
 1246 0038 9B6D     		ldr	r3, [r3, #88]
 1247 003a 9C42     		cmp	r4, r3
 1248 003c 05D0     		beq	.L106
1470:..\FreeRTOS10/tasks.c **** 
 1249              		.loc 1 1470 0
 1250 003e 0026     		movs	r6, #0
 1251 0040 04E0     		b	.L97
 1252              	.L104:
 1253 0042 0026     		movs	r6, #0
 1254 0044 02E0     		b	.L97
 1255              	.L105:
1515:..\FreeRTOS10/tasks.c **** 						}
 1256              		.loc 1 1515 0
 1257 0046 0126     		movs	r6, #1
 1258 0048 00E0     		b	.L97
 1259              	.L106:
1534:..\FreeRTOS10/tasks.c **** 				}
 1260              		.loc 1 1534 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 114


 1261 004a 0126     		movs	r6, #1
 1262              	.L97:
 1263              	.LVL139:
1546:..\FreeRTOS10/tasks.c **** 
 1264              		.loc 1 1546 0
 1265 004c E36A     		ldr	r3, [r4, #44]
 1266              	.LVL140:
1552:..\FreeRTOS10/tasks.c **** 					{
 1267              		.loc 1 1552 0
 1268 004e 9A42     		cmp	r2, r3
 1269 0050 00D1     		bne	.L98
1554:..\FreeRTOS10/tasks.c **** 					}
 1270              		.loc 1 1554 0
 1271 0052 E562     		str	r5, [r4, #44]
 1272              	.L98:
1562:..\FreeRTOS10/tasks.c **** 				}
 1273              		.loc 1 1562 0
 1274 0054 6564     		str	r5, [r4, #68]
1572:..\FreeRTOS10/tasks.c **** 				{
 1275              		.loc 1 1572 0
 1276 0056 A269     		ldr	r2, [r4, #24]
 1277              	.LVL141:
 1278 0058 002A     		cmp	r2, #0
 1279 005a 02DB     		blt	.L99
1574:..\FreeRTOS10/tasks.c **** 				}
 1280              		.loc 1 1574 0
 1281 005c 0522     		movs	r2, #5
 1282 005e 551B     		subs	r5, r2, r5
 1283              	.LVL142:
 1284 0060 A561     		str	r5, [r4, #24]
 1285              	.L99:
1585:..\FreeRTOS10/tasks.c **** 				{
 1286              		.loc 1 1585 0
 1287 0062 9A00     		lsls	r2, r3, #2
 1288 0064 D318     		adds	r3, r2, r3
 1289              	.LVL143:
 1290 0066 9A00     		lsls	r2, r3, #2
 1291 0068 134B     		ldr	r3, .L108+4
 1292 006a 3033     		adds	r3, r3, #48
 1293 006c 9A18     		adds	r2, r3, r2
 1294 006e 6369     		ldr	r3, [r4, #20]
 1295 0070 9342     		cmp	r3, r2
 1296 0072 01D1     		bne	.L107
 1297 0074 0123     		movs	r3, #1
 1298 0076 00E0     		b	.L100
 1299              	.L107:
 1300 0078 0023     		movs	r3, #0
 1301              	.L100:
1585:..\FreeRTOS10/tasks.c **** 				{
 1302              		.loc 1 1585 0 is_stmt 0 discriminator 4
 1303 007a 002B     		cmp	r3, #0
 1304 007c 13D0     		beq	.L101
1590:..\FreeRTOS10/tasks.c **** 					{
 1305              		.loc 1 1590 0 is_stmt 1
 1306 007e 251D     		adds	r5, r4, #4
 1307 0080 2800     		movs	r0, r5
 1308 0082 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 115


 1309              	.LVL144:
1601:..\FreeRTOS10/tasks.c **** 				}
 1310              		.loc 1 1601 0
 1311 0086 E36A     		ldr	r3, [r4, #44]
 1312 0088 0A4A     		ldr	r2, .L108
 1313 008a 526E     		ldr	r2, [r2, #100]
 1314 008c 9342     		cmp	r3, r2
 1315 008e 01D9     		bls	.L102
1601:..\FreeRTOS10/tasks.c **** 				}
 1316              		.loc 1 1601 0 is_stmt 0 discriminator 1
 1317 0090 084A     		ldr	r2, .L108
 1318 0092 5366     		str	r3, [r2, #100]
 1319              	.L102:
1601:..\FreeRTOS10/tasks.c **** 				}
 1320              		.loc 1 1601 0 discriminator 3
 1321 0094 9A00     		lsls	r2, r3, #2
 1322 0096 D318     		adds	r3, r2, r3
 1323 0098 9A00     		lsls	r2, r3, #2
 1324 009a 0748     		ldr	r0, .L108+4
 1325 009c 3030     		adds	r0, r0, #48
 1326 009e 8018     		adds	r0, r0, r2
 1327 00a0 2900     		movs	r1, r5
 1328 00a2 FFF7FEFF 		bl	vListInsertEnd
 1329              	.LVL145:
 1330              	.L101:
1608:..\FreeRTOS10/tasks.c **** 				{
 1331              		.loc 1 1608 0 is_stmt 1
 1332 00a6 002E     		cmp	r6, #0
 1333 00a8 01D0     		beq	.L95
1610:..\FreeRTOS10/tasks.c **** 				}
 1334              		.loc 1 1610 0
 1335 00aa FFF7FEFF 		bl	vPortYield
 1336              	.LVL146:
 1337              	.L95:
1622:..\FreeRTOS10/tasks.c **** 	}
 1338              		.loc 1 1622 0
 1339 00ae FFF7FEFF 		bl	vPortExitCritical
 1340              	.LVL147:
1623:..\FreeRTOS10/tasks.c **** 
 1341              		.loc 1 1623 0
 1342              		@ sp needed
 1343              	.LVL148:
 1344 00b2 70BD     		pop	{r4, r5, r6, pc}
 1345              	.L109:
 1346              		.align	2
 1347              	.L108:
 1348 00b4 80000000 		.word	.LANCHOR1
 1349 00b8 00000000 		.word	.LANCHOR0
 1350              		.cfi_endproc
 1351              	.LFE41:
 1352              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1353              		.section	.text.vTaskResume,"ax",%progbits
 1354              		.align	2
 1355              		.global	vTaskResume
 1356              		.code	16
 1357              		.thumb_func
 1358              		.type	vTaskResume, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 116


 1359              	vTaskResume:
 1360              	.LFB44:
1778:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1361              		.loc 1 1778 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              	.LVL149:
 1366 0000 70B5     		push	{r4, r5, r6, lr}
 1367              		.cfi_def_cfa_offset 16
 1368              		.cfi_offset 4, -16
 1369              		.cfi_offset 5, -12
 1370              		.cfi_offset 6, -8
 1371              		.cfi_offset 14, -4
 1372 0002 041E     		subs	r4, r0, #0
 1373              	.LVL150:
1786:..\FreeRTOS10/tasks.c **** 		{
 1374              		.loc 1 1786 0
 1375 0004 28D0     		beq	.L110
1786:..\FreeRTOS10/tasks.c **** 		{
 1376              		.loc 1 1786 0 is_stmt 0 discriminator 1
 1377 0006 154B     		ldr	r3, .L114
 1378 0008 9B6D     		ldr	r3, [r3, #88]
 1379 000a 9842     		cmp	r0, r3
 1380 000c 24D0     		beq	.L110
1788:..\FreeRTOS10/tasks.c **** 			{
 1381              		.loc 1 1788 0 is_stmt 1
 1382 000e FFF7FEFF 		bl	vPortEnterCritical
 1383              	.LVL151:
1790:..\FreeRTOS10/tasks.c **** 				{
 1384              		.loc 1 1790 0
 1385 0012 2000     		movs	r0, r4
 1386 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1387              	.LVL152:
 1388 0018 0028     		cmp	r0, #0
 1389 001a 1BD0     		beq	.L112
1796:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1390              		.loc 1 1796 0
 1391 001c 251D     		adds	r5, r4, #4
 1392 001e 2800     		movs	r0, r5
 1393 0020 FFF7FEFF 		bl	uxListRemove
 1394              	.LVL153:
1797:..\FreeRTOS10/tasks.c **** 
 1395              		.loc 1 1797 0
 1396 0024 E36A     		ldr	r3, [r4, #44]
 1397 0026 0D4A     		ldr	r2, .L114
 1398 0028 526E     		ldr	r2, [r2, #100]
 1399 002a 9342     		cmp	r3, r2
 1400 002c 01D9     		bls	.L113
1797:..\FreeRTOS10/tasks.c **** 
 1401              		.loc 1 1797 0 is_stmt 0 discriminator 1
 1402 002e 0B4A     		ldr	r2, .L114
 1403 0030 5366     		str	r3, [r2, #100]
 1404              	.L113:
1797:..\FreeRTOS10/tasks.c **** 
 1405              		.loc 1 1797 0 discriminator 3
 1406 0032 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 117


 1407 0034 D318     		adds	r3, r2, r3
 1408 0036 9A00     		lsls	r2, r3, #2
 1409 0038 0948     		ldr	r0, .L114+4
 1410 003a 3030     		adds	r0, r0, #48
 1411 003c 8018     		adds	r0, r0, r2
 1412 003e 2900     		movs	r1, r5
 1413 0040 FFF7FEFF 		bl	vListInsertEnd
 1414              	.LVL154:
1800:..\FreeRTOS10/tasks.c **** 					{
 1415              		.loc 1 1800 0 is_stmt 1 discriminator 3
 1416 0044 E26A     		ldr	r2, [r4, #44]
 1417 0046 054B     		ldr	r3, .L114
 1418 0048 9B6D     		ldr	r3, [r3, #88]
 1419 004a DB6A     		ldr	r3, [r3, #44]
 1420 004c 9A42     		cmp	r2, r3
 1421 004e 01D3     		bcc	.L112
1805:..\FreeRTOS10/tasks.c **** 					}
 1422              		.loc 1 1805 0
 1423 0050 FFF7FEFF 		bl	vPortYield
 1424              	.LVL155:
 1425              	.L112:
1817:..\FreeRTOS10/tasks.c **** 		}
 1426              		.loc 1 1817 0
 1427 0054 FFF7FEFF 		bl	vPortExitCritical
 1428              	.LVL156:
 1429              	.L110:
1823:..\FreeRTOS10/tasks.c **** 
 1430              		.loc 1 1823 0
 1431              		@ sp needed
 1432              	.LVL157:
 1433 0058 70BD     		pop	{r4, r5, r6, pc}
 1434              	.L115:
 1435 005a C046     		.align	2
 1436              	.L114:
 1437 005c 80000000 		.word	.LANCHOR1
 1438 0060 00000000 		.word	.LANCHOR0
 1439              		.cfi_endproc
 1440              	.LFE44:
 1441              		.size	vTaskResume, .-vTaskResume
 1442              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1443              		.align	2
 1444              		.global	xTaskResumeFromISR
 1445              		.code	16
 1446              		.thumb_func
 1447              		.type	xTaskResumeFromISR, %function
 1448              	xTaskResumeFromISR:
 1449              	.LFB45:
1832:..\FreeRTOS10/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1450              		.loc 1 1832 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              	.LVL158:
 1455 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1456              		.cfi_def_cfa_offset 24
 1457              		.cfi_offset 3, -24
 1458              		.cfi_offset 4, -20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 118


 1459              		.cfi_offset 5, -16
 1460              		.cfi_offset 6, -12
 1461              		.cfi_offset 7, -8
 1462              		.cfi_offset 14, -4
 1463 0002 0400     		movs	r4, r0
 1464              	.LVL159:
1857:..\FreeRTOS10/tasks.c **** 		{
 1465              		.loc 1 1857 0
 1466 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1467              	.LVL160:
 1468 0008 0500     		movs	r5, r0
 1469              	.LVL161:
1859:..\FreeRTOS10/tasks.c **** 			{
 1470              		.loc 1 1859 0
 1471 000a 2000     		movs	r0, r4
 1472              	.LVL162:
 1473 000c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1474              	.LVL163:
 1475 0010 0028     		cmp	r0, #0
 1476 0012 29D0     		beq	.L121
1864:..\FreeRTOS10/tasks.c **** 				{
 1477              		.loc 1 1864 0
 1478 0014 174B     		ldr	r3, .L123
 1479 0016 1B6F     		ldr	r3, [r3, #112]
 1480 0018 002B     		cmp	r3, #0
 1481 001a 1DD1     		bne	.L118
1868:..\FreeRTOS10/tasks.c **** 					{
 1482              		.loc 1 1868 0
 1483 001c 154B     		ldr	r3, .L123
 1484 001e 9B6D     		ldr	r3, [r3, #88]
 1485 0020 DB6A     		ldr	r3, [r3, #44]
 1486 0022 E26A     		ldr	r2, [r4, #44]
 1487 0024 9A42     		cmp	r2, r3
 1488 0026 01D2     		bcs	.L122
1833:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1489              		.loc 1 1833 0
 1490 0028 0026     		movs	r6, #0
 1491 002a 00E0     		b	.L119
 1492              	.L122:
1870:..\FreeRTOS10/tasks.c **** 					}
 1493              		.loc 1 1870 0
 1494 002c 0126     		movs	r6, #1
 1495              	.L119:
 1496              	.LVL164:
1877:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1497              		.loc 1 1877 0
 1498 002e 271D     		adds	r7, r4, #4
 1499 0030 3800     		movs	r0, r7
 1500 0032 FFF7FEFF 		bl	uxListRemove
 1501              	.LVL165:
1878:..\FreeRTOS10/tasks.c **** 				}
 1502              		.loc 1 1878 0
 1503 0036 E36A     		ldr	r3, [r4, #44]
 1504 0038 0E4A     		ldr	r2, .L123
 1505 003a 526E     		ldr	r2, [r2, #100]
 1506 003c 9342     		cmp	r3, r2
 1507 003e 01D9     		bls	.L120
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 119


1878:..\FreeRTOS10/tasks.c **** 				}
 1508              		.loc 1 1878 0 is_stmt 0 discriminator 1
 1509 0040 0C4A     		ldr	r2, .L123
 1510 0042 5366     		str	r3, [r2, #100]
 1511              	.L120:
1878:..\FreeRTOS10/tasks.c **** 				}
 1512              		.loc 1 1878 0 discriminator 3
 1513 0044 9A00     		lsls	r2, r3, #2
 1514 0046 D318     		adds	r3, r2, r3
 1515 0048 9A00     		lsls	r2, r3, #2
 1516 004a 0B48     		ldr	r0, .L123+4
 1517 004c 3030     		adds	r0, r0, #48
 1518 004e 8018     		adds	r0, r0, r2
 1519 0050 3900     		movs	r1, r7
 1520 0052 FFF7FEFF 		bl	vListInsertEnd
 1521              	.LVL166:
 1522 0056 08E0     		b	.L117
 1523              	.LVL167:
 1524              	.L118:
1885:..\FreeRTOS10/tasks.c **** 				}
 1525              		.loc 1 1885 0 is_stmt 1
 1526 0058 2100     		movs	r1, r4
 1527 005a 1831     		adds	r1, r1, #24
 1528 005c 0648     		ldr	r0, .L123+4
 1529 005e 1430     		adds	r0, r0, #20
 1530 0060 FFF7FEFF 		bl	vListInsertEnd
 1531              	.LVL168:
1833:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1532              		.loc 1 1833 0
 1533 0064 0026     		movs	r6, #0
 1534 0066 00E0     		b	.L117
 1535              	.L121:
 1536 0068 0026     		movs	r6, #0
 1537              	.LVL169:
 1538              	.L117:
1893:..\FreeRTOS10/tasks.c **** 
 1539              		.loc 1 1893 0
 1540 006a 2800     		movs	r0, r5
 1541 006c FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1542              	.LVL170:
1896:..\FreeRTOS10/tasks.c **** 
 1543              		.loc 1 1896 0
 1544 0070 3000     		movs	r0, r6
 1545              		@ sp needed
 1546              	.LVL171:
 1547              	.LVL172:
 1548              	.LVL173:
 1549 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1550              	.L124:
 1551              		.align	2
 1552              	.L123:
 1553 0074 80000000 		.word	.LANCHOR1
 1554 0078 00000000 		.word	.LANCHOR0
 1555              		.cfi_endproc
 1556              	.LFE45:
 1557              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1558              		.section	.text.vTaskStartScheduler,"ax",%progbits
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 120


 1559              		.align	2
 1560              		.global	vTaskStartScheduler
 1561              		.code	16
 1562              		.thumb_func
 1563              		.type	vTaskStartScheduler, %function
 1564              	vTaskStartScheduler:
 1565              	.LFB46:
1902:..\FreeRTOS10/tasks.c **** BaseType_t xReturn;
 1566              		.loc 1 1902 0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570 0000 00B5     		push	{lr}
 1571              		.cfi_def_cfa_offset 4
 1572              		.cfi_offset 14, -4
 1573 0002 83B0     		sub	sp, sp, #12
 1574              		.cfi_def_cfa_offset 16
1935:..\FreeRTOS10/tasks.c **** 								configIDLE_TASK_NAME,
 1575              		.loc 1 1935 0
 1576 0004 0C4B     		ldr	r3, .L127
 1577 0006 7433     		adds	r3, r3, #116
 1578 0008 0193     		str	r3, [sp, #4]
 1579 000a 0023     		movs	r3, #0
 1580 000c 0093     		str	r3, [sp]
 1581 000e 3222     		movs	r2, #50
 1582 0010 0A49     		ldr	r1, .L127+4
 1583 0012 0B48     		ldr	r0, .L127+8
 1584 0014 FFF7FEFF 		bl	xTaskCreate
 1585              	.LVL174:
1957:..\FreeRTOS10/tasks.c **** 	{
 1586              		.loc 1 1957 0
 1587 0018 0128     		cmp	r0, #1
 1588 001a 0BD1     		bne	.L125
1973:..\FreeRTOS10/tasks.c **** 
 1589              		.loc 1 1973 0
 1590              		.syntax divided
 1591              	@ 1973 "..\FreeRTOS10\tasks.c" 1
 1592 001c 72B6     		 cpsid i 
 1593              	@ 0 "" 2
1983:..\FreeRTOS10/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1594              		.loc 1 1983 0
 1595              		.thumb
 1596              		.syntax unified
 1597 001e 0122     		movs	r2, #1
 1598 0020 5242     		rsbs	r2, r2, #0
 1599 0022 084B     		ldr	r3, .L127+12
 1600 0024 DA62     		str	r2, [r3, #44]
1984:..\FreeRTOS10/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1601              		.loc 1 1984 0
 1602 0026 044B     		ldr	r3, .L127
 1603 0028 0232     		adds	r2, r2, #2
 1604 002a DA65     		str	r2, [r3, #92]
1985:..\FreeRTOS10/tasks.c **** 
 1605              		.loc 1 1985 0
 1606 002c 0022     		movs	r2, #0
 1607 002e DA66     		str	r2, [r3, #108]
1997:..\FreeRTOS10/tasks.c **** 		{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 121


 1608              		.loc 1 1997 0
 1609 0030 FFF7FEFF 		bl	xPortStartScheduler
 1610              	.LVL175:
 1611              	.L125:
2018:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1612              		.loc 1 2018 0
 1613 0034 03B0     		add	sp, sp, #12
 1614              		@ sp needed
 1615 0036 00BD     		pop	{pc}
 1616              	.L128:
 1617              		.align	2
 1618              	.L127:
 1619 0038 80000000 		.word	.LANCHOR1
 1620 003c 00000000 		.word	.LC32
 1621 0040 00000000 		.word	prvIdleTask
 1622 0044 00000000 		.word	.LANCHOR0
 1623              		.cfi_endproc
 1624              	.LFE46:
 1625              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1626              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1627              		.align	2
 1628              		.global	vTaskEndScheduler
 1629              		.code	16
 1630              		.thumb_func
 1631              		.type	vTaskEndScheduler, %function
 1632              	vTaskEndScheduler:
 1633              	.LFB47:
2022:..\FreeRTOS10/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1634              		.loc 1 2022 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 0
 1637              		@ frame_needed = 0, uses_anonymous_args = 0
 1638 0000 10B5     		push	{r4, lr}
 1639              		.cfi_def_cfa_offset 8
 1640              		.cfi_offset 4, -8
 1641              		.cfi_offset 14, -4
2026:..\FreeRTOS10/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1642              		.loc 1 2026 0
 1643              		.syntax divided
 1644              	@ 2026 "..\FreeRTOS10\tasks.c" 1
 1645 0002 72B6     		 cpsid i 
 1646              	@ 0 "" 2
2027:..\FreeRTOS10/tasks.c **** 	vPortEndScheduler();
 1647              		.loc 1 2027 0
 1648              		.thumb
 1649              		.syntax unified
 1650 0004 0022     		movs	r2, #0
 1651 0006 024B     		ldr	r3, .L130
 1652 0008 DA65     		str	r2, [r3, #92]
2028:..\FreeRTOS10/tasks.c **** }
 1653              		.loc 1 2028 0
 1654 000a FFF7FEFF 		bl	vPortEndScheduler
 1655              	.LVL176:
2029:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
 1656              		.loc 1 2029 0
 1657              		@ sp needed
 1658 000e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 122


 1659              	.L131:
 1660              		.align	2
 1661              	.L130:
 1662 0010 80000000 		.word	.LANCHOR1
 1663              		.cfi_endproc
 1664              	.LFE47:
 1665              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1666              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1667              		.align	2
 1668              		.global	vTaskSuspendAll
 1669              		.code	16
 1670              		.thumb_func
 1671              		.type	vTaskSuspendAll, %function
 1672              	vTaskSuspendAll:
 1673              	.LFB48:
2033:..\FreeRTOS10/tasks.c **** 	/* A critical section is not required as the variable is of type
 1674              		.loc 1 2033 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              		@ link register save eliminated.
2038:..\FreeRTOS10/tasks.c **** }
 1679              		.loc 1 2038 0
 1680 0000 024A     		ldr	r2, .L133
 1681 0002 136F     		ldr	r3, [r2, #112]
 1682 0004 0133     		adds	r3, r3, #1
 1683 0006 1367     		str	r3, [r2, #112]
2039:..\FreeRTOS10/tasks.c **** /*----------------------------------------------------------*/
 1684              		.loc 1 2039 0
 1685              		@ sp needed
 1686 0008 7047     		bx	lr
 1687              	.L134:
 1688 000a C046     		.align	2
 1689              	.L133:
 1690 000c 80000000 		.word	.LANCHOR1
 1691              		.cfi_endproc
 1692              	.LFE48:
 1693              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1694              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1695              		.align	2
 1696              		.global	xTaskGetTickCount
 1697              		.code	16
 1698              		.thumb_func
 1699              		.type	xTaskGetTickCount, %function
 1700              	xTaskGetTickCount:
 1701              	.LFB50:
2216:..\FreeRTOS10/tasks.c **** TickType_t xTicks;
 1702              		.loc 1 2216 0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
2222:..\FreeRTOS10/tasks.c **** 	}
 1707              		.loc 1 2222 0
 1708 0000 014B     		ldr	r3, .L136
 1709 0002 D86E     		ldr	r0, [r3, #108]
 1710              	.LVL177:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 123


2227:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1711              		.loc 1 2227 0
 1712              		@ sp needed
 1713 0004 7047     		bx	lr
 1714              	.L137:
 1715 0006 C046     		.align	2
 1716              	.L136:
 1717 0008 80000000 		.word	.LANCHOR1
 1718              		.cfi_endproc
 1719              	.LFE50:
 1720              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1721              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1722              		.align	2
 1723              		.global	xTaskGetTickCountFromISR
 1724              		.code	16
 1725              		.thumb_func
 1726              		.type	xTaskGetTickCountFromISR, %function
 1727              	xTaskGetTickCountFromISR:
 1728              	.LFB51:
2231:..\FreeRTOS10/tasks.c **** TickType_t xReturn;
 1729              		.loc 1 2231 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		@ link register save eliminated.
 1734              	.LVL178:
2253:..\FreeRTOS10/tasks.c **** 	}
 1735              		.loc 1 2253 0
 1736 0000 014B     		ldr	r3, .L139
 1737 0002 D86E     		ldr	r0, [r3, #108]
 1738              	.LVL179:
2258:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1739              		.loc 1 2258 0
 1740              		@ sp needed
 1741 0004 7047     		bx	lr
 1742              	.L140:
 1743 0006 C046     		.align	2
 1744              	.L139:
 1745 0008 80000000 		.word	.LANCHOR1
 1746              		.cfi_endproc
 1747              	.LFE51:
 1748              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1749              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1750              		.align	2
 1751              		.global	uxTaskGetNumberOfTasks
 1752              		.code	16
 1753              		.thumb_func
 1754              		.type	uxTaskGetNumberOfTasks, %function
 1755              	uxTaskGetNumberOfTasks:
 1756              	.LFB52:
2262:..\FreeRTOS10/tasks.c **** 	/* A critical section is not required because the variables are of type
 1757              		.loc 1 2262 0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 1761              		@ link register save eliminated.
2265:..\FreeRTOS10/tasks.c **** }
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 124


 1762              		.loc 1 2265 0
 1763 0000 014B     		ldr	r3, .L142
 1764 0002 586D     		ldr	r0, [r3, #84]
2266:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1765              		.loc 1 2266 0
 1766              		@ sp needed
 1767 0004 7047     		bx	lr
 1768              	.L143:
 1769 0006 C046     		.align	2
 1770              	.L142:
 1771 0008 80000000 		.word	.LANCHOR1
 1772              		.cfi_endproc
 1773              	.LFE52:
 1774              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1775              		.section	.text.pcTaskGetName,"ax",%progbits
 1776              		.align	2
 1777              		.global	pcTaskGetName
 1778              		.code	16
 1779              		.thumb_func
 1780              		.type	pcTaskGetName, %function
 1781              	pcTaskGetName:
 1782              	.LFB53:
2270:..\FreeRTOS10/tasks.c **** TCB_t *pxTCB;
 1783              		.loc 1 2270 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 0
 1786              		@ frame_needed = 0, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788              	.LVL180:
2275:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTCB );
 1789              		.loc 1 2275 0
 1790 0000 0028     		cmp	r0, #0
 1791 0002 01D1     		bne	.L145
2275:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTCB );
 1792              		.loc 1 2275 0 is_stmt 0 discriminator 1
 1793 0004 014B     		ldr	r3, .L146
 1794 0006 986D     		ldr	r0, [r3, #88]
 1795              	.LVL181:
 1796              	.L145:
2277:..\FreeRTOS10/tasks.c **** }
 1797              		.loc 1 2277 0 is_stmt 1 discriminator 4
 1798 0008 3430     		adds	r0, r0, #52
 1799              	.LVL182:
2278:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1800              		.loc 1 2278 0 discriminator 4
 1801              		@ sp needed
 1802 000a 7047     		bx	lr
 1803              	.L147:
 1804              		.align	2
 1805              	.L146:
 1806 000c 80000000 		.word	.LANCHOR1
 1807              		.cfi_endproc
 1808              	.LFE53:
 1809              		.size	pcTaskGetName, .-pcTaskGetName
 1810              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1811              		.align	2
 1812              		.global	xTaskIncrementTick
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 125


 1813              		.code	16
 1814              		.thumb_func
 1815              		.type	xTaskIncrementTick, %function
 1816              	xTaskIncrementTick:
 1817              	.LFB54:
2590:..\FreeRTOS10/tasks.c **** TCB_t * pxTCB;
 1818              		.loc 1 2590 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1823              		.cfi_def_cfa_offset 24
 1824              		.cfi_offset 3, -24
 1825              		.cfi_offset 4, -20
 1826              		.cfi_offset 5, -16
 1827              		.cfi_offset 6, -12
 1828              		.cfi_offset 7, -8
 1829              		.cfi_offset 14, -4
 1830              	.LVL183:
2599:..\FreeRTOS10/tasks.c **** 	{
 1831              		.loc 1 2599 0
 1832 0002 324B     		ldr	r3, .L165
 1833 0004 1B6F     		ldr	r3, [r3, #112]
 1834 0006 002B     		cmp	r3, #0
 1835 0008 53D1     		bne	.L149
 1836              	.LBB4:
2603:..\FreeRTOS10/tasks.c **** 
 1837              		.loc 1 2603 0
 1838 000a 304B     		ldr	r3, .L165
 1839 000c DF6E     		ldr	r7, [r3, #108]
 1840 000e 0137     		adds	r7, r7, #1
 1841              	.LVL184:
2607:..\FreeRTOS10/tasks.c **** 
 1842              		.loc 1 2607 0
 1843 0010 DF66     		str	r7, [r3, #108]
2609:..\FreeRTOS10/tasks.c **** 		{
 1844              		.loc 1 2609 0
 1845 0012 002F     		cmp	r7, #0
 1846 0014 09D1     		bne	.L150
 1847              	.LBB5:
2611:..\FreeRTOS10/tasks.c **** 		}
 1848              		.loc 1 2611 0
 1849 0016 2E4A     		ldr	r2, .L165+4
 1850 0018 916A     		ldr	r1, [r2, #40]
 1851              	.LVL185:
 1852 001a 186D     		ldr	r0, [r3, #80]
 1853 001c 9062     		str	r0, [r2, #40]
 1854 001e 1965     		str	r1, [r3, #80]
 1855 0020 9A6F     		ldr	r2, [r3, #120]
 1856 0022 0132     		adds	r2, r2, #1
 1857 0024 9A67     		str	r2, [r3, #120]
 1858 0026 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1859              	.LVL186:
 1860              	.L150:
 1861              	.LBE5:
2622:..\FreeRTOS10/tasks.c **** 		{
 1862              		.loc 1 2622 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 126


 1863 002a 294B     		ldr	r3, .L165+4
 1864 002c DB6A     		ldr	r3, [r3, #44]
 1865 002e 9F42     		cmp	r7, r3
 1866 0030 03D2     		bcs	.L161
 1867              	.LBE4:
2593:..\FreeRTOS10/tasks.c **** 
 1868              		.loc 1 2593 0
 1869 0032 0025     		movs	r5, #0
 1870 0034 42E0     		b	.L152
 1871              	.LVL187:
 1872              	.L163:
 1873              	.LBB6:
2688:..\FreeRTOS10/tasks.c **** 						}
 1874              		.loc 1 2688 0
 1875 0036 0125     		movs	r5, #1
 1876              	.LVL188:
 1877 0038 00E0     		b	.L151
 1878              	.LVL189:
 1879              	.L161:
 1880 003a 0025     		movs	r5, #0
 1881              	.LVL190:
 1882              	.L151:
2626:..\FreeRTOS10/tasks.c **** 				{
 1883              		.loc 1 2626 0
 1884 003c 244B     		ldr	r3, .L165+4
 1885 003e 9B6A     		ldr	r3, [r3, #40]
 1886 0040 1B68     		ldr	r3, [r3]
 1887 0042 002B     		cmp	r3, #0
 1888 0044 01D1     		bne	.L162
 1889 0046 0133     		adds	r3, r3, #1
 1890 0048 00E0     		b	.L153
 1891              	.L162:
 1892 004a 0023     		movs	r3, #0
 1893              	.L153:
2626:..\FreeRTOS10/tasks.c **** 				{
 1894              		.loc 1 2626 0 is_stmt 0 discriminator 4
 1895 004c 002B     		cmp	r3, #0
 1896 004e 04D0     		beq	.L154
2633:..\FreeRTOS10/tasks.c **** 					break;
 1897              		.loc 1 2633 0 is_stmt 1
 1898 0050 0122     		movs	r2, #1
 1899 0052 5242     		rsbs	r2, r2, #0
 1900 0054 1E4B     		ldr	r3, .L165+4
 1901 0056 DA62     		str	r2, [r3, #44]
2634:..\FreeRTOS10/tasks.c **** 				}
 1902              		.loc 1 2634 0
 1903 0058 30E0     		b	.L152
 1904              	.L154:
2642:..\FreeRTOS10/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1905              		.loc 1 2642 0
 1906 005a 1D4B     		ldr	r3, .L165+4
 1907 005c 9B6A     		ldr	r3, [r3, #40]
 1908 005e DB68     		ldr	r3, [r3, #12]
 1909 0060 DE68     		ldr	r6, [r3, #12]
 1910              	.LVL191:
2643:..\FreeRTOS10/tasks.c **** 
 1911              		.loc 1 2643 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 127


 1912 0062 7368     		ldr	r3, [r6, #4]
 1913              	.LVL192:
2645:..\FreeRTOS10/tasks.c **** 					{
 1914              		.loc 1 2645 0
 1915 0064 9F42     		cmp	r7, r3
 1916 0066 02D2     		bcs	.L155
2652:..\FreeRTOS10/tasks.c **** 						break;
 1917              		.loc 1 2652 0
 1918 0068 194A     		ldr	r2, .L165+4
 1919 006a D362     		str	r3, [r2, #44]
2653:..\FreeRTOS10/tasks.c **** 					}
 1920              		.loc 1 2653 0
 1921 006c 26E0     		b	.L152
 1922              	.L155:
2661:..\FreeRTOS10/tasks.c **** 
 1923              		.loc 1 2661 0
 1924 006e 341D     		adds	r4, r6, #4
 1925 0070 2000     		movs	r0, r4
 1926 0072 FFF7FEFF 		bl	uxListRemove
 1927              	.LVL193:
2665:..\FreeRTOS10/tasks.c **** 					{
 1928              		.loc 1 2665 0
 1929 0076 B36A     		ldr	r3, [r6, #40]
 1930 0078 002B     		cmp	r3, #0
 1931 007a 03D0     		beq	.L156
2667:..\FreeRTOS10/tasks.c **** 					}
 1932              		.loc 1 2667 0
 1933 007c 3000     		movs	r0, r6
 1934 007e 1830     		adds	r0, r0, #24
 1935 0080 FFF7FEFF 		bl	uxListRemove
 1936              	.LVL194:
 1937              	.L156:
2676:..\FreeRTOS10/tasks.c **** 
 1938              		.loc 1 2676 0
 1939 0084 F36A     		ldr	r3, [r6, #44]
 1940 0086 114A     		ldr	r2, .L165
 1941 0088 526E     		ldr	r2, [r2, #100]
 1942 008a 9342     		cmp	r3, r2
 1943 008c 01D9     		bls	.L157
2676:..\FreeRTOS10/tasks.c **** 
 1944              		.loc 1 2676 0 is_stmt 0 discriminator 1
 1945 008e 0F4A     		ldr	r2, .L165
 1946 0090 5366     		str	r3, [r2, #100]
 1947              	.L157:
2676:..\FreeRTOS10/tasks.c **** 
 1948              		.loc 1 2676 0 discriminator 3
 1949 0092 9A00     		lsls	r2, r3, #2
 1950 0094 D318     		adds	r3, r2, r3
 1951 0096 9A00     		lsls	r2, r3, #2
 1952 0098 0D48     		ldr	r0, .L165+4
 1953 009a 3030     		adds	r0, r0, #48
 1954 009c 8018     		adds	r0, r0, r2
 1955 009e 2100     		movs	r1, r4
 1956 00a0 FFF7FEFF 		bl	vListInsertEnd
 1957              	.LVL195:
2686:..\FreeRTOS10/tasks.c **** 						{
 1958              		.loc 1 2686 0 is_stmt 1 discriminator 3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 128


 1959 00a4 F26A     		ldr	r2, [r6, #44]
 1960 00a6 094B     		ldr	r3, .L165
 1961 00a8 9B6D     		ldr	r3, [r3, #88]
 1962 00aa DB6A     		ldr	r3, [r3, #44]
 1963 00ac 9A42     		cmp	r2, r3
 1964 00ae C2D2     		bcs	.L163
 1965 00b0 C4E7     		b	.L151
 1966              	.LVL196:
 1967              	.L149:
 1968              	.LBE6:
2733:..\FreeRTOS10/tasks.c **** 
 1969              		.loc 1 2733 0
 1970 00b2 064A     		ldr	r2, .L165
 1971 00b4 D36F     		ldr	r3, [r2, #124]
 1972 00b6 0133     		adds	r3, r3, #1
 1973 00b8 D367     		str	r3, [r2, #124]
2593:..\FreeRTOS10/tasks.c **** 
 1974              		.loc 1 2593 0
 1975 00ba 0025     		movs	r5, #0
 1976              	.LVL197:
 1977              	.L152:
2746:..\FreeRTOS10/tasks.c **** 		{
 1978              		.loc 1 2746 0
 1979 00bc 054B     		ldr	r3, .L165+8
 1980 00be 1B68     		ldr	r3, [r3]
 1981 00c0 002B     		cmp	r3, #0
 1982 00c2 00D0     		beq	.L160
2748:..\FreeRTOS10/tasks.c **** 		}
 1983              		.loc 1 2748 0
 1984 00c4 0125     		movs	r5, #1
 1985              	.LVL198:
 1986              	.L160:
2758:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 1987              		.loc 1 2758 0
 1988 00c6 2800     		movs	r0, r5
 1989              		@ sp needed
 1990              	.LVL199:
 1991 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1992              	.L166:
 1993 00ca C046     		.align	2
 1994              	.L165:
 1995 00cc 80000000 		.word	.LANCHOR1
 1996 00d0 00000000 		.word	.LANCHOR0
 1997 00d4 00010000 		.word	.LANCHOR2
 1998              		.cfi_endproc
 1999              	.LFE54:
 2000              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2001              		.section	.text.xTaskResumeAll,"ax",%progbits
 2002              		.align	2
 2003              		.global	xTaskResumeAll
 2004              		.code	16
 2005              		.thumb_func
 2006              		.type	xTaskResumeAll, %function
 2007              	xTaskResumeAll:
 2008              	.LFB49:
2106:..\FreeRTOS10/tasks.c **** TCB_t *pxTCB = NULL;
 2009              		.loc 1 2106 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 129


 2010              		.cfi_startproc
 2011              		@ args = 0, pretend = 0, frame = 0
 2012              		@ frame_needed = 0, uses_anonymous_args = 0
 2013 0000 70B5     		push	{r4, r5, r6, lr}
 2014              		.cfi_def_cfa_offset 16
 2015              		.cfi_offset 4, -16
 2016              		.cfi_offset 5, -12
 2017              		.cfi_offset 6, -8
 2018              		.cfi_offset 14, -4
 2019              	.LVL200:
2119:..\FreeRTOS10/tasks.c **** 	{
 2020              		.loc 1 2119 0
 2021 0002 FFF7FEFF 		bl	vPortEnterCritical
 2022              	.LVL201:
2121:..\FreeRTOS10/tasks.c **** 
 2023              		.loc 1 2121 0
 2024 0006 2D4B     		ldr	r3, .L180
 2025 0008 1A6F     		ldr	r2, [r3, #112]
 2026 000a 013A     		subs	r2, r2, #1
 2027 000c 1A67     		str	r2, [r3, #112]
2123:..\FreeRTOS10/tasks.c **** 		{
 2028              		.loc 1 2123 0
 2029 000e 1B6F     		ldr	r3, [r3, #112]
 2030 0010 002B     		cmp	r3, #0
 2031 0012 4CD1     		bne	.L177
2125:..\FreeRTOS10/tasks.c **** 			{
 2032              		.loc 1 2125 0
 2033 0014 294B     		ldr	r3, .L180
 2034 0016 5B6D     		ldr	r3, [r3, #84]
 2035 0018 002B     		cmp	r3, #0
 2036 001a 26D1     		bne	.L178
2108:..\FreeRTOS10/tasks.c **** 
 2037              		.loc 1 2108 0
 2038 001c 0024     		movs	r4, #0
 2039 001e 49E0     		b	.L168
 2040              	.LVL202:
 2041              	.L172:
2131:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2042              		.loc 1 2131 0
 2043 0020 274B     		ldr	r3, .L180+4
 2044 0022 1B6A     		ldr	r3, [r3, #32]
 2045 0024 DC68     		ldr	r4, [r3, #12]
 2046              	.LVL203:
2132:..\FreeRTOS10/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2047              		.loc 1 2132 0
 2048 0026 2000     		movs	r0, r4
 2049 0028 1830     		adds	r0, r0, #24
 2050 002a FFF7FEFF 		bl	uxListRemove
 2051              	.LVL204:
2133:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2052              		.loc 1 2133 0
 2053 002e 251D     		adds	r5, r4, #4
 2054 0030 2800     		movs	r0, r5
 2055 0032 FFF7FEFF 		bl	uxListRemove
 2056              	.LVL205:
2134:..\FreeRTOS10/tasks.c **** 
 2057              		.loc 1 2134 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 130


 2058 0036 E36A     		ldr	r3, [r4, #44]
 2059 0038 204A     		ldr	r2, .L180
 2060 003a 526E     		ldr	r2, [r2, #100]
 2061 003c 9342     		cmp	r3, r2
 2062 003e 01D9     		bls	.L170
2134:..\FreeRTOS10/tasks.c **** 
 2063              		.loc 1 2134 0 is_stmt 0 discriminator 1
 2064 0040 1E4A     		ldr	r2, .L180
 2065 0042 5366     		str	r3, [r2, #100]
 2066              	.L170:
2134:..\FreeRTOS10/tasks.c **** 
 2067              		.loc 1 2134 0 discriminator 3
 2068 0044 9A00     		lsls	r2, r3, #2
 2069 0046 D318     		adds	r3, r2, r3
 2070 0048 9A00     		lsls	r2, r3, #2
 2071 004a 1D48     		ldr	r0, .L180+4
 2072 004c 3030     		adds	r0, r0, #48
 2073 004e 8018     		adds	r0, r0, r2
 2074 0050 2900     		movs	r1, r5
 2075 0052 FFF7FEFF 		bl	vListInsertEnd
 2076              	.LVL206:
2138:..\FreeRTOS10/tasks.c **** 					{
 2077              		.loc 1 2138 0 is_stmt 1 discriminator 3
 2078 0056 194B     		ldr	r3, .L180
 2079 0058 9B6D     		ldr	r3, [r3, #88]
 2080 005a DB6A     		ldr	r3, [r3, #44]
 2081 005c E26A     		ldr	r2, [r4, #44]
 2082 005e 9A42     		cmp	r2, r3
 2083 0060 04D3     		bcc	.L169
2140:..\FreeRTOS10/tasks.c **** 					}
 2084              		.loc 1 2140 0
 2085 0062 0122     		movs	r2, #1
 2086 0064 174B     		ldr	r3, .L180+8
 2087 0066 1A60     		str	r2, [r3]
 2088 0068 00E0     		b	.L169
 2089              	.LVL207:
 2090              	.L178:
 2091 006a 0024     		movs	r4, #0
 2092              	.LVL208:
 2093              	.L169:
2129:..\FreeRTOS10/tasks.c **** 				{
 2094              		.loc 1 2129 0
 2095 006c 144B     		ldr	r3, .L180+4
 2096 006e 5B69     		ldr	r3, [r3, #20]
 2097 0070 002B     		cmp	r3, #0
 2098 0072 D5D1     		bne	.L172
2148:..\FreeRTOS10/tasks.c **** 				{
 2099              		.loc 1 2148 0
 2100 0074 002C     		cmp	r4, #0
 2101 0076 01D0     		beq	.L173
2156:..\FreeRTOS10/tasks.c **** 				}
 2102              		.loc 1 2156 0
 2103 0078 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2104              	.LVL209:
 2105              	.L173:
 2106              	.LBB7:
2164:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 131


 2107              		.loc 1 2164 0
 2108 007c 0F4B     		ldr	r3, .L180
 2109 007e DC6F     		ldr	r4, [r3, #124]
 2110              	.LVL210:
2166:..\FreeRTOS10/tasks.c **** 					{
 2111              		.loc 1 2166 0
 2112 0080 002C     		cmp	r4, #0
 2113 0082 0CD0     		beq	.L174
 2114              	.L176:
2170:..\FreeRTOS10/tasks.c **** 							{
 2115              		.loc 1 2170 0
 2116 0084 FFF7FEFF 		bl	xTaskIncrementTick
 2117              	.LVL211:
 2118 0088 0028     		cmp	r0, #0
 2119 008a 02D0     		beq	.L175
2172:..\FreeRTOS10/tasks.c **** 							}
 2120              		.loc 1 2172 0
 2121 008c 0122     		movs	r2, #1
 2122 008e 0D4B     		ldr	r3, .L180+8
 2123 0090 1A60     		str	r2, [r3]
 2124              	.L175:
2178:..\FreeRTOS10/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2125              		.loc 1 2178 0
 2126 0092 013C     		subs	r4, r4, #1
 2127              	.LVL212:
2179:..\FreeRTOS10/tasks.c **** 
 2128              		.loc 1 2179 0
 2129 0094 002C     		cmp	r4, #0
 2130 0096 F5D1     		bne	.L176
2181:..\FreeRTOS10/tasks.c **** 					}
 2131              		.loc 1 2181 0
 2132 0098 0022     		movs	r2, #0
 2133 009a 084B     		ldr	r3, .L180
 2134 009c DA67     		str	r2, [r3, #124]
 2135              	.L174:
 2136              	.LBE7:
2189:..\FreeRTOS10/tasks.c **** 				{
 2137              		.loc 1 2189 0
 2138 009e 094B     		ldr	r3, .L180+8
 2139 00a0 1B68     		ldr	r3, [r3]
 2140 00a2 002B     		cmp	r3, #0
 2141 00a4 05D0     		beq	.L179
 2142              	.LVL213:
2196:..\FreeRTOS10/tasks.c **** 				}
 2143              		.loc 1 2196 0
 2144 00a6 FFF7FEFF 		bl	vPortYield
 2145              	.LVL214:
2193:..\FreeRTOS10/tasks.c **** 					}
 2146              		.loc 1 2193 0
 2147 00aa 0124     		movs	r4, #1
 2148              	.LVL215:
 2149 00ac 02E0     		b	.L168
 2150              	.LVL216:
 2151              	.L177:
2108:..\FreeRTOS10/tasks.c **** 
 2152              		.loc 1 2108 0
 2153 00ae 0024     		movs	r4, #0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 132


 2154 00b0 00E0     		b	.L168
 2155              	.LVL217:
 2156              	.L179:
 2157 00b2 0024     		movs	r4, #0
 2158              	.LVL218:
 2159              	.L168:
2209:..\FreeRTOS10/tasks.c **** 
 2160              		.loc 1 2209 0
 2161 00b4 FFF7FEFF 		bl	vPortExitCritical
 2162              	.LVL219:
2212:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2163              		.loc 1 2212 0
 2164 00b8 2000     		movs	r0, r4
 2165              		@ sp needed
 2166              	.LVL220:
 2167 00ba 70BD     		pop	{r4, r5, r6, pc}
 2168              	.L181:
 2169              		.align	2
 2170              	.L180:
 2171 00bc 80000000 		.word	.LANCHOR1
 2172 00c0 00000000 		.word	.LANCHOR0
 2173 00c4 00010000 		.word	.LANCHOR2
 2174              		.cfi_endproc
 2175              	.LFE49:
 2176              		.size	xTaskResumeAll, .-xTaskResumeAll
 2177              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2178              		.align	2
 2179              		.global	vTaskDelayUntil
 2180              		.code	16
 2181              		.thumb_func
 2182              		.type	vTaskDelayUntil, %function
 2183              	vTaskDelayUntil:
 2184              	.LFB36:
1205:..\FreeRTOS10/tasks.c **** 	TickType_t xTimeToWake;
 2185              		.loc 1 1205 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 0
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189              	.LVL221:
 2190 0000 70B5     		push	{r4, r5, r6, lr}
 2191              		.cfi_def_cfa_offset 16
 2192              		.cfi_offset 4, -16
 2193              		.cfi_offset 5, -12
 2194              		.cfi_offset 6, -8
 2195              		.cfi_offset 14, -4
 2196 0002 0500     		movs	r5, r0
 2197 0004 0C00     		movs	r4, r1
 2198              	.LVL222:
1213:..\FreeRTOS10/tasks.c **** 		{
 2199              		.loc 1 1213 0
 2200 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2201              	.LVL223:
 2202              	.LBB8:
1217:..\FreeRTOS10/tasks.c **** 
 2203              		.loc 1 1217 0
 2204 000a 134B     		ldr	r3, .L191
 2205 000c D86E     		ldr	r0, [r3, #108]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 133


 2206              	.LVL224:
1220:..\FreeRTOS10/tasks.c **** 
 2207              		.loc 1 1220 0
 2208 000e 2B68     		ldr	r3, [r5]
 2209 0010 1919     		adds	r1, r3, r4
 2210              	.LVL225:
1222:..\FreeRTOS10/tasks.c **** 			{
 2211              		.loc 1 1222 0
 2212 0012 9842     		cmp	r0, r3
 2213 0014 05D2     		bcs	.L183
1229:..\FreeRTOS10/tasks.c **** 				{
 2214              		.loc 1 1229 0
 2215 0016 8B42     		cmp	r3, r1
 2216 0018 09D9     		bls	.L187
1229:..\FreeRTOS10/tasks.c **** 				{
 2217              		.loc 1 1229 0 is_stmt 0 discriminator 1
 2218 001a 8842     		cmp	r0, r1
 2219 001c 09D3     		bcc	.L188
 2220              	.LBE8:
1207:..\FreeRTOS10/tasks.c **** 
 2221              		.loc 1 1207 0 is_stmt 1
 2222 001e 0023     		movs	r3, #0
 2223 0020 0CE0     		b	.L184
 2224              	.L183:
 2225              	.LBB9:
1243:..\FreeRTOS10/tasks.c **** 				{
 2226              		.loc 1 1243 0
 2227 0022 8B42     		cmp	r3, r1
 2228 0024 07D8     		bhi	.L189
1243:..\FreeRTOS10/tasks.c **** 				{
 2229              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2230 0026 8842     		cmp	r0, r1
 2231 0028 07D3     		bcc	.L190
 2232              	.LBE9:
1207:..\FreeRTOS10/tasks.c **** 
 2233              		.loc 1 1207 0 is_stmt 1
 2234 002a 0023     		movs	r3, #0
 2235 002c 06E0     		b	.L184
 2236              	.L187:
 2237 002e 0023     		movs	r3, #0
 2238 0030 04E0     		b	.L184
 2239              	.L188:
 2240              	.LBB10:
1231:..\FreeRTOS10/tasks.c **** 				}
 2241              		.loc 1 1231 0
 2242 0032 0123     		movs	r3, #1
 2243 0034 02E0     		b	.L184
 2244              	.L189:
1245:..\FreeRTOS10/tasks.c **** 				}
 2245              		.loc 1 1245 0
 2246 0036 0123     		movs	r3, #1
 2247 0038 00E0     		b	.L184
 2248              	.L190:
 2249 003a 0123     		movs	r3, #1
 2250              	.L184:
 2251              	.LVL226:
1254:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 134


 2252              		.loc 1 1254 0
 2253 003c 2960     		str	r1, [r5]
1256:..\FreeRTOS10/tasks.c **** 			{
 2254              		.loc 1 1256 0
 2255 003e 002B     		cmp	r3, #0
 2256 0040 03D0     		beq	.L185
1262:..\FreeRTOS10/tasks.c **** 			}
 2257              		.loc 1 1262 0
 2258 0042 081A     		subs	r0, r1, r0
 2259              	.LVL227:
 2260 0044 0021     		movs	r1, #0
 2261              	.LVL228:
 2262 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2263              	.LVL229:
 2264              	.L185:
 2265              	.LBE10:
1269:..\FreeRTOS10/tasks.c **** 
 2266              		.loc 1 1269 0
 2267 004a FFF7FEFF 		bl	xTaskResumeAll
 2268              	.LVL230:
1273:..\FreeRTOS10/tasks.c **** 		{
 2269              		.loc 1 1273 0
 2270 004e 0028     		cmp	r0, #0
 2271 0050 01D1     		bne	.L182
1275:..\FreeRTOS10/tasks.c **** 		}
 2272              		.loc 1 1275 0
 2273 0052 FFF7FEFF 		bl	vPortYield
 2274              	.LVL231:
 2275              	.L182:
1281:..\FreeRTOS10/tasks.c **** 
 2276              		.loc 1 1281 0
 2277              		@ sp needed
 2278              	.LVL232:
 2279              	.LVL233:
 2280 0056 70BD     		pop	{r4, r5, r6, pc}
 2281              	.L192:
 2282              		.align	2
 2283              	.L191:
 2284 0058 80000000 		.word	.LANCHOR1
 2285              		.cfi_endproc
 2286              	.LFE36:
 2287              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2288              		.section	.text.vTaskDelay,"ax",%progbits
 2289              		.align	2
 2290              		.global	vTaskDelay
 2291              		.code	16
 2292              		.thumb_func
 2293              		.type	vTaskDelay, %function
 2294              	vTaskDelay:
 2295              	.LFB37:
1289:..\FreeRTOS10/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2296              		.loc 1 1289 0
 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              	.LVL234:
 2301 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 135


 2302              		.cfi_def_cfa_offset 8
 2303              		.cfi_offset 4, -8
 2304              		.cfi_offset 14, -4
 2305 0002 041E     		subs	r4, r0, #0
 2306              	.LVL235:
1293:..\FreeRTOS10/tasks.c **** 		{
 2307              		.loc 1 1293 0
 2308 0004 08D0     		beq	.L196
1296:..\FreeRTOS10/tasks.c **** 			{
 2309              		.loc 1 1296 0
 2310 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2311              	.LVL236:
1307:..\FreeRTOS10/tasks.c **** 			}
 2312              		.loc 1 1307 0
 2313 000a 0021     		movs	r1, #0
 2314 000c 2000     		movs	r0, r4
 2315 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2316              	.LVL237:
1309:..\FreeRTOS10/tasks.c **** 		}
 2317              		.loc 1 1309 0
 2318 0012 FFF7FEFF 		bl	xTaskResumeAll
 2319              	.LVL238:
 2320 0016 00E0     		b	.L194
 2321              	.LVL239:
 2322              	.L196:
1290:..\FreeRTOS10/tasks.c **** 
 2323              		.loc 1 1290 0
 2324 0018 0020     		movs	r0, #0
 2325              	.LVL240:
 2326              	.L194:
1318:..\FreeRTOS10/tasks.c **** 		{
 2327              		.loc 1 1318 0
 2328 001a 0028     		cmp	r0, #0
 2329 001c 01D1     		bne	.L193
1320:..\FreeRTOS10/tasks.c **** 		}
 2330              		.loc 1 1320 0
 2331 001e FFF7FEFF 		bl	vPortYield
 2332              	.LVL241:
 2333              	.L193:
1326:..\FreeRTOS10/tasks.c **** 
 2334              		.loc 1 1326 0
 2335              		@ sp needed
 2336              	.LVL242:
 2337 0022 10BD     		pop	{r4, pc}
 2338              		.cfi_endproc
 2339              	.LFE37:
 2340              		.size	vTaskDelay, .-vTaskDelay
 2341              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2342              		.align	2
 2343              		.global	vTaskSwitchContext
 2344              		.code	16
 2345              		.thumb_func
 2346              		.type	vTaskSwitchContext, %function
 2347              	vTaskSwitchContext:
 2348              	.LFB55:
2852:..\FreeRTOS10/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2349              		.loc 1 2852 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 136


 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 0, uses_anonymous_args = 0
 2353 0000 10B5     		push	{r4, lr}
 2354              		.cfi_def_cfa_offset 8
 2355              		.cfi_offset 4, -8
 2356              		.cfi_offset 14, -4
2853:..\FreeRTOS10/tasks.c **** 	{
 2357              		.loc 1 2853 0
 2358 0002 284B     		ldr	r3, .L205
 2359 0004 1B6F     		ldr	r3, [r3, #112]
 2360 0006 002B     		cmp	r3, #0
 2361 0008 03D0     		beq	.L198
2857:..\FreeRTOS10/tasks.c **** 	}
 2362              		.loc 1 2857 0
 2363 000a 0122     		movs	r2, #1
 2364 000c 264B     		ldr	r3, .L205+4
 2365 000e 1A60     		str	r2, [r3]
 2366 0010 46E0     		b	.L197
 2367              	.L198:
2861:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2368              		.loc 1 2861 0
 2369 0012 0022     		movs	r2, #0
 2370 0014 244B     		ldr	r3, .L205+4
 2371 0016 1A60     		str	r2, [r3]
 2372              	.LBB11:
2892:..\FreeRTOS10/tasks.c **** 
 2373              		.loc 1 2892 0
 2374 0018 224B     		ldr	r3, .L205
 2375 001a 9B6D     		ldr	r3, [r3, #88]
 2376 001c 1B6B     		ldr	r3, [r3, #48]
 2377              	.LVL243:
 2378 001e 234A     		ldr	r2, .L205+8
 2379 0020 1968     		ldr	r1, [r3]
 2380 0022 9142     		cmp	r1, r2
 2381 0024 09D1     		bne	.L200
2892:..\FreeRTOS10/tasks.c **** 
 2382              		.loc 1 2892 0 is_stmt 0 discriminator 2
 2383 0026 5968     		ldr	r1, [r3, #4]
 2384 0028 9142     		cmp	r1, r2
 2385 002a 06D1     		bne	.L200
2892:..\FreeRTOS10/tasks.c **** 
 2386              		.loc 1 2892 0 discriminator 4
 2387 002c 9968     		ldr	r1, [r3, #8]
 2388 002e 9142     		cmp	r1, r2
 2389 0030 03D1     		bne	.L200
2892:..\FreeRTOS10/tasks.c **** 
 2390              		.loc 1 2892 0 discriminator 6
 2391 0032 DA68     		ldr	r2, [r3, #12]
 2392 0034 1D4B     		ldr	r3, .L205+8
 2393              	.LVL244:
 2394 0036 9A42     		cmp	r2, r3
 2395 0038 05D0     		beq	.L201
 2396              	.L200:
2892:..\FreeRTOS10/tasks.c **** 
 2397              		.loc 1 2892 0 discriminator 7
 2398 003a 1A4B     		ldr	r3, .L205
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 137


 2399 003c 986D     		ldr	r0, [r3, #88]
 2400 003e 996D     		ldr	r1, [r3, #88]
 2401 0040 3431     		adds	r1, r1, #52
 2402 0042 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2403              	.LVL245:
 2404              	.L201:
 2405              	.LBE11:
 2406              	.LBB12:
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2407              		.loc 1 2896 0 is_stmt 1
 2408 0046 174B     		ldr	r3, .L205
 2409 0048 5B6E     		ldr	r3, [r3, #100]
 2410              	.LVL246:
 2411 004a 00E0     		b	.L202
 2412              	.L203:
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2413              		.loc 1 2896 0 is_stmt 0 discriminator 3
 2414 004c 013B     		subs	r3, r3, #1
 2415              	.LVL247:
 2416              	.L202:
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2417              		.loc 1 2896 0 discriminator 1
 2418 004e 9900     		lsls	r1, r3, #2
 2419 0050 C918     		adds	r1, r1, r3
 2420 0052 8A00     		lsls	r2, r1, #2
 2421 0054 1649     		ldr	r1, .L205+12
 2422 0056 8A18     		adds	r2, r1, r2
 2423 0058 126B     		ldr	r2, [r2, #48]
 2424 005a 002A     		cmp	r2, #0
 2425 005c F6D0     		beq	.L203
 2426              	.LVL248:
 2427              	.LBB13:
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2428              		.loc 1 2896 0 discriminator 4
 2429 005e 0A00     		movs	r2, r1
 2430 0060 9900     		lsls	r1, r3, #2
 2431 0062 CC18     		adds	r4, r1, r3
 2432 0064 A000     		lsls	r0, r4, #2
 2433 0066 1018     		adds	r0, r2, r0
 2434 0068 446B     		ldr	r4, [r0, #52]
 2435 006a 6468     		ldr	r4, [r4, #4]
 2436 006c 4463     		str	r4, [r0, #52]
 2437 006e 3032     		adds	r2, r2, #48
 2438 0070 1000     		movs	r0, r2
 2439 0072 C918     		adds	r1, r1, r3
 2440 0074 8A00     		lsls	r2, r1, #2
 2441 0076 0832     		adds	r2, r2, #8
 2442 0078 8218     		adds	r2, r0, r2
 2443 007a 9442     		cmp	r4, r2
 2444 007c 06D1     		bne	.L204
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2445              		.loc 1 2896 0 discriminator 5
 2446 007e 6068     		ldr	r0, [r4, #4]
 2447 0080 9900     		lsls	r1, r3, #2
 2448 0082 C918     		adds	r1, r1, r3
 2449 0084 8A00     		lsls	r2, r1, #2
 2450 0086 0A49     		ldr	r1, .L205+12
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 138


 2451 0088 8A18     		adds	r2, r1, r2
 2452 008a 5063     		str	r0, [r2, #52]
 2453              	.L204:
2896:..\FreeRTOS10/tasks.c **** 		traceTASK_SWITCHED_IN();
 2454              		.loc 1 2896 0 discriminator 7
 2455 008c 9900     		lsls	r1, r3, #2
 2456 008e C918     		adds	r1, r1, r3
 2457 0090 8A00     		lsls	r2, r1, #2
 2458 0092 0749     		ldr	r1, .L205+12
 2459 0094 8A18     		adds	r2, r1, r2
 2460 0096 526B     		ldr	r2, [r2, #52]
 2461 0098 D168     		ldr	r1, [r2, #12]
 2462 009a 024A     		ldr	r2, .L205
 2463 009c 9165     		str	r1, [r2, #88]
 2464              	.LBE13:
 2465 009e 5366     		str	r3, [r2, #100]
 2466              	.LVL249:
 2467              	.L197:
 2468              	.LBE12:
2907:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2469              		.loc 1 2907 0 is_stmt 1
 2470              		@ sp needed
 2471 00a0 10BD     		pop	{r4, pc}
 2472              	.L206:
 2473 00a2 C046     		.align	2
 2474              	.L205:
 2475 00a4 80000000 		.word	.LANCHOR1
 2476 00a8 00010000 		.word	.LANCHOR2
 2477 00ac A5A5A5A5 		.word	-1515870811
 2478 00b0 00000000 		.word	.LANCHOR0
 2479              		.cfi_endproc
 2480              	.LFE55:
 2481              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2482              		.section	.text.vTaskSuspend,"ax",%progbits
 2483              		.align	2
 2484              		.global	vTaskSuspend
 2485              		.code	16
 2486              		.thumb_func
 2487              		.type	vTaskSuspend, %function
 2488              	vTaskSuspend:
 2489              	.LFB42:
1631:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 2490              		.loc 1 1631 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 0
 2493              		@ frame_needed = 0, uses_anonymous_args = 0
 2494              	.LVL250:
 2495 0000 70B5     		push	{r4, r5, r6, lr}
 2496              		.cfi_def_cfa_offset 16
 2497              		.cfi_offset 4, -16
 2498              		.cfi_offset 5, -12
 2499              		.cfi_offset 6, -8
 2500              		.cfi_offset 14, -4
 2501 0002 0400     		movs	r4, r0
1634:..\FreeRTOS10/tasks.c **** 		{
 2502              		.loc 1 1634 0
 2503 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 139


 2504              	.LVL251:
1638:..\FreeRTOS10/tasks.c **** 
 2505              		.loc 1 1638 0
 2506 0008 002C     		cmp	r4, #0
 2507 000a 01D1     		bne	.L208
1638:..\FreeRTOS10/tasks.c **** 
 2508              		.loc 1 1638 0 is_stmt 0 discriminator 1
 2509 000c 1D4B     		ldr	r3, .L215
 2510 000e 9C6D     		ldr	r4, [r3, #88]
 2511              	.LVL252:
 2512              	.L208:
1644:..\FreeRTOS10/tasks.c **** 			{
 2513              		.loc 1 1644 0 is_stmt 1 discriminator 4
 2514 0010 251D     		adds	r5, r4, #4
 2515 0012 2800     		movs	r0, r5
 2516 0014 FFF7FEFF 		bl	uxListRemove
 2517              	.LVL253:
1654:..\FreeRTOS10/tasks.c **** 			{
 2518              		.loc 1 1654 0 discriminator 4
 2519 0018 A36A     		ldr	r3, [r4, #40]
 2520 001a 002B     		cmp	r3, #0
 2521 001c 03D0     		beq	.L209
1656:..\FreeRTOS10/tasks.c **** 			}
 2522              		.loc 1 1656 0
 2523 001e 2000     		movs	r0, r4
 2524 0020 1830     		adds	r0, r0, #24
 2525 0022 FFF7FEFF 		bl	uxListRemove
 2526              	.LVL254:
 2527              	.L209:
1663:..\FreeRTOS10/tasks.c **** 
 2528              		.loc 1 1663 0
 2529 0026 2900     		movs	r1, r5
 2530 0028 1748     		ldr	r0, .L215+4
 2531 002a FFF7FEFF 		bl	vListInsertEnd
 2532              	.LVL255:
1667:..\FreeRTOS10/tasks.c **** 				{
 2533              		.loc 1 1667 0
 2534 002e 6423     		movs	r3, #100
 2535 0030 E35C     		ldrb	r3, [r4, r3]
 2536 0032 012B     		cmp	r3, #1
 2537 0034 02D1     		bne	.L210
1671:..\FreeRTOS10/tasks.c **** 				}
 2538              		.loc 1 1671 0
 2539 0036 0022     		movs	r2, #0
 2540 0038 6333     		adds	r3, r3, #99
 2541 003a E254     		strb	r2, [r4, r3]
 2542              	.L210:
1676:..\FreeRTOS10/tasks.c **** 
 2543              		.loc 1 1676 0
 2544 003c FFF7FEFF 		bl	vPortExitCritical
 2545              	.LVL256:
1678:..\FreeRTOS10/tasks.c **** 		{
 2546              		.loc 1 1678 0
 2547 0040 104B     		ldr	r3, .L215
 2548 0042 DB6D     		ldr	r3, [r3, #92]
 2549 0044 002B     		cmp	r3, #0
 2550 0046 05D0     		beq	.L211
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 140


1682:..\FreeRTOS10/tasks.c **** 			{
 2551              		.loc 1 1682 0
 2552 0048 FFF7FEFF 		bl	vPortEnterCritical
 2553              	.LVL257:
1684:..\FreeRTOS10/tasks.c **** 			}
 2554              		.loc 1 1684 0
 2555 004c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2556              	.LVL258:
1686:..\FreeRTOS10/tasks.c **** 		}
 2557              		.loc 1 1686 0
 2558 0050 FFF7FEFF 		bl	vPortExitCritical
 2559              	.LVL259:
 2560              	.L211:
1693:..\FreeRTOS10/tasks.c **** 		{
 2561              		.loc 1 1693 0
 2562 0054 0B4B     		ldr	r3, .L215
 2563 0056 9B6D     		ldr	r3, [r3, #88]
 2564 0058 9C42     		cmp	r4, r3
 2565 005a 12D1     		bne	.L207
1695:..\FreeRTOS10/tasks.c **** 			{
 2566              		.loc 1 1695 0
 2567 005c 094B     		ldr	r3, .L215
 2568 005e DB6D     		ldr	r3, [r3, #92]
 2569 0060 002B     		cmp	r3, #0
 2570 0062 02D0     		beq	.L213
1699:..\FreeRTOS10/tasks.c **** 			}
 2571              		.loc 1 1699 0
 2572 0064 FFF7FEFF 		bl	vPortYield
 2573              	.LVL260:
 2574 0068 0BE0     		b	.L207
 2575              	.L213:
1706:..\FreeRTOS10/tasks.c **** 				{
 2576              		.loc 1 1706 0
 2577 006a 074B     		ldr	r3, .L215+4
 2578 006c 1A68     		ldr	r2, [r3]
 2579 006e 054B     		ldr	r3, .L215
 2580 0070 5B6D     		ldr	r3, [r3, #84]
 2581 0072 9A42     		cmp	r2, r3
 2582 0074 03D1     		bne	.L214
1712:..\FreeRTOS10/tasks.c **** 				}
 2583              		.loc 1 1712 0
 2584 0076 0022     		movs	r2, #0
 2585 0078 024B     		ldr	r3, .L215
 2586 007a 9A65     		str	r2, [r3, #88]
 2587 007c 01E0     		b	.L207
 2588              	.L214:
1716:..\FreeRTOS10/tasks.c **** 				}
 2589              		.loc 1 1716 0
 2590 007e FFF7FEFF 		bl	vTaskSwitchContext
 2591              	.LVL261:
 2592              	.L207:
1724:..\FreeRTOS10/tasks.c **** 
 2593              		.loc 1 1724 0
 2594              		@ sp needed
 2595              	.LVL262:
 2596              	.LVL263:
 2597 0082 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 141


 2598              	.L216:
 2599              		.align	2
 2600              	.L215:
 2601 0084 80000000 		.word	.LANCHOR1
 2602 0088 00000000 		.word	.LANCHOR0
 2603              		.cfi_endproc
 2604              	.LFE42:
 2605              		.size	vTaskSuspend, .-vTaskSuspend
 2606              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2607              		.align	2
 2608              		.global	vTaskPlaceOnEventList
 2609              		.code	16
 2610              		.thumb_func
 2611              		.type	vTaskPlaceOnEventList, %function
 2612              	vTaskPlaceOnEventList:
 2613              	.LFB56:
2911:..\FreeRTOS10/tasks.c **** 	configASSERT( pxEventList );
 2614              		.loc 1 2911 0
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 0
 2617              		@ frame_needed = 0, uses_anonymous_args = 0
 2618              	.LVL264:
 2619 0000 10B5     		push	{r4, lr}
 2620              		.cfi_def_cfa_offset 8
 2621              		.cfi_offset 4, -8
 2622              		.cfi_offset 14, -4
 2623 0002 0C00     		movs	r4, r1
2921:..\FreeRTOS10/tasks.c **** 
 2624              		.loc 1 2921 0
 2625 0004 044B     		ldr	r3, .L218
 2626 0006 996D     		ldr	r1, [r3, #88]
 2627              	.LVL265:
 2628 0008 1831     		adds	r1, r1, #24
 2629 000a FFF7FEFF 		bl	vListInsert
 2630              	.LVL266:
2923:..\FreeRTOS10/tasks.c **** }
 2631              		.loc 1 2923 0
 2632 000e 0121     		movs	r1, #1
 2633 0010 2000     		movs	r0, r4
 2634 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2635              	.LVL267:
2924:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2636              		.loc 1 2924 0
 2637              		@ sp needed
 2638              	.LVL268:
 2639 0016 10BD     		pop	{r4, pc}
 2640              	.L219:
 2641              		.align	2
 2642              	.L218:
 2643 0018 80000000 		.word	.LANCHOR1
 2644              		.cfi_endproc
 2645              	.LFE56:
 2646              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2647              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2648              		.align	2
 2649              		.global	vTaskPlaceOnUnorderedEventList
 2650              		.code	16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 142


 2651              		.thumb_func
 2652              		.type	vTaskPlaceOnUnorderedEventList, %function
 2653              	vTaskPlaceOnUnorderedEventList:
 2654              	.LFB57:
2928:..\FreeRTOS10/tasks.c **** 	configASSERT( pxEventList );
 2655              		.loc 1 2928 0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 0
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 2659              	.LVL269:
 2660 0000 70B5     		push	{r4, r5, r6, lr}
 2661              		.cfi_def_cfa_offset 16
 2662              		.cfi_offset 4, -16
 2663              		.cfi_offset 5, -12
 2664              		.cfi_offset 6, -8
 2665              		.cfi_offset 14, -4
 2666 0002 1400     		movs	r4, r2
2938:..\FreeRTOS10/tasks.c **** 
 2667              		.loc 1 2938 0
 2668 0004 074B     		ldr	r3, .L221
 2669 0006 9A6D     		ldr	r2, [r3, #88]
 2670              	.LVL270:
 2671 0008 8025     		movs	r5, #128
 2672 000a 2D06     		lsls	r5, r5, #24
 2673 000c 2943     		orrs	r1, r5
 2674              	.LVL271:
 2675 000e 9161     		str	r1, [r2, #24]
2945:..\FreeRTOS10/tasks.c **** 
 2676              		.loc 1 2945 0
 2677 0010 996D     		ldr	r1, [r3, #88]
 2678 0012 1831     		adds	r1, r1, #24
 2679 0014 FFF7FEFF 		bl	vListInsertEnd
 2680              	.LVL272:
2947:..\FreeRTOS10/tasks.c **** }
 2681              		.loc 1 2947 0
 2682 0018 0121     		movs	r1, #1
 2683 001a 2000     		movs	r0, r4
 2684 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2685              	.LVL273:
2948:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2686              		.loc 1 2948 0
 2687              		@ sp needed
 2688              	.LVL274:
 2689 0020 70BD     		pop	{r4, r5, r6, pc}
 2690              	.L222:
 2691 0022 C046     		.align	2
 2692              	.L221:
 2693 0024 80000000 		.word	.LANCHOR1
 2694              		.cfi_endproc
 2695              	.LFE57:
 2696              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2697              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2698              		.align	2
 2699              		.global	xTaskRemoveFromEventList
 2700              		.code	16
 2701              		.thumb_func
 2702              		.type	xTaskRemoveFromEventList, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 143


 2703              	xTaskRemoveFromEventList:
 2704              	.LFB58:
2985:..\FreeRTOS10/tasks.c **** TCB_t *pxUnblockedTCB;
 2705              		.loc 1 2985 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 0
 2708              		@ frame_needed = 0, uses_anonymous_args = 0
 2709              	.LVL275:
 2710 0000 70B5     		push	{r4, r5, r6, lr}
 2711              		.cfi_def_cfa_offset 16
 2712              		.cfi_offset 4, -16
 2713              		.cfi_offset 5, -12
 2714              		.cfi_offset 6, -8
 2715              		.cfi_offset 14, -4
3002:..\FreeRTOS10/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2716              		.loc 1 3002 0
 2717 0002 C368     		ldr	r3, [r0, #12]
 2718 0004 DC68     		ldr	r4, [r3, #12]
 2719              	.LVL276:
3004:..\FreeRTOS10/tasks.c **** 
 2720              		.loc 1 3004 0
 2721 0006 2500     		movs	r5, r4
 2722 0008 1835     		adds	r5, r5, #24
 2723 000a 2800     		movs	r0, r5
 2724              	.LVL277:
 2725 000c FFF7FEFF 		bl	uxListRemove
 2726              	.LVL278:
3006:..\FreeRTOS10/tasks.c **** 	{
 2727              		.loc 1 3006 0
 2728 0010 154B     		ldr	r3, .L229
 2729 0012 1B6F     		ldr	r3, [r3, #112]
 2730 0014 002B     		cmp	r3, #0
 2731 0016 14D1     		bne	.L224
3008:..\FreeRTOS10/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2732              		.loc 1 3008 0
 2733 0018 251D     		adds	r5, r4, #4
 2734 001a 2800     		movs	r0, r5
 2735 001c FFF7FEFF 		bl	uxListRemove
 2736              	.LVL279:
3009:..\FreeRTOS10/tasks.c **** 	}
 2737              		.loc 1 3009 0
 2738 0020 E36A     		ldr	r3, [r4, #44]
 2739 0022 114A     		ldr	r2, .L229
 2740 0024 526E     		ldr	r2, [r2, #100]
 2741 0026 9342     		cmp	r3, r2
 2742 0028 01D9     		bls	.L225
3009:..\FreeRTOS10/tasks.c **** 	}
 2743              		.loc 1 3009 0 is_stmt 0 discriminator 1
 2744 002a 0F4A     		ldr	r2, .L229
 2745 002c 5366     		str	r3, [r2, #100]
 2746              	.L225:
3009:..\FreeRTOS10/tasks.c **** 	}
 2747              		.loc 1 3009 0 discriminator 3
 2748 002e 9A00     		lsls	r2, r3, #2
 2749 0030 D318     		adds	r3, r2, r3
 2750 0032 9A00     		lsls	r2, r3, #2
 2751 0034 0D48     		ldr	r0, .L229+4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 144


 2752 0036 3030     		adds	r0, r0, #48
 2753 0038 8018     		adds	r0, r0, r2
 2754 003a 2900     		movs	r1, r5
 2755 003c FFF7FEFF 		bl	vListInsertEnd
 2756              	.LVL280:
 2757 0040 04E0     		b	.L226
 2758              	.L224:
3015:..\FreeRTOS10/tasks.c **** 	}
 2759              		.loc 1 3015 0 is_stmt 1
 2760 0042 2900     		movs	r1, r5
 2761 0044 0948     		ldr	r0, .L229+4
 2762 0046 1430     		adds	r0, r0, #20
 2763 0048 FFF7FEFF 		bl	vListInsertEnd
 2764              	.LVL281:
 2765              	.L226:
3018:..\FreeRTOS10/tasks.c **** 	{
 2766              		.loc 1 3018 0
 2767 004c E26A     		ldr	r2, [r4, #44]
 2768 004e 064B     		ldr	r3, .L229
 2769 0050 9B6D     		ldr	r3, [r3, #88]
 2770 0052 DB6A     		ldr	r3, [r3, #44]
 2771 0054 9A42     		cmp	r2, r3
 2772 0056 04D9     		bls	.L228
 2773              	.LVL282:
3027:..\FreeRTOS10/tasks.c **** 	}
 2774              		.loc 1 3027 0
 2775 0058 0122     		movs	r2, #1
 2776 005a 054B     		ldr	r3, .L229+8
 2777 005c 1A60     		str	r2, [r3]
3023:..\FreeRTOS10/tasks.c **** 
 2778              		.loc 1 3023 0
 2779 005e 0120     		movs	r0, #1
 2780 0060 00E0     		b	.L227
 2781              	.LVL283:
 2782              	.L228:
3031:..\FreeRTOS10/tasks.c **** 	}
 2783              		.loc 1 3031 0
 2784 0062 0020     		movs	r0, #0
 2785              	.L227:
 2786              	.LVL284:
3049:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2787              		.loc 1 3049 0
 2788              		@ sp needed
 2789              	.LVL285:
 2790 0064 70BD     		pop	{r4, r5, r6, pc}
 2791              	.L230:
 2792 0066 C046     		.align	2
 2793              	.L229:
 2794 0068 80000000 		.word	.LANCHOR1
 2795 006c 00000000 		.word	.LANCHOR0
 2796 0070 00010000 		.word	.LANCHOR2
 2797              		.cfi_endproc
 2798              	.LFE58:
 2799              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2800              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 2801              		.align	2
 2802              		.global	vTaskRemoveFromUnorderedEventList
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 145


 2803              		.code	16
 2804              		.thumb_func
 2805              		.type	vTaskRemoveFromUnorderedEventList, %function
 2806              	vTaskRemoveFromUnorderedEventList:
 2807              	.LFB59:
3053:..\FreeRTOS10/tasks.c **** TCB_t *pxUnblockedTCB;
 2808              		.loc 1 3053 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 0
 2811              		@ frame_needed = 0, uses_anonymous_args = 0
 2812              	.LVL286:
 2813 0000 70B5     		push	{r4, r5, r6, lr}
 2814              		.cfi_def_cfa_offset 16
 2815              		.cfi_offset 4, -16
 2816              		.cfi_offset 5, -12
 2817              		.cfi_offset 6, -8
 2818              		.cfi_offset 14, -4
3061:..\FreeRTOS10/tasks.c **** 
 2819              		.loc 1 3061 0
 2820 0002 8023     		movs	r3, #128
 2821 0004 1B06     		lsls	r3, r3, #24
 2822 0006 1943     		orrs	r1, r3
 2823              	.LVL287:
 2824 0008 0160     		str	r1, [r0]
3065:..\FreeRTOS10/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2825              		.loc 1 3065 0
 2826 000a C568     		ldr	r5, [r0, #12]
 2827              	.LVL288:
3067:..\FreeRTOS10/tasks.c **** 
 2828              		.loc 1 3067 0
 2829 000c FFF7FEFF 		bl	uxListRemove
 2830              	.LVL289:
3072:..\FreeRTOS10/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 2831              		.loc 1 3072 0
 2832 0010 2C1D     		adds	r4, r5, #4
 2833 0012 2000     		movs	r0, r4
 2834 0014 FFF7FEFF 		bl	uxListRemove
 2835              	.LVL290:
3073:..\FreeRTOS10/tasks.c **** 
 2836              		.loc 1 3073 0
 2837 0018 EB6A     		ldr	r3, [r5, #44]
 2838 001a 0C4A     		ldr	r2, .L234
 2839 001c 526E     		ldr	r2, [r2, #100]
 2840 001e 9342     		cmp	r3, r2
 2841 0020 01D9     		bls	.L232
3073:..\FreeRTOS10/tasks.c **** 
 2842              		.loc 1 3073 0 is_stmt 0 discriminator 1
 2843 0022 0A4A     		ldr	r2, .L234
 2844 0024 5366     		str	r3, [r2, #100]
 2845              	.L232:
3073:..\FreeRTOS10/tasks.c **** 
 2846              		.loc 1 3073 0 discriminator 3
 2847 0026 9A00     		lsls	r2, r3, #2
 2848 0028 D318     		adds	r3, r2, r3
 2849 002a 9A00     		lsls	r2, r3, #2
 2850 002c 0848     		ldr	r0, .L234+4
 2851 002e 3030     		adds	r0, r0, #48
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 146


 2852 0030 8018     		adds	r0, r0, r2
 2853 0032 2100     		movs	r1, r4
 2854 0034 FFF7FEFF 		bl	vListInsertEnd
 2855              	.LVL291:
3075:..\FreeRTOS10/tasks.c **** 	{
 2856              		.loc 1 3075 0 is_stmt 1 discriminator 3
 2857 0038 EA6A     		ldr	r2, [r5, #44]
 2858 003a 044B     		ldr	r3, .L234
 2859 003c 9B6D     		ldr	r3, [r3, #88]
 2860 003e DB6A     		ldr	r3, [r3, #44]
 2861 0040 9A42     		cmp	r2, r3
 2862 0042 02D9     		bls	.L231
3081:..\FreeRTOS10/tasks.c **** 	}
 2863              		.loc 1 3081 0
 2864 0044 0122     		movs	r2, #1
 2865 0046 034B     		ldr	r3, .L234+8
 2866 0048 1A60     		str	r2, [r3]
 2867              	.L231:
3083:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2868              		.loc 1 3083 0
 2869              		@ sp needed
 2870              	.LVL292:
 2871 004a 70BD     		pop	{r4, r5, r6, pc}
 2872              	.L235:
 2873              		.align	2
 2874              	.L234:
 2875 004c 80000000 		.word	.LANCHOR1
 2876 0050 00000000 		.word	.LANCHOR0
 2877 0054 00010000 		.word	.LANCHOR2
 2878              		.cfi_endproc
 2879              	.LFE59:
 2880              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 2881              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2882              		.align	2
 2883              		.global	vTaskSetTimeOutState
 2884              		.code	16
 2885              		.thumb_func
 2886              		.type	vTaskSetTimeOutState, %function
 2887              	vTaskSetTimeOutState:
 2888              	.LFB60:
3087:..\FreeRTOS10/tasks.c **** 	configASSERT( pxTimeOut );
 2889              		.loc 1 3087 0
 2890              		.cfi_startproc
 2891              		@ args = 0, pretend = 0, frame = 0
 2892              		@ frame_needed = 0, uses_anonymous_args = 0
 2893              	.LVL293:
 2894 0000 10B5     		push	{r4, lr}
 2895              		.cfi_def_cfa_offset 8
 2896              		.cfi_offset 4, -8
 2897              		.cfi_offset 14, -4
 2898 0002 0400     		movs	r4, r0
3089:..\FreeRTOS10/tasks.c **** 	{
 2899              		.loc 1 3089 0
 2900 0004 FFF7FEFF 		bl	vPortEnterCritical
 2901              	.LVL294:
3091:..\FreeRTOS10/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 2902              		.loc 1 3091 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 147


 2903 0008 034B     		ldr	r3, .L237
 2904 000a 9A6F     		ldr	r2, [r3, #120]
 2905 000c 2260     		str	r2, [r4]
3092:..\FreeRTOS10/tasks.c **** 	}
 2906              		.loc 1 3092 0
 2907 000e DB6E     		ldr	r3, [r3, #108]
 2908 0010 6360     		str	r3, [r4, #4]
3094:..\FreeRTOS10/tasks.c **** }
 2909              		.loc 1 3094 0
 2910 0012 FFF7FEFF 		bl	vPortExitCritical
 2911              	.LVL295:
3095:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2912              		.loc 1 3095 0
 2913              		@ sp needed
 2914              	.LVL296:
 2915 0016 10BD     		pop	{r4, pc}
 2916              	.L238:
 2917              		.align	2
 2918              	.L237:
 2919 0018 80000000 		.word	.LANCHOR1
 2920              		.cfi_endproc
 2921              	.LFE60:
 2922              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 2923              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 2924              		.align	2
 2925              		.global	vTaskInternalSetTimeOutState
 2926              		.code	16
 2927              		.thumb_func
 2928              		.type	vTaskInternalSetTimeOutState, %function
 2929              	vTaskInternalSetTimeOutState:
 2930              	.LFB61:
3099:..\FreeRTOS10/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 2931              		.loc 1 3099 0
 2932              		.cfi_startproc
 2933              		@ args = 0, pretend = 0, frame = 0
 2934              		@ frame_needed = 0, uses_anonymous_args = 0
 2935              		@ link register save eliminated.
 2936              	.LVL297:
3101:..\FreeRTOS10/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2937              		.loc 1 3101 0
 2938 0000 024B     		ldr	r3, .L240
 2939 0002 9A6F     		ldr	r2, [r3, #120]
 2940 0004 0260     		str	r2, [r0]
3102:..\FreeRTOS10/tasks.c **** }
 2941              		.loc 1 3102 0
 2942 0006 DB6E     		ldr	r3, [r3, #108]
 2943 0008 4360     		str	r3, [r0, #4]
3103:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 2944              		.loc 1 3103 0
 2945              		@ sp needed
 2946 000a 7047     		bx	lr
 2947              	.L241:
 2948              		.align	2
 2949              	.L240:
 2950 000c 80000000 		.word	.LANCHOR1
 2951              		.cfi_endproc
 2952              	.LFE61:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 148


 2953              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 2954              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2955              		.align	2
 2956              		.global	xTaskCheckForTimeOut
 2957              		.code	16
 2958              		.thumb_func
 2959              		.type	xTaskCheckForTimeOut, %function
 2960              	xTaskCheckForTimeOut:
 2961              	.LFB62:
3107:..\FreeRTOS10/tasks.c **** BaseType_t xReturn;
 2962              		.loc 1 3107 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 0
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
 2966              	.LVL298:
 2967 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2968              		.cfi_def_cfa_offset 24
 2969              		.cfi_offset 3, -24
 2970              		.cfi_offset 4, -20
 2971              		.cfi_offset 5, -16
 2972              		.cfi_offset 6, -12
 2973              		.cfi_offset 7, -8
 2974              		.cfi_offset 14, -4
 2975 0002 0400     		movs	r4, r0
 2976 0004 0D00     		movs	r5, r1
3113:..\FreeRTOS10/tasks.c **** 	{
 2977              		.loc 1 3113 0
 2978 0006 FFF7FEFF 		bl	vPortEnterCritical
 2979              	.LVL299:
 2980              	.LBB14:
3116:..\FreeRTOS10/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 2981              		.loc 1 3116 0
 2982 000a 114B     		ldr	r3, .L248
 2983 000c D96E     		ldr	r1, [r3, #108]
 2984              	.LVL300:
3117:..\FreeRTOS10/tasks.c **** 
 2985              		.loc 1 3117 0
 2986 000e 6268     		ldr	r2, [r4, #4]
 2987 0010 881A     		subs	r0, r1, r2
 2988              	.LVL301:
3131:..\FreeRTOS10/tasks.c **** 			{
 2989              		.loc 1 3131 0
 2990 0012 2B68     		ldr	r3, [r5]
 2991 0014 5E1C     		adds	r6, r3, #1
 2992 0016 13D0     		beq	.L246
3141:..\FreeRTOS10/tasks.c **** 		{
 2993              		.loc 1 3141 0
 2994 0018 0D4E     		ldr	r6, .L248
 2995 001a B66F     		ldr	r6, [r6, #120]
 2996 001c 2768     		ldr	r7, [r4]
 2997 001e B742     		cmp	r7, r6
 2998 0020 01D0     		beq	.L244
3141:..\FreeRTOS10/tasks.c **** 		{
 2999              		.loc 1 3141 0 is_stmt 0 discriminator 1
 3000 0022 9142     		cmp	r1, r2
 3001 0024 0ED2     		bcs	.L247
 3002              	.L244:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 149


3150:..\FreeRTOS10/tasks.c **** 		{
 3003              		.loc 1 3150 0 is_stmt 1
 3004 0026 9842     		cmp	r0, r3
 3005 0028 06D2     		bcs	.L245
3153:..\FreeRTOS10/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3006              		.loc 1 3153 0
 3007 002a 1B1A     		subs	r3, r3, r0
 3008 002c 2B60     		str	r3, [r5]
3154:..\FreeRTOS10/tasks.c **** 			xReturn = pdFALSE;
 3009              		.loc 1 3154 0
 3010 002e 2000     		movs	r0, r4
 3011              	.LVL302:
 3012 0030 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3013              	.LVL303:
3155:..\FreeRTOS10/tasks.c **** 		}
 3014              		.loc 1 3155 0
 3015 0034 0024     		movs	r4, #0
 3016              	.LVL304:
 3017 0036 06E0     		b	.L243
 3018              	.LVL305:
 3019              	.L245:
3159:..\FreeRTOS10/tasks.c **** 			xReturn = pdTRUE;
 3020              		.loc 1 3159 0
 3021 0038 0023     		movs	r3, #0
 3022 003a 2B60     		str	r3, [r5]
 3023              	.LVL306:
3160:..\FreeRTOS10/tasks.c **** 		}
 3024              		.loc 1 3160 0
 3025 003c 0124     		movs	r4, #1
 3026              	.LVL307:
 3027 003e 02E0     		b	.L243
 3028              	.LVL308:
 3029              	.L246:
3136:..\FreeRTOS10/tasks.c **** 			}
 3030              		.loc 1 3136 0
 3031 0040 0024     		movs	r4, #0
 3032              	.LVL309:
 3033 0042 00E0     		b	.L243
 3034              	.LVL310:
 3035              	.L247:
3148:..\FreeRTOS10/tasks.c **** 		}
 3036              		.loc 1 3148 0
 3037 0044 0124     		movs	r4, #1
 3038              	.LVL311:
 3039              	.L243:
 3040              	.LBE14:
3163:..\FreeRTOS10/tasks.c **** 
 3041              		.loc 1 3163 0
 3042 0046 FFF7FEFF 		bl	vPortExitCritical
 3043              	.LVL312:
3166:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 3044              		.loc 1 3166 0
 3045 004a 2000     		movs	r0, r4
 3046              		@ sp needed
 3047              	.LVL313:
 3048              	.LVL314:
 3049 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 150


 3050              	.L249:
 3051 004e C046     		.align	2
 3052              	.L248:
 3053 0050 80000000 		.word	.LANCHOR1
 3054              		.cfi_endproc
 3055              	.LFE62:
 3056              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3057              		.section	.text.vTaskMissedYield,"ax",%progbits
 3058              		.align	2
 3059              		.global	vTaskMissedYield
 3060              		.code	16
 3061              		.thumb_func
 3062              		.type	vTaskMissedYield, %function
 3063              	vTaskMissedYield:
 3064              	.LFB63:
3170:..\FreeRTOS10/tasks.c **** 	xYieldPending = pdTRUE;
 3065              		.loc 1 3170 0
 3066              		.cfi_startproc
 3067              		@ args = 0, pretend = 0, frame = 0
 3068              		@ frame_needed = 0, uses_anonymous_args = 0
 3069              		@ link register save eliminated.
3171:..\FreeRTOS10/tasks.c **** }
 3070              		.loc 1 3171 0
 3071 0000 0122     		movs	r2, #1
 3072 0002 014B     		ldr	r3, .L251
 3073 0004 1A60     		str	r2, [r3]
3172:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 3074              		.loc 1 3172 0
 3075              		@ sp needed
 3076 0006 7047     		bx	lr
 3077              	.L252:
 3078              		.align	2
 3079              	.L251:
 3080 0008 00010000 		.word	.LANCHOR2
 3081              		.cfi_endproc
 3082              	.LFE63:
 3083              		.size	vTaskMissedYield, .-vTaskMissedYield
 3084              		.section	.text.vTaskSetThreadLocalStoragePointer,"ax",%progbits
 3085              		.align	2
 3086              		.global	vTaskSetThreadLocalStoragePointer
 3087              		.code	16
 3088              		.thumb_func
 3089              		.type	vTaskSetThreadLocalStoragePointer, %function
 3090              	vTaskSetThreadLocalStoragePointer:
 3091              	.LFB65:
3384:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 3092              		.loc 1 3384 0
 3093              		.cfi_startproc
 3094              		@ args = 0, pretend = 0, frame = 0
 3095              		@ frame_needed = 0, uses_anonymous_args = 0
 3096              		@ link register save eliminated.
 3097              	.LVL315:
3387:..\FreeRTOS10/tasks.c **** 		{
 3098              		.loc 1 3387 0
 3099 0000 0429     		cmp	r1, #4
 3100 0002 07DC     		bgt	.L253
3389:..\FreeRTOS10/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 151


 3101              		.loc 1 3389 0
 3102 0004 0028     		cmp	r0, #0
 3103 0006 01D1     		bne	.L255
3389:..\FreeRTOS10/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 3104              		.loc 1 3389 0 is_stmt 0 discriminator 1
 3105 0008 034B     		ldr	r3, .L256
 3106 000a 986D     		ldr	r0, [r3, #88]
 3107              	.LVL316:
 3108              	.L255:
3390:..\FreeRTOS10/tasks.c **** 		}
 3109              		.loc 1 3390 0 is_stmt 1 discriminator 4
 3110 000c 1231     		adds	r1, r1, #18
 3111              	.LVL317:
 3112 000e 8900     		lsls	r1, r1, #2
 3113              	.LVL318:
 3114 0010 4018     		adds	r0, r0, r1
 3115              	.LVL319:
 3116 0012 4260     		str	r2, [r0, #4]
 3117              	.L253:
3392:..\FreeRTOS10/tasks.c **** 
 3118              		.loc 1 3392 0
 3119              		@ sp needed
 3120 0014 7047     		bx	lr
 3121              	.L257:
 3122 0016 C046     		.align	2
 3123              	.L256:
 3124 0018 80000000 		.word	.LANCHOR1
 3125              		.cfi_endproc
 3126              	.LFE65:
 3127              		.size	vTaskSetThreadLocalStoragePointer, .-vTaskSetThreadLocalStoragePointer
 3128              		.section	.text.pvTaskGetThreadLocalStoragePointer,"ax",%progbits
 3129              		.align	2
 3130              		.global	pvTaskGetThreadLocalStoragePointer
 3131              		.code	16
 3132              		.thumb_func
 3133              		.type	pvTaskGetThreadLocalStoragePointer, %function
 3134              	pvTaskGetThreadLocalStoragePointer:
 3135              	.LFB66:
3400:..\FreeRTOS10/tasks.c **** 	void *pvReturn = NULL;
 3136              		.loc 1 3400 0
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 0
 3139              		@ frame_needed = 0, uses_anonymous_args = 0
 3140              		@ link register save eliminated.
 3141              	.LVL320:
3404:..\FreeRTOS10/tasks.c **** 		{
 3142              		.loc 1 3404 0
 3143 0000 0429     		cmp	r1, #4
 3144 0002 08DC     		bgt	.L261
3406:..\FreeRTOS10/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3145              		.loc 1 3406 0
 3146 0004 0028     		cmp	r0, #0
 3147 0006 01D1     		bne	.L260
3406:..\FreeRTOS10/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 3148              		.loc 1 3406 0 is_stmt 0 discriminator 1
 3149 0008 044B     		ldr	r3, .L262
 3150 000a 986D     		ldr	r0, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 152


 3151              	.LVL321:
 3152              	.L260:
3407:..\FreeRTOS10/tasks.c **** 		}
 3153              		.loc 1 3407 0 is_stmt 1 discriminator 4
 3154 000c 1231     		adds	r1, r1, #18
 3155              	.LVL322:
 3156 000e 8900     		lsls	r1, r1, #2
 3157              	.LVL323:
 3158 0010 4018     		adds	r0, r0, r1
 3159              	.LVL324:
 3160 0012 4068     		ldr	r0, [r0, #4]
 3161              	.LVL325:
 3162 0014 00E0     		b	.L259
 3163              	.LVL326:
 3164              	.L261:
3411:..\FreeRTOS10/tasks.c **** 		}
 3165              		.loc 1 3411 0
 3166 0016 0020     		movs	r0, #0
 3167              	.LVL327:
 3168              	.L259:
3415:..\FreeRTOS10/tasks.c **** 
 3169              		.loc 1 3415 0
 3170              		@ sp needed
 3171 0018 7047     		bx	lr
 3172              	.L263:
 3173 001a C046     		.align	2
 3174              	.L262:
 3175 001c 80000000 		.word	.LANCHOR1
 3176              		.cfi_endproc
 3177              	.LFE66:
 3178              		.size	pvTaskGetThreadLocalStoragePointer, .-pvTaskGetThreadLocalStoragePointer
 3179              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3180              		.align	2
 3181              		.global	uxTaskGetStackHighWaterMark
 3182              		.code	16
 3183              		.thumb_func
 3184              		.type	uxTaskGetStackHighWaterMark, %function
 3185              	uxTaskGetStackHighWaterMark:
 3186              	.LFB70:
3649:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 3187              		.loc 1 3649 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 0
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 3191              	.LVL328:
 3192 0000 10B5     		push	{r4, lr}
 3193              		.cfi_def_cfa_offset 8
 3194              		.cfi_offset 4, -8
 3195              		.cfi_offset 14, -4
3654:..\FreeRTOS10/tasks.c **** 
 3196              		.loc 1 3654 0
 3197 0002 0028     		cmp	r0, #0
 3198 0004 01D1     		bne	.L265
3654:..\FreeRTOS10/tasks.c **** 
 3199              		.loc 1 3654 0 is_stmt 0 discriminator 1
 3200 0006 034B     		ldr	r3, .L266
 3201 0008 986D     		ldr	r0, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 153


 3202              	.LVL329:
 3203              	.L265:
3658:..\FreeRTOS10/tasks.c **** 		}
 3204              		.loc 1 3658 0 is_stmt 1 discriminator 4
 3205 000a 006B     		ldr	r0, [r0, #48]
 3206              	.LVL330:
3666:..\FreeRTOS10/tasks.c **** 
 3207              		.loc 1 3666 0 discriminator 4
 3208 000c FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3209              	.LVL331:
3669:..\FreeRTOS10/tasks.c **** 
 3210              		.loc 1 3669 0 discriminator 4
 3211              		@ sp needed
 3212 0010 10BD     		pop	{r4, pc}
 3213              	.L267:
 3214 0012 C046     		.align	2
 3215              	.L266:
 3216 0014 80000000 		.word	.LANCHOR1
 3217              		.cfi_endproc
 3218              	.LFE70:
 3219              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3220              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3221              		.align	2
 3222              		.global	xTaskGetCurrentTaskHandle
 3223              		.code	16
 3224              		.thumb_func
 3225              		.type	xTaskGetCurrentTaskHandle, %function
 3226              	xTaskGetCurrentTaskHandle:
 3227              	.LFB73:
3757:..\FreeRTOS10/tasks.c **** 	TaskHandle_t xReturn;
 3228              		.loc 1 3757 0
 3229              		.cfi_startproc
 3230              		@ args = 0, pretend = 0, frame = 0
 3231              		@ frame_needed = 0, uses_anonymous_args = 0
 3232              		@ link register save eliminated.
3763:..\FreeRTOS10/tasks.c **** 
 3233              		.loc 1 3763 0
 3234 0000 014B     		ldr	r3, .L269
 3235 0002 986D     		ldr	r0, [r3, #88]
 3236              	.LVL332:
3766:..\FreeRTOS10/tasks.c **** 
 3237              		.loc 1 3766 0
 3238              		@ sp needed
 3239 0004 7047     		bx	lr
 3240              	.L270:
 3241 0006 C046     		.align	2
 3242              	.L269:
 3243 0008 80000000 		.word	.LANCHOR1
 3244              		.cfi_endproc
 3245              	.LFE73:
 3246              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3247              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3248              		.align	2
 3249              		.global	xTaskGetSchedulerState
 3250              		.code	16
 3251              		.thumb_func
 3252              		.type	xTaskGetSchedulerState, %function
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 154


 3253              	xTaskGetSchedulerState:
 3254              	.LFB74:
3774:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
 3255              		.loc 1 3774 0
 3256              		.cfi_startproc
 3257              		@ args = 0, pretend = 0, frame = 0
 3258              		@ frame_needed = 0, uses_anonymous_args = 0
 3259              		@ link register save eliminated.
3777:..\FreeRTOS10/tasks.c **** 		{
 3260              		.loc 1 3777 0
 3261 0000 064B     		ldr	r3, .L275
 3262 0002 DB6D     		ldr	r3, [r3, #92]
 3263 0004 002B     		cmp	r3, #0
 3264 0006 05D0     		beq	.L273
3783:..\FreeRTOS10/tasks.c **** 			{
 3265              		.loc 1 3783 0
 3266 0008 044B     		ldr	r3, .L275
 3267 000a 1B6F     		ldr	r3, [r3, #112]
 3268 000c 002B     		cmp	r3, #0
 3269 000e 03D1     		bne	.L274
3785:..\FreeRTOS10/tasks.c **** 			}
 3270              		.loc 1 3785 0
 3271 0010 0220     		movs	r0, #2
 3272 0012 02E0     		b	.L272
 3273              	.L273:
3779:..\FreeRTOS10/tasks.c **** 		}
 3274              		.loc 1 3779 0
 3275 0014 0120     		movs	r0, #1
 3276 0016 00E0     		b	.L272
 3277              	.L274:
3789:..\FreeRTOS10/tasks.c **** 			}
 3278              		.loc 1 3789 0
 3279 0018 0020     		movs	r0, #0
 3280              	.L272:
 3281              	.LVL333:
3794:..\FreeRTOS10/tasks.c **** 
 3282              		.loc 1 3794 0
 3283              		@ sp needed
 3284 001a 7047     		bx	lr
 3285              	.L276:
 3286              		.align	2
 3287              	.L275:
 3288 001c 80000000 		.word	.LANCHOR1
 3289              		.cfi_endproc
 3290              	.LFE74:
 3291              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 3292              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3293              		.align	2
 3294              		.global	xTaskPriorityInherit
 3295              		.code	16
 3296              		.thumb_func
 3297              		.type	xTaskPriorityInherit, %function
 3298              	xTaskPriorityInherit:
 3299              	.LFB75:
3802:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3300              		.loc 1 3802 0
 3301              		.cfi_startproc
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 155


 3302              		@ args = 0, pretend = 0, frame = 0
 3303              		@ frame_needed = 0, uses_anonymous_args = 0
 3304              	.LVL334:
 3305 0000 70B5     		push	{r4, r5, r6, lr}
 3306              		.cfi_def_cfa_offset 16
 3307              		.cfi_offset 4, -16
 3308              		.cfi_offset 5, -12
 3309              		.cfi_offset 6, -8
 3310              		.cfi_offset 14, -4
 3311 0002 041E     		subs	r4, r0, #0
 3312              	.LVL335:
3809:..\FreeRTOS10/tasks.c **** 		{
 3313              		.loc 1 3809 0
 3314 0004 42D0     		beq	.L284
3814:..\FreeRTOS10/tasks.c **** 			{
 3315              		.loc 1 3814 0
 3316 0006 C36A     		ldr	r3, [r0, #44]
 3317 0008 224A     		ldr	r2, .L287
 3318 000a 926D     		ldr	r2, [r2, #88]
 3319 000c D26A     		ldr	r2, [r2, #44]
 3320 000e 9342     		cmp	r3, r2
 3321 0010 34D2     		bcs	.L279
3819:..\FreeRTOS10/tasks.c **** 				{
 3322              		.loc 1 3819 0
 3323 0012 8269     		ldr	r2, [r0, #24]
 3324 0014 002A     		cmp	r2, #0
 3325 0016 05DB     		blt	.L280
3821:..\FreeRTOS10/tasks.c **** 				}
 3326              		.loc 1 3821 0
 3327 0018 1E4A     		ldr	r2, .L287
 3328 001a 926D     		ldr	r2, [r2, #88]
 3329 001c D16A     		ldr	r1, [r2, #44]
 3330 001e 0522     		movs	r2, #5
 3331 0020 521A     		subs	r2, r2, r1
 3332 0022 8261     		str	r2, [r0, #24]
 3333              	.L280:
3830:..\FreeRTOS10/tasks.c **** 				{
 3334              		.loc 1 3830 0
 3335 0024 9A00     		lsls	r2, r3, #2
 3336 0026 D318     		adds	r3, r2, r3
 3337 0028 9A00     		lsls	r2, r3, #2
 3338 002a 1B4B     		ldr	r3, .L287+4
 3339 002c 3033     		adds	r3, r3, #48
 3340 002e 9A18     		adds	r2, r3, r2
 3341 0030 6369     		ldr	r3, [r4, #20]
 3342 0032 9342     		cmp	r3, r2
 3343 0034 01D1     		bne	.L285
 3344 0036 0123     		movs	r3, #1
 3345 0038 00E0     		b	.L281
 3346              	.L285:
 3347 003a 0023     		movs	r3, #0
 3348              	.L281:
3830:..\FreeRTOS10/tasks.c **** 				{
 3349              		.loc 1 3830 0 is_stmt 0 discriminator 4
 3350 003c 002B     		cmp	r3, #0
 3351 003e 17D0     		beq	.L282
3832:..\FreeRTOS10/tasks.c **** 					{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 156


 3352              		.loc 1 3832 0 is_stmt 1
 3353 0040 251D     		adds	r5, r4, #4
 3354 0042 2800     		movs	r0, r5
 3355              	.LVL336:
 3356 0044 FFF7FEFF 		bl	uxListRemove
 3357              	.LVL337:
3842:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3358              		.loc 1 3842 0
 3359 0048 124A     		ldr	r2, .L287
 3360 004a 936D     		ldr	r3, [r2, #88]
 3361 004c DB6A     		ldr	r3, [r3, #44]
 3362 004e E362     		str	r3, [r4, #44]
3843:..\FreeRTOS10/tasks.c **** 				}
 3363              		.loc 1 3843 0
 3364 0050 526E     		ldr	r2, [r2, #100]
 3365 0052 9342     		cmp	r3, r2
 3366 0054 01D9     		bls	.L283
3843:..\FreeRTOS10/tasks.c **** 				}
 3367              		.loc 1 3843 0 is_stmt 0 discriminator 1
 3368 0056 0F4A     		ldr	r2, .L287
 3369 0058 5366     		str	r3, [r2, #100]
 3370              	.L283:
3843:..\FreeRTOS10/tasks.c **** 				}
 3371              		.loc 1 3843 0 discriminator 3
 3372 005a 9A00     		lsls	r2, r3, #2
 3373 005c D318     		adds	r3, r2, r3
 3374 005e 9A00     		lsls	r2, r3, #2
 3375 0060 0D48     		ldr	r0, .L287+4
 3376 0062 3030     		adds	r0, r0, #48
 3377 0064 8018     		adds	r0, r0, r2
 3378 0066 2900     		movs	r1, r5
 3379 0068 FFF7FEFF 		bl	vListInsertEnd
 3380              	.LVL338:
3854:..\FreeRTOS10/tasks.c **** 			}
 3381              		.loc 1 3854 0 is_stmt 1 discriminator 3
 3382 006c 0120     		movs	r0, #1
 3383 006e 10E0     		b	.L278
 3384              	.LVL339:
 3385              	.L282:
3848:..\FreeRTOS10/tasks.c **** 				}
 3386              		.loc 1 3848 0
 3387 0070 084B     		ldr	r3, .L287
 3388 0072 9B6D     		ldr	r3, [r3, #88]
 3389 0074 DB6A     		ldr	r3, [r3, #44]
 3390 0076 E362     		str	r3, [r4, #44]
3854:..\FreeRTOS10/tasks.c **** 			}
 3391              		.loc 1 3854 0
 3392 0078 0120     		movs	r0, #1
 3393              	.LVL340:
 3394 007a 0AE0     		b	.L278
 3395              	.LVL341:
 3396              	.L279:
3858:..\FreeRTOS10/tasks.c **** 				{
 3397              		.loc 1 3858 0
 3398 007c 426C     		ldr	r2, [r0, #68]
 3399 007e 054B     		ldr	r3, .L287
 3400 0080 9B6D     		ldr	r3, [r3, #88]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 157


 3401 0082 DB6A     		ldr	r3, [r3, #44]
 3402 0084 9A42     		cmp	r2, r3
 3403 0086 03D3     		bcc	.L286
3804:..\FreeRTOS10/tasks.c **** 
 3404              		.loc 1 3804 0
 3405 0088 0020     		movs	r0, #0
 3406              	.LVL342:
 3407 008a 02E0     		b	.L278
 3408              	.LVL343:
 3409              	.L284:
 3410 008c 0020     		movs	r0, #0
 3411              	.LVL344:
 3412 008e 00E0     		b	.L278
 3413              	.LVL345:
 3414              	.L286:
3867:..\FreeRTOS10/tasks.c **** 				}
 3415              		.loc 1 3867 0
 3416 0090 0120     		movs	r0, #1
 3417              	.LVL346:
 3418              	.L278:
3881:..\FreeRTOS10/tasks.c **** 
 3419              		.loc 1 3881 0
 3420              		@ sp needed
 3421              	.LVL347:
 3422 0092 70BD     		pop	{r4, r5, r6, pc}
 3423              	.L288:
 3424              		.align	2
 3425              	.L287:
 3426 0094 80000000 		.word	.LANCHOR1
 3427 0098 00000000 		.word	.LANCHOR0
 3428              		.cfi_endproc
 3429              	.LFE75:
 3430              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3431              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3432              		.align	2
 3433              		.global	xTaskPriorityDisinherit
 3434              		.code	16
 3435              		.thumb_func
 3436              		.type	xTaskPriorityDisinherit, %function
 3437              	xTaskPriorityDisinherit:
 3438              	.LFB76:
3889:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3439              		.loc 1 3889 0
 3440              		.cfi_startproc
 3441              		@ args = 0, pretend = 0, frame = 0
 3442              		@ frame_needed = 0, uses_anonymous_args = 0
 3443              	.LVL348:
 3444 0000 70B5     		push	{r4, r5, r6, lr}
 3445              		.cfi_def_cfa_offset 16
 3446              		.cfi_offset 4, -16
 3447              		.cfi_offset 5, -12
 3448              		.cfi_offset 6, -8
 3449              		.cfi_offset 14, -4
 3450 0002 041E     		subs	r4, r0, #0
 3451              	.LVL349:
3893:..\FreeRTOS10/tasks.c **** 		{
 3452              		.loc 1 3893 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 158


 3453 0004 22D0     		beq	.L292
3901:..\FreeRTOS10/tasks.c **** 
 3454              		.loc 1 3901 0
 3455 0006 836C     		ldr	r3, [r0, #72]
 3456 0008 013B     		subs	r3, r3, #1
 3457 000a 8364     		str	r3, [r0, #72]
3905:..\FreeRTOS10/tasks.c **** 			{
 3458              		.loc 1 3905 0
 3459 000c C26A     		ldr	r2, [r0, #44]
 3460 000e 416C     		ldr	r1, [r0, #68]
 3461 0010 8A42     		cmp	r2, r1
 3462 0012 1DD0     		beq	.L293
3908:..\FreeRTOS10/tasks.c **** 				{
 3463              		.loc 1 3908 0
 3464 0014 002B     		cmp	r3, #0
 3465 0016 1DD1     		bne	.L294
3915:..\FreeRTOS10/tasks.c **** 					{
 3466              		.loc 1 3915 0
 3467 0018 051D     		adds	r5, r0, #4
 3468 001a 2800     		movs	r0, r5
 3469              	.LVL350:
 3470 001c FFF7FEFF 		bl	uxListRemove
 3471              	.LVL351:
3927:..\FreeRTOS10/tasks.c **** 
 3472              		.loc 1 3927 0
 3473 0020 636C     		ldr	r3, [r4, #68]
 3474 0022 E362     		str	r3, [r4, #44]
3932:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3475              		.loc 1 3932 0
 3476 0024 0522     		movs	r2, #5
 3477 0026 D21A     		subs	r2, r2, r3
 3478 0028 A261     		str	r2, [r4, #24]
3933:..\FreeRTOS10/tasks.c **** 
 3479              		.loc 1 3933 0
 3480 002a 0B4A     		ldr	r2, .L295
 3481 002c 526E     		ldr	r2, [r2, #100]
 3482 002e 9342     		cmp	r3, r2
 3483 0030 01D9     		bls	.L291
3933:..\FreeRTOS10/tasks.c **** 
 3484              		.loc 1 3933 0 is_stmt 0 discriminator 1
 3485 0032 094A     		ldr	r2, .L295
 3486 0034 5366     		str	r3, [r2, #100]
 3487              	.L291:
3933:..\FreeRTOS10/tasks.c **** 
 3488              		.loc 1 3933 0 discriminator 3
 3489 0036 9A00     		lsls	r2, r3, #2
 3490 0038 D318     		adds	r3, r2, r3
 3491 003a 9A00     		lsls	r2, r3, #2
 3492 003c 0748     		ldr	r0, .L295+4
 3493 003e 3030     		adds	r0, r0, #48
 3494 0040 8018     		adds	r0, r0, r2
 3495 0042 2900     		movs	r1, r5
 3496 0044 FFF7FEFF 		bl	vListInsertEnd
 3497              	.LVL352:
3943:..\FreeRTOS10/tasks.c **** 				}
 3498              		.loc 1 3943 0 is_stmt 1 discriminator 3
 3499 0048 0120     		movs	r0, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 159


 3500 004a 04E0     		b	.L290
 3501              	.LVL353:
 3502              	.L292:
3891:..\FreeRTOS10/tasks.c **** 
 3503              		.loc 1 3891 0
 3504 004c 0020     		movs	r0, #0
 3505              	.LVL354:
 3506 004e 02E0     		b	.L290
 3507              	.LVL355:
 3508              	.L293:
 3509 0050 0020     		movs	r0, #0
 3510              	.LVL356:
 3511 0052 00E0     		b	.L290
 3512              	.LVL357:
 3513              	.L294:
 3514 0054 0020     		movs	r0, #0
 3515              	.LVL358:
 3516              	.L290:
3961:..\FreeRTOS10/tasks.c **** 
 3517              		.loc 1 3961 0
 3518              		@ sp needed
 3519              	.LVL359:
 3520 0056 70BD     		pop	{r4, r5, r6, pc}
 3521              	.L296:
 3522              		.align	2
 3523              	.L295:
 3524 0058 80000000 		.word	.LANCHOR1
 3525 005c 00000000 		.word	.LANCHOR0
 3526              		.cfi_endproc
 3527              	.LFE76:
 3528              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3529              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3530              		.align	2
 3531              		.global	vTaskPriorityDisinheritAfterTimeout
 3532              		.code	16
 3533              		.thumb_func
 3534              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3535              	vTaskPriorityDisinheritAfterTimeout:
 3536              	.LFB77:
3969:..\FreeRTOS10/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3537              		.loc 1 3969 0
 3538              		.cfi_startproc
 3539              		@ args = 0, pretend = 0, frame = 0
 3540              		@ frame_needed = 0, uses_anonymous_args = 0
 3541              	.LVL360:
 3542 0000 70B5     		push	{r4, r5, r6, lr}
 3543              		.cfi_def_cfa_offset 16
 3544              		.cfi_offset 4, -16
 3545              		.cfi_offset 5, -12
 3546              		.cfi_offset 6, -8
 3547              		.cfi_offset 14, -4
 3548 0002 041E     		subs	r4, r0, #0
 3549              	.LVL361:
3974:..\FreeRTOS10/tasks.c **** 		{
 3550              		.loc 1 3974 0
 3551 0004 32D0     		beq	.L297
3984:..\FreeRTOS10/tasks.c **** 			{
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 160


 3552              		.loc 1 3984 0
 3553 0006 436C     		ldr	r3, [r0, #68]
 3554 0008 8B42     		cmp	r3, r1
 3555 000a 00D2     		bcs	.L299
3986:..\FreeRTOS10/tasks.c **** 			}
 3556              		.loc 1 3986 0
 3557 000c 0B00     		movs	r3, r1
 3558              	.L299:
 3559              	.LVL362:
3994:..\FreeRTOS10/tasks.c **** 			{
 3560              		.loc 1 3994 0
 3561 000e E26A     		ldr	r2, [r4, #44]
 3562 0010 9342     		cmp	r3, r2
 3563 0012 2BD0     		beq	.L297
4000:..\FreeRTOS10/tasks.c **** 				{
 3564              		.loc 1 4000 0
 3565 0014 A16C     		ldr	r1, [r4, #72]
 3566              	.LVL363:
 3567 0016 0129     		cmp	r1, #1
 3568 0018 28D1     		bne	.L297
 3569              	.LVL364:
4012:..\FreeRTOS10/tasks.c **** 
 3570              		.loc 1 4012 0
 3571 001a E362     		str	r3, [r4, #44]
4016:..\FreeRTOS10/tasks.c **** 					{
 3572              		.loc 1 4016 0
 3573 001c A169     		ldr	r1, [r4, #24]
 3574 001e 0029     		cmp	r1, #0
 3575 0020 02DB     		blt	.L300
4018:..\FreeRTOS10/tasks.c **** 					}
 3576              		.loc 1 4018 0
 3577 0022 0521     		movs	r1, #5
 3578 0024 CB1A     		subs	r3, r1, r3
 3579              	.LVL365:
 3580 0026 A361     		str	r3, [r4, #24]
 3581              	.L300:
4031:..\FreeRTOS10/tasks.c **** 					{
 3582              		.loc 1 4031 0
 3583 0028 9300     		lsls	r3, r2, #2
 3584 002a 9A18     		adds	r2, r3, r2
 3585              	.LVL366:
 3586 002c 9300     		lsls	r3, r2, #2
 3587 002e 104A     		ldr	r2, .L304
 3588 0030 3032     		adds	r2, r2, #48
 3589 0032 D318     		adds	r3, r2, r3
 3590 0034 6269     		ldr	r2, [r4, #20]
 3591 0036 9A42     		cmp	r2, r3
 3592 0038 01D1     		bne	.L303
 3593 003a 0123     		movs	r3, #1
 3594 003c 00E0     		b	.L301
 3595              	.L303:
 3596 003e 0023     		movs	r3, #0
 3597              	.L301:
4031:..\FreeRTOS10/tasks.c **** 					{
 3598              		.loc 1 4031 0 is_stmt 0 discriminator 4
 3599 0040 002B     		cmp	r3, #0
 3600 0042 13D0     		beq	.L297
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 161


4033:..\FreeRTOS10/tasks.c **** 						{
 3601              		.loc 1 4033 0 is_stmt 1
 3602 0044 251D     		adds	r5, r4, #4
 3603 0046 2800     		movs	r0, r5
 3604              	.LVL367:
 3605 0048 FFF7FEFF 		bl	uxListRemove
 3606              	.LVL368:
4042:..\FreeRTOS10/tasks.c **** 					}
 3607              		.loc 1 4042 0
 3608 004c E36A     		ldr	r3, [r4, #44]
 3609 004e 094A     		ldr	r2, .L304+4
 3610 0050 526E     		ldr	r2, [r2, #100]
 3611 0052 9342     		cmp	r3, r2
 3612 0054 01D9     		bls	.L302
4042:..\FreeRTOS10/tasks.c **** 					}
 3613              		.loc 1 4042 0 is_stmt 0 discriminator 1
 3614 0056 074A     		ldr	r2, .L304+4
 3615 0058 5366     		str	r3, [r2, #100]
 3616              	.L302:
4042:..\FreeRTOS10/tasks.c **** 					}
 3617              		.loc 1 4042 0 discriminator 3
 3618 005a 9A00     		lsls	r2, r3, #2
 3619 005c D318     		adds	r3, r2, r3
 3620 005e 9A00     		lsls	r2, r3, #2
 3621 0060 0348     		ldr	r0, .L304
 3622 0062 3030     		adds	r0, r0, #48
 3623 0064 8018     		adds	r0, r0, r2
 3624 0066 2900     		movs	r1, r5
 3625 0068 FFF7FEFF 		bl	vListInsertEnd
 3626              	.LVL369:
 3627              	.L297:
4063:..\FreeRTOS10/tasks.c **** 
 3628              		.loc 1 4063 0 is_stmt 1
 3629              		@ sp needed
 3630              	.LVL370:
 3631 006c 70BD     		pop	{r4, r5, r6, pc}
 3632              	.L305:
 3633 006e C046     		.align	2
 3634              	.L304:
 3635 0070 00000000 		.word	.LANCHOR0
 3636 0074 80000000 		.word	.LANCHOR1
 3637              		.cfi_endproc
 3638              	.LFE77:
 3639              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 3640              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3641              		.align	2
 3642              		.global	uxTaskResetEventItemValue
 3643              		.code	16
 3644              		.thumb_func
 3645              		.type	uxTaskResetEventItemValue, %function
 3646              	uxTaskResetEventItemValue:
 3647              	.LFB78:
4380:..\FreeRTOS10/tasks.c **** TickType_t uxReturn;
 3648              		.loc 1 4380 0
 3649              		.cfi_startproc
 3650              		@ args = 0, pretend = 0, frame = 0
 3651              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 162


 3652              		@ link register save eliminated.
4383:..\FreeRTOS10/tasks.c **** 
 3653              		.loc 1 4383 0
 3654 0000 044B     		ldr	r3, .L307
 3655 0002 9A6D     		ldr	r2, [r3, #88]
 3656 0004 9069     		ldr	r0, [r2, #24]
 3657              	.LVL371:
4387:..\FreeRTOS10/tasks.c **** 
 3658              		.loc 1 4387 0
 3659 0006 9A6D     		ldr	r2, [r3, #88]
 3660 0008 9B6D     		ldr	r3, [r3, #88]
 3661 000a D96A     		ldr	r1, [r3, #44]
 3662 000c 0523     		movs	r3, #5
 3663 000e 5B1A     		subs	r3, r3, r1
 3664 0010 9361     		str	r3, [r2, #24]
4390:..\FreeRTOS10/tasks.c **** /*-----------------------------------------------------------*/
 3665              		.loc 1 4390 0
 3666              		@ sp needed
 3667 0012 7047     		bx	lr
 3668              	.L308:
 3669              		.align	2
 3670              	.L307:
 3671 0014 80000000 		.word	.LANCHOR1
 3672              		.cfi_endproc
 3673              	.LFE78:
 3674              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 3675              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3676              		.align	2
 3677              		.global	pvTaskIncrementMutexHeldCount
 3678              		.code	16
 3679              		.thumb_func
 3680              		.type	pvTaskIncrementMutexHeldCount, %function
 3681              	pvTaskIncrementMutexHeldCount:
 3682              	.LFB79:
4396:..\FreeRTOS10/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3683              		.loc 1 4396 0
 3684              		.cfi_startproc
 3685              		@ args = 0, pretend = 0, frame = 0
 3686              		@ frame_needed = 0, uses_anonymous_args = 0
 3687              		@ link register save eliminated.
4399:..\FreeRTOS10/tasks.c **** 		{
 3688              		.loc 1 4399 0
 3689 0000 054B     		ldr	r3, .L311
 3690 0002 9B6D     		ldr	r3, [r3, #88]
 3691 0004 002B     		cmp	r3, #0
 3692 0006 04D0     		beq	.L310
4401:..\FreeRTOS10/tasks.c **** 		}
 3693              		.loc 1 4401 0
 3694 0008 034B     		ldr	r3, .L311
 3695 000a 9A6D     		ldr	r2, [r3, #88]
 3696 000c 936C     		ldr	r3, [r2, #72]
 3697 000e 0133     		adds	r3, r3, #1
 3698 0010 9364     		str	r3, [r2, #72]
 3699              	.L310:
4404:..\FreeRTOS10/tasks.c **** 	}
 3700              		.loc 1 4404 0
 3701 0012 014B     		ldr	r3, .L311
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 163


 3702 0014 986D     		ldr	r0, [r3, #88]
4405:..\FreeRTOS10/tasks.c **** 
 3703              		.loc 1 4405 0
 3704              		@ sp needed
 3705 0016 7047     		bx	lr
 3706              	.L312:
 3707              		.align	2
 3708              	.L311:
 3709 0018 80000000 		.word	.LANCHOR1
 3710              		.cfi_endproc
 3711              	.LFE79:
 3712              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 3713              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3714              		.align	2
 3715              		.global	ulTaskNotifyTake
 3716              		.code	16
 3717              		.thumb_func
 3718              		.type	ulTaskNotifyTake, %function
 3719              	ulTaskNotifyTake:
 3720              	.LFB80:
4413:..\FreeRTOS10/tasks.c **** 	uint32_t ulReturn;
 3721              		.loc 1 4413 0
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 0
 3724              		@ frame_needed = 0, uses_anonymous_args = 0
 3725              	.LVL372:
 3726 0000 70B5     		push	{r4, r5, r6, lr}
 3727              		.cfi_def_cfa_offset 16
 3728              		.cfi_offset 4, -16
 3729              		.cfi_offset 5, -12
 3730              		.cfi_offset 6, -8
 3731              		.cfi_offset 14, -4
 3732 0002 0500     		movs	r5, r0
 3733 0004 0C00     		movs	r4, r1
4416:..\FreeRTOS10/tasks.c **** 		{
 3734              		.loc 1 4416 0
 3735 0006 FFF7FEFF 		bl	vPortEnterCritical
 3736              	.LVL373:
4419:..\FreeRTOS10/tasks.c **** 			{
 3737              		.loc 1 4419 0
 3738 000a 174B     		ldr	r3, .L317
 3739 000c 9B6D     		ldr	r3, [r3, #88]
 3740 000e 1B6E     		ldr	r3, [r3, #96]
 3741 0010 002B     		cmp	r3, #0
 3742 0012 0BD1     		bne	.L314
4422:..\FreeRTOS10/tasks.c **** 
 3743              		.loc 1 4422 0
 3744 0014 144B     		ldr	r3, .L317
 3745 0016 9A6D     		ldr	r2, [r3, #88]
 3746 0018 0121     		movs	r1, #1
 3747 001a 6423     		movs	r3, #100
 3748 001c D154     		strb	r1, [r2, r3]
4424:..\FreeRTOS10/tasks.c **** 				{
 3749              		.loc 1 4424 0
 3750 001e 002C     		cmp	r4, #0
 3751 0020 04D0     		beq	.L314
4426:..\FreeRTOS10/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 164


 3752              		.loc 1 4426 0
 3753 0022 2000     		movs	r0, r4
 3754 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3755              	.LVL374:
4433:..\FreeRTOS10/tasks.c **** 				}
 3756              		.loc 1 4433 0
 3757 0028 FFF7FEFF 		bl	vPortYield
 3758              	.LVL375:
 3759              	.L314:
4445:..\FreeRTOS10/tasks.c **** 
 3760              		.loc 1 4445 0
 3761 002c FFF7FEFF 		bl	vPortExitCritical
 3762              	.LVL376:
4447:..\FreeRTOS10/tasks.c **** 		{
 3763              		.loc 1 4447 0
 3764 0030 FFF7FEFF 		bl	vPortEnterCritical
 3765              	.LVL377:
4450:..\FreeRTOS10/tasks.c **** 
 3766              		.loc 1 4450 0
 3767 0034 0C4B     		ldr	r3, .L317
 3768 0036 9B6D     		ldr	r3, [r3, #88]
 3769 0038 1C6E     		ldr	r4, [r3, #96]
 3770              	.LVL378:
4452:..\FreeRTOS10/tasks.c **** 			{
 3771              		.loc 1 4452 0
 3772 003a 002C     		cmp	r4, #0
 3773 003c 0AD0     		beq	.L315
4454:..\FreeRTOS10/tasks.c **** 				{
 3774              		.loc 1 4454 0
 3775 003e 002D     		cmp	r5, #0
 3776 0040 04D0     		beq	.L316
4456:..\FreeRTOS10/tasks.c **** 				}
 3777              		.loc 1 4456 0
 3778 0042 094B     		ldr	r3, .L317
 3779 0044 9B6D     		ldr	r3, [r3, #88]
 3780 0046 0022     		movs	r2, #0
 3781 0048 1A66     		str	r2, [r3, #96]
 3782 004a 03E0     		b	.L315
 3783              	.L316:
4460:..\FreeRTOS10/tasks.c **** 				}
 3784              		.loc 1 4460 0
 3785 004c 064B     		ldr	r3, .L317
 3786 004e 9B6D     		ldr	r3, [r3, #88]
 3787 0050 621E     		subs	r2, r4, #1
 3788 0052 1A66     		str	r2, [r3, #96]
 3789              	.L315:
4468:..\FreeRTOS10/tasks.c **** 		}
 3790              		.loc 1 4468 0
 3791 0054 044B     		ldr	r3, .L317
 3792 0056 9A6D     		ldr	r2, [r3, #88]
 3793 0058 0021     		movs	r1, #0
 3794 005a 6423     		movs	r3, #100
 3795 005c D154     		strb	r1, [r2, r3]
4470:..\FreeRTOS10/tasks.c **** 
 3796              		.loc 1 4470 0
 3797 005e FFF7FEFF 		bl	vPortExitCritical
 3798              	.LVL379:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 165


4473:..\FreeRTOS10/tasks.c **** 
 3799              		.loc 1 4473 0
 3800 0062 2000     		movs	r0, r4
 3801              		@ sp needed
 3802              	.LVL380:
 3803              	.LVL381:
 3804 0064 70BD     		pop	{r4, r5, r6, pc}
 3805              	.L318:
 3806 0066 C046     		.align	2
 3807              	.L317:
 3808 0068 80000000 		.word	.LANCHOR1
 3809              		.cfi_endproc
 3810              	.LFE80:
 3811              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 3812              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3813              		.align	2
 3814              		.global	xTaskNotifyWait
 3815              		.code	16
 3816              		.thumb_func
 3817              		.type	xTaskNotifyWait, %function
 3818              	xTaskNotifyWait:
 3819              	.LFB81:
4481:..\FreeRTOS10/tasks.c **** 	BaseType_t xReturn;
 3820              		.loc 1 4481 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 0
 3823              		@ frame_needed = 0, uses_anonymous_args = 0
 3824              	.LVL382:
 3825 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3826              		.cfi_def_cfa_offset 24
 3827              		.cfi_offset 3, -24
 3828              		.cfi_offset 4, -20
 3829              		.cfi_offset 5, -16
 3830              		.cfi_offset 6, -12
 3831              		.cfi_offset 7, -8
 3832              		.cfi_offset 14, -4
 3833 0002 0600     		movs	r6, r0
 3834 0004 0D00     		movs	r5, r1
 3835 0006 1700     		movs	r7, r2
 3836 0008 1C00     		movs	r4, r3
4484:..\FreeRTOS10/tasks.c **** 		{
 3837              		.loc 1 4484 0
 3838 000a FFF7FEFF 		bl	vPortEnterCritical
 3839              	.LVL383:
4487:..\FreeRTOS10/tasks.c **** 			{
 3840              		.loc 1 4487 0
 3841 000e 1B4B     		ldr	r3, .L324
 3842 0010 9A6D     		ldr	r2, [r3, #88]
 3843 0012 6423     		movs	r3, #100
 3844 0014 D35C     		ldrb	r3, [r2, r3]
 3845 0016 022B     		cmp	r3, #2
 3846 0018 0FD0     		beq	.L320
4492:..\FreeRTOS10/tasks.c **** 
 3847              		.loc 1 4492 0
 3848 001a 184A     		ldr	r2, .L324
 3849 001c 916D     		ldr	r1, [r2, #88]
 3850 001e 0B6E     		ldr	r3, [r1, #96]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 166


 3851 0020 B343     		bics	r3, r6
 3852 0022 0B66     		str	r3, [r1, #96]
4495:..\FreeRTOS10/tasks.c **** 
 3853              		.loc 1 4495 0
 3854 0024 926D     		ldr	r2, [r2, #88]
 3855 0026 0121     		movs	r1, #1
 3856 0028 6423     		movs	r3, #100
 3857 002a D154     		strb	r1, [r2, r3]
4497:..\FreeRTOS10/tasks.c **** 				{
 3858              		.loc 1 4497 0
 3859 002c 002C     		cmp	r4, #0
 3860 002e 04D0     		beq	.L320
4499:..\FreeRTOS10/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3861              		.loc 1 4499 0
 3862 0030 2000     		movs	r0, r4
 3863 0032 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3864              	.LVL384:
4506:..\FreeRTOS10/tasks.c **** 				}
 3865              		.loc 1 4506 0
 3866 0036 FFF7FEFF 		bl	vPortYield
 3867              	.LVL385:
 3868              	.L320:
4518:..\FreeRTOS10/tasks.c **** 
 3869              		.loc 1 4518 0
 3870 003a FFF7FEFF 		bl	vPortExitCritical
 3871              	.LVL386:
4520:..\FreeRTOS10/tasks.c **** 		{
 3872              		.loc 1 4520 0
 3873 003e FFF7FEFF 		bl	vPortEnterCritical
 3874              	.LVL387:
4524:..\FreeRTOS10/tasks.c **** 			{
 3875              		.loc 1 4524 0
 3876 0042 002F     		cmp	r7, #0
 3877 0044 03D0     		beq	.L321
4528:..\FreeRTOS10/tasks.c **** 			}
 3878              		.loc 1 4528 0
 3879 0046 0D4B     		ldr	r3, .L324
 3880 0048 9B6D     		ldr	r3, [r3, #88]
 3881 004a 1B6E     		ldr	r3, [r3, #96]
 3882 004c 3B60     		str	r3, [r7]
 3883              	.L321:
4535:..\FreeRTOS10/tasks.c **** 			{
 3884              		.loc 1 4535 0
 3885 004e 0B4B     		ldr	r3, .L324
 3886 0050 9A6D     		ldr	r2, [r3, #88]
 3887 0052 6423     		movs	r3, #100
 3888 0054 D35C     		ldrb	r3, [r2, r3]
 3889 0056 022B     		cmp	r3, #2
 3890 0058 06D1     		bne	.L323
4544:..\FreeRTOS10/tasks.c **** 				xReturn = pdTRUE;
 3891              		.loc 1 4544 0
 3892 005a 084B     		ldr	r3, .L324
 3893 005c 9A6D     		ldr	r2, [r3, #88]
 3894 005e 136E     		ldr	r3, [r2, #96]
 3895 0060 AB43     		bics	r3, r5
 3896 0062 1366     		str	r3, [r2, #96]
 3897              	.LVL388:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 167


4545:..\FreeRTOS10/tasks.c **** 			}
 3898              		.loc 1 4545 0
 3899 0064 0124     		movs	r4, #1
 3900              	.LVL389:
 3901 0066 00E0     		b	.L322
 3902              	.LVL390:
 3903              	.L323:
4538:..\FreeRTOS10/tasks.c **** 			}
 3904              		.loc 1 4538 0
 3905 0068 0024     		movs	r4, #0
 3906              	.LVL391:
 3907              	.L322:
4548:..\FreeRTOS10/tasks.c **** 		}
 3908              		.loc 1 4548 0
 3909 006a 044B     		ldr	r3, .L324
 3910 006c 9A6D     		ldr	r2, [r3, #88]
 3911 006e 0021     		movs	r1, #0
 3912 0070 6423     		movs	r3, #100
 3913 0072 D154     		strb	r1, [r2, r3]
4550:..\FreeRTOS10/tasks.c **** 
 3914              		.loc 1 4550 0
 3915 0074 FFF7FEFF 		bl	vPortExitCritical
 3916              	.LVL392:
4553:..\FreeRTOS10/tasks.c **** 
 3917              		.loc 1 4553 0
 3918 0078 2000     		movs	r0, r4
 3919              		@ sp needed
 3920              	.LVL393:
 3921              	.LVL394:
 3922              	.LVL395:
 3923              	.LVL396:
 3924 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3925              	.L325:
 3926              		.align	2
 3927              	.L324:
 3928 007c 80000000 		.word	.LANCHOR1
 3929              		.cfi_endproc
 3930              	.LFE81:
 3931              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 3932              		.section	.text.xTaskGenericNotify,"ax",%progbits
 3933              		.align	2
 3934              		.global	xTaskGenericNotify
 3935              		.code	16
 3936              		.thumb_func
 3937              		.type	xTaskGenericNotify, %function
 3938              	xTaskGenericNotify:
 3939              	.LFB82:
4561:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
 3940              		.loc 1 4561 0
 3941              		.cfi_startproc
 3942              		@ args = 0, pretend = 0, frame = 0
 3943              		@ frame_needed = 0, uses_anonymous_args = 0
 3944              	.LVL397:
 3945 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3946              		.cfi_def_cfa_offset 24
 3947              		.cfi_offset 3, -24
 3948              		.cfi_offset 4, -20
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 168


 3949              		.cfi_offset 5, -16
 3950              		.cfi_offset 6, -12
 3951              		.cfi_offset 7, -8
 3952              		.cfi_offset 14, -4
 3953 0002 0400     		movs	r4, r0
 3954 0004 0D00     		movs	r5, r1
 3955 0006 1600     		movs	r6, r2
 3956 0008 1F00     		movs	r7, r3
 3957              	.LVL398:
4569:..\FreeRTOS10/tasks.c **** 		{
 3958              		.loc 1 4569 0
 3959 000a FFF7FEFF 		bl	vPortEnterCritical
 3960              	.LVL399:
4571:..\FreeRTOS10/tasks.c **** 			{
 3961              		.loc 1 4571 0
 3962 000e 002F     		cmp	r7, #0
 3963 0010 01D0     		beq	.L327
4573:..\FreeRTOS10/tasks.c **** 			}
 3964              		.loc 1 4573 0
 3965 0012 236E     		ldr	r3, [r4, #96]
 3966 0014 3B60     		str	r3, [r7]
 3967              	.L327:
4576:..\FreeRTOS10/tasks.c **** 
 3968              		.loc 1 4576 0
 3969 0016 6422     		movs	r2, #100
 3970 0018 A35C     		ldrb	r3, [r4, r2]
 3971 001a DBB2     		uxtb	r3, r3
 3972              	.LVL400:
4578:..\FreeRTOS10/tasks.c **** 
 3973              		.loc 1 4578 0
 3974 001c 0221     		movs	r1, #2
 3975 001e A154     		strb	r1, [r4, r2]
4580:..\FreeRTOS10/tasks.c **** 			{
 3976              		.loc 1 4580 0
 3977 0020 022E     		cmp	r6, #2
 3978 0022 0DD0     		beq	.L329
 3979 0024 02D8     		bhi	.L330
 3980 0026 012E     		cmp	r6, #1
 3981 0028 05D0     		beq	.L331
 3982 002a 16E0     		b	.L336
 3983              	.L330:
 3984 002c 032E     		cmp	r6, #3
 3985 002e 0CD0     		beq	.L332
 3986 0030 042E     		cmp	r6, #4
 3987 0032 0DD0     		beq	.L333
 3988 0034 11E0     		b	.L336
 3989              	.L331:
4583:..\FreeRTOS10/tasks.c **** 					break;
 3990              		.loc 1 4583 0
 3991 0036 226E     		ldr	r2, [r4, #96]
 3992 0038 1543     		orrs	r5, r2
 3993              	.LVL401:
 3994 003a 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
 3995              		.loc 1 4563 0
 3996 003c 0125     		movs	r5, #1
4584:..\FreeRTOS10/tasks.c **** 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 169


 3997              		.loc 1 4584 0
 3998 003e 0FE0     		b	.L328
 3999              	.LVL402:
 4000              	.L329:
4587:..\FreeRTOS10/tasks.c **** 					break;
 4001              		.loc 1 4587 0
 4002 0040 226E     		ldr	r2, [r4, #96]
 4003 0042 0132     		adds	r2, r2, #1
 4004 0044 2266     		str	r2, [r4, #96]
4563:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4005              		.loc 1 4563 0
 4006 0046 0125     		movs	r5, #1
 4007              	.LVL403:
4588:..\FreeRTOS10/tasks.c **** 
 4008              		.loc 1 4588 0
 4009 0048 0AE0     		b	.L328
 4010              	.LVL404:
 4011              	.L332:
4591:..\FreeRTOS10/tasks.c **** 					break;
 4012              		.loc 1 4591 0
 4013 004a 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4014              		.loc 1 4563 0
 4015 004c 0125     		movs	r5, #1
 4016              	.LVL405:
4592:..\FreeRTOS10/tasks.c **** 
 4017              		.loc 1 4592 0
 4018 004e 07E0     		b	.L328
 4019              	.LVL406:
 4020              	.L333:
4595:..\FreeRTOS10/tasks.c **** 					{
 4021              		.loc 1 4595 0
 4022 0050 022B     		cmp	r3, #2
 4023 0052 04D0     		beq	.L337
4597:..\FreeRTOS10/tasks.c **** 					}
 4024              		.loc 1 4597 0
 4025 0054 2566     		str	r5, [r4, #96]
4563:..\FreeRTOS10/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4026              		.loc 1 4563 0
 4027 0056 0125     		movs	r5, #1
 4028              	.LVL407:
 4029 0058 02E0     		b	.L328
 4030              	.LVL408:
 4031              	.L336:
 4032 005a 0125     		movs	r5, #1
 4033              	.LVL409:
 4034 005c 00E0     		b	.L328
 4035              	.LVL410:
 4036              	.L337:
4602:..\FreeRTOS10/tasks.c **** 					}
 4037              		.loc 1 4602 0
 4038 005e 0025     		movs	r5, #0
 4039              	.LVL411:
 4040              	.L328:
4616:..\FreeRTOS10/tasks.c **** 			{
 4041              		.loc 1 4616 0
 4042 0060 012B     		cmp	r3, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 170


 4043 0062 1BD1     		bne	.L334
4618:..\FreeRTOS10/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4044              		.loc 1 4618 0
 4045 0064 261D     		adds	r6, r4, #4
 4046 0066 3000     		movs	r0, r6
 4047 0068 FFF7FEFF 		bl	uxListRemove
 4048              	.LVL412:
4619:..\FreeRTOS10/tasks.c **** 
 4049              		.loc 1 4619 0
 4050 006c E36A     		ldr	r3, [r4, #44]
 4051 006e 0D4A     		ldr	r2, .L338
 4052 0070 526E     		ldr	r2, [r2, #100]
 4053 0072 9342     		cmp	r3, r2
 4054 0074 01D9     		bls	.L335
4619:..\FreeRTOS10/tasks.c **** 
 4055              		.loc 1 4619 0 is_stmt 0 discriminator 1
 4056 0076 0B4A     		ldr	r2, .L338
 4057 0078 5366     		str	r3, [r2, #100]
 4058              	.L335:
4619:..\FreeRTOS10/tasks.c **** 
 4059              		.loc 1 4619 0 discriminator 3
 4060 007a 9A00     		lsls	r2, r3, #2
 4061 007c D318     		adds	r3, r2, r3
 4062 007e 9A00     		lsls	r2, r3, #2
 4063 0080 0948     		ldr	r0, .L338+4
 4064 0082 3030     		adds	r0, r0, #48
 4065 0084 8018     		adds	r0, r0, r2
 4066 0086 3100     		movs	r1, r6
 4067 0088 FFF7FEFF 		bl	vListInsertEnd
 4068              	.LVL413:
4640:..\FreeRTOS10/tasks.c **** 				{
 4069              		.loc 1 4640 0 is_stmt 1 discriminator 3
 4070 008c E26A     		ldr	r2, [r4, #44]
 4071 008e 054B     		ldr	r3, .L338
 4072 0090 9B6D     		ldr	r3, [r3, #88]
 4073 0092 DB6A     		ldr	r3, [r3, #44]
 4074 0094 9A42     		cmp	r2, r3
 4075 0096 01D9     		bls	.L334
4644:..\FreeRTOS10/tasks.c **** 				}
 4076              		.loc 1 4644 0
 4077 0098 FFF7FEFF 		bl	vPortYield
 4078              	.LVL414:
 4079              	.L334:
4656:..\FreeRTOS10/tasks.c **** 
 4080              		.loc 1 4656 0
 4081 009c FFF7FEFF 		bl	vPortExitCritical
 4082              	.LVL415:
4659:..\FreeRTOS10/tasks.c **** 
 4083              		.loc 1 4659 0
 4084 00a0 2800     		movs	r0, r5
 4085              		@ sp needed
 4086              	.LVL416:
 4087              	.LVL417:
 4088              	.LVL418:
 4089 00a2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4090              	.L339:
 4091              		.align	2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 171


 4092              	.L338:
 4093 00a4 80000000 		.word	.LANCHOR1
 4094 00a8 00000000 		.word	.LANCHOR0
 4095              		.cfi_endproc
 4096              	.LFE82:
 4097              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4098              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4099              		.align	2
 4100              		.global	xTaskGenericNotifyFromISR
 4101              		.code	16
 4102              		.thumb_func
 4103              		.type	xTaskGenericNotifyFromISR, %function
 4104              	xTaskGenericNotifyFromISR:
 4105              	.LFB83:
4667:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
 4106              		.loc 1 4667 0
 4107              		.cfi_startproc
 4108              		@ args = 4, pretend = 0, frame = 8
 4109              		@ frame_needed = 0, uses_anonymous_args = 0
 4110              	.LVL419:
 4111 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4112              		.cfi_def_cfa_offset 20
 4113              		.cfi_offset 4, -20
 4114              		.cfi_offset 5, -16
 4115              		.cfi_offset 6, -12
 4116              		.cfi_offset 7, -8
 4117              		.cfi_offset 14, -4
 4118 0002 83B0     		sub	sp, sp, #12
 4119              		.cfi_def_cfa_offset 32
 4120 0004 0400     		movs	r4, r0
 4121 0006 0E00     		movs	r6, r1
 4122 0008 1700     		movs	r7, r2
 4123 000a 1D00     		movs	r5, r3
 4124              	.LVL420:
4695:..\FreeRTOS10/tasks.c **** 		{
 4125              		.loc 1 4695 0
 4126 000c FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4127              	.LVL421:
 4128 0010 0190     		str	r0, [sp, #4]
 4129              	.LVL422:
4697:..\FreeRTOS10/tasks.c **** 			{
 4130              		.loc 1 4697 0
 4131 0012 002D     		cmp	r5, #0
 4132 0014 01D0     		beq	.L341
4699:..\FreeRTOS10/tasks.c **** 			}
 4133              		.loc 1 4699 0
 4134 0016 236E     		ldr	r3, [r4, #96]
 4135 0018 2B60     		str	r3, [r5]
 4136              	.L341:
4702:..\FreeRTOS10/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4137              		.loc 1 4702 0
 4138 001a 6422     		movs	r2, #100
 4139 001c A35C     		ldrb	r3, [r4, r2]
 4140 001e DBB2     		uxtb	r3, r3
 4141              	.LVL423:
4703:..\FreeRTOS10/tasks.c **** 
 4142              		.loc 1 4703 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 172


 4143 0020 0221     		movs	r1, #2
 4144 0022 A154     		strb	r1, [r4, r2]
4705:..\FreeRTOS10/tasks.c **** 			{
 4145              		.loc 1 4705 0
 4146 0024 022F     		cmp	r7, #2
 4147 0026 0DD0     		beq	.L343
 4148 0028 02D8     		bhi	.L344
 4149 002a 012F     		cmp	r7, #1
 4150 002c 05D0     		beq	.L345
 4151 002e 16E0     		b	.L353
 4152              	.L344:
 4153 0030 032F     		cmp	r7, #3
 4154 0032 0CD0     		beq	.L346
 4155 0034 042F     		cmp	r7, #4
 4156 0036 0DD0     		beq	.L347
 4157 0038 11E0     		b	.L353
 4158              	.L345:
4708:..\FreeRTOS10/tasks.c **** 					break;
 4159              		.loc 1 4708 0
 4160 003a 226E     		ldr	r2, [r4, #96]
 4161 003c 1643     		orrs	r6, r2
 4162              	.LVL424:
 4163 003e 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4164              		.loc 1 4670 0
 4165 0040 0126     		movs	r6, #1
4709:..\FreeRTOS10/tasks.c **** 
 4166              		.loc 1 4709 0
 4167 0042 0FE0     		b	.L342
 4168              	.LVL425:
 4169              	.L343:
4712:..\FreeRTOS10/tasks.c **** 					break;
 4170              		.loc 1 4712 0
 4171 0044 226E     		ldr	r2, [r4, #96]
 4172 0046 0132     		adds	r2, r2, #1
 4173 0048 2266     		str	r2, [r4, #96]
4670:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4174              		.loc 1 4670 0
 4175 004a 0126     		movs	r6, #1
 4176              	.LVL426:
4713:..\FreeRTOS10/tasks.c **** 
 4177              		.loc 1 4713 0
 4178 004c 0AE0     		b	.L342
 4179              	.LVL427:
 4180              	.L346:
4716:..\FreeRTOS10/tasks.c **** 					break;
 4181              		.loc 1 4716 0
 4182 004e 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4183              		.loc 1 4670 0
 4184 0050 0126     		movs	r6, #1
 4185              	.LVL428:
4717:..\FreeRTOS10/tasks.c **** 
 4186              		.loc 1 4717 0
 4187 0052 07E0     		b	.L342
 4188              	.LVL429:
 4189              	.L347:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 173


4720:..\FreeRTOS10/tasks.c **** 					{
 4190              		.loc 1 4720 0
 4191 0054 022B     		cmp	r3, #2
 4192 0056 04D0     		beq	.L354
4722:..\FreeRTOS10/tasks.c **** 					}
 4193              		.loc 1 4722 0
 4194 0058 2666     		str	r6, [r4, #96]
4670:..\FreeRTOS10/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4195              		.loc 1 4670 0
 4196 005a 0126     		movs	r6, #1
 4197              	.LVL430:
 4198 005c 02E0     		b	.L342
 4199              	.LVL431:
 4200              	.L353:
 4201 005e 0126     		movs	r6, #1
 4202              	.LVL432:
 4203 0060 00E0     		b	.L342
 4204              	.LVL433:
 4205              	.L354:
4727:..\FreeRTOS10/tasks.c **** 					}
 4206              		.loc 1 4727 0
 4207 0062 0026     		movs	r6, #0
 4208              	.LVL434:
 4209              	.L342:
4741:..\FreeRTOS10/tasks.c **** 			{
 4210              		.loc 1 4741 0
 4211 0064 012B     		cmp	r3, #1
 4212 0066 2ED1     		bne	.L348
4746:..\FreeRTOS10/tasks.c **** 				{
 4213              		.loc 1 4746 0
 4214 0068 1A4B     		ldr	r3, .L355
 4215              	.LVL435:
 4216 006a 1B6F     		ldr	r3, [r3, #112]
 4217 006c 002B     		cmp	r3, #0
 4218 006e 14D1     		bne	.L349
4748:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4219              		.loc 1 4748 0
 4220 0070 271D     		adds	r7, r4, #4
 4221 0072 3800     		movs	r0, r7
 4222              	.LVL436:
 4223 0074 FFF7FEFF 		bl	uxListRemove
 4224              	.LVL437:
4749:..\FreeRTOS10/tasks.c **** 				}
 4225              		.loc 1 4749 0
 4226 0078 E36A     		ldr	r3, [r4, #44]
 4227 007a 164A     		ldr	r2, .L355
 4228 007c 526E     		ldr	r2, [r2, #100]
 4229 007e 9342     		cmp	r3, r2
 4230 0080 01D9     		bls	.L350
4749:..\FreeRTOS10/tasks.c **** 				}
 4231              		.loc 1 4749 0 is_stmt 0 discriminator 1
 4232 0082 144A     		ldr	r2, .L355
 4233 0084 5366     		str	r3, [r2, #100]
 4234              	.L350:
4749:..\FreeRTOS10/tasks.c **** 				}
 4235              		.loc 1 4749 0 discriminator 3
 4236 0086 9A00     		lsls	r2, r3, #2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 174


 4237 0088 D318     		adds	r3, r2, r3
 4238 008a 9A00     		lsls	r2, r3, #2
 4239 008c 1248     		ldr	r0, .L355+4
 4240 008e 3030     		adds	r0, r0, #48
 4241 0090 8018     		adds	r0, r0, r2
 4242 0092 3900     		movs	r1, r7
 4243 0094 FFF7FEFF 		bl	vListInsertEnd
 4244              	.LVL438:
 4245 0098 05E0     		b	.L351
 4246              	.LVL439:
 4247              	.L349:
4755:..\FreeRTOS10/tasks.c **** 				}
 4248              		.loc 1 4755 0 is_stmt 1
 4249 009a 2100     		movs	r1, r4
 4250 009c 1831     		adds	r1, r1, #24
 4251 009e 0E48     		ldr	r0, .L355+4
 4252              	.LVL440:
 4253 00a0 1430     		adds	r0, r0, #20
 4254 00a2 FFF7FEFF 		bl	vListInsertEnd
 4255              	.LVL441:
 4256              	.L351:
4758:..\FreeRTOS10/tasks.c **** 				{
 4257              		.loc 1 4758 0
 4258 00a6 E26A     		ldr	r2, [r4, #44]
 4259 00a8 0A4B     		ldr	r3, .L355
 4260 00aa 9B6D     		ldr	r3, [r3, #88]
 4261 00ac DB6A     		ldr	r3, [r3, #44]
 4262 00ae 9A42     		cmp	r2, r3
 4263 00b0 09D9     		bls	.L348
4762:..\FreeRTOS10/tasks.c **** 					{
 4264              		.loc 1 4762 0
 4265 00b2 089B     		ldr	r3, [sp, #32]
 4266 00b4 002B     		cmp	r3, #0
 4267 00b6 03D0     		beq	.L352
4764:..\FreeRTOS10/tasks.c **** 					}
 4268              		.loc 1 4764 0
 4269 00b8 0123     		movs	r3, #1
 4270 00ba 089A     		ldr	r2, [sp, #32]
 4271 00bc 1360     		str	r3, [r2]
 4272 00be 02E0     		b	.L348
 4273              	.L352:
4771:..\FreeRTOS10/tasks.c **** 					}
 4274              		.loc 1 4771 0
 4275 00c0 0122     		movs	r2, #1
 4276 00c2 064B     		ldr	r3, .L355+8
 4277 00c4 1A60     		str	r2, [r3]
 4278              	.L348:
4780:..\FreeRTOS10/tasks.c **** 
 4279              		.loc 1 4780 0
 4280 00c6 0198     		ldr	r0, [sp, #4]
 4281 00c8 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4282              	.LVL442:
4783:..\FreeRTOS10/tasks.c **** 
 4283              		.loc 1 4783 0
 4284 00cc 3000     		movs	r0, r6
 4285 00ce 03B0     		add	sp, sp, #12
 4286              		@ sp needed
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 175


 4287              	.LVL443:
 4288              	.LVL444:
 4289              	.LVL445:
 4290 00d0 F0BD     		pop	{r4, r5, r6, r7, pc}
 4291              	.L356:
 4292 00d2 C046     		.align	2
 4293              	.L355:
 4294 00d4 80000000 		.word	.LANCHOR1
 4295 00d8 00000000 		.word	.LANCHOR0
 4296 00dc 00010000 		.word	.LANCHOR2
 4297              		.cfi_endproc
 4298              	.LFE83:
 4299              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4300              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4301              		.align	2
 4302              		.global	vTaskNotifyGiveFromISR
 4303              		.code	16
 4304              		.thumb_func
 4305              		.type	vTaskNotifyGiveFromISR, %function
 4306              	vTaskNotifyGiveFromISR:
 4307              	.LFB84:
4791:..\FreeRTOS10/tasks.c **** 	TCB_t * pxTCB;
 4308              		.loc 1 4791 0
 4309              		.cfi_startproc
 4310              		@ args = 0, pretend = 0, frame = 0
 4311              		@ frame_needed = 0, uses_anonymous_args = 0
 4312              	.LVL446:
 4313 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4314              		.cfi_def_cfa_offset 24
 4315              		.cfi_offset 3, -24
 4316              		.cfi_offset 4, -20
 4317              		.cfi_offset 5, -16
 4318              		.cfi_offset 6, -12
 4319              		.cfi_offset 7, -8
 4320              		.cfi_offset 14, -4
 4321 0002 0400     		movs	r4, r0
 4322 0004 0E00     		movs	r6, r1
 4323              	.LVL447:
4818:..\FreeRTOS10/tasks.c **** 		{
 4324              		.loc 1 4818 0
 4325 0006 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 4326              	.LVL448:
 4327 000a 0500     		movs	r5, r0
 4328              	.LVL449:
4820:..\FreeRTOS10/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4329              		.loc 1 4820 0
 4330 000c 6423     		movs	r3, #100
 4331 000e E25C     		ldrb	r2, [r4, r3]
 4332              	.LVL450:
4821:..\FreeRTOS10/tasks.c **** 
 4333              		.loc 1 4821 0
 4334 0010 0221     		movs	r1, #2
 4335 0012 E154     		strb	r1, [r4, r3]
4825:..\FreeRTOS10/tasks.c **** 
 4336              		.loc 1 4825 0
 4337 0014 236E     		ldr	r3, [r4, #96]
 4338 0016 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 176


 4339 0018 2366     		str	r3, [r4, #96]
4831:..\FreeRTOS10/tasks.c **** 			{
 4340              		.loc 1 4831 0
 4341 001a 012A     		cmp	r2, #1
 4342 001c 2CD1     		bne	.L358
4836:..\FreeRTOS10/tasks.c **** 				{
 4343              		.loc 1 4836 0
 4344 001e 184B     		ldr	r3, .L363
 4345 0020 1B6F     		ldr	r3, [r3, #112]
 4346 0022 002B     		cmp	r3, #0
 4347 0024 14D1     		bne	.L359
4838:..\FreeRTOS10/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4348              		.loc 1 4838 0
 4349 0026 271D     		adds	r7, r4, #4
 4350 0028 3800     		movs	r0, r7
 4351              	.LVL451:
 4352 002a FFF7FEFF 		bl	uxListRemove
 4353              	.LVL452:
4839:..\FreeRTOS10/tasks.c **** 				}
 4354              		.loc 1 4839 0
 4355 002e E36A     		ldr	r3, [r4, #44]
 4356 0030 134A     		ldr	r2, .L363
 4357 0032 526E     		ldr	r2, [r2, #100]
 4358 0034 9342     		cmp	r3, r2
 4359 0036 01D9     		bls	.L360
4839:..\FreeRTOS10/tasks.c **** 				}
 4360              		.loc 1 4839 0 is_stmt 0 discriminator 1
 4361 0038 114A     		ldr	r2, .L363
 4362 003a 5366     		str	r3, [r2, #100]
 4363              	.L360:
4839:..\FreeRTOS10/tasks.c **** 				}
 4364              		.loc 1 4839 0 discriminator 3
 4365 003c 9A00     		lsls	r2, r3, #2
 4366 003e D318     		adds	r3, r2, r3
 4367 0040 9A00     		lsls	r2, r3, #2
 4368 0042 1048     		ldr	r0, .L363+4
 4369 0044 3030     		adds	r0, r0, #48
 4370 0046 8018     		adds	r0, r0, r2
 4371 0048 3900     		movs	r1, r7
 4372 004a FFF7FEFF 		bl	vListInsertEnd
 4373              	.LVL453:
 4374 004e 05E0     		b	.L361
 4375              	.LVL454:
 4376              	.L359:
4845:..\FreeRTOS10/tasks.c **** 				}
 4377              		.loc 1 4845 0 is_stmt 1
 4378 0050 2100     		movs	r1, r4
 4379 0052 1831     		adds	r1, r1, #24
 4380 0054 0B48     		ldr	r0, .L363+4
 4381              	.LVL455:
 4382 0056 1430     		adds	r0, r0, #20
 4383 0058 FFF7FEFF 		bl	vListInsertEnd
 4384              	.LVL456:
 4385              	.L361:
4848:..\FreeRTOS10/tasks.c **** 				{
 4386              		.loc 1 4848 0
 4387 005c E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 177


 4388 005e 084B     		ldr	r3, .L363
 4389 0060 9B6D     		ldr	r3, [r3, #88]
 4390 0062 DB6A     		ldr	r3, [r3, #44]
 4391 0064 9A42     		cmp	r2, r3
 4392 0066 07D9     		bls	.L358
4852:..\FreeRTOS10/tasks.c **** 					{
 4393              		.loc 1 4852 0
 4394 0068 002E     		cmp	r6, #0
 4395 006a 02D0     		beq	.L362
4854:..\FreeRTOS10/tasks.c **** 					}
 4396              		.loc 1 4854 0
 4397 006c 0123     		movs	r3, #1
 4398 006e 3360     		str	r3, [r6]
 4399 0070 02E0     		b	.L358
 4400              	.L362:
4861:..\FreeRTOS10/tasks.c **** 					}
 4401              		.loc 1 4861 0
 4402 0072 0122     		movs	r2, #1
 4403 0074 044B     		ldr	r3, .L363+8
 4404 0076 1A60     		str	r2, [r3]
 4405              	.L358:
4870:..\FreeRTOS10/tasks.c **** 	}
 4406              		.loc 1 4870 0
 4407 0078 2800     		movs	r0, r5
 4408 007a FFF7FEFF 		bl	vClearInterruptMaskFromISR
 4409              	.LVL457:
4871:..\FreeRTOS10/tasks.c **** 
 4410              		.loc 1 4871 0
 4411              		@ sp needed
 4412              	.LVL458:
 4413              	.LVL459:
 4414              	.LVL460:
 4415 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4416              	.L364:
 4417              		.align	2
 4418              	.L363:
 4419 0080 80000000 		.word	.LANCHOR1
 4420 0084 00000000 		.word	.LANCHOR0
 4421 0088 00010000 		.word	.LANCHOR2
 4422              		.cfi_endproc
 4423              	.LFE84:
 4424              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 4425              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4426              		.align	2
 4427              		.global	xTaskNotifyStateClear
 4428              		.code	16
 4429              		.thumb_func
 4430              		.type	xTaskNotifyStateClear, %function
 4431              	xTaskNotifyStateClear:
 4432              	.LFB85:
4880:..\FreeRTOS10/tasks.c **** 	TCB_t *pxTCB;
 4433              		.loc 1 4880 0
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 0
 4436              		@ frame_needed = 0, uses_anonymous_args = 0
 4437              	.LVL461:
 4438 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 178


 4439              		.cfi_def_cfa_offset 8
 4440              		.cfi_offset 4, -8
 4441              		.cfi_offset 14, -4
 4442 0002 041E     		subs	r4, r0, #0
4886:..\FreeRTOS10/tasks.c **** 
 4443              		.loc 1 4886 0
 4444 0004 01D1     		bne	.L366
4886:..\FreeRTOS10/tasks.c **** 
 4445              		.loc 1 4886 0 is_stmt 0 discriminator 1
 4446 0006 094B     		ldr	r3, .L369
 4447 0008 9C6D     		ldr	r4, [r3, #88]
 4448              	.LVL462:
 4449              	.L366:
4888:..\FreeRTOS10/tasks.c **** 		{
 4450              		.loc 1 4888 0 is_stmt 1 discriminator 4
 4451 000a FFF7FEFF 		bl	vPortEnterCritical
 4452              	.LVL463:
4890:..\FreeRTOS10/tasks.c **** 			{
 4453              		.loc 1 4890 0 discriminator 4
 4454 000e 6423     		movs	r3, #100
 4455 0010 E35C     		ldrb	r3, [r4, r3]
 4456 0012 022B     		cmp	r3, #2
 4457 0014 04D1     		bne	.L368
4892:..\FreeRTOS10/tasks.c **** 				xReturn = pdPASS;
 4458              		.loc 1 4892 0
 4459 0016 0022     		movs	r2, #0
 4460 0018 6233     		adds	r3, r3, #98
 4461 001a E254     		strb	r2, [r4, r3]
 4462              	.LVL464:
4893:..\FreeRTOS10/tasks.c **** 			}
 4463              		.loc 1 4893 0
 4464 001c 0124     		movs	r4, #1
 4465              	.LVL465:
 4466 001e 00E0     		b	.L367
 4467              	.LVL466:
 4468              	.L368:
4897:..\FreeRTOS10/tasks.c **** 			}
 4469              		.loc 1 4897 0
 4470 0020 0024     		movs	r4, #0
 4471              	.LVL467:
 4472              	.L367:
4900:..\FreeRTOS10/tasks.c **** 
 4473              		.loc 1 4900 0
 4474 0022 FFF7FEFF 		bl	vPortExitCritical
 4475              	.LVL468:
4903:..\FreeRTOS10/tasks.c **** 
 4476              		.loc 1 4903 0
 4477 0026 2000     		movs	r0, r4
 4478              		@ sp needed
 4479              	.LVL469:
 4480 0028 10BD     		pop	{r4, pc}
 4481              	.L370:
 4482 002a C046     		.align	2
 4483              	.L369:
 4484 002c 80000000 		.word	.LANCHOR1
 4485              		.cfi_endproc
 4486              	.LFE85:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 179


 4487              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 4488              		.global	pxCurrentTCB
 4489              		.section	.rodata.str1.4,"aMS",%progbits,1
 4490              		.align	2
 4491              	.LC32:
 4492 0000 49444C45 		.ascii	"IDLE\000"
 4492      00
 4493              		.bss
 4494              		.align	2
 4495              		.set	.LANCHOR0,. + 0
 4496              		.set	.LANCHOR1,. + 128
 4497              		.set	.LANCHOR2,. + 256
 4498              		.type	xSuspendedTaskList, %object
 4499              		.size	xSuspendedTaskList, 20
 4500              	xSuspendedTaskList:
 4501 0000 00000000 		.space	20
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4501      00000000 
 4502              		.type	xPendingReadyList, %object
 4503              		.size	xPendingReadyList, 20
 4504              	xPendingReadyList:
 4505 0014 00000000 		.space	20
 4505      00000000 
 4505      00000000 
 4505      00000000 
 4505      00000000 
 4506              		.type	pxDelayedTaskList, %object
 4507              		.size	pxDelayedTaskList, 4
 4508              	pxDelayedTaskList:
 4509 0028 00000000 		.space	4
 4510              		.type	xNextTaskUnblockTime, %object
 4511              		.size	xNextTaskUnblockTime, 4
 4512              	xNextTaskUnblockTime:
 4513 002c 00000000 		.space	4
 4514              		.type	pxReadyTasksLists, %object
 4515              		.size	pxReadyTasksLists, 100
 4516              	pxReadyTasksLists:
 4517 0030 00000000 		.space	100
 4517      00000000 
 4517      00000000 
 4517      00000000 
 4517      00000000 
 4518              		.type	xDelayedTaskList1, %object
 4519              		.size	xDelayedTaskList1, 20
 4520              	xDelayedTaskList1:
 4521 0094 00000000 		.space	20
 4521      00000000 
 4521      00000000 
 4521      00000000 
 4521      00000000 
 4522              		.type	xDelayedTaskList2, %object
 4523              		.size	xDelayedTaskList2, 20
 4524              	xDelayedTaskList2:
 4525 00a8 00000000 		.space	20
 4525      00000000 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 180


 4525      00000000 
 4525      00000000 
 4525      00000000 
 4526              		.type	xTasksWaitingTermination, %object
 4527              		.size	xTasksWaitingTermination, 20
 4528              	xTasksWaitingTermination:
 4529 00bc 00000000 		.space	20
 4529      00000000 
 4529      00000000 
 4529      00000000 
 4529      00000000 
 4530              		.type	pxOverflowDelayedTaskList, %object
 4531              		.size	pxOverflowDelayedTaskList, 4
 4532              	pxOverflowDelayedTaskList:
 4533 00d0 00000000 		.space	4
 4534              		.type	uxCurrentNumberOfTasks, %object
 4535              		.size	uxCurrentNumberOfTasks, 4
 4536              	uxCurrentNumberOfTasks:
 4537 00d4 00000000 		.space	4
 4538              		.type	pxCurrentTCB, %object
 4539              		.size	pxCurrentTCB, 4
 4540              	pxCurrentTCB:
 4541 00d8 00000000 		.space	4
 4542              		.type	xSchedulerRunning, %object
 4543              		.size	xSchedulerRunning, 4
 4544              	xSchedulerRunning:
 4545 00dc 00000000 		.space	4
 4546              		.type	uxTaskNumber, %object
 4547              		.size	uxTaskNumber, 4
 4548              	uxTaskNumber:
 4549 00e0 00000000 		.space	4
 4550              		.type	uxTopReadyPriority, %object
 4551              		.size	uxTopReadyPriority, 4
 4552              	uxTopReadyPriority:
 4553 00e4 00000000 		.space	4
 4554              		.type	uxDeletedTasksWaitingCleanUp, %object
 4555              		.size	uxDeletedTasksWaitingCleanUp, 4
 4556              	uxDeletedTasksWaitingCleanUp:
 4557 00e8 00000000 		.space	4
 4558              		.type	xTickCount, %object
 4559              		.size	xTickCount, 4
 4560              	xTickCount:
 4561 00ec 00000000 		.space	4
 4562              		.type	uxSchedulerSuspended, %object
 4563              		.size	uxSchedulerSuspended, 4
 4564              	uxSchedulerSuspended:
 4565 00f0 00000000 		.space	4
 4566              		.type	xIdleTaskHandle, %object
 4567              		.size	xIdleTaskHandle, 4
 4568              	xIdleTaskHandle:
 4569 00f4 00000000 		.space	4
 4570              		.type	xNumOfOverflows, %object
 4571              		.size	xNumOfOverflows, 4
 4572              	xNumOfOverflows:
 4573 00f8 00000000 		.space	4
 4574              		.type	uxPendedTicks, %object
 4575              		.size	uxPendedTicks, 4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 181


 4576              	uxPendedTicks:
 4577 00fc 00000000 		.space	4
 4578              		.type	xYieldPending, %object
 4579              		.size	xYieldPending, 4
 4580              	xYieldPending:
 4581 0100 00000000 		.space	4
 4582              		.text
 4583              	.Letext0:
 4584              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4585              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4586              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 4587              		.file 5 "..\\FreeRTOS10\\include/projdefs.h"
 4588              		.file 6 "..\\FreeRTOS10\\portable\\GCC\\ARM_CM0/portmacro.h"
 4589              		.file 7 "..\\FreeRTOS10\\include/list.h"
 4590              		.file 8 "..\\FreeRTOS10\\include/task.h"
 4591              		.file 9 "..\\FreeRTOS10\\include/portable.h"
 4592              		.file 10 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4
 4593              		.section	.debug_info,"",%progbits
 4594              	.Ldebug_info0:
 4595 0000 DB1F0000 		.4byte	0x1fdb
 4596 0004 0400     		.2byte	0x4
 4597 0006 00000000 		.4byte	.Ldebug_abbrev0
 4598 000a 04       		.byte	0x4
 4599 000b 01       		.uleb128 0x1
 4600 000c EB040000 		.4byte	.LASF239
 4601 0010 0C       		.byte	0xc
 4602 0011 3C0B0000 		.4byte	.LASF240
 4603 0015 AE010000 		.4byte	.LASF241
 4604 0019 38000000 		.4byte	.Ldebug_ranges0+0x38
 4605 001d 00000000 		.4byte	0
 4606 0021 00000000 		.4byte	.Ldebug_line0
 4607 0025 02       		.uleb128 0x2
 4608 0026 87050000 		.4byte	.LASF4
 4609 002a 02       		.byte	0x2
 4610 002b D8       		.byte	0xd8
 4611 002c 30000000 		.4byte	0x30
 4612 0030 03       		.uleb128 0x3
 4613 0031 04       		.byte	0x4
 4614 0032 07       		.byte	0x7
 4615 0033 2B010000 		.4byte	.LASF0
 4616 0037 04       		.uleb128 0x4
 4617 0038 04       		.byte	0x4
 4618 0039 05       		.byte	0x5
 4619 003a 696E7400 		.ascii	"int\000"
 4620 003e 03       		.uleb128 0x3
 4621 003f 08       		.byte	0x8
 4622 0040 05       		.byte	0x5
 4623 0041 38080000 		.4byte	.LASF1
 4624 0045 03       		.uleb128 0x3
 4625 0046 08       		.byte	0x8
 4626 0047 04       		.byte	0x4
 4627 0048 F9090000 		.4byte	.LASF2
 4628 004c 03       		.uleb128 0x3
 4629 004d 01       		.byte	0x1
 4630 004e 06       		.byte	0x6
 4631 004f C90E0000 		.4byte	.LASF3
 4632 0053 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 182


 4633 0054 E10B0000 		.4byte	.LASF5
 4634 0058 03       		.byte	0x3
 4635 0059 1D       		.byte	0x1d
 4636 005a 5E000000 		.4byte	0x5e
 4637 005e 03       		.uleb128 0x3
 4638 005f 01       		.byte	0x1
 4639 0060 08       		.byte	0x8
 4640 0061 060D0000 		.4byte	.LASF6
 4641 0065 03       		.uleb128 0x3
 4642 0066 02       		.byte	0x2
 4643 0067 05       		.byte	0x5
 4644 0068 B30A0000 		.4byte	.LASF7
 4645 006c 02       		.uleb128 0x2
 4646 006d 37040000 		.4byte	.LASF8
 4647 0071 03       		.byte	0x3
 4648 0072 2B       		.byte	0x2b
 4649 0073 77000000 		.4byte	0x77
 4650 0077 03       		.uleb128 0x3
 4651 0078 02       		.byte	0x2
 4652 0079 07       		.byte	0x7
 4653 007a D50E0000 		.4byte	.LASF9
 4654 007e 03       		.uleb128 0x3
 4655 007f 04       		.byte	0x4
 4656 0080 05       		.byte	0x5
 4657 0081 E90A0000 		.4byte	.LASF10
 4658 0085 02       		.uleb128 0x2
 4659 0086 330D0000 		.4byte	.LASF11
 4660 008a 03       		.byte	0x3
 4661 008b 41       		.byte	0x41
 4662 008c 90000000 		.4byte	0x90
 4663 0090 03       		.uleb128 0x3
 4664 0091 04       		.byte	0x4
 4665 0092 07       		.byte	0x7
 4666 0093 370C0000 		.4byte	.LASF12
 4667 0097 03       		.uleb128 0x3
 4668 0098 08       		.byte	0x8
 4669 0099 07       		.byte	0x7
 4670 009a A6030000 		.4byte	.LASF13
 4671 009e 03       		.uleb128 0x3
 4672 009f 04       		.byte	0x4
 4673 00a0 07       		.byte	0x7
 4674 00a1 0F0C0000 		.4byte	.LASF14
 4675 00a5 05       		.uleb128 0x5
 4676 00a6 04       		.byte	0x4
 4677 00a7 06       		.uleb128 0x6
 4678 00a8 04       		.byte	0x4
 4679 00a9 AD000000 		.4byte	0xad
 4680 00ad 03       		.uleb128 0x3
 4681 00ae 01       		.byte	0x1
 4682 00af 08       		.byte	0x8
 4683 00b0 08070000 		.4byte	.LASF15
 4684 00b4 06       		.uleb128 0x6
 4685 00b5 04       		.byte	0x4
 4686 00b6 BA000000 		.4byte	0xba
 4687 00ba 07       		.uleb128 0x7
 4688 00bb AD000000 		.4byte	0xad
 4689 00bf 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 183


 4690 00c0 C2070000 		.4byte	.LASF16
 4691 00c4 04       		.byte	0x4
 4692 00c5 18       		.byte	0x18
 4693 00c6 53000000 		.4byte	0x53
 4694 00ca 02       		.uleb128 0x2
 4695 00cb 140A0000 		.4byte	.LASF17
 4696 00cf 04       		.byte	0x4
 4697 00d0 24       		.byte	0x24
 4698 00d1 6C000000 		.4byte	0x6c
 4699 00d5 02       		.uleb128 0x2
 4700 00d6 F1020000 		.4byte	.LASF18
 4701 00da 04       		.byte	0x4
 4702 00db 30       		.byte	0x30
 4703 00dc 85000000 		.4byte	0x85
 4704 00e0 03       		.uleb128 0x3
 4705 00e1 04       		.byte	0x4
 4706 00e2 04       		.byte	0x4
 4707 00e3 4E030000 		.4byte	.LASF19
 4708 00e7 03       		.uleb128 0x3
 4709 00e8 08       		.byte	0x8
 4710 00e9 04       		.byte	0x4
 4711 00ea 090F0000 		.4byte	.LASF20
 4712 00ee 08       		.uleb128 0x8
 4713 00ef D5000000 		.4byte	0xd5
 4714 00f3 02       		.uleb128 0x2
 4715 00f4 B1080000 		.4byte	.LASF21
 4716 00f8 05       		.byte	0x5
 4717 00f9 24       		.byte	0x24
 4718 00fa FE000000 		.4byte	0xfe
 4719 00fe 06       		.uleb128 0x6
 4720 00ff 04       		.byte	0x4
 4721 0100 04010000 		.4byte	0x104
 4722 0104 09       		.uleb128 0x9
 4723 0105 0F010000 		.4byte	0x10f
 4724 0109 0A       		.uleb128 0xa
 4725 010a A5000000 		.4byte	0xa5
 4726 010e 00       		.byte	0
 4727 010f 02       		.uleb128 0x2
 4728 0110 5E010000 		.4byte	.LASF22
 4729 0114 06       		.byte	0x6
 4730 0115 38       		.byte	0x38
 4731 0116 D5000000 		.4byte	0xd5
 4732 011a 02       		.uleb128 0x2
 4733 011b 5F080000 		.4byte	.LASF23
 4734 011f 06       		.byte	0x6
 4735 0120 39       		.byte	0x39
 4736 0121 7E000000 		.4byte	0x7e
 4737 0125 02       		.uleb128 0x2
 4738 0126 42070000 		.4byte	.LASF24
 4739 012a 06       		.byte	0x6
 4740 012b 3A       		.byte	0x3a
 4741 012c 90000000 		.4byte	0x90
 4742 0130 02       		.uleb128 0x2
 4743 0131 D1090000 		.4byte	.LASF25
 4744 0135 06       		.byte	0x6
 4745 0136 40       		.byte	0x40
 4746 0137 D5000000 		.4byte	0xd5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 184


 4747 013b 06       		.uleb128 0x6
 4748 013c 04       		.byte	0x4
 4749 013d BF000000 		.4byte	0xbf
 4750 0141 0B       		.uleb128 0xb
 4751 0142 A5000000 		.4byte	0xa5
 4752 0146 51010000 		.4byte	0x151
 4753 014a 0C       		.uleb128 0xc
 4754 014b 9E000000 		.4byte	0x9e
 4755 014f 04       		.byte	0x4
 4756 0150 00       		.byte	0
 4757 0151 0D       		.uleb128 0xd
 4758 0152 91010000 		.4byte	.LASF32
 4759 0156 14       		.byte	0x14
 4760 0157 07       		.byte	0x7
 4761 0158 8C       		.byte	0x8c
 4762 0159 9A010000 		.4byte	0x19a
 4763 015d 0E       		.uleb128 0xe
 4764 015e DE0A0000 		.4byte	.LASF26
 4765 0162 07       		.byte	0x7
 4766 0163 8F       		.byte	0x8f
 4767 0164 30010000 		.4byte	0x130
 4768 0168 00       		.byte	0
 4769 0169 0E       		.uleb128 0xe
 4770 016a C0080000 		.4byte	.LASF27
 4771 016e 07       		.byte	0x7
 4772 016f 90       		.byte	0x90
 4773 0170 9A010000 		.4byte	0x19a
 4774 0174 04       		.byte	0x4
 4775 0175 0E       		.uleb128 0xe
 4776 0176 13040000 		.4byte	.LASF28
 4777 017a 07       		.byte	0x7
 4778 017b 91       		.byte	0x91
 4779 017c 9A010000 		.4byte	0x19a
 4780 0180 08       		.byte	0x8
 4781 0181 0E       		.uleb128 0xe
 4782 0182 E30D0000 		.4byte	.LASF29
 4783 0186 07       		.byte	0x7
 4784 0187 92       		.byte	0x92
 4785 0188 A5000000 		.4byte	0xa5
 4786 018c 0C       		.byte	0xc
 4787 018d 0E       		.uleb128 0xe
 4788 018e 5C0A0000 		.4byte	.LASF30
 4789 0192 07       		.byte	0x7
 4790 0193 93       		.byte	0x93
 4791 0194 A5000000 		.4byte	0xa5
 4792 0198 10       		.byte	0x10
 4793 0199 00       		.byte	0
 4794 019a 06       		.uleb128 0x6
 4795 019b 04       		.byte	0x4
 4796 019c 51010000 		.4byte	0x151
 4797 01a0 02       		.uleb128 0x2
 4798 01a1 0D070000 		.4byte	.LASF31
 4799 01a5 07       		.byte	0x7
 4800 01a6 96       		.byte	0x96
 4801 01a7 51010000 		.4byte	0x151
 4802 01ab 0D       		.uleb128 0xd
 4803 01ac 99050000 		.4byte	.LASF33
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 185


 4804 01b0 0C       		.byte	0xc
 4805 01b1 07       		.byte	0x7
 4806 01b2 98       		.byte	0x98
 4807 01b3 DC010000 		.4byte	0x1dc
 4808 01b7 0E       		.uleb128 0xe
 4809 01b8 DE0A0000 		.4byte	.LASF26
 4810 01bc 07       		.byte	0x7
 4811 01bd 9B       		.byte	0x9b
 4812 01be 30010000 		.4byte	0x130
 4813 01c2 00       		.byte	0
 4814 01c3 0E       		.uleb128 0xe
 4815 01c4 C0080000 		.4byte	.LASF27
 4816 01c8 07       		.byte	0x7
 4817 01c9 9C       		.byte	0x9c
 4818 01ca 9A010000 		.4byte	0x19a
 4819 01ce 04       		.byte	0x4
 4820 01cf 0E       		.uleb128 0xe
 4821 01d0 13040000 		.4byte	.LASF28
 4822 01d4 07       		.byte	0x7
 4823 01d5 9D       		.byte	0x9d
 4824 01d6 9A010000 		.4byte	0x19a
 4825 01da 08       		.byte	0x8
 4826 01db 00       		.byte	0
 4827 01dc 02       		.uleb128 0x2
 4828 01dd 8E070000 		.4byte	.LASF34
 4829 01e1 07       		.byte	0x7
 4830 01e2 9F       		.byte	0x9f
 4831 01e3 AB010000 		.4byte	0x1ab
 4832 01e7 0D       		.uleb128 0xd
 4833 01e8 BC050000 		.4byte	.LASF35
 4834 01ec 14       		.byte	0x14
 4835 01ed 07       		.byte	0x7
 4836 01ee A4       		.byte	0xa4
 4837 01ef 18020000 		.4byte	0x218
 4838 01f3 0E       		.uleb128 0xe
 4839 01f4 0B000000 		.4byte	.LASF36
 4840 01f8 07       		.byte	0x7
 4841 01f9 A7       		.byte	0xa7
 4842 01fa 18020000 		.4byte	0x218
 4843 01fe 00       		.byte	0
 4844 01ff 0E       		.uleb128 0xe
 4845 0200 56010000 		.4byte	.LASF37
 4846 0204 07       		.byte	0x7
 4847 0205 A8       		.byte	0xa8
 4848 0206 1D020000 		.4byte	0x21d
 4849 020a 04       		.byte	0x4
 4850 020b 0E       		.uleb128 0xe
 4851 020c 74070000 		.4byte	.LASF38
 4852 0210 07       		.byte	0x7
 4853 0211 A9       		.byte	0xa9
 4854 0212 DC010000 		.4byte	0x1dc
 4855 0216 08       		.byte	0x8
 4856 0217 00       		.byte	0
 4857 0218 08       		.uleb128 0x8
 4858 0219 25010000 		.4byte	0x125
 4859 021d 06       		.uleb128 0x6
 4860 021e 04       		.byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 186


 4861 021f A0010000 		.4byte	0x1a0
 4862 0223 02       		.uleb128 0x2
 4863 0224 BD090000 		.4byte	.LASF39
 4864 0228 07       		.byte	0x7
 4865 0229 AB       		.byte	0xab
 4866 022a E7010000 		.4byte	0x1e7
 4867 022e 02       		.uleb128 0x2
 4868 022f 58090000 		.4byte	.LASF40
 4869 0233 08       		.byte	0x8
 4870 0234 3E       		.byte	0x3e
 4871 0235 A5000000 		.4byte	0xa5
 4872 0239 0F       		.uleb128 0xf
 4873 023a 01       		.byte	0x1
 4874 023b 5E000000 		.4byte	0x5e
 4875 023f 08       		.byte	0x8
 4876 0240 48       		.byte	0x48
 4877 0241 6A020000 		.4byte	0x26a
 4878 0245 10       		.uleb128 0x10
 4879 0246 BC0C0000 		.4byte	.LASF41
 4880 024a 00       		.byte	0
 4881 024b 10       		.uleb128 0x10
 4882 024c CA070000 		.4byte	.LASF42
 4883 0250 01       		.byte	0x1
 4884 0251 10       		.uleb128 0x10
 4885 0252 F80D0000 		.4byte	.LASF43
 4886 0256 02       		.byte	0x2
 4887 0257 10       		.uleb128 0x10
 4888 0258 64000000 		.4byte	.LASF44
 4889 025c 03       		.byte	0x3
 4890 025d 10       		.uleb128 0x10
 4891 025e 46080000 		.4byte	.LASF45
 4892 0262 04       		.byte	0x4
 4893 0263 10       		.uleb128 0x10
 4894 0264 7A000000 		.4byte	.LASF46
 4895 0268 05       		.byte	0x5
 4896 0269 00       		.byte	0
 4897 026a 02       		.uleb128 0x2
 4898 026b B2090000 		.4byte	.LASF47
 4899 026f 08       		.byte	0x8
 4900 0270 4F       		.byte	0x4f
 4901 0271 39020000 		.4byte	0x239
 4902 0275 0F       		.uleb128 0xf
 4903 0276 01       		.byte	0x1
 4904 0277 5E000000 		.4byte	0x5e
 4905 027b 08       		.byte	0x8
 4906 027c 53       		.byte	0x53
 4907 027d A0020000 		.4byte	0x2a0
 4908 0281 10       		.uleb128 0x10
 4909 0282 0E010000 		.4byte	.LASF48
 4910 0286 00       		.byte	0
 4911 0287 10       		.uleb128 0x10
 4912 0288 F0090000 		.4byte	.LASF49
 4913 028c 01       		.byte	0x1
 4914 028d 10       		.uleb128 0x10
 4915 028e 8E050000 		.4byte	.LASF50
 4916 0292 02       		.byte	0x2
 4917 0293 10       		.uleb128 0x10
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 187


 4918 0294 8F030000 		.4byte	.LASF51
 4919 0298 03       		.byte	0x3
 4920 0299 10       		.uleb128 0x10
 4921 029a 18070000 		.4byte	.LASF52
 4922 029e 04       		.byte	0x4
 4923 029f 00       		.byte	0
 4924 02a0 02       		.uleb128 0x2
 4925 02a1 79050000 		.4byte	.LASF53
 4926 02a5 08       		.byte	0x8
 4927 02a6 59       		.byte	0x59
 4928 02a7 75020000 		.4byte	0x275
 4929 02ab 0D       		.uleb128 0xd
 4930 02ac 6A010000 		.4byte	.LASF54
 4931 02b0 08       		.byte	0x8
 4932 02b1 08       		.byte	0x8
 4933 02b2 5E       		.byte	0x5e
 4934 02b3 D0020000 		.4byte	0x2d0
 4935 02b7 0E       		.uleb128 0xe
 4936 02b8 6E020000 		.4byte	.LASF55
 4937 02bc 08       		.byte	0x8
 4938 02bd 60       		.byte	0x60
 4939 02be 1A010000 		.4byte	0x11a
 4940 02c2 00       		.byte	0
 4941 02c3 0E       		.uleb128 0xe
 4942 02c4 93080000 		.4byte	.LASF56
 4943 02c8 08       		.byte	0x8
 4944 02c9 61       		.byte	0x61
 4945 02ca 30010000 		.4byte	0x130
 4946 02ce 04       		.byte	0x4
 4947 02cf 00       		.byte	0
 4948 02d0 02       		.uleb128 0x2
 4949 02d1 24090000 		.4byte	.LASF57
 4950 02d5 08       		.byte	0x8
 4951 02d6 62       		.byte	0x62
 4952 02d7 AB020000 		.4byte	0x2ab
 4953 02db 0D       		.uleb128 0xd
 4954 02dc 050A0000 		.4byte	.LASF58
 4955 02e0 0C       		.byte	0xc
 4956 02e1 08       		.byte	0x8
 4957 02e2 67       		.byte	0x67
 4958 02e3 0C030000 		.4byte	0x30c
 4959 02e7 0E       		.uleb128 0xe
 4960 02e8 F10C0000 		.4byte	.LASF59
 4961 02ec 08       		.byte	0x8
 4962 02ed 69       		.byte	0x69
 4963 02ee A5000000 		.4byte	0xa5
 4964 02f2 00       		.byte	0
 4965 02f3 0E       		.uleb128 0xe
 4966 02f4 4F080000 		.4byte	.LASF60
 4967 02f8 08       		.byte	0x8
 4968 02f9 6A       		.byte	0x6a
 4969 02fa D5000000 		.4byte	0xd5
 4970 02fe 04       		.byte	0x4
 4971 02ff 0E       		.uleb128 0xe
 4972 0300 90020000 		.4byte	.LASF61
 4973 0304 08       		.byte	0x8
 4974 0305 6B       		.byte	0x6b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 188


 4975 0306 D5000000 		.4byte	0xd5
 4976 030a 08       		.byte	0x8
 4977 030b 00       		.byte	0
 4978 030c 02       		.uleb128 0x2
 4979 030d F3070000 		.4byte	.LASF62
 4980 0311 08       		.byte	0x8
 4981 0312 6C       		.byte	0x6c
 4982 0313 DB020000 		.4byte	0x2db
 4983 0317 07       		.uleb128 0x7
 4984 0318 B4000000 		.4byte	0xb4
 4985 031c 06       		.uleb128 0x6
 4986 031d 04       		.byte	0x4
 4987 031e 0F010000 		.4byte	0x10f
 4988 0322 11       		.uleb128 0x11
 4989 0323 2A060000 		.4byte	.LASF63
 4990 0327 68       		.byte	0x68
 4991 0328 01       		.byte	0x1
 4992 0329 0D01     		.2byte	0x10d
 4993 032b BF030000 		.4byte	0x3bf
 4994 032f 12       		.uleb128 0x12
 4995 0330 250F0000 		.4byte	.LASF64
 4996 0334 01       		.byte	0x1
 4997 0335 0F01     		.2byte	0x10f
 4998 0337 BF030000 		.4byte	0x3bf
 4999 033b 00       		.byte	0
 5000 033c 12       		.uleb128 0x12
 5001 033d F40E0000 		.4byte	.LASF65
 5002 0341 01       		.byte	0x1
 5003 0342 1501     		.2byte	0x115
 5004 0344 A0010000 		.4byte	0x1a0
 5005 0348 04       		.byte	0x4
 5006 0349 12       		.uleb128 0x12
 5007 034a AB0D0000 		.4byte	.LASF66
 5008 034e 01       		.byte	0x1
 5009 034f 1601     		.2byte	0x116
 5010 0351 A0010000 		.4byte	0x1a0
 5011 0355 18       		.byte	0x18
 5012 0356 12       		.uleb128 0x12
 5013 0357 41000000 		.4byte	.LASF67
 5014 035b 01       		.byte	0x1
 5015 035c 1701     		.2byte	0x117
 5016 035e 25010000 		.4byte	0x125
 5017 0362 2C       		.byte	0x2c
 5018 0363 12       		.uleb128 0x12
 5019 0364 700B0000 		.4byte	.LASF68
 5020 0368 01       		.byte	0x1
 5021 0369 1801     		.2byte	0x118
 5022 036b 1C030000 		.4byte	0x31c
 5023 036f 30       		.byte	0x30
 5024 0370 12       		.uleb128 0x12
 5025 0371 00000000 		.4byte	.LASF69
 5026 0375 01       		.byte	0x1
 5027 0376 1901     		.2byte	0x119
 5028 0378 CA030000 		.4byte	0x3ca
 5029 037c 34       		.byte	0x34
 5030 037d 12       		.uleb128 0x12
 5031 037e 8C0D0000 		.4byte	.LASF70
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 189


 5032 0382 01       		.byte	0x1
 5033 0383 2901     		.2byte	0x129
 5034 0385 25010000 		.4byte	0x125
 5035 0389 44       		.byte	0x44
 5036 038a 12       		.uleb128 0x12
 5037 038b C9060000 		.4byte	.LASF71
 5038 038f 01       		.byte	0x1
 5039 0390 2A01     		.2byte	0x12a
 5040 0392 25010000 		.4byte	0x125
 5041 0396 48       		.byte	0x48
 5042 0397 12       		.uleb128 0x12
 5043 0398 CE040000 		.4byte	.LASF72
 5044 039c 01       		.byte	0x1
 5045 039d 3201     		.2byte	0x132
 5046 039f 41010000 		.4byte	0x141
 5047 03a3 4C       		.byte	0x4c
 5048 03a4 12       		.uleb128 0x12
 5049 03a5 97060000 		.4byte	.LASF73
 5050 03a9 01       		.byte	0x1
 5051 03aa 4501     		.2byte	0x145
 5052 03ac EE000000 		.4byte	0xee
 5053 03b0 60       		.byte	0x60
 5054 03b1 12       		.uleb128 0x12
 5055 03b2 11030000 		.4byte	.LASF74
 5056 03b6 01       		.byte	0x1
 5057 03b7 4601     		.2byte	0x146
 5058 03b9 DA030000 		.4byte	0x3da
 5059 03bd 64       		.byte	0x64
 5060 03be 00       		.byte	0
 5061 03bf 06       		.uleb128 0x6
 5062 03c0 04       		.byte	0x4
 5063 03c1 C5030000 		.4byte	0x3c5
 5064 03c5 08       		.uleb128 0x8
 5065 03c6 0F010000 		.4byte	0x10f
 5066 03ca 0B       		.uleb128 0xb
 5067 03cb AD000000 		.4byte	0xad
 5068 03cf DA030000 		.4byte	0x3da
 5069 03d3 0C       		.uleb128 0xc
 5070 03d4 9E000000 		.4byte	0x9e
 5071 03d8 0F       		.byte	0xf
 5072 03d9 00       		.byte	0
 5073 03da 08       		.uleb128 0x8
 5074 03db BF000000 		.4byte	0xbf
 5075 03df 13       		.uleb128 0x13
 5076 03e0 D3020000 		.4byte	.LASF75
 5077 03e4 01       		.byte	0x1
 5078 03e5 5301     		.2byte	0x153
 5079 03e7 22030000 		.4byte	0x322
 5080 03eb 13       		.uleb128 0x13
 5081 03ec D00D0000 		.4byte	.LASF76
 5082 03f0 01       		.byte	0x1
 5083 03f1 5701     		.2byte	0x157
 5084 03f3 DF030000 		.4byte	0x3df
 5085 03f7 14       		.uleb128 0x14
 5086 03f8 FA020000 		.4byte	.LASF79
 5087 03fc 01       		.byte	0x1
 5088 03fd C306     		.2byte	0x6c3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 190


 5089 03ff 1A010000 		.4byte	0x11a
 5090 0403 00000000 		.4byte	.LFB43
 5091 0407 3C000000 		.4byte	.LFE43-.LFB43
 5092 040b 01       		.uleb128 0x1
 5093 040c 9C       		.byte	0x9c
 5094 040d 42040000 		.4byte	0x442
 5095 0411 15       		.uleb128 0x15
 5096 0412 EA090000 		.4byte	.LASF81
 5097 0416 01       		.byte	0x1
 5098 0417 C306     		.2byte	0x6c3
 5099 0419 42040000 		.4byte	0x442
 5100 041d 00000000 		.4byte	.LLST0
 5101 0421 16       		.uleb128 0x16
 5102 0422 070C0000 		.4byte	.LASF77
 5103 0426 01       		.byte	0x1
 5104 0427 C506     		.2byte	0x6c5
 5105 0429 1A010000 		.4byte	0x11a
 5106 042d 6C000000 		.4byte	.LLST1
 5107 0431 16       		.uleb128 0x16
 5108 0432 030F0000 		.4byte	.LASF78
 5109 0436 01       		.byte	0x1
 5110 0437 C606     		.2byte	0x6c6
 5111 0439 52040000 		.4byte	0x452
 5112 043d 8B000000 		.4byte	.LLST2
 5113 0441 00       		.byte	0
 5114 0442 07       		.uleb128 0x7
 5115 0443 2E020000 		.4byte	0x22e
 5116 0447 06       		.uleb128 0x6
 5117 0448 04       		.byte	0x4
 5118 0449 4D040000 		.4byte	0x44d
 5119 044d 07       		.uleb128 0x7
 5120 044e EB030000 		.4byte	0x3eb
 5121 0452 07       		.uleb128 0x7
 5122 0453 47040000 		.4byte	0x447
 5123 0457 14       		.uleb128 0x14
 5124 0458 530E0000 		.4byte	.LASF80
 5125 045c 01       		.byte	0x1
 5126 045d 2C0E     		.2byte	0xe2c
 5127 045f CA000000 		.4byte	0xca
 5128 0463 00000000 		.4byte	.LFB69
 5129 0467 14000000 		.4byte	.LFE69-.LFB69
 5130 046b 01       		.uleb128 0x1
 5131 046c 9C       		.byte	0x9c
 5132 046d 92040000 		.4byte	0x492
 5133 0471 15       		.uleb128 0x15
 5134 0472 3D020000 		.4byte	.LASF82
 5135 0476 01       		.byte	0x1
 5136 0477 2C0E     		.2byte	0xe2c
 5137 0479 92040000 		.4byte	0x492
 5138 047d F7000000 		.4byte	.LLST3
 5139 0481 16       		.uleb128 0x16
 5140 0482 1C090000 		.4byte	.LASF83
 5141 0486 01       		.byte	0x1
 5142 0487 2E0E     		.2byte	0xe2e
 5143 0489 D5000000 		.4byte	0xd5
 5144 048d 15010000 		.4byte	.LLST4
 5145 0491 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 191


 5146 0492 06       		.uleb128 0x6
 5147 0493 04       		.byte	0x4
 5148 0494 98040000 		.4byte	0x498
 5149 0498 07       		.uleb128 0x7
 5150 0499 BF000000 		.4byte	0xbf
 5151 049d 17       		.uleb128 0x17
 5152 049e 77080000 		.4byte	.LASF84
 5153 04a2 01       		.byte	0x1
 5154 04a3 920E     		.2byte	0xe92
 5155 04a5 00000000 		.4byte	.LFB72
 5156 04a9 30000000 		.4byte	.LFE72-.LFB72
 5157 04ad 01       		.uleb128 0x1
 5158 04ae 9C       		.byte	0x9c
 5159 04af C4040000 		.4byte	0x4c4
 5160 04b3 16       		.uleb128 0x16
 5161 04b4 030F0000 		.4byte	.LASF78
 5162 04b8 01       		.byte	0x1
 5163 04b9 940E     		.2byte	0xe94
 5164 04bb C4040000 		.4byte	0x4c4
 5165 04bf 34010000 		.4byte	.LLST5
 5166 04c3 00       		.byte	0
 5167 04c4 06       		.uleb128 0x6
 5168 04c5 04       		.byte	0x4
 5169 04c6 EB030000 		.4byte	0x3eb
 5170 04ca 17       		.uleb128 0x17
 5171 04cb EB0D0000 		.4byte	.LASF85
 5172 04cf 01       		.byte	0x1
 5173 04d0 5C0E     		.2byte	0xe5c
 5174 04d2 00000000 		.4byte	.LFB71
 5175 04d6 12000000 		.4byte	.LFE71-.LFB71
 5176 04da 01       		.uleb128 0x1
 5177 04db 9C       		.byte	0x9c
 5178 04dc 0A050000 		.4byte	0x50a
 5179 04e0 15       		.uleb128 0x15
 5180 04e1 030F0000 		.4byte	.LASF78
 5181 04e5 01       		.byte	0x1
 5182 04e6 5C0E     		.2byte	0xe5c
 5183 04e8 C4040000 		.4byte	0x4c4
 5184 04ec 47010000 		.4byte	.LLST6
 5185 04f0 18       		.uleb128 0x18
 5186 04f1 0A000000 		.4byte	.LVL18
 5187 04f5 1D1F0000 		.4byte	0x1f1d
 5188 04f9 19       		.uleb128 0x19
 5189 04fa 10000000 		.4byte	.LVL19
 5190 04fe 1D1F0000 		.4byte	0x1f1d
 5191 0502 1A       		.uleb128 0x1a
 5192 0503 01       		.uleb128 0x1
 5193 0504 50       		.byte	0x50
 5194 0505 02       		.uleb128 0x2
 5195 0506 74       		.byte	0x74
 5196 0507 00       		.sleb128 0
 5197 0508 00       		.byte	0
 5198 0509 00       		.byte	0
 5199 050a 17       		.uleb128 0x17
 5200 050b C8000000 		.4byte	.LASF86
 5201 050f 01       		.byte	0x1
 5202 0510 3703     		.2byte	0x337
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 192


 5203 0512 00000000 		.4byte	.LFB33
 5204 0516 AC000000 		.4byte	.LFE33-.LFB33
 5205 051a 01       		.uleb128 0x1
 5206 051b 9C       		.byte	0x9c
 5207 051c 1E060000 		.4byte	0x61e
 5208 0520 15       		.uleb128 0x15
 5209 0521 E8070000 		.4byte	.LASF87
 5210 0525 01       		.byte	0x1
 5211 0526 3703     		.2byte	0x337
 5212 0528 F3000000 		.4byte	0xf3
 5213 052c 73010000 		.4byte	.LLST7
 5214 0530 15       		.uleb128 0x15
 5215 0531 18060000 		.4byte	.LASF88
 5216 0535 01       		.byte	0x1
 5217 0536 3803     		.2byte	0x338
 5218 0538 17030000 		.4byte	0x317
 5219 053c 9E010000 		.4byte	.LLST8
 5220 0540 15       		.uleb128 0x15
 5221 0541 4E070000 		.4byte	.LASF89
 5222 0545 01       		.byte	0x1
 5223 0546 3903     		.2byte	0x339
 5224 0548 1E060000 		.4byte	0x61e
 5225 054c CA010000 		.4byte	.LLST9
 5226 0550 15       		.uleb128 0x15
 5227 0551 D10A0000 		.4byte	.LASF90
 5228 0555 01       		.byte	0x1
 5229 0556 3A03     		.2byte	0x33a
 5230 0558 23060000 		.4byte	0x623
 5231 055c F6010000 		.4byte	.LLST10
 5232 0560 15       		.uleb128 0x15
 5233 0561 41000000 		.4byte	.LASF67
 5234 0565 01       		.byte	0x1
 5235 0566 3B03     		.2byte	0x33b
 5236 0568 25010000 		.4byte	0x125
 5237 056c 15020000 		.4byte	.LLST11
 5238 0570 1B       		.uleb128 0x1b
 5239 0571 6D0F0000 		.4byte	.LASF91
 5240 0575 01       		.byte	0x1
 5241 0576 3C03     		.2byte	0x33c
 5242 0578 2E060000 		.4byte	0x62e
 5243 057c 02       		.uleb128 0x2
 5244 057d 91       		.byte	0x91
 5245 057e 04       		.sleb128 4
 5246 057f 1B       		.uleb128 0x1b
 5247 0580 DF070000 		.4byte	.LASF92
 5248 0584 01       		.byte	0x1
 5249 0585 3D03     		.2byte	0x33d
 5250 0587 C4040000 		.4byte	0x4c4
 5251 058b 02       		.uleb128 0x2
 5252 058c 91       		.byte	0x91
 5253 058d 08       		.sleb128 8
 5254 058e 1B       		.uleb128 0x1b
 5255 058f 6E0E0000 		.4byte	.LASF93
 5256 0593 01       		.byte	0x1
 5257 0594 3E03     		.2byte	0x33e
 5258 0596 3E060000 		.4byte	0x63e
 5259 059a 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 193


 5260 059b 91       		.byte	0x91
 5261 059c 0C       		.sleb128 12
 5262 059d 16       		.uleb128 0x16
 5263 059e 250F0000 		.4byte	.LASF64
 5264 05a2 01       		.byte	0x1
 5265 05a3 4003     		.2byte	0x340
 5266 05a5 1C030000 		.4byte	0x31c
 5267 05a9 34020000 		.4byte	.LLST12
 5268 05ad 1C       		.uleb128 0x1c
 5269 05ae 7800     		.ascii	"x\000"
 5270 05b0 01       		.byte	0x1
 5271 05b1 4103     		.2byte	0x341
 5272 05b3 25010000 		.4byte	0x125
 5273 05b7 73020000 		.4byte	.LLST13
 5274 05bb 1D       		.uleb128 0x1d
 5275 05bc 1A000000 		.4byte	.LVL25
 5276 05c0 281F0000 		.4byte	0x1f28
 5277 05c4 D7050000 		.4byte	0x5d7
 5278 05c8 1A       		.uleb128 0x1a
 5279 05c9 01       		.uleb128 0x1
 5280 05ca 51       		.byte	0x51
 5281 05cb 02       		.uleb128 0x2
 5282 05cc 08       		.byte	0x8
 5283 05cd A5       		.byte	0xa5
 5284 05ce 1A       		.uleb128 0x1a
 5285 05cf 01       		.uleb128 0x1
 5286 05d0 52       		.byte	0x52
 5287 05d1 04       		.uleb128 0x4
 5288 05d2 77       		.byte	0x77
 5289 05d3 00       		.sleb128 0
 5290 05d4 32       		.byte	0x32
 5291 05d5 24       		.byte	0x24
 5292 05d6 00       		.byte	0
 5293 05d7 1D       		.uleb128 0x1d
 5294 05d8 60000000 		.4byte	.LVL34
 5295 05dc 331F0000 		.4byte	0x1f33
 5296 05e0 EB050000 		.4byte	0x5eb
 5297 05e4 1A       		.uleb128 0x1a
 5298 05e5 01       		.uleb128 0x1
 5299 05e6 50       		.byte	0x50
 5300 05e7 02       		.uleb128 0x2
 5301 05e8 76       		.byte	0x76
 5302 05e9 04       		.sleb128 4
 5303 05ea 00       		.byte	0
 5304 05eb 1D       		.uleb128 0x1d
 5305 05ec 68000000 		.4byte	.LVL35
 5306 05f0 331F0000 		.4byte	0x1f33
 5307 05f4 FF050000 		.4byte	0x5ff
 5308 05f8 1A       		.uleb128 0x1a
 5309 05f9 01       		.uleb128 0x1
 5310 05fa 50       		.byte	0x50
 5311 05fb 02       		.uleb128 0x2
 5312 05fc 76       		.byte	0x76
 5313 05fd 18       		.sleb128 24
 5314 05fe 00       		.byte	0
 5315 05ff 19       		.uleb128 0x19
 5316 0600 9A000000 		.4byte	.LVL41
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 194


 5317 0604 3F1F0000 		.4byte	0x1f3f
 5318 0608 1A       		.uleb128 0x1a
 5319 0609 01       		.uleb128 0x1
 5320 060a 50       		.byte	0x50
 5321 060b 02       		.uleb128 0x2
 5322 060c 77       		.byte	0x77
 5323 060d 00       		.sleb128 0
 5324 060e 1A       		.uleb128 0x1a
 5325 060f 01       		.uleb128 0x1
 5326 0610 51       		.byte	0x51
 5327 0611 03       		.uleb128 0x3
 5328 0612 7D       		.byte	0x7d
 5329 0613 00       		.sleb128 0
 5330 0614 06       		.byte	0x6
 5331 0615 1A       		.uleb128 0x1a
 5332 0616 01       		.uleb128 0x1
 5333 0617 52       		.byte	0x52
 5334 0618 03       		.uleb128 0x3
 5335 0619 91       		.byte	0x91
 5336 061a 64       		.sleb128 -28
 5337 061b 06       		.byte	0x6
 5338 061c 00       		.byte	0
 5339 061d 00       		.byte	0
 5340 061e 07       		.uleb128 0x7
 5341 061f D5000000 		.4byte	0xd5
 5342 0623 07       		.uleb128 0x7
 5343 0624 A5000000 		.4byte	0xa5
 5344 0628 06       		.uleb128 0x6
 5345 0629 04       		.byte	0x4
 5346 062a 2E020000 		.4byte	0x22e
 5347 062e 07       		.uleb128 0x7
 5348 062f 28060000 		.4byte	0x628
 5349 0633 06       		.uleb128 0x6
 5350 0634 04       		.byte	0x4
 5351 0635 39060000 		.4byte	0x639
 5352 0639 07       		.uleb128 0x7
 5353 063a 0C030000 		.4byte	0x30c
 5354 063e 07       		.uleb128 0x7
 5355 063f 33060000 		.4byte	0x633
 5356 0643 17       		.uleb128 0x17
 5357 0644 3E0F0000 		.4byte	.LASF94
 5358 0648 01       		.byte	0x1
 5359 0649 6C0D     		.2byte	0xd6c
 5360 064b 00000000 		.4byte	.LFB67
 5361 064f 58000000 		.4byte	.LFE67-.LFB67
 5362 0653 01       		.uleb128 0x1
 5363 0654 9C       		.byte	0x9c
 5364 0655 EB060000 		.4byte	0x6eb
 5365 0659 16       		.uleb128 0x16
 5366 065a 41000000 		.4byte	.LASF67
 5367 065e 01       		.byte	0x1
 5368 065f 6E0D     		.2byte	0xd6e
 5369 0661 25010000 		.4byte	0x125
 5370 0665 A9020000 		.4byte	.LLST14
 5371 0669 1D       		.uleb128 0x1d
 5372 066a 16000000 		.4byte	.LVL47
 5373 066e 4A1F0000 		.4byte	0x1f4a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 195


 5374 0672 8A060000 		.4byte	0x68a
 5375 0676 1A       		.uleb128 0x1a
 5376 0677 01       		.uleb128 0x1
 5377 0678 50       		.byte	0x50
 5378 0679 0F       		.uleb128 0xf
 5379 067a 74       		.byte	0x74
 5380 067b 00       		.sleb128 0
 5381 067c 32       		.byte	0x32
 5382 067d 24       		.byte	0x24
 5383 067e 74       		.byte	0x74
 5384 067f 00       		.sleb128 0
 5385 0680 22       		.byte	0x22
 5386 0681 32       		.byte	0x32
 5387 0682 24       		.byte	0x24
 5388 0683 03       		.byte	0x3
 5389 0684 30000000 		.4byte	.LANCHOR0+48
 5390 0688 22       		.byte	0x22
 5391 0689 00       		.byte	0
 5392 068a 1D       		.uleb128 0x1d
 5393 068b 28000000 		.4byte	.LVL50
 5394 068f 4A1F0000 		.4byte	0x1f4a
 5395 0693 9E060000 		.4byte	0x69e
 5396 0697 1A       		.uleb128 0x1a
 5397 0698 01       		.uleb128 0x1
 5398 0699 50       		.byte	0x50
 5399 069a 02       		.uleb128 0x2
 5400 069b 77       		.byte	0x77
 5401 069c 00       		.sleb128 0
 5402 069d 00       		.byte	0
 5403 069e 1D       		.uleb128 0x1d
 5404 069f 32000000 		.4byte	.LVL51
 5405 06a3 4A1F0000 		.4byte	0x1f4a
 5406 06a7 B2060000 		.4byte	0x6b2
 5407 06ab 1A       		.uleb128 0x1a
 5408 06ac 01       		.uleb128 0x1
 5409 06ad 50       		.byte	0x50
 5410 06ae 02       		.uleb128 0x2
 5411 06af 76       		.byte	0x76
 5412 06b0 00       		.sleb128 0
 5413 06b1 00       		.byte	0
 5414 06b2 1D       		.uleb128 0x1d
 5415 06b3 3C000000 		.4byte	.LVL52
 5416 06b7 4A1F0000 		.4byte	0x1f4a
 5417 06bb C6060000 		.4byte	0x6c6
 5418 06bf 1A       		.uleb128 0x1a
 5419 06c0 01       		.uleb128 0x1
 5420 06c1 50       		.byte	0x50
 5421 06c2 02       		.uleb128 0x2
 5422 06c3 75       		.byte	0x75
 5423 06c4 14       		.sleb128 20
 5424 06c5 00       		.byte	0
 5425 06c6 1D       		.uleb128 0x1d
 5426 06c7 44000000 		.4byte	.LVL53
 5427 06cb 4A1F0000 		.4byte	0x1f4a
 5428 06cf DA060000 		.4byte	0x6da
 5429 06d3 1A       		.uleb128 0x1a
 5430 06d4 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 196


 5431 06d5 50       		.byte	0x50
 5432 06d6 02       		.uleb128 0x2
 5433 06d7 74       		.byte	0x74
 5434 06d8 3C       		.sleb128 60
 5435 06d9 00       		.byte	0
 5436 06da 19       		.uleb128 0x19
 5437 06db 4A000000 		.4byte	.LVL54
 5438 06df 4A1F0000 		.4byte	0x1f4a
 5439 06e3 1A       		.uleb128 0x1a
 5440 06e4 01       		.uleb128 0x1
 5441 06e5 50       		.byte	0x50
 5442 06e6 02       		.uleb128 0x2
 5443 06e7 75       		.byte	0x75
 5444 06e8 00       		.sleb128 0
 5445 06e9 00       		.byte	0
 5446 06ea 00       		.byte	0
 5447 06eb 17       		.uleb128 0x17
 5448 06ec A9070000 		.4byte	.LASF95
 5449 06f0 01       		.byte	0x1
 5450 06f1 0304     		.2byte	0x403
 5451 06f3 00000000 		.4byte	.LFB34
 5452 06f7 8C000000 		.4byte	.LFE34-.LFB34
 5453 06fb 01       		.uleb128 0x1
 5454 06fc 9C       		.byte	0x9c
 5455 06fd 4A070000 		.4byte	0x74a
 5456 0701 15       		.uleb128 0x15
 5457 0702 DF070000 		.4byte	.LASF92
 5458 0706 01       		.byte	0x1
 5459 0707 0304     		.2byte	0x403
 5460 0709 C4040000 		.4byte	0x4c4
 5461 070d C8020000 		.4byte	.LLST15
 5462 0711 18       		.uleb128 0x18
 5463 0712 08000000 		.4byte	.LVL56
 5464 0716 561F0000 		.4byte	0x1f56
 5465 071a 18       		.uleb128 0x18
 5466 071b 24000000 		.4byte	.LVL57
 5467 071f 43060000 		.4byte	0x643
 5468 0723 1D       		.uleb128 0x1d
 5469 0724 64000000 		.4byte	.LVL58
 5470 0728 611F0000 		.4byte	0x1f61
 5471 072c 37070000 		.4byte	0x737
 5472 0730 1A       		.uleb128 0x1a
 5473 0731 01       		.uleb128 0x1
 5474 0732 51       		.byte	0x51
 5475 0733 02       		.uleb128 0x2
 5476 0734 74       		.byte	0x74
 5477 0735 04       		.sleb128 4
 5478 0736 00       		.byte	0
 5479 0737 18       		.uleb128 0x18
 5480 0738 68000000 		.4byte	.LVL59
 5481 073c 6D1F0000 		.4byte	0x1f6d
 5482 0740 18       		.uleb128 0x18
 5483 0741 80000000 		.4byte	.LVL60
 5484 0745 781F0000 		.4byte	0x1f78
 5485 0749 00       		.byte	0
 5486 074a 17       		.uleb128 0x17
 5487 074b 7B0F0000 		.4byte	.LASF96
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 197


 5488 074f 01       		.byte	0x1
 5489 0750 8C0D     		.2byte	0xd8c
 5490 0752 00000000 		.4byte	.LFB68
 5491 0756 38000000 		.4byte	.LFE68-.LFB68
 5492 075a 01       		.uleb128 0x1
 5493 075b 9C       		.byte	0x9c
 5494 075c B1070000 		.4byte	0x7b1
 5495 0760 1E       		.uleb128 0x1e
 5496 0761 02000000 		.4byte	.LBB2
 5497 0765 30000000 		.4byte	.LBE2-.LBB2
 5498 0769 16       		.uleb128 0x16
 5499 076a 030F0000 		.4byte	.LASF78
 5500 076e 01       		.byte	0x1
 5501 076f 930D     		.2byte	0xd93
 5502 0771 C4040000 		.4byte	0x4c4
 5503 0775 F4020000 		.4byte	.LLST16
 5504 0779 18       		.uleb128 0x18
 5505 077a 08000000 		.4byte	.LVL62
 5506 077e 561F0000 		.4byte	0x1f56
 5507 0782 1D       		.uleb128 0x1d
 5508 0783 14000000 		.4byte	.LVL64
 5509 0787 831F0000 		.4byte	0x1f83
 5510 078b 96070000 		.4byte	0x796
 5511 078f 1A       		.uleb128 0x1a
 5512 0790 01       		.uleb128 0x1
 5513 0791 50       		.byte	0x50
 5514 0792 02       		.uleb128 0x2
 5515 0793 75       		.byte	0x75
 5516 0794 04       		.sleb128 4
 5517 0795 00       		.byte	0
 5518 0796 18       		.uleb128 0x18
 5519 0797 24000000 		.4byte	.LVL65
 5520 079b 6D1F0000 		.4byte	0x1f6d
 5521 079f 19       		.uleb128 0x19
 5522 07a0 2A000000 		.4byte	.LVL66
 5523 07a4 CA040000 		.4byte	0x4ca
 5524 07a8 1A       		.uleb128 0x1a
 5525 07a9 01       		.uleb128 0x1
 5526 07aa 50       		.byte	0x50
 5527 07ab 02       		.uleb128 0x2
 5528 07ac 75       		.byte	0x75
 5529 07ad 00       		.sleb128 0
 5530 07ae 00       		.byte	0
 5531 07af 00       		.byte	0
 5532 07b0 00       		.byte	0
 5533 07b1 1F       		.uleb128 0x1f
 5534 07b2 68070000 		.4byte	.LASF97
 5535 07b6 01       		.byte	0x1
 5536 07b7 980C     		.2byte	0xc98
 5537 07b9 00000000 		.4byte	.LFB64
 5538 07bd 08000000 		.4byte	.LFE64-.LFB64
 5539 07c1 01       		.uleb128 0x1
 5540 07c2 9C       		.byte	0x9c
 5541 07c3 E1070000 		.4byte	0x7e1
 5542 07c7 15       		.uleb128 0x15
 5543 07c8 D10A0000 		.4byte	.LASF90
 5544 07cc 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 198


 5545 07cd 980C     		.2byte	0xc98
 5546 07cf A5000000 		.4byte	0xa5
 5547 07d3 07030000 		.4byte	.LLST17
 5548 07d7 18       		.uleb128 0x18
 5549 07d8 06000000 		.4byte	.LVL69
 5550 07dc 4A070000 		.4byte	0x74a
 5551 07e0 00       		.byte	0
 5552 07e1 17       		.uleb128 0x17
 5553 07e2 770E0000 		.4byte	.LASF98
 5554 07e6 01       		.byte	0x1
 5555 07e7 2D13     		.2byte	0x132d
 5556 07e9 00000000 		.4byte	.LFB86
 5557 07ed 64000000 		.4byte	.LFE86-.LFB86
 5558 07f1 01       		.uleb128 0x1
 5559 07f2 9C       		.byte	0x9c
 5560 07f3 6A080000 		.4byte	0x86a
 5561 07f7 15       		.uleb128 0x15
 5562 07f8 D60D0000 		.4byte	.LASF99
 5563 07fc 01       		.byte	0x1
 5564 07fd 2D13     		.2byte	0x132d
 5565 07ff 30010000 		.4byte	0x130
 5566 0803 28030000 		.4byte	.LLST18
 5567 0807 15       		.uleb128 0x15
 5568 0808 A60C0000 		.4byte	.LASF100
 5569 080c 01       		.byte	0x1
 5570 080d 2D13     		.2byte	0x132d
 5571 080f 6A080000 		.4byte	0x86a
 5572 0813 54030000 		.4byte	.LLST19
 5573 0817 16       		.uleb128 0x16
 5574 0818 E80E0000 		.4byte	.LASF101
 5575 081c 01       		.byte	0x1
 5576 081d 2F13     		.2byte	0x132f
 5577 081f 30010000 		.4byte	0x130
 5578 0823 80030000 		.4byte	.LLST20
 5579 0827 16       		.uleb128 0x16
 5580 0828 E6050000 		.4byte	.LASF102
 5581 082c 01       		.byte	0x1
 5582 082d 3013     		.2byte	0x1330
 5583 082f 6F080000 		.4byte	0x86f
 5584 0833 93030000 		.4byte	.LLST21
 5585 0837 18       		.uleb128 0x18
 5586 0838 12000000 		.4byte	.LVL73
 5587 083c 831F0000 		.4byte	0x1f83
 5588 0840 1D       		.uleb128 0x1d
 5589 0841 26000000 		.4byte	.LVL74
 5590 0845 611F0000 		.4byte	0x1f61
 5591 0849 57080000 		.4byte	0x857
 5592 084d 1A       		.uleb128 0x1a
 5593 084e 01       		.uleb128 0x1
 5594 084f 50       		.byte	0x50
 5595 0850 05       		.uleb128 0x5
 5596 0851 03       		.byte	0x3
 5597 0852 00000000 		.4byte	.LANCHOR0
 5598 0856 00       		.byte	0
 5599 0857 18       		.uleb128 0x18
 5600 0858 40000000 		.4byte	.LVL76
 5601 085c 8F1F0000 		.4byte	0x1f8f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 199


 5602 0860 18       		.uleb128 0x18
 5603 0861 50000000 		.4byte	.LVL78
 5604 0865 8F1F0000 		.4byte	0x1f8f
 5605 0869 00       		.byte	0
 5606 086a 07       		.uleb128 0x7
 5607 086b 1A010000 		.4byte	0x11a
 5608 086f 07       		.uleb128 0x7
 5609 0870 30010000 		.4byte	0x130
 5610 0874 20       		.uleb128 0x20
 5611 0875 9D070000 		.4byte	.LASF105
 5612 0879 01       		.byte	0x1
 5613 087a DC02     		.2byte	0x2dc
 5614 087c 1A010000 		.4byte	0x11a
 5615 0880 00000000 		.4byte	.LFB32
 5616 0884 5E000000 		.4byte	.LFE32-.LFB32
 5617 0888 01       		.uleb128 0x1
 5618 0889 9C       		.byte	0x9c
 5619 088a BA090000 		.4byte	0x9ba
 5620 088e 15       		.uleb128 0x15
 5621 088f E8070000 		.4byte	.LASF87
 5622 0893 01       		.byte	0x1
 5623 0894 DC02     		.2byte	0x2dc
 5624 0896 F3000000 		.4byte	0xf3
 5625 089a A6030000 		.4byte	.LLST22
 5626 089e 15       		.uleb128 0x15
 5627 089f 18060000 		.4byte	.LASF88
 5628 08a3 01       		.byte	0x1
 5629 08a4 DD02     		.2byte	0x2dd
 5630 08a6 17030000 		.4byte	0x317
 5631 08aa C5030000 		.4byte	.LLST23
 5632 08ae 15       		.uleb128 0x15
 5633 08af 63030000 		.4byte	.LASF103
 5634 08b3 01       		.byte	0x1
 5635 08b4 DE02     		.2byte	0x2de
 5636 08b6 BA090000 		.4byte	0x9ba
 5637 08ba E4030000 		.4byte	.LLST24
 5638 08be 15       		.uleb128 0x15
 5639 08bf D10A0000 		.4byte	.LASF90
 5640 08c3 01       		.byte	0x1
 5641 08c4 DF02     		.2byte	0x2df
 5642 08c6 23060000 		.4byte	0x623
 5643 08ca 05040000 		.4byte	.LLST25
 5644 08ce 1B       		.uleb128 0x1b
 5645 08cf 41000000 		.4byte	.LASF67
 5646 08d3 01       		.byte	0x1
 5647 08d4 E002     		.2byte	0x2e0
 5648 08d6 25010000 		.4byte	0x125
 5649 08da 02       		.uleb128 0x2
 5650 08db 91       		.byte	0x91
 5651 08dc 00       		.sleb128 0
 5652 08dd 1B       		.uleb128 0x1b
 5653 08de 6D0F0000 		.4byte	.LASF91
 5654 08e2 01       		.byte	0x1
 5655 08e3 E102     		.2byte	0x2e1
 5656 08e5 2E060000 		.4byte	0x62e
 5657 08e9 02       		.uleb128 0x2
 5658 08ea 91       		.byte	0x91
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 200


 5659 08eb 04       		.sleb128 4
 5660 08ec 16       		.uleb128 0x16
 5661 08ed DF070000 		.4byte	.LASF92
 5662 08f1 01       		.byte	0x1
 5663 08f2 E302     		.2byte	0x2e3
 5664 08f4 C4040000 		.4byte	0x4c4
 5665 08f8 31040000 		.4byte	.LLST26
 5666 08fc 16       		.uleb128 0x16
 5667 08fd 070C0000 		.4byte	.LASF77
 5668 0901 01       		.byte	0x1
 5669 0902 E402     		.2byte	0x2e4
 5670 0904 1A010000 		.4byte	0x11a
 5671 0908 5A040000 		.4byte	.LLST27
 5672 090c 21       		.uleb128 0x21
 5673 090d 0C000000 		.4byte	.LBB3
 5674 0911 22000000 		.4byte	.LBE3-.LBB3
 5675 0915 64090000 		.4byte	0x964
 5676 0919 16       		.uleb128 0x16
 5677 091a 700B0000 		.4byte	.LASF68
 5678 091e 01       		.byte	0x1
 5679 091f 0103     		.2byte	0x301
 5680 0921 1C030000 		.4byte	0x31c
 5681 0925 79040000 		.4byte	.LLST28
 5682 0929 1D       		.uleb128 0x1d
 5683 092a 12000000 		.4byte	.LVL83
 5684 092e 9B1F0000 		.4byte	0x1f9b
 5685 0932 3F090000 		.4byte	0x93f
 5686 0936 1A       		.uleb128 0x1a
 5687 0937 01       		.uleb128 0x1
 5688 0938 50       		.byte	0x50
 5689 0939 04       		.uleb128 0x4
 5690 093a 74       		.byte	0x74
 5691 093b 00       		.sleb128 0
 5692 093c 32       		.byte	0x32
 5693 093d 24       		.byte	0x24
 5694 093e 00       		.byte	0
 5695 093f 1D       		.uleb128 0x1d
 5696 0940 1C000000 		.4byte	.LVL86
 5697 0944 9B1F0000 		.4byte	0x1f9b
 5698 0948 53090000 		.4byte	0x953
 5699 094c 1A       		.uleb128 0x1a
 5700 094d 01       		.uleb128 0x1
 5701 094e 50       		.byte	0x50
 5702 094f 02       		.uleb128 0x2
 5703 0950 08       		.byte	0x8
 5704 0951 68       		.byte	0x68
 5705 0952 00       		.byte	0
 5706 0953 19       		.uleb128 0x19
 5707 0954 2A000000 		.4byte	.LVL89
 5708 0958 1D1F0000 		.4byte	0x1f1d
 5709 095c 1A       		.uleb128 0x1a
 5710 095d 01       		.uleb128 0x1
 5711 095e 50       		.byte	0x50
 5712 095f 02       		.uleb128 0x2
 5713 0960 76       		.byte	0x76
 5714 0961 00       		.sleb128 0
 5715 0962 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 201


 5716 0963 00       		.byte	0
 5717 0964 1D       		.uleb128 0x1d
 5718 0965 4C000000 		.4byte	.LVL92
 5719 0969 0A050000 		.4byte	0x50a
 5720 096d A9090000 		.4byte	0x9a9
 5721 0971 1A       		.uleb128 0x1a
 5722 0972 01       		.uleb128 0x1
 5723 0973 50       		.byte	0x50
 5724 0974 03       		.uleb128 0x3
 5725 0975 91       		.byte	0x91
 5726 0976 60       		.sleb128 -32
 5727 0977 06       		.byte	0x6
 5728 0978 1A       		.uleb128 0x1a
 5729 0979 01       		.uleb128 0x1
 5730 097a 51       		.byte	0x51
 5731 097b 03       		.uleb128 0x3
 5732 097c 91       		.byte	0x91
 5733 097d 64       		.sleb128 -28
 5734 097e 06       		.byte	0x6
 5735 097f 1A       		.uleb128 0x1a
 5736 0980 01       		.uleb128 0x1
 5737 0981 52       		.byte	0x52
 5738 0982 02       		.uleb128 0x2
 5739 0983 74       		.byte	0x74
 5740 0984 00       		.sleb128 0
 5741 0985 1A       		.uleb128 0x1a
 5742 0986 01       		.uleb128 0x1
 5743 0987 53       		.byte	0x53
 5744 0988 02       		.uleb128 0x2
 5745 0989 77       		.byte	0x77
 5746 098a 00       		.sleb128 0
 5747 098b 1A       		.uleb128 0x1a
 5748 098c 02       		.uleb128 0x2
 5749 098d 7D       		.byte	0x7d
 5750 098e 00       		.sleb128 0
 5751 098f 03       		.uleb128 0x3
 5752 0990 91       		.byte	0x91
 5753 0991 00       		.sleb128 0
 5754 0992 06       		.byte	0x6
 5755 0993 1A       		.uleb128 0x1a
 5756 0994 02       		.uleb128 0x2
 5757 0995 7D       		.byte	0x7d
 5758 0996 04       		.sleb128 4
 5759 0997 03       		.uleb128 0x3
 5760 0998 91       		.byte	0x91
 5761 0999 04       		.sleb128 4
 5762 099a 06       		.byte	0x6
 5763 099b 1A       		.uleb128 0x1a
 5764 099c 02       		.uleb128 0x2
 5765 099d 7D       		.byte	0x7d
 5766 099e 08       		.sleb128 8
 5767 099f 02       		.uleb128 0x2
 5768 09a0 75       		.byte	0x75
 5769 09a1 00       		.sleb128 0
 5770 09a2 1A       		.uleb128 0x1a
 5771 09a3 02       		.uleb128 0x2
 5772 09a4 7D       		.byte	0x7d
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 202


 5773 09a5 0C       		.sleb128 12
 5774 09a6 01       		.uleb128 0x1
 5775 09a7 30       		.byte	0x30
 5776 09a8 00       		.byte	0
 5777 09a9 19       		.uleb128 0x19
 5778 09aa 52000000 		.4byte	.LVL93
 5779 09ae EB060000 		.4byte	0x6eb
 5780 09b2 1A       		.uleb128 0x1a
 5781 09b3 01       		.uleb128 0x1
 5782 09b4 50       		.byte	0x50
 5783 09b5 02       		.uleb128 0x2
 5784 09b6 75       		.byte	0x75
 5785 09b7 00       		.sleb128 0
 5786 09b8 00       		.byte	0
 5787 09b9 00       		.byte	0
 5788 09ba 07       		.uleb128 0x7
 5789 09bb CA000000 		.4byte	0xca
 5790 09bf 22       		.uleb128 0x22
 5791 09c0 1D0A0000 		.4byte	.LASF113
 5792 09c4 01       		.byte	0x1
 5793 09c5 5804     		.2byte	0x458
 5794 09c7 00000000 		.4byte	.LFB35
 5795 09cb 78000000 		.4byte	.LFE35-.LFB35
 5796 09cf 01       		.uleb128 0x1
 5797 09d0 9C       		.byte	0x9c
 5798 09d1 700A0000 		.4byte	0xa70
 5799 09d5 15       		.uleb128 0x15
 5800 09d6 780B0000 		.4byte	.LASF104
 5801 09da 01       		.byte	0x1
 5802 09db 5804     		.2byte	0x458
 5803 09dd 2E020000 		.4byte	0x22e
 5804 09e1 AD040000 		.4byte	.LLST29
 5805 09e5 16       		.uleb128 0x16
 5806 09e6 030F0000 		.4byte	.LASF78
 5807 09ea 01       		.byte	0x1
 5808 09eb 5A04     		.2byte	0x45a
 5809 09ed C4040000 		.4byte	0x4c4
 5810 09f1 CB040000 		.4byte	.LLST30
 5811 09f5 18       		.uleb128 0x18
 5812 09f6 08000000 		.4byte	.LVL100
 5813 09fa 561F0000 		.4byte	0x1f56
 5814 09fe 1D       		.uleb128 0x1d
 5815 09ff 18000000 		.4byte	.LVL102
 5816 0a03 831F0000 		.4byte	0x1f83
 5817 0a07 120A0000 		.4byte	0xa12
 5818 0a0b 1A       		.uleb128 0x1a
 5819 0a0c 01       		.uleb128 0x1
 5820 0a0d 50       		.byte	0x50
 5821 0a0e 02       		.uleb128 0x2
 5822 0a0f 75       		.byte	0x75
 5823 0a10 00       		.sleb128 0
 5824 0a11 00       		.byte	0
 5825 0a12 1D       		.uleb128 0x1d
 5826 0a13 26000000 		.4byte	.LVL103
 5827 0a17 831F0000 		.4byte	0x1f83
 5828 0a1b 260A0000 		.4byte	0xa26
 5829 0a1f 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 203


 5830 0a20 01       		.uleb128 0x1
 5831 0a21 50       		.byte	0x50
 5832 0a22 02       		.uleb128 0x2
 5833 0a23 74       		.byte	0x74
 5834 0a24 18       		.sleb128 24
 5835 0a25 00       		.byte	0
 5836 0a26 1D       		.uleb128 0x1d
 5837 0a27 40000000 		.4byte	.LVL104
 5838 0a2b 611F0000 		.4byte	0x1f61
 5839 0a2f 400A0000 		.4byte	0xa40
 5840 0a33 1A       		.uleb128 0x1a
 5841 0a34 01       		.uleb128 0x1
 5842 0a35 50       		.byte	0x50
 5843 0a36 02       		.uleb128 0x2
 5844 0a37 76       		.byte	0x76
 5845 0a38 3C       		.sleb128 60
 5846 0a39 1A       		.uleb128 0x1a
 5847 0a3a 01       		.uleb128 0x1
 5848 0a3b 51       		.byte	0x51
 5849 0a3c 02       		.uleb128 0x2
 5850 0a3d 75       		.byte	0x75
 5851 0a3e 00       		.sleb128 0
 5852 0a3f 00       		.byte	0
 5853 0a40 1D       		.uleb128 0x1d
 5854 0a41 56000000 		.4byte	.LVL105
 5855 0a45 CA040000 		.4byte	0x4ca
 5856 0a49 540A0000 		.4byte	0xa54
 5857 0a4d 1A       		.uleb128 0x1a
 5858 0a4e 01       		.uleb128 0x1
 5859 0a4f 50       		.byte	0x50
 5860 0a50 02       		.uleb128 0x2
 5861 0a51 74       		.byte	0x74
 5862 0a52 00       		.sleb128 0
 5863 0a53 00       		.byte	0
 5864 0a54 18       		.uleb128 0x18
 5865 0a55 5A000000 		.4byte	.LVL106
 5866 0a59 9D040000 		.4byte	0x49d
 5867 0a5d 18       		.uleb128 0x18
 5868 0a5e 5E000000 		.4byte	.LVL107
 5869 0a62 6D1F0000 		.4byte	0x1f6d
 5870 0a66 18       		.uleb128 0x18
 5871 0a67 72000000 		.4byte	.LVL108
 5872 0a6b 781F0000 		.4byte	0x1f78
 5873 0a6f 00       		.byte	0
 5874 0a70 20       		.uleb128 0x20
 5875 0a71 D1070000 		.4byte	.LASF106
 5876 0a75 01       		.byte	0x1
 5877 0a76 3505     		.2byte	0x535
 5878 0a78 6A020000 		.4byte	0x26a
 5879 0a7c 00000000 		.4byte	.LFB38
 5880 0a80 68000000 		.4byte	.LFE38-.LFB38
 5881 0a84 01       		.uleb128 0x1
 5882 0a85 9C       		.byte	0x9c
 5883 0a86 DB0A0000 		.4byte	0xadb
 5884 0a8a 15       		.uleb128 0x15
 5885 0a8b EA090000 		.4byte	.LASF81
 5886 0a8f 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 204


 5887 0a90 3505     		.2byte	0x535
 5888 0a92 2E020000 		.4byte	0x22e
 5889 0a96 EB040000 		.4byte	.LLST31
 5890 0a9a 23       		.uleb128 0x23
 5891 0a9b 9D020000 		.4byte	.LASF107
 5892 0a9f 01       		.byte	0x1
 5893 0aa0 3705     		.2byte	0x537
 5894 0aa2 6A020000 		.4byte	0x26a
 5895 0aa6 01       		.uleb128 0x1
 5896 0aa7 50       		.byte	0x50
 5897 0aa8 16       		.uleb128 0x16
 5898 0aa9 58000000 		.4byte	.LASF108
 5899 0aad 01       		.byte	0x1
 5900 0aae 3805     		.2byte	0x538
 5901 0ab0 DB0A0000 		.4byte	0xadb
 5902 0ab4 2D050000 		.4byte	.LLST32
 5903 0ab8 16       		.uleb128 0x16
 5904 0ab9 030F0000 		.4byte	.LASF78
 5905 0abd 01       		.byte	0x1
 5906 0abe 3905     		.2byte	0x539
 5907 0ac0 52040000 		.4byte	0x452
 5908 0ac4 4B050000 		.4byte	.LLST33
 5909 0ac8 18       		.uleb128 0x18
 5910 0ac9 10000000 		.4byte	.LVL113
 5911 0acd 561F0000 		.4byte	0x1f56
 5912 0ad1 18       		.uleb128 0x18
 5913 0ad2 16000000 		.4byte	.LVL115
 5914 0ad6 6D1F0000 		.4byte	0x1f6d
 5915 0ada 00       		.byte	0
 5916 0adb 06       		.uleb128 0x6
 5917 0adc 04       		.byte	0x4
 5918 0add 23020000 		.4byte	0x223
 5919 0ae1 20       		.uleb128 0x20
 5920 0ae2 D4050000 		.4byte	.LASF109
 5921 0ae6 01       		.byte	0x1
 5922 0ae7 7C05     		.2byte	0x57c
 5923 0ae9 25010000 		.4byte	0x125
 5924 0aed 00000000 		.4byte	.LFB39
 5925 0af1 20000000 		.4byte	.LFE39-.LFB39
 5926 0af5 01       		.uleb128 0x1
 5927 0af6 9C       		.byte	0x9c
 5928 0af7 3E0B0000 		.4byte	0xb3e
 5929 0afb 15       		.uleb128 0x15
 5930 0afc EA090000 		.4byte	.LASF81
 5931 0b00 01       		.byte	0x1
 5932 0b01 7C05     		.2byte	0x57c
 5933 0b03 2E020000 		.4byte	0x22e
 5934 0b07 8D050000 		.4byte	.LLST34
 5935 0b0b 16       		.uleb128 0x16
 5936 0b0c 030F0000 		.4byte	.LASF78
 5937 0b10 01       		.byte	0x1
 5938 0b11 7E05     		.2byte	0x57e
 5939 0b13 C4040000 		.4byte	0x4c4
 5940 0b17 AB050000 		.4byte	.LLST35
 5941 0b1b 16       		.uleb128 0x16
 5942 0b1c B3020000 		.4byte	.LASF110
 5943 0b20 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 205


 5944 0b21 7F05     		.2byte	0x57f
 5945 0b23 25010000 		.4byte	0x125
 5946 0b27 BE050000 		.4byte	.LLST36
 5947 0b2b 18       		.uleb128 0x18
 5948 0b2c 08000000 		.4byte	.LVL122
 5949 0b30 561F0000 		.4byte	0x1f56
 5950 0b34 18       		.uleb128 0x18
 5951 0b35 16000000 		.4byte	.LVL125
 5952 0b39 6D1F0000 		.4byte	0x1f6d
 5953 0b3d 00       		.byte	0
 5954 0b3e 20       		.uleb128 0x20
 5955 0b3f 03090000 		.4byte	.LASF111
 5956 0b43 01       		.byte	0x1
 5957 0b44 9205     		.2byte	0x592
 5958 0b46 25010000 		.4byte	0x125
 5959 0b4a 00000000 		.4byte	.LFB40
 5960 0b4e 20000000 		.4byte	.LFE40-.LFB40
 5961 0b52 01       		.uleb128 0x1
 5962 0b53 9C       		.byte	0x9c
 5963 0b54 AB0B0000 		.4byte	0xbab
 5964 0b58 15       		.uleb128 0x15
 5965 0b59 EA090000 		.4byte	.LASF81
 5966 0b5d 01       		.byte	0x1
 5967 0b5e 9205     		.2byte	0x592
 5968 0b60 2E020000 		.4byte	0x22e
 5969 0b64 DC050000 		.4byte	.LLST37
 5970 0b68 16       		.uleb128 0x16
 5971 0b69 030F0000 		.4byte	.LASF78
 5972 0b6d 01       		.byte	0x1
 5973 0b6e 9405     		.2byte	0x594
 5974 0b70 C4040000 		.4byte	0x4c4
 5975 0b74 FA050000 		.4byte	.LLST38
 5976 0b78 16       		.uleb128 0x16
 5977 0b79 B3020000 		.4byte	.LASF110
 5978 0b7d 01       		.byte	0x1
 5979 0b7e 9505     		.2byte	0x595
 5980 0b80 25010000 		.4byte	0x125
 5981 0b84 0D060000 		.4byte	.LLST39
 5982 0b88 16       		.uleb128 0x16
 5983 0b89 D6030000 		.4byte	.LASF112
 5984 0b8d 01       		.byte	0x1
 5985 0b8e 9505     		.2byte	0x595
 5986 0b90 25010000 		.4byte	0x125
 5987 0b94 2B060000 		.4byte	.LLST40
 5988 0b98 18       		.uleb128 0x18
 5989 0b99 08000000 		.4byte	.LVL128
 5990 0b9d A61F0000 		.4byte	0x1fa6
 5991 0ba1 18       		.uleb128 0x18
 5992 0ba2 16000000 		.4byte	.LVL131
 5993 0ba6 B11F0000 		.4byte	0x1fb1
 5994 0baa 00       		.byte	0
 5995 0bab 22       		.uleb128 0x22
 5996 0bac 87090000 		.4byte	.LASF114
 5997 0bb0 01       		.byte	0x1
 5998 0bb1 BA05     		.2byte	0x5ba
 5999 0bb3 00000000 		.4byte	.LFB41
 6000 0bb7 BC000000 		.4byte	.LFE41-.LFB41
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 206


 6001 0bbb 01       		.uleb128 0x1
 6002 0bbc 9C       		.byte	0x9c
 6003 0bbd 650C0000 		.4byte	0xc65
 6004 0bc1 15       		.uleb128 0x15
 6005 0bc2 EA090000 		.4byte	.LASF81
 6006 0bc6 01       		.byte	0x1
 6007 0bc7 BA05     		.2byte	0x5ba
 6008 0bc9 2E020000 		.4byte	0x22e
 6009 0bcd 3E060000 		.4byte	.LLST41
 6010 0bd1 15       		.uleb128 0x15
 6011 0bd2 A3080000 		.4byte	.LASF115
 6012 0bd6 01       		.byte	0x1
 6013 0bd7 BA05     		.2byte	0x5ba
 6014 0bd9 25010000 		.4byte	0x125
 6015 0bdd 5C060000 		.4byte	.LLST42
 6016 0be1 16       		.uleb128 0x16
 6017 0be2 030F0000 		.4byte	.LASF78
 6018 0be6 01       		.byte	0x1
 6019 0be7 BC05     		.2byte	0x5bc
 6020 0be9 C4040000 		.4byte	0x4c4
 6021 0bed 87060000 		.4byte	.LLST43
 6022 0bf1 16       		.uleb128 0x16
 6023 0bf2 A40F0000 		.4byte	.LASF116
 6024 0bf6 01       		.byte	0x1
 6025 0bf7 BD05     		.2byte	0x5bd
 6026 0bf9 25010000 		.4byte	0x125
 6027 0bfd 9A060000 		.4byte	.LLST44
 6028 0c01 16       		.uleb128 0x16
 6029 0c02 BA0D0000 		.4byte	.LASF117
 6030 0c06 01       		.byte	0x1
 6031 0c07 BD05     		.2byte	0x5bd
 6032 0c09 25010000 		.4byte	0x125
 6033 0c0d AD060000 		.4byte	.LLST45
 6034 0c11 16       		.uleb128 0x16
 6035 0c12 2C030000 		.4byte	.LASF118
 6036 0c16 01       		.byte	0x1
 6037 0c17 BE05     		.2byte	0x5be
 6038 0c19 1A010000 		.4byte	0x11a
 6039 0c1d C0060000 		.4byte	.LLST46
 6040 0c21 18       		.uleb128 0x18
 6041 0c22 10000000 		.4byte	.LVL136
 6042 0c26 561F0000 		.4byte	0x1f56
 6043 0c2a 1D       		.uleb128 0x1d
 6044 0c2b 86000000 		.4byte	.LVL144
 6045 0c2f 831F0000 		.4byte	0x1f83
 6046 0c33 3E0C0000 		.4byte	0xc3e
 6047 0c37 1A       		.uleb128 0x1a
 6048 0c38 01       		.uleb128 0x1
 6049 0c39 50       		.byte	0x50
 6050 0c3a 02       		.uleb128 0x2
 6051 0c3b 75       		.byte	0x75
 6052 0c3c 00       		.sleb128 0
 6053 0c3d 00       		.byte	0
 6054 0c3e 1D       		.uleb128 0x1d
 6055 0c3f A6000000 		.4byte	.LVL145
 6056 0c43 611F0000 		.4byte	0x1f61
 6057 0c47 520C0000 		.4byte	0xc52
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 207


 6058 0c4b 1A       		.uleb128 0x1a
 6059 0c4c 01       		.uleb128 0x1
 6060 0c4d 51       		.byte	0x51
 6061 0c4e 02       		.uleb128 0x2
 6062 0c4f 75       		.byte	0x75
 6063 0c50 00       		.sleb128 0
 6064 0c51 00       		.byte	0
 6065 0c52 18       		.uleb128 0x18
 6066 0c53 AE000000 		.4byte	.LVL146
 6067 0c57 781F0000 		.4byte	0x1f78
 6068 0c5b 18       		.uleb128 0x18
 6069 0c5c B2000000 		.4byte	.LVL147
 6070 0c60 6D1F0000 		.4byte	0x1f6d
 6071 0c64 00       		.byte	0
 6072 0c65 22       		.uleb128 0x22
 6073 0c66 320F0000 		.4byte	.LASF119
 6074 0c6a 01       		.byte	0x1
 6075 0c6b F106     		.2byte	0x6f1
 6076 0c6d 00000000 		.4byte	.LFB44
 6077 0c71 64000000 		.4byte	.LFE44-.LFB44
 6078 0c75 01       		.uleb128 0x1
 6079 0c76 9C       		.byte	0x9c
 6080 0c77 F30C0000 		.4byte	0xcf3
 6081 0c7b 15       		.uleb128 0x15
 6082 0c7c A5020000 		.4byte	.LASF120
 6083 0c80 01       		.byte	0x1
 6084 0c81 F106     		.2byte	0x6f1
 6085 0c83 2E020000 		.4byte	0x22e
 6086 0c87 DF060000 		.4byte	.LLST47
 6087 0c8b 16       		.uleb128 0x16
 6088 0c8c 030F0000 		.4byte	.LASF78
 6089 0c90 01       		.byte	0x1
 6090 0c91 F306     		.2byte	0x6f3
 6091 0c93 F30C0000 		.4byte	0xcf3
 6092 0c97 0B070000 		.4byte	.LLST48
 6093 0c9b 18       		.uleb128 0x18
 6094 0c9c 12000000 		.4byte	.LVL151
 6095 0ca0 561F0000 		.4byte	0x1f56
 6096 0ca4 1D       		.uleb128 0x1d
 6097 0ca5 18000000 		.4byte	.LVL152
 6098 0ca9 F7030000 		.4byte	0x3f7
 6099 0cad B80C0000 		.4byte	0xcb8
 6100 0cb1 1A       		.uleb128 0x1a
 6101 0cb2 01       		.uleb128 0x1
 6102 0cb3 50       		.byte	0x50
 6103 0cb4 02       		.uleb128 0x2
 6104 0cb5 74       		.byte	0x74
 6105 0cb6 00       		.sleb128 0
 6106 0cb7 00       		.byte	0
 6107 0cb8 1D       		.uleb128 0x1d
 6108 0cb9 24000000 		.4byte	.LVL153
 6109 0cbd 831F0000 		.4byte	0x1f83
 6110 0cc1 CC0C0000 		.4byte	0xccc
 6111 0cc5 1A       		.uleb128 0x1a
 6112 0cc6 01       		.uleb128 0x1
 6113 0cc7 50       		.byte	0x50
 6114 0cc8 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 208


 6115 0cc9 75       		.byte	0x75
 6116 0cca 00       		.sleb128 0
 6117 0ccb 00       		.byte	0
 6118 0ccc 1D       		.uleb128 0x1d
 6119 0ccd 44000000 		.4byte	.LVL154
 6120 0cd1 611F0000 		.4byte	0x1f61
 6121 0cd5 E00C0000 		.4byte	0xce0
 6122 0cd9 1A       		.uleb128 0x1a
 6123 0cda 01       		.uleb128 0x1
 6124 0cdb 51       		.byte	0x51
 6125 0cdc 02       		.uleb128 0x2
 6126 0cdd 75       		.byte	0x75
 6127 0cde 00       		.sleb128 0
 6128 0cdf 00       		.byte	0
 6129 0ce0 18       		.uleb128 0x18
 6130 0ce1 54000000 		.4byte	.LVL155
 6131 0ce5 781F0000 		.4byte	0x1f78
 6132 0ce9 18       		.uleb128 0x18
 6133 0cea 58000000 		.4byte	.LVL156
 6134 0cee 6D1F0000 		.4byte	0x1f6d
 6135 0cf2 00       		.byte	0
 6136 0cf3 07       		.uleb128 0x7
 6137 0cf4 C4040000 		.4byte	0x4c4
 6138 0cf8 20       		.uleb128 0x20
 6139 0cf9 6F040000 		.4byte	.LASF121
 6140 0cfd 01       		.byte	0x1
 6141 0cfe 2707     		.2byte	0x727
 6142 0d00 1A010000 		.4byte	0x11a
 6143 0d04 00000000 		.4byte	.LFB45
 6144 0d08 7C000000 		.4byte	.LFE45-.LFB45
 6145 0d0c 01       		.uleb128 0x1
 6146 0d0d 9C       		.byte	0x9c
 6147 0d0e C50D0000 		.4byte	0xdc5
 6148 0d12 15       		.uleb128 0x15
 6149 0d13 A5020000 		.4byte	.LASF120
 6150 0d17 01       		.byte	0x1
 6151 0d18 2707     		.2byte	0x727
 6152 0d1a 2E020000 		.4byte	0x22e
 6153 0d1e 37070000 		.4byte	.LLST49
 6154 0d22 16       		.uleb128 0x16
 6155 0d23 2C030000 		.4byte	.LASF118
 6156 0d27 01       		.byte	0x1
 6157 0d28 2907     		.2byte	0x729
 6158 0d2a 1A010000 		.4byte	0x11a
 6159 0d2e 63070000 		.4byte	.LLST50
 6160 0d32 16       		.uleb128 0x16
 6161 0d33 030F0000 		.4byte	.LASF78
 6162 0d37 01       		.byte	0x1
 6163 0d38 2A07     		.2byte	0x72a
 6164 0d3a F30C0000 		.4byte	0xcf3
 6165 0d3e A4070000 		.4byte	.LLST51
 6166 0d42 16       		.uleb128 0x16
 6167 0d43 DA020000 		.4byte	.LASF122
 6168 0d47 01       		.byte	0x1
 6169 0d48 2B07     		.2byte	0x72b
 6170 0d4a 25010000 		.4byte	0x125
 6171 0d4e D0070000 		.4byte	.LLST52
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 209


 6172 0d52 18       		.uleb128 0x18
 6173 0d53 08000000 		.4byte	.LVL160
 6174 0d57 A61F0000 		.4byte	0x1fa6
 6175 0d5b 1D       		.uleb128 0x1d
 6176 0d5c 10000000 		.4byte	.LVL163
 6177 0d60 F7030000 		.4byte	0x3f7
 6178 0d64 6F0D0000 		.4byte	0xd6f
 6179 0d68 1A       		.uleb128 0x1a
 6180 0d69 01       		.uleb128 0x1
 6181 0d6a 50       		.byte	0x50
 6182 0d6b 02       		.uleb128 0x2
 6183 0d6c 74       		.byte	0x74
 6184 0d6d 00       		.sleb128 0
 6185 0d6e 00       		.byte	0
 6186 0d6f 1D       		.uleb128 0x1d
 6187 0d70 36000000 		.4byte	.LVL165
 6188 0d74 831F0000 		.4byte	0x1f83
 6189 0d78 830D0000 		.4byte	0xd83
 6190 0d7c 1A       		.uleb128 0x1a
 6191 0d7d 01       		.uleb128 0x1
 6192 0d7e 50       		.byte	0x50
 6193 0d7f 02       		.uleb128 0x2
 6194 0d80 77       		.byte	0x77
 6195 0d81 00       		.sleb128 0
 6196 0d82 00       		.byte	0
 6197 0d83 1D       		.uleb128 0x1d
 6198 0d84 56000000 		.4byte	.LVL166
 6199 0d88 611F0000 		.4byte	0x1f61
 6200 0d8c 970D0000 		.4byte	0xd97
 6201 0d90 1A       		.uleb128 0x1a
 6202 0d91 01       		.uleb128 0x1
 6203 0d92 51       		.byte	0x51
 6204 0d93 02       		.uleb128 0x2
 6205 0d94 77       		.byte	0x77
 6206 0d95 00       		.sleb128 0
 6207 0d96 00       		.byte	0
 6208 0d97 1D       		.uleb128 0x1d
 6209 0d98 64000000 		.4byte	.LVL168
 6210 0d9c 611F0000 		.4byte	0x1f61
 6211 0da0 B40D0000 		.4byte	0xdb4
 6212 0da4 1A       		.uleb128 0x1a
 6213 0da5 01       		.uleb128 0x1
 6214 0da6 50       		.byte	0x50
 6215 0da7 05       		.uleb128 0x5
 6216 0da8 03       		.byte	0x3
 6217 0da9 14000000 		.4byte	.LANCHOR0+20
 6218 0dad 1A       		.uleb128 0x1a
 6219 0dae 01       		.uleb128 0x1
 6220 0daf 51       		.byte	0x51
 6221 0db0 02       		.uleb128 0x2
 6222 0db1 74       		.byte	0x74
 6223 0db2 18       		.sleb128 24
 6224 0db3 00       		.byte	0
 6225 0db4 19       		.uleb128 0x19
 6226 0db5 70000000 		.4byte	.LVL170
 6227 0db9 B11F0000 		.4byte	0x1fb1
 6228 0dbd 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 210


 6229 0dbe 01       		.uleb128 0x1
 6230 0dbf 50       		.byte	0x50
 6231 0dc0 02       		.uleb128 0x2
 6232 0dc1 75       		.byte	0x75
 6233 0dc2 00       		.sleb128 0
 6234 0dc3 00       		.byte	0
 6235 0dc4 00       		.byte	0
 6236 0dc5 22       		.uleb128 0x22
 6237 0dc6 920C0000 		.4byte	.LASF123
 6238 0dca 01       		.byte	0x1
 6239 0dcb 6D07     		.2byte	0x76d
 6240 0dcd 00000000 		.4byte	.LFB46
 6241 0dd1 48000000 		.4byte	.LFE46-.LFB46
 6242 0dd5 01       		.uleb128 0x1
 6243 0dd6 9C       		.byte	0x9c
 6244 0dd7 300E0000 		.4byte	0xe30
 6245 0ddb 16       		.uleb128 0x16
 6246 0ddc 070C0000 		.4byte	.LASF77
 6247 0de0 01       		.byte	0x1
 6248 0de1 6F07     		.2byte	0x76f
 6249 0de3 1A010000 		.4byte	0x11a
 6250 0de7 EE070000 		.4byte	.LLST53
 6251 0deb 1D       		.uleb128 0x1d
 6252 0dec 18000000 		.4byte	.LVL174
 6253 0df0 74080000 		.4byte	0x874
 6254 0df4 260E0000 		.4byte	0xe26
 6255 0df8 1A       		.uleb128 0x1a
 6256 0df9 01       		.uleb128 0x1
 6257 0dfa 50       		.byte	0x50
 6258 0dfb 05       		.uleb128 0x5
 6259 0dfc 03       		.byte	0x3
 6260 0dfd 00000000 		.4byte	prvIdleTask
 6261 0e01 1A       		.uleb128 0x1a
 6262 0e02 01       		.uleb128 0x1
 6263 0e03 51       		.byte	0x51
 6264 0e04 05       		.uleb128 0x5
 6265 0e05 03       		.byte	0x3
 6266 0e06 00000000 		.4byte	.LC32
 6267 0e0a 1A       		.uleb128 0x1a
 6268 0e0b 01       		.uleb128 0x1
 6269 0e0c 52       		.byte	0x52
 6270 0e0d 02       		.uleb128 0x2
 6271 0e0e 08       		.byte	0x8
 6272 0e0f 32       		.byte	0x32
 6273 0e10 1A       		.uleb128 0x1a
 6274 0e11 01       		.uleb128 0x1
 6275 0e12 53       		.byte	0x53
 6276 0e13 01       		.uleb128 0x1
 6277 0e14 30       		.byte	0x30
 6278 0e15 1A       		.uleb128 0x1a
 6279 0e16 02       		.uleb128 0x2
 6280 0e17 7D       		.byte	0x7d
 6281 0e18 00       		.sleb128 0
 6282 0e19 01       		.uleb128 0x1
 6283 0e1a 30       		.byte	0x30
 6284 0e1b 1A       		.uleb128 0x1a
 6285 0e1c 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 211


 6286 0e1d 7D       		.byte	0x7d
 6287 0e1e 04       		.sleb128 4
 6288 0e1f 05       		.uleb128 0x5
 6289 0e20 03       		.byte	0x3
 6290 0e21 F4000000 		.4byte	.LANCHOR1+116
 6291 0e25 00       		.byte	0
 6292 0e26 18       		.uleb128 0x18
 6293 0e27 34000000 		.4byte	.LVL175
 6294 0e2b BC1F0000 		.4byte	0x1fbc
 6295 0e2f 00       		.byte	0
 6296 0e30 22       		.uleb128 0x22
 6297 0e31 C2050000 		.4byte	.LASF124
 6298 0e35 01       		.byte	0x1
 6299 0e36 E507     		.2byte	0x7e5
 6300 0e38 00000000 		.4byte	.LFB47
 6301 0e3c 14000000 		.4byte	.LFE47-.LFB47
 6302 0e40 01       		.uleb128 0x1
 6303 0e41 9C       		.byte	0x9c
 6304 0e42 500E0000 		.4byte	0xe50
 6305 0e46 18       		.uleb128 0x18
 6306 0e47 0E000000 		.4byte	.LVL176
 6307 0e4b C71F0000 		.4byte	0x1fc7
 6308 0e4f 00       		.byte	0
 6309 0e50 24       		.uleb128 0x24
 6310 0e51 8F040000 		.4byte	.LASF162
 6311 0e55 01       		.byte	0x1
 6312 0e56 F007     		.2byte	0x7f0
 6313 0e58 00000000 		.4byte	.LFB48
 6314 0e5c 10000000 		.4byte	.LFE48-.LFB48
 6315 0e60 01       		.uleb128 0x1
 6316 0e61 9C       		.byte	0x9c
 6317 0e62 20       		.uleb128 0x20
 6318 0e63 2A0B0000 		.4byte	.LASF125
 6319 0e67 01       		.byte	0x1
 6320 0e68 A708     		.2byte	0x8a7
 6321 0e6a 30010000 		.4byte	0x130
 6322 0e6e 00000000 		.4byte	.LFB50
 6323 0e72 0C000000 		.4byte	.LFE50-.LFB50
 6324 0e76 01       		.uleb128 0x1
 6325 0e77 9C       		.byte	0x9c
 6326 0e78 8B0E0000 		.4byte	0xe8b
 6327 0e7c 23       		.uleb128 0x23
 6328 0e7d 8B0C0000 		.4byte	.LASF126
 6329 0e81 01       		.byte	0x1
 6330 0e82 A908     		.2byte	0x8a9
 6331 0e84 30010000 		.4byte	0x130
 6332 0e88 01       		.uleb128 0x1
 6333 0e89 50       		.byte	0x50
 6334 0e8a 00       		.byte	0
 6335 0e8b 20       		.uleb128 0x20
 6336 0e8c BD030000 		.4byte	.LASF127
 6337 0e90 01       		.byte	0x1
 6338 0e91 B608     		.2byte	0x8b6
 6339 0e93 30010000 		.4byte	0x130
 6340 0e97 00000000 		.4byte	.LFB51
 6341 0e9b 0C000000 		.4byte	.LFE51-.LFB51
 6342 0e9f 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 212


 6343 0ea0 9C       		.byte	0x9c
 6344 0ea1 C10E0000 		.4byte	0xec1
 6345 0ea5 23       		.uleb128 0x23
 6346 0ea6 070C0000 		.4byte	.LASF77
 6347 0eaa 01       		.byte	0x1
 6348 0eab B808     		.2byte	0x8b8
 6349 0ead 30010000 		.4byte	0x130
 6350 0eb1 01       		.uleb128 0x1
 6351 0eb2 50       		.byte	0x50
 6352 0eb3 25       		.uleb128 0x25
 6353 0eb4 DA020000 		.4byte	.LASF122
 6354 0eb8 01       		.byte	0x1
 6355 0eb9 B908     		.2byte	0x8b9
 6356 0ebb 25010000 		.4byte	0x125
 6357 0ebf 00       		.byte	0
 6358 0ec0 00       		.byte	0
 6359 0ec1 26       		.uleb128 0x26
 6360 0ec2 BC020000 		.4byte	.LASF183
 6361 0ec6 01       		.byte	0x1
 6362 0ec7 D508     		.2byte	0x8d5
 6363 0ec9 25010000 		.4byte	0x125
 6364 0ecd 00000000 		.4byte	.LFB52
 6365 0ed1 0C000000 		.4byte	.LFE52-.LFB52
 6366 0ed5 01       		.uleb128 0x1
 6367 0ed6 9C       		.byte	0x9c
 6368 0ed7 20       		.uleb128 0x20
 6369 0ed8 7D0C0000 		.4byte	.LASF128
 6370 0edc 01       		.byte	0x1
 6371 0edd DD08     		.2byte	0x8dd
 6372 0edf A7000000 		.4byte	0xa7
 6373 0ee3 00000000 		.4byte	.LFB53
 6374 0ee7 10000000 		.4byte	.LFE53-.LFB53
 6375 0eeb 01       		.uleb128 0x1
 6376 0eec 9C       		.byte	0x9c
 6377 0eed 120F0000 		.4byte	0xf12
 6378 0ef1 15       		.uleb128 0x15
 6379 0ef2 C4090000 		.4byte	.LASF129
 6380 0ef6 01       		.byte	0x1
 6381 0ef7 DD08     		.2byte	0x8dd
 6382 0ef9 2E020000 		.4byte	0x22e
 6383 0efd 01080000 		.4byte	.LLST54
 6384 0f01 16       		.uleb128 0x16
 6385 0f02 030F0000 		.4byte	.LASF78
 6386 0f06 01       		.byte	0x1
 6387 0f07 DF08     		.2byte	0x8df
 6388 0f09 C4040000 		.4byte	0x4c4
 6389 0f0d 14080000 		.4byte	.LLST55
 6390 0f11 00       		.byte	0
 6391 0f12 20       		.uleb128 0x20
 6392 0f13 BB040000 		.4byte	.LASF130
 6393 0f17 01       		.byte	0x1
 6394 0f18 1D0A     		.2byte	0xa1d
 6395 0f1a 1A010000 		.4byte	0x11a
 6396 0f1e 00000000 		.4byte	.LFB54
 6397 0f22 D8000000 		.4byte	.LFE54-.LFB54
 6398 0f26 01       		.uleb128 0x1
 6399 0f27 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 213


 6400 0f28 D20F0000 		.4byte	0xfd2
 6401 0f2c 16       		.uleb128 0x16
 6402 0f2d 030F0000 		.4byte	.LASF78
 6403 0f31 01       		.byte	0x1
 6404 0f32 1F0A     		.2byte	0xa1f
 6405 0f34 C4040000 		.4byte	0x4c4
 6406 0f38 34080000 		.4byte	.LLST56
 6407 0f3c 16       		.uleb128 0x16
 6408 0f3d DE0A0000 		.4byte	.LASF26
 6409 0f41 01       		.byte	0x1
 6410 0f42 200A     		.2byte	0xa20
 6411 0f44 30010000 		.4byte	0x130
 6412 0f48 52080000 		.4byte	.LLST57
 6413 0f4c 16       		.uleb128 0x16
 6414 0f4d 520B0000 		.4byte	.LASF131
 6415 0f51 01       		.byte	0x1
 6416 0f52 210A     		.2byte	0xa21
 6417 0f54 1A010000 		.4byte	0x11a
 6418 0f58 65080000 		.4byte	.LLST58
 6419 0f5c 27       		.uleb128 0x27
 6420 0f5d 00000000 		.4byte	.Ldebug_ranges0+0
 6421 0f61 16       		.uleb128 0x16
 6422 0f62 E6050000 		.4byte	.LASF102
 6423 0f66 01       		.byte	0x1
 6424 0f67 2B0A     		.2byte	0xa2b
 6425 0f69 6F080000 		.4byte	0x86f
 6426 0f6d BD080000 		.4byte	.LLST59
 6427 0f71 21       		.uleb128 0x21
 6428 0f72 16000000 		.4byte	.LBB5
 6429 0f76 14000000 		.4byte	.LBE5-.LBB5
 6430 0f7a 980F0000 		.4byte	0xf98
 6431 0f7e 16       		.uleb128 0x16
 6432 0f7f FF0C0000 		.4byte	.LASF132
 6433 0f83 01       		.byte	0x1
 6434 0f84 330A     		.2byte	0xa33
 6435 0f86 DB0A0000 		.4byte	0xadb
 6436 0f8a D0080000 		.4byte	.LLST60
 6437 0f8e 18       		.uleb128 0x18
 6438 0f8f 2A000000 		.4byte	.LVL186
 6439 0f93 9D040000 		.4byte	0x49d
 6440 0f97 00       		.byte	0
 6441 0f98 1D       		.uleb128 0x1d
 6442 0f99 76000000 		.4byte	.LVL193
 6443 0f9d 831F0000 		.4byte	0x1f83
 6444 0fa1 AC0F0000 		.4byte	0xfac
 6445 0fa5 1A       		.uleb128 0x1a
 6446 0fa6 01       		.uleb128 0x1
 6447 0fa7 50       		.byte	0x50
 6448 0fa8 02       		.uleb128 0x2
 6449 0fa9 74       		.byte	0x74
 6450 0faa 00       		.sleb128 0
 6451 0fab 00       		.byte	0
 6452 0fac 1D       		.uleb128 0x1d
 6453 0fad 84000000 		.4byte	.LVL194
 6454 0fb1 831F0000 		.4byte	0x1f83
 6455 0fb5 C00F0000 		.4byte	0xfc0
 6456 0fb9 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 214


 6457 0fba 01       		.uleb128 0x1
 6458 0fbb 50       		.byte	0x50
 6459 0fbc 02       		.uleb128 0x2
 6460 0fbd 76       		.byte	0x76
 6461 0fbe 18       		.sleb128 24
 6462 0fbf 00       		.byte	0
 6463 0fc0 19       		.uleb128 0x19
 6464 0fc1 A4000000 		.4byte	.LVL195
 6465 0fc5 611F0000 		.4byte	0x1f61
 6466 0fc9 1A       		.uleb128 0x1a
 6467 0fca 01       		.uleb128 0x1
 6468 0fcb 51       		.byte	0x51
 6469 0fcc 02       		.uleb128 0x2
 6470 0fcd 74       		.byte	0x74
 6471 0fce 00       		.sleb128 0
 6472 0fcf 00       		.byte	0
 6473 0fd0 00       		.byte	0
 6474 0fd1 00       		.byte	0
 6475 0fd2 20       		.uleb128 0x20
 6476 0fd3 F20A0000 		.4byte	.LASF133
 6477 0fd7 01       		.byte	0x1
 6478 0fd8 3908     		.2byte	0x839
 6479 0fda 1A010000 		.4byte	0x11a
 6480 0fde 00000000 		.4byte	.LFB49
 6481 0fe2 C8000000 		.4byte	.LFE49-.LFB49
 6482 0fe6 01       		.uleb128 0x1
 6483 0fe7 9C       		.byte	0x9c
 6484 0fe8 94100000 		.4byte	0x1094
 6485 0fec 16       		.uleb128 0x16
 6486 0fed 030F0000 		.4byte	.LASF78
 6487 0ff1 01       		.byte	0x1
 6488 0ff2 3B08     		.2byte	0x83b
 6489 0ff4 C4040000 		.4byte	0x4c4
 6490 0ff8 E3080000 		.4byte	.LLST61
 6491 0ffc 16       		.uleb128 0x16
 6492 0ffd 290E0000 		.4byte	.LASF134
 6493 1001 01       		.byte	0x1
 6494 1002 3C08     		.2byte	0x83c
 6495 1004 1A010000 		.4byte	0x11a
 6496 1008 25090000 		.4byte	.LLST62
 6497 100c 21       		.uleb128 0x21
 6498 100d 7C000000 		.4byte	.LBB7
 6499 1011 22000000 		.4byte	.LBE7-.LBB7
 6500 1015 33100000 		.4byte	0x1033
 6501 1019 16       		.uleb128 0x16
 6502 101a 83000000 		.4byte	.LASF135
 6503 101e 01       		.byte	0x1
 6504 101f 7408     		.2byte	0x874
 6505 1021 25010000 		.4byte	0x125
 6506 1025 67090000 		.4byte	.LLST63
 6507 1029 18       		.uleb128 0x18
 6508 102a 88000000 		.4byte	.LVL211
 6509 102e 120F0000 		.4byte	0xf12
 6510 1032 00       		.byte	0
 6511 1033 18       		.uleb128 0x18
 6512 1034 06000000 		.4byte	.LVL201
 6513 1038 561F0000 		.4byte	0x1f56
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 215


 6514 103c 1D       		.uleb128 0x1d
 6515 103d 2E000000 		.4byte	.LVL204
 6516 1041 831F0000 		.4byte	0x1f83
 6517 1045 50100000 		.4byte	0x1050
 6518 1049 1A       		.uleb128 0x1a
 6519 104a 01       		.uleb128 0x1
 6520 104b 50       		.byte	0x50
 6521 104c 02       		.uleb128 0x2
 6522 104d 74       		.byte	0x74
 6523 104e 18       		.sleb128 24
 6524 104f 00       		.byte	0
 6525 1050 1D       		.uleb128 0x1d
 6526 1051 36000000 		.4byte	.LVL205
 6527 1055 831F0000 		.4byte	0x1f83
 6528 1059 64100000 		.4byte	0x1064
 6529 105d 1A       		.uleb128 0x1a
 6530 105e 01       		.uleb128 0x1
 6531 105f 50       		.byte	0x50
 6532 1060 02       		.uleb128 0x2
 6533 1061 75       		.byte	0x75
 6534 1062 00       		.sleb128 0
 6535 1063 00       		.byte	0
 6536 1064 1D       		.uleb128 0x1d
 6537 1065 56000000 		.4byte	.LVL206
 6538 1069 611F0000 		.4byte	0x1f61
 6539 106d 78100000 		.4byte	0x1078
 6540 1071 1A       		.uleb128 0x1a
 6541 1072 01       		.uleb128 0x1
 6542 1073 51       		.byte	0x51
 6543 1074 02       		.uleb128 0x2
 6544 1075 75       		.byte	0x75
 6545 1076 00       		.sleb128 0
 6546 1077 00       		.byte	0
 6547 1078 18       		.uleb128 0x18
 6548 1079 7C000000 		.4byte	.LVL209
 6549 107d 9D040000 		.4byte	0x49d
 6550 1081 18       		.uleb128 0x18
 6551 1082 AA000000 		.4byte	.LVL214
 6552 1086 781F0000 		.4byte	0x1f78
 6553 108a 18       		.uleb128 0x18
 6554 108b B8000000 		.4byte	.LVL219
 6555 108f 6D1F0000 		.4byte	0x1f6d
 6556 1093 00       		.byte	0
 6557 1094 22       		.uleb128 0x22
 6558 1095 9B0D0000 		.4byte	.LASF136
 6559 1099 01       		.byte	0x1
 6560 109a B404     		.2byte	0x4b4
 6561 109c 00000000 		.4byte	.LFB36
 6562 10a0 5C000000 		.4byte	.LFE36-.LFB36
 6563 10a4 01       		.uleb128 0x1
 6564 10a5 9C       		.byte	0x9c
 6565 10a6 3F110000 		.4byte	0x113f
 6566 10aa 15       		.uleb128 0x15
 6567 10ab CE0B0000 		.4byte	.LASF137
 6568 10af 01       		.byte	0x1
 6569 10b0 B404     		.2byte	0x4b4
 6570 10b2 45110000 		.4byte	0x1145
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 216


 6571 10b6 85090000 		.4byte	.LLST64
 6572 10ba 15       		.uleb128 0x15
 6573 10bb BA0E0000 		.4byte	.LASF138
 6574 10bf 01       		.byte	0x1
 6575 10c0 B404     		.2byte	0x4b4
 6576 10c2 6F080000 		.4byte	0x86f
 6577 10c6 B1090000 		.4byte	.LLST65
 6578 10ca 16       		.uleb128 0x16
 6579 10cb E80E0000 		.4byte	.LASF101
 6580 10cf 01       		.byte	0x1
 6581 10d0 B604     		.2byte	0x4b6
 6582 10d2 30010000 		.4byte	0x130
 6583 10d6 DD090000 		.4byte	.LLST66
 6584 10da 16       		.uleb128 0x16
 6585 10db 290E0000 		.4byte	.LASF134
 6586 10df 01       		.byte	0x1
 6587 10e0 B704     		.2byte	0x4b7
 6588 10e2 1A010000 		.4byte	0x11a
 6589 10e6 FC090000 		.4byte	.LLST67
 6590 10ea 16       		.uleb128 0x16
 6591 10eb 5B070000 		.4byte	.LASF139
 6592 10ef 01       		.byte	0x1
 6593 10f0 B704     		.2byte	0x4b7
 6594 10f2 1A010000 		.4byte	0x11a
 6595 10f6 0F0A0000 		.4byte	.LLST68
 6596 10fa 28       		.uleb128 0x28
 6597 10fb 18000000 		.4byte	.Ldebug_ranges0+0x18
 6598 10ff 23110000 		.4byte	0x1123
 6599 1103 16       		.uleb128 0x16
 6600 1104 E6050000 		.4byte	.LASF102
 6601 1108 01       		.byte	0x1
 6602 1109 C104     		.2byte	0x4c1
 6603 110b 6F080000 		.4byte	0x86f
 6604 110f 2E0A0000 		.4byte	.LLST69
 6605 1113 19       		.uleb128 0x19
 6606 1114 4A000000 		.4byte	.LVL229
 6607 1118 E1070000 		.4byte	0x7e1
 6608 111c 1A       		.uleb128 0x1a
 6609 111d 01       		.uleb128 0x1
 6610 111e 51       		.byte	0x51
 6611 111f 01       		.uleb128 0x1
 6612 1120 30       		.byte	0x30
 6613 1121 00       		.byte	0
 6614 1122 00       		.byte	0
 6615 1123 18       		.uleb128 0x18
 6616 1124 0A000000 		.4byte	.LVL223
 6617 1128 500E0000 		.4byte	0xe50
 6618 112c 18       		.uleb128 0x18
 6619 112d 4E000000 		.4byte	.LVL230
 6620 1131 D20F0000 		.4byte	0xfd2
 6621 1135 18       		.uleb128 0x18
 6622 1136 56000000 		.4byte	.LVL231
 6623 113a 781F0000 		.4byte	0x1f78
 6624 113e 00       		.byte	0
 6625 113f 06       		.uleb128 0x6
 6626 1140 04       		.byte	0x4
 6627 1141 30010000 		.4byte	0x130
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 217


 6628 1145 07       		.uleb128 0x7
 6629 1146 3F110000 		.4byte	0x113f
 6630 114a 22       		.uleb128 0x22
 6631 114b 6E060000 		.4byte	.LASF140
 6632 114f 01       		.byte	0x1
 6633 1150 0805     		.2byte	0x508
 6634 1152 00000000 		.4byte	.LFB37
 6635 1156 24000000 		.4byte	.LFE37-.LFB37
 6636 115a 01       		.uleb128 0x1
 6637 115b 9C       		.byte	0x9c
 6638 115c B5110000 		.4byte	0x11b5
 6639 1160 15       		.uleb128 0x15
 6640 1161 F5080000 		.4byte	.LASF141
 6641 1165 01       		.byte	0x1
 6642 1166 0805     		.2byte	0x508
 6643 1168 6F080000 		.4byte	0x86f
 6644 116c 410A0000 		.4byte	.LLST70
 6645 1170 16       		.uleb128 0x16
 6646 1171 290E0000 		.4byte	.LASF134
 6647 1175 01       		.byte	0x1
 6648 1176 0A05     		.2byte	0x50a
 6649 1178 1A010000 		.4byte	0x11a
 6650 117c 830A0000 		.4byte	.LLST71
 6651 1180 18       		.uleb128 0x18
 6652 1181 0A000000 		.4byte	.LVL236
 6653 1185 500E0000 		.4byte	0xe50
 6654 1189 1D       		.uleb128 0x1d
 6655 118a 12000000 		.4byte	.LVL237
 6656 118e E1070000 		.4byte	0x7e1
 6657 1192 A2110000 		.4byte	0x11a2
 6658 1196 1A       		.uleb128 0x1a
 6659 1197 01       		.uleb128 0x1
 6660 1198 50       		.byte	0x50
 6661 1199 02       		.uleb128 0x2
 6662 119a 74       		.byte	0x74
 6663 119b 00       		.sleb128 0
 6664 119c 1A       		.uleb128 0x1a
 6665 119d 01       		.uleb128 0x1
 6666 119e 51       		.byte	0x51
 6667 119f 01       		.uleb128 0x1
 6668 11a0 30       		.byte	0x30
 6669 11a1 00       		.byte	0
 6670 11a2 18       		.uleb128 0x18
 6671 11a3 16000000 		.4byte	.LVL238
 6672 11a7 D20F0000 		.4byte	0xfd2
 6673 11ab 18       		.uleb128 0x18
 6674 11ac 22000000 		.4byte	.LVL241
 6675 11b0 781F0000 		.4byte	0x1f78
 6676 11b4 00       		.byte	0
 6677 11b5 22       		.uleb128 0x22
 6678 11b6 390A0000 		.4byte	.LASF142
 6679 11ba 01       		.byte	0x1
 6680 11bb 230B     		.2byte	0xb23
 6681 11bd 00000000 		.4byte	.LFB55
 6682 11c1 B4000000 		.4byte	.LFE55-.LFB55
 6683 11c5 01       		.uleb128 0x1
 6684 11c6 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 218


 6685 11c7 37120000 		.4byte	0x1237
 6686 11cb 21       		.uleb128 0x21
 6687 11cc 18000000 		.4byte	.LBB11
 6688 11d0 2E000000 		.4byte	.LBE11-.LBB11
 6689 11d4 02120000 		.4byte	0x1202
 6690 11d8 16       		.uleb128 0x16
 6691 11d9 C50C0000 		.4byte	.LASF143
 6692 11dd 01       		.byte	0x1
 6693 11de 4C0B     		.2byte	0xb4c
 6694 11e0 3D120000 		.4byte	0x123d
 6695 11e4 B90A0000 		.4byte	.LLST72
 6696 11e8 16       		.uleb128 0x16
 6697 11e9 6A080000 		.4byte	.LASF144
 6698 11ed 01       		.byte	0x1
 6699 11ee 4C0B     		.2byte	0xb4c
 6700 11f0 1E060000 		.4byte	0x61e
 6701 11f4 CC0A0000 		.4byte	.LLST73
 6702 11f8 18       		.uleb128 0x18
 6703 11f9 46000000 		.4byte	.LVL245
 6704 11fd D21F0000 		.4byte	0x1fd2
 6705 1201 00       		.byte	0
 6706 1202 1E       		.uleb128 0x1e
 6707 1203 46000000 		.4byte	.LBB12
 6708 1207 5A000000 		.4byte	.LBE12-.LBB12
 6709 120b 16       		.uleb128 0x16
 6710 120c 7E0D0000 		.4byte	.LASF145
 6711 1210 01       		.byte	0x1
 6712 1211 500B     		.2byte	0xb50
 6713 1213 25010000 		.4byte	0x125
 6714 1217 E40A0000 		.4byte	.LLST74
 6715 121b 1E       		.uleb128 0x1e
 6716 121c 5E000000 		.4byte	.LBB13
 6717 1220 40000000 		.4byte	.LBE13-.LBB13
 6718 1224 16       		.uleb128 0x16
 6719 1225 4C000000 		.4byte	.LASF146
 6720 1229 01       		.byte	0x1
 6721 122a 500B     		.2byte	0xb50
 6722 122c 42120000 		.4byte	0x1242
 6723 1230 F70A0000 		.4byte	.LLST75
 6724 1234 00       		.byte	0
 6725 1235 00       		.byte	0
 6726 1236 00       		.byte	0
 6727 1237 06       		.uleb128 0x6
 6728 1238 04       		.byte	0x4
 6729 1239 1E060000 		.4byte	0x61e
 6730 123d 07       		.uleb128 0x7
 6731 123e 37120000 		.4byte	0x1237
 6732 1242 07       		.uleb128 0x7
 6733 1243 DB0A0000 		.4byte	0xadb
 6734 1247 22       		.uleb128 0x22
 6735 1248 010E0000 		.4byte	.LASF147
 6736 124c 01       		.byte	0x1
 6737 124d 5E06     		.2byte	0x65e
 6738 124f 00000000 		.4byte	.LFB42
 6739 1253 8C000000 		.4byte	.LFE42-.LFB42
 6740 1257 01       		.uleb128 0x1
 6741 1258 9C       		.byte	0x9c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 219


 6742 1259 02130000 		.4byte	0x1302
 6743 125d 15       		.uleb128 0x15
 6744 125e 8E0B0000 		.4byte	.LASF148
 6745 1262 01       		.byte	0x1
 6746 1263 5E06     		.2byte	0x65e
 6747 1265 2E020000 		.4byte	0x22e
 6748 1269 140B0000 		.4byte	.LLST76
 6749 126d 16       		.uleb128 0x16
 6750 126e 030F0000 		.4byte	.LASF78
 6751 1272 01       		.byte	0x1
 6752 1273 6006     		.2byte	0x660
 6753 1275 C4040000 		.4byte	0x4c4
 6754 1279 320B0000 		.4byte	.LLST77
 6755 127d 18       		.uleb128 0x18
 6756 127e 08000000 		.4byte	.LVL251
 6757 1282 561F0000 		.4byte	0x1f56
 6758 1286 1D       		.uleb128 0x1d
 6759 1287 18000000 		.4byte	.LVL253
 6760 128b 831F0000 		.4byte	0x1f83
 6761 128f 9A120000 		.4byte	0x129a
 6762 1293 1A       		.uleb128 0x1a
 6763 1294 01       		.uleb128 0x1
 6764 1295 50       		.byte	0x50
 6765 1296 02       		.uleb128 0x2
 6766 1297 75       		.byte	0x75
 6767 1298 00       		.sleb128 0
 6768 1299 00       		.byte	0
 6769 129a 1D       		.uleb128 0x1d
 6770 129b 26000000 		.4byte	.LVL254
 6771 129f 831F0000 		.4byte	0x1f83
 6772 12a3 AE120000 		.4byte	0x12ae
 6773 12a7 1A       		.uleb128 0x1a
 6774 12a8 01       		.uleb128 0x1
 6775 12a9 50       		.byte	0x50
 6776 12aa 02       		.uleb128 0x2
 6777 12ab 74       		.byte	0x74
 6778 12ac 18       		.sleb128 24
 6779 12ad 00       		.byte	0
 6780 12ae 1D       		.uleb128 0x1d
 6781 12af 2E000000 		.4byte	.LVL255
 6782 12b3 611F0000 		.4byte	0x1f61
 6783 12b7 CB120000 		.4byte	0x12cb
 6784 12bb 1A       		.uleb128 0x1a
 6785 12bc 01       		.uleb128 0x1
 6786 12bd 50       		.byte	0x50
 6787 12be 05       		.uleb128 0x5
 6788 12bf 03       		.byte	0x3
 6789 12c0 00000000 		.4byte	.LANCHOR0
 6790 12c4 1A       		.uleb128 0x1a
 6791 12c5 01       		.uleb128 0x1
 6792 12c6 51       		.byte	0x51
 6793 12c7 02       		.uleb128 0x2
 6794 12c8 75       		.byte	0x75
 6795 12c9 00       		.sleb128 0
 6796 12ca 00       		.byte	0
 6797 12cb 18       		.uleb128 0x18
 6798 12cc 40000000 		.4byte	.LVL256
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 220


 6799 12d0 6D1F0000 		.4byte	0x1f6d
 6800 12d4 18       		.uleb128 0x18
 6801 12d5 4C000000 		.4byte	.LVL257
 6802 12d9 561F0000 		.4byte	0x1f56
 6803 12dd 18       		.uleb128 0x18
 6804 12de 50000000 		.4byte	.LVL258
 6805 12e2 9D040000 		.4byte	0x49d
 6806 12e6 18       		.uleb128 0x18
 6807 12e7 54000000 		.4byte	.LVL259
 6808 12eb 6D1F0000 		.4byte	0x1f6d
 6809 12ef 18       		.uleb128 0x18
 6810 12f0 68000000 		.4byte	.LVL260
 6811 12f4 781F0000 		.4byte	0x1f78
 6812 12f8 18       		.uleb128 0x18
 6813 12f9 82000000 		.4byte	.LVL261
 6814 12fd B5110000 		.4byte	0x11b5
 6815 1301 00       		.byte	0
 6816 1302 22       		.uleb128 0x22
 6817 1303 58060000 		.4byte	.LASF149
 6818 1307 01       		.byte	0x1
 6819 1308 5E0B     		.2byte	0xb5e
 6820 130a 00000000 		.4byte	.LFB56
 6821 130e 1C000000 		.4byte	.LFE56-.LFB56
 6822 1312 01       		.uleb128 0x1
 6823 1313 9C       		.byte	0x9c
 6824 1314 63130000 		.4byte	0x1363
 6825 1318 15       		.uleb128 0x15
 6826 1319 38010000 		.4byte	.LASF150
 6827 131d 01       		.byte	0x1
 6828 131e 5E0B     		.2byte	0xb5e
 6829 1320 42120000 		.4byte	0x1242
 6830 1324 520B0000 		.4byte	.LLST78
 6831 1328 15       		.uleb128 0x15
 6832 1329 D60D0000 		.4byte	.LASF99
 6833 132d 01       		.byte	0x1
 6834 132e 5E0B     		.2byte	0xb5e
 6835 1330 6F080000 		.4byte	0x86f
 6836 1334 730B0000 		.4byte	.LLST79
 6837 1338 1D       		.uleb128 0x1d
 6838 1339 0E000000 		.4byte	.LVL266
 6839 133d 8F1F0000 		.4byte	0x1f8f
 6840 1341 4D130000 		.4byte	0x134d
 6841 1345 1A       		.uleb128 0x1a
 6842 1346 01       		.uleb128 0x1
 6843 1347 50       		.byte	0x50
 6844 1348 03       		.uleb128 0x3
 6845 1349 F3       		.byte	0xf3
 6846 134a 01       		.uleb128 0x1
 6847 134b 50       		.byte	0x50
 6848 134c 00       		.byte	0
 6849 134d 19       		.uleb128 0x19
 6850 134e 16000000 		.4byte	.LVL267
 6851 1352 E1070000 		.4byte	0x7e1
 6852 1356 1A       		.uleb128 0x1a
 6853 1357 01       		.uleb128 0x1
 6854 1358 50       		.byte	0x50
 6855 1359 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 221


 6856 135a 74       		.byte	0x74
 6857 135b 00       		.sleb128 0
 6858 135c 1A       		.uleb128 0x1a
 6859 135d 01       		.uleb128 0x1
 6860 135e 51       		.byte	0x51
 6861 135f 01       		.uleb128 0x1
 6862 1360 31       		.byte	0x31
 6863 1361 00       		.byte	0
 6864 1362 00       		.byte	0
 6865 1363 22       		.uleb128 0x22
 6866 1364 140D0000 		.4byte	.LASF151
 6867 1368 01       		.byte	0x1
 6868 1369 6F0B     		.2byte	0xb6f
 6869 136b 00000000 		.4byte	.LFB57
 6870 136f 28000000 		.4byte	.LFE57-.LFB57
 6871 1373 01       		.uleb128 0x1
 6872 1374 9C       		.byte	0x9c
 6873 1375 D4130000 		.4byte	0x13d4
 6874 1379 15       		.uleb128 0x15
 6875 137a 38010000 		.4byte	.LASF150
 6876 137e 01       		.byte	0x1
 6877 137f 6F0B     		.2byte	0xb6f
 6878 1381 DB0A0000 		.4byte	0xadb
 6879 1385 9F0B0000 		.4byte	.LLST80
 6880 1389 15       		.uleb128 0x15
 6881 138a DE0A0000 		.4byte	.LASF26
 6882 138e 01       		.byte	0x1
 6883 138f 6F0B     		.2byte	0xb6f
 6884 1391 6F080000 		.4byte	0x86f
 6885 1395 C00B0000 		.4byte	.LLST81
 6886 1399 15       		.uleb128 0x15
 6887 139a D60D0000 		.4byte	.LASF99
 6888 139e 01       		.byte	0x1
 6889 139f 6F0B     		.2byte	0xb6f
 6890 13a1 6F080000 		.4byte	0x86f
 6891 13a5 E10B0000 		.4byte	.LLST82
 6892 13a9 1D       		.uleb128 0x1d
 6893 13aa 18000000 		.4byte	.LVL272
 6894 13ae 611F0000 		.4byte	0x1f61
 6895 13b2 BE130000 		.4byte	0x13be
 6896 13b6 1A       		.uleb128 0x1a
 6897 13b7 01       		.uleb128 0x1
 6898 13b8 50       		.byte	0x50
 6899 13b9 03       		.uleb128 0x3
 6900 13ba F3       		.byte	0xf3
 6901 13bb 01       		.uleb128 0x1
 6902 13bc 50       		.byte	0x50
 6903 13bd 00       		.byte	0
 6904 13be 19       		.uleb128 0x19
 6905 13bf 20000000 		.4byte	.LVL273
 6906 13c3 E1070000 		.4byte	0x7e1
 6907 13c7 1A       		.uleb128 0x1a
 6908 13c8 01       		.uleb128 0x1
 6909 13c9 50       		.byte	0x50
 6910 13ca 02       		.uleb128 0x2
 6911 13cb 74       		.byte	0x74
 6912 13cc 00       		.sleb128 0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 222


 6913 13cd 1A       		.uleb128 0x1a
 6914 13ce 01       		.uleb128 0x1
 6915 13cf 51       		.byte	0x51
 6916 13d0 01       		.uleb128 0x1
 6917 13d1 31       		.byte	0x31
 6918 13d2 00       		.byte	0
 6919 13d3 00       		.byte	0
 6920 13d4 20       		.uleb128 0x20
 6921 13d5 EF060000 		.4byte	.LASF152
 6922 13d9 01       		.byte	0x1
 6923 13da A80B     		.2byte	0xba8
 6924 13dc 1A010000 		.4byte	0x11a
 6925 13e0 00000000 		.4byte	.LFB58
 6926 13e4 74000000 		.4byte	.LFE58-.LFB58
 6927 13e8 01       		.uleb128 0x1
 6928 13e9 9C       		.byte	0x9c
 6929 13ea 74140000 		.4byte	0x1474
 6930 13ee 15       		.uleb128 0x15
 6931 13ef 38010000 		.4byte	.LASF150
 6932 13f3 01       		.byte	0x1
 6933 13f4 A80B     		.2byte	0xba8
 6934 13f6 7F140000 		.4byte	0x147f
 6935 13fa 0D0C0000 		.4byte	.LLST83
 6936 13fe 16       		.uleb128 0x16
 6937 13ff 54030000 		.4byte	.LASF153
 6938 1403 01       		.byte	0x1
 6939 1404 AA0B     		.2byte	0xbaa
 6940 1406 C4040000 		.4byte	0x4c4
 6941 140a 2E0C0000 		.4byte	.LLST84
 6942 140e 16       		.uleb128 0x16
 6943 140f 070C0000 		.4byte	.LASF77
 6944 1413 01       		.byte	0x1
 6945 1414 AB0B     		.2byte	0xbab
 6946 1416 1A010000 		.4byte	0x11a
 6947 141a 410C0000 		.4byte	.LLST85
 6948 141e 1D       		.uleb128 0x1d
 6949 141f 10000000 		.4byte	.LVL278
 6950 1423 831F0000 		.4byte	0x1f83
 6951 1427 32140000 		.4byte	0x1432
 6952 142b 1A       		.uleb128 0x1a
 6953 142c 01       		.uleb128 0x1
 6954 142d 50       		.byte	0x50
 6955 142e 02       		.uleb128 0x2
 6956 142f 75       		.byte	0x75
 6957 1430 00       		.sleb128 0
 6958 1431 00       		.byte	0
 6959 1432 1D       		.uleb128 0x1d
 6960 1433 20000000 		.4byte	.LVL279
 6961 1437 831F0000 		.4byte	0x1f83
 6962 143b 46140000 		.4byte	0x1446
 6963 143f 1A       		.uleb128 0x1a
 6964 1440 01       		.uleb128 0x1
 6965 1441 50       		.byte	0x50
 6966 1442 02       		.uleb128 0x2
 6967 1443 75       		.byte	0x75
 6968 1444 00       		.sleb128 0
 6969 1445 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 223


 6970 1446 1D       		.uleb128 0x1d
 6971 1447 40000000 		.4byte	.LVL280
 6972 144b 611F0000 		.4byte	0x1f61
 6973 144f 5A140000 		.4byte	0x145a
 6974 1453 1A       		.uleb128 0x1a
 6975 1454 01       		.uleb128 0x1
 6976 1455 51       		.byte	0x51
 6977 1456 02       		.uleb128 0x2
 6978 1457 75       		.byte	0x75
 6979 1458 00       		.sleb128 0
 6980 1459 00       		.byte	0
 6981 145a 19       		.uleb128 0x19
 6982 145b 4C000000 		.4byte	.LVL281
 6983 145f 611F0000 		.4byte	0x1f61
 6984 1463 1A       		.uleb128 0x1a
 6985 1464 01       		.uleb128 0x1
 6986 1465 50       		.byte	0x50
 6987 1466 05       		.uleb128 0x5
 6988 1467 03       		.byte	0x3
 6989 1468 14000000 		.4byte	.LANCHOR0+20
 6990 146c 1A       		.uleb128 0x1a
 6991 146d 01       		.uleb128 0x1
 6992 146e 51       		.byte	0x51
 6993 146f 02       		.uleb128 0x2
 6994 1470 75       		.byte	0x75
 6995 1471 00       		.sleb128 0
 6996 1472 00       		.byte	0
 6997 1473 00       		.byte	0
 6998 1474 06       		.uleb128 0x6
 6999 1475 04       		.byte	0x4
 7000 1476 7A140000 		.4byte	0x147a
 7001 147a 07       		.uleb128 0x7
 7002 147b 23020000 		.4byte	0x223
 7003 147f 07       		.uleb128 0x7
 7004 1480 74140000 		.4byte	0x1474
 7005 1484 22       		.uleb128 0x22
 7006 1485 A7060000 		.4byte	.LASF154
 7007 1489 01       		.byte	0x1
 7008 148a EC0B     		.2byte	0xbec
 7009 148c 00000000 		.4byte	.LFB59
 7010 1490 58000000 		.4byte	.LFE59-.LFB59
 7011 1494 01       		.uleb128 0x1
 7012 1495 9C       		.byte	0x9c
 7013 1496 04150000 		.4byte	0x1504
 7014 149a 15       		.uleb128 0x15
 7015 149b 550F0000 		.4byte	.LASF155
 7016 149f 01       		.byte	0x1
 7017 14a0 EC0B     		.2byte	0xbec
 7018 14a2 1D020000 		.4byte	0x21d
 7019 14a6 600C0000 		.4byte	.LLST86
 7020 14aa 15       		.uleb128 0x15
 7021 14ab DE0A0000 		.4byte	.LASF26
 7022 14af 01       		.byte	0x1
 7023 14b0 EC0B     		.2byte	0xbec
 7024 14b2 6F080000 		.4byte	0x86f
 7025 14b6 810C0000 		.4byte	.LLST87
 7026 14ba 16       		.uleb128 0x16
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 224


 7027 14bb 54030000 		.4byte	.LASF153
 7028 14bf 01       		.byte	0x1
 7029 14c0 EE0B     		.2byte	0xbee
 7030 14c2 C4040000 		.4byte	0x4c4
 7031 14c6 A20C0000 		.4byte	.LLST88
 7032 14ca 1D       		.uleb128 0x1d
 7033 14cb 10000000 		.4byte	.LVL289
 7034 14cf 831F0000 		.4byte	0x1f83
 7035 14d3 DF140000 		.4byte	0x14df
 7036 14d7 1A       		.uleb128 0x1a
 7037 14d8 01       		.uleb128 0x1
 7038 14d9 50       		.byte	0x50
 7039 14da 03       		.uleb128 0x3
 7040 14db F3       		.byte	0xf3
 7041 14dc 01       		.uleb128 0x1
 7042 14dd 50       		.byte	0x50
 7043 14de 00       		.byte	0
 7044 14df 1D       		.uleb128 0x1d
 7045 14e0 18000000 		.4byte	.LVL290
 7046 14e4 831F0000 		.4byte	0x1f83
 7047 14e8 F3140000 		.4byte	0x14f3
 7048 14ec 1A       		.uleb128 0x1a
 7049 14ed 01       		.uleb128 0x1
 7050 14ee 50       		.byte	0x50
 7051 14ef 02       		.uleb128 0x2
 7052 14f0 74       		.byte	0x74
 7053 14f1 00       		.sleb128 0
 7054 14f2 00       		.byte	0
 7055 14f3 19       		.uleb128 0x19
 7056 14f4 38000000 		.4byte	.LVL291
 7057 14f8 611F0000 		.4byte	0x1f61
 7058 14fc 1A       		.uleb128 0x1a
 7059 14fd 01       		.uleb128 0x1
 7060 14fe 51       		.byte	0x51
 7061 14ff 02       		.uleb128 0x2
 7062 1500 74       		.byte	0x74
 7063 1501 00       		.sleb128 0
 7064 1502 00       		.byte	0
 7065 1503 00       		.byte	0
 7066 1504 22       		.uleb128 0x22
 7067 1505 0E020000 		.4byte	.LASF156
 7068 1509 01       		.byte	0x1
 7069 150a 0E0C     		.2byte	0xc0e
 7070 150c 00000000 		.4byte	.LFB60
 7071 1510 1C000000 		.4byte	.LFE60-.LFB60
 7072 1514 01       		.uleb128 0x1
 7073 1515 9C       		.byte	0x9c
 7074 1516 3D150000 		.4byte	0x153d
 7075 151a 15       		.uleb128 0x15
 7076 151b EB080000 		.4byte	.LASF157
 7077 151f 01       		.byte	0x1
 7078 1520 0E0C     		.2byte	0xc0e
 7079 1522 43150000 		.4byte	0x1543
 7080 1526 B50C0000 		.4byte	.LLST89
 7081 152a 18       		.uleb128 0x18
 7082 152b 08000000 		.4byte	.LVL294
 7083 152f 561F0000 		.4byte	0x1f56
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 225


 7084 1533 18       		.uleb128 0x18
 7085 1534 16000000 		.4byte	.LVL295
 7086 1538 6D1F0000 		.4byte	0x1f6d
 7087 153c 00       		.byte	0
 7088 153d 06       		.uleb128 0x6
 7089 153e 04       		.byte	0x4
 7090 153f D0020000 		.4byte	0x2d0
 7091 1543 07       		.uleb128 0x7
 7092 1544 3D150000 		.4byte	0x153d
 7093 1548 22       		.uleb128 0x22
 7094 1549 2E090000 		.4byte	.LASF158
 7095 154d 01       		.byte	0x1
 7096 154e 1A0C     		.2byte	0xc1a
 7097 1550 00000000 		.4byte	.LFB61
 7098 1554 10000000 		.4byte	.LFE61-.LFB61
 7099 1558 01       		.uleb128 0x1
 7100 1559 9C       		.byte	0x9c
 7101 155a 6D150000 		.4byte	0x156d
 7102 155e 1B       		.uleb128 0x1b
 7103 155f EB080000 		.4byte	.LASF157
 7104 1563 01       		.byte	0x1
 7105 1564 1A0C     		.2byte	0xc1a
 7106 1566 43150000 		.4byte	0x1543
 7107 156a 01       		.uleb128 0x1
 7108 156b 50       		.byte	0x50
 7109 156c 00       		.byte	0
 7110 156d 20       		.uleb128 0x20
 7111 156e 9D0B0000 		.4byte	.LASF159
 7112 1572 01       		.byte	0x1
 7113 1573 220C     		.2byte	0xc22
 7114 1575 1A010000 		.4byte	0x11a
 7115 1579 00000000 		.4byte	.LFB62
 7116 157d 54000000 		.4byte	.LFE62-.LFB62
 7117 1581 01       		.uleb128 0x1
 7118 1582 9C       		.byte	0x9c
 7119 1583 08160000 		.4byte	0x1608
 7120 1587 15       		.uleb128 0x15
 7121 1588 EB080000 		.4byte	.LASF157
 7122 158c 01       		.byte	0x1
 7123 158d 220C     		.2byte	0xc22
 7124 158f 43150000 		.4byte	0x1543
 7125 1593 E10C0000 		.4byte	.LLST90
 7126 1597 15       		.uleb128 0x15
 7127 1598 640D0000 		.4byte	.LASF160
 7128 159c 01       		.byte	0x1
 7129 159d 220C     		.2byte	0xc22
 7130 159f 45110000 		.4byte	0x1145
 7131 15a3 580D0000 		.4byte	.LLST91
 7132 15a7 16       		.uleb128 0x16
 7133 15a8 070C0000 		.4byte	.LASF77
 7134 15ac 01       		.byte	0x1
 7135 15ad 240C     		.2byte	0xc24
 7136 15af 1A010000 		.4byte	0x11a
 7137 15b3 840D0000 		.4byte	.LLST92
 7138 15b7 21       		.uleb128 0x21
 7139 15b8 0A000000 		.4byte	.LBB14
 7140 15bc 3C000000 		.4byte	.LBE14-.LBB14
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 226


 7141 15c0 F5150000 		.4byte	0x15f5
 7142 15c4 16       		.uleb128 0x16
 7143 15c5 E6050000 		.4byte	.LASF102
 7144 15c9 01       		.byte	0x1
 7145 15ca 2C0C     		.2byte	0xc2c
 7146 15cc 6F080000 		.4byte	0x86f
 7147 15d0 BA0D0000 		.4byte	.LLST93
 7148 15d4 16       		.uleb128 0x16
 7149 15d5 82030000 		.4byte	.LASF161
 7150 15d9 01       		.byte	0x1
 7151 15da 2D0C     		.2byte	0xc2d
 7152 15dc 6F080000 		.4byte	0x86f
 7153 15e0 D80D0000 		.4byte	.LLST94
 7154 15e4 19       		.uleb128 0x19
 7155 15e5 34000000 		.4byte	.LVL303
 7156 15e9 48150000 		.4byte	0x1548
 7157 15ed 1A       		.uleb128 0x1a
 7158 15ee 01       		.uleb128 0x1
 7159 15ef 50       		.byte	0x50
 7160 15f0 02       		.uleb128 0x2
 7161 15f1 74       		.byte	0x74
 7162 15f2 00       		.sleb128 0
 7163 15f3 00       		.byte	0
 7164 15f4 00       		.byte	0
 7165 15f5 18       		.uleb128 0x18
 7166 15f6 0A000000 		.4byte	.LVL299
 7167 15fa 561F0000 		.4byte	0x1f56
 7168 15fe 18       		.uleb128 0x18
 7169 15ff 4A000000 		.4byte	.LVL312
 7170 1603 6D1F0000 		.4byte	0x1f6d
 7171 1607 00       		.byte	0
 7172 1608 24       		.uleb128 0x24
 7173 1609 180C0000 		.4byte	.LASF163
 7174 160d 01       		.byte	0x1
 7175 160e 610C     		.2byte	0xc61
 7176 1610 00000000 		.4byte	.LFB63
 7177 1614 0C000000 		.4byte	.LFE63-.LFB63
 7178 1618 01       		.uleb128 0x1
 7179 1619 9C       		.byte	0x9c
 7180 161a 22       		.uleb128 0x22
 7181 161b 92000000 		.4byte	.LASF164
 7182 161f 01       		.byte	0x1
 7183 1620 370D     		.2byte	0xd37
 7184 1622 00000000 		.4byte	.LFB65
 7185 1626 1C000000 		.4byte	.LFE65-.LFB65
 7186 162a 01       		.uleb128 0x1
 7187 162b 9C       		.byte	0x9c
 7188 162c 6F160000 		.4byte	0x166f
 7189 1630 15       		.uleb128 0x15
 7190 1631 1F060000 		.4byte	.LASF165
 7191 1635 01       		.byte	0x1
 7192 1636 370D     		.2byte	0xd37
 7193 1638 2E020000 		.4byte	0x22e
 7194 163c 060E0000 		.4byte	.LLST95
 7195 1640 15       		.uleb128 0x15
 7196 1641 EB0B0000 		.4byte	.LASF166
 7197 1645 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 227


 7198 1646 370D     		.2byte	0xd37
 7199 1648 1A010000 		.4byte	0x11a
 7200 164c 190E0000 		.4byte	.LLST96
 7201 1650 1B       		.uleb128 0x1b
 7202 1651 650F0000 		.4byte	.LASF167
 7203 1655 01       		.byte	0x1
 7204 1656 370D     		.2byte	0xd37
 7205 1658 A5000000 		.4byte	0xa5
 7206 165c 01       		.uleb128 0x1
 7207 165d 52       		.byte	0x52
 7208 165e 16       		.uleb128 0x16
 7209 165f 030F0000 		.4byte	.LASF78
 7210 1663 01       		.byte	0x1
 7211 1664 390D     		.2byte	0xd39
 7212 1666 C4040000 		.4byte	0x4c4
 7213 166a 470E0000 		.4byte	.LLST97
 7214 166e 00       		.byte	0
 7215 166f 20       		.uleb128 0x20
 7216 1670 CE0C0000 		.4byte	.LASF168
 7217 1674 01       		.byte	0x1
 7218 1675 470D     		.2byte	0xd47
 7219 1677 A5000000 		.4byte	0xa5
 7220 167b 00000000 		.4byte	.LFB66
 7221 167f 20000000 		.4byte	.LFE66-.LFB66
 7222 1683 01       		.uleb128 0x1
 7223 1684 9C       		.byte	0x9c
 7224 1685 CA160000 		.4byte	0x16ca
 7225 1689 15       		.uleb128 0x15
 7226 168a C4090000 		.4byte	.LASF129
 7227 168e 01       		.byte	0x1
 7228 168f 470D     		.2byte	0xd47
 7229 1691 2E020000 		.4byte	0x22e
 7230 1695 5A0E0000 		.4byte	.LLST98
 7231 1699 15       		.uleb128 0x15
 7232 169a EB0B0000 		.4byte	.LASF166
 7233 169e 01       		.byte	0x1
 7234 169f 470D     		.2byte	0xd47
 7235 16a1 1A010000 		.4byte	0x11a
 7236 16a5 780E0000 		.4byte	.LLST99
 7237 16a9 16       		.uleb128 0x16
 7238 16aa 66040000 		.4byte	.LASF169
 7239 16ae 01       		.byte	0x1
 7240 16af 490D     		.2byte	0xd49
 7241 16b1 A5000000 		.4byte	0xa5
 7242 16b5 BF0E0000 		.4byte	.LLST100
 7243 16b9 16       		.uleb128 0x16
 7244 16ba 030F0000 		.4byte	.LASF78
 7245 16be 01       		.byte	0x1
 7246 16bf 4A0D     		.2byte	0xd4a
 7247 16c1 C4040000 		.4byte	0x4c4
 7248 16c5 F50E0000 		.4byte	.LLST101
 7249 16c9 00       		.byte	0
 7250 16ca 20       		.uleb128 0x20
 7251 16cb 9F040000 		.4byte	.LASF170
 7252 16cf 01       		.byte	0x1
 7253 16d0 400E     		.2byte	0xe40
 7254 16d2 25010000 		.4byte	0x125
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 228


 7255 16d6 00000000 		.4byte	.LFB70
 7256 16da 18000000 		.4byte	.LFE70-.LFB70
 7257 16de 01       		.uleb128 0x1
 7258 16df 9C       		.byte	0x9c
 7259 16e0 2C170000 		.4byte	0x172c
 7260 16e4 15       		.uleb128 0x15
 7261 16e5 EA090000 		.4byte	.LASF81
 7262 16e9 01       		.byte	0x1
 7263 16ea 400E     		.2byte	0xe40
 7264 16ec 2E020000 		.4byte	0x22e
 7265 16f0 080F0000 		.4byte	.LLST102
 7266 16f4 16       		.uleb128 0x16
 7267 16f5 030F0000 		.4byte	.LASF78
 7268 16f9 01       		.byte	0x1
 7269 16fa 420E     		.2byte	0xe42
 7270 16fc C4040000 		.4byte	0x4c4
 7271 1700 1B0F0000 		.4byte	.LLST103
 7272 1704 16       		.uleb128 0x16
 7273 1705 5E0C0000 		.4byte	.LASF171
 7274 1709 01       		.byte	0x1
 7275 170a 430E     		.2byte	0xe43
 7276 170c 3B010000 		.4byte	0x13b
 7277 1710 2E0F0000 		.4byte	.LLST104
 7278 1714 23       		.uleb128 0x23
 7279 1715 B3020000 		.4byte	.LASF110
 7280 1719 01       		.byte	0x1
 7281 171a 440E     		.2byte	0xe44
 7282 171c 25010000 		.4byte	0x125
 7283 1720 01       		.uleb128 0x1
 7284 1721 50       		.byte	0x50
 7285 1722 18       		.uleb128 0x18
 7286 1723 10000000 		.4byte	.LVL331
 7287 1727 57040000 		.4byte	0x457
 7288 172b 00       		.byte	0
 7289 172c 20       		.uleb128 0x20
 7290 172d 390E0000 		.4byte	.LASF172
 7291 1731 01       		.byte	0x1
 7292 1732 AC0E     		.2byte	0xeac
 7293 1734 2E020000 		.4byte	0x22e
 7294 1738 00000000 		.4byte	.LFB73
 7295 173c 0C000000 		.4byte	.LFE73-.LFB73
 7296 1740 01       		.uleb128 0x1
 7297 1741 9C       		.byte	0x9c
 7298 1742 55170000 		.4byte	0x1755
 7299 1746 23       		.uleb128 0x23
 7300 1747 070C0000 		.4byte	.LASF77
 7301 174b 01       		.byte	0x1
 7302 174c AE0E     		.2byte	0xeae
 7303 174e 2E020000 		.4byte	0x22e
 7304 1752 01       		.uleb128 0x1
 7305 1753 50       		.byte	0x50
 7306 1754 00       		.byte	0
 7307 1755 20       		.uleb128 0x20
 7308 1756 DD000000 		.4byte	.LASF173
 7309 175a 01       		.byte	0x1
 7310 175b BD0E     		.2byte	0xebd
 7311 175d 1A010000 		.4byte	0x11a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 229


 7312 1761 00000000 		.4byte	.LFB74
 7313 1765 20000000 		.4byte	.LFE74-.LFB74
 7314 1769 01       		.uleb128 0x1
 7315 176a 9C       		.byte	0x9c
 7316 176b 7E170000 		.4byte	0x177e
 7317 176f 23       		.uleb128 0x23
 7318 1770 070C0000 		.4byte	.LASF77
 7319 1774 01       		.byte	0x1
 7320 1775 BF0E     		.2byte	0xebf
 7321 1777 1A010000 		.4byte	0x11a
 7322 177b 01       		.uleb128 0x1
 7323 177c 50       		.byte	0x50
 7324 177d 00       		.byte	0
 7325 177e 20       		.uleb128 0x20
 7326 177f 490C0000 		.4byte	.LASF174
 7327 1783 01       		.byte	0x1
 7328 1784 D90E     		.2byte	0xed9
 7329 1786 1A010000 		.4byte	0x11a
 7330 178a 00000000 		.4byte	.LFB75
 7331 178e 9C000000 		.4byte	.LFE75-.LFB75
 7332 1792 01       		.uleb128 0x1
 7333 1793 9C       		.byte	0x9c
 7334 1794 ED170000 		.4byte	0x17ed
 7335 1798 15       		.uleb128 0x15
 7336 1799 620B0000 		.4byte	.LASF175
 7337 179d 01       		.byte	0x1
 7338 179e D90E     		.2byte	0xed9
 7339 17a0 42040000 		.4byte	0x442
 7340 17a4 410F0000 		.4byte	.LLST105
 7341 17a8 16       		.uleb128 0x16
 7342 17a9 6C0C0000 		.4byte	.LASF176
 7343 17ad 01       		.byte	0x1
 7344 17ae DB0E     		.2byte	0xedb
 7345 17b0 F30C0000 		.4byte	0xcf3
 7346 17b4 C50F0000 		.4byte	.LLST106
 7347 17b8 16       		.uleb128 0x16
 7348 17b9 070C0000 		.4byte	.LASF77
 7349 17bd 01       		.byte	0x1
 7350 17be DC0E     		.2byte	0xedc
 7351 17c0 1A010000 		.4byte	0x11a
 7352 17c4 49100000 		.4byte	.LLST107
 7353 17c8 1D       		.uleb128 0x1d
 7354 17c9 48000000 		.4byte	.LVL337
 7355 17cd 831F0000 		.4byte	0x1f83
 7356 17d1 DC170000 		.4byte	0x17dc
 7357 17d5 1A       		.uleb128 0x1a
 7358 17d6 01       		.uleb128 0x1
 7359 17d7 50       		.byte	0x50
 7360 17d8 02       		.uleb128 0x2
 7361 17d9 75       		.byte	0x75
 7362 17da 00       		.sleb128 0
 7363 17db 00       		.byte	0
 7364 17dc 19       		.uleb128 0x19
 7365 17dd 6C000000 		.4byte	.LVL338
 7366 17e1 611F0000 		.4byte	0x1f61
 7367 17e5 1A       		.uleb128 0x1a
 7368 17e6 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 230


 7369 17e7 51       		.byte	0x51
 7370 17e8 02       		.uleb128 0x2
 7371 17e9 75       		.byte	0x75
 7372 17ea 00       		.sleb128 0
 7373 17eb 00       		.byte	0
 7374 17ec 00       		.byte	0
 7375 17ed 20       		.uleb128 0x20
 7376 17ee D7060000 		.4byte	.LASF177
 7377 17f2 01       		.byte	0x1
 7378 17f3 300F     		.2byte	0xf30
 7379 17f5 1A010000 		.4byte	0x11a
 7380 17f9 00000000 		.4byte	.LFB76
 7381 17fd 60000000 		.4byte	.LFE76-.LFB76
 7382 1801 01       		.uleb128 0x1
 7383 1802 9C       		.byte	0x9c
 7384 1803 5C180000 		.4byte	0x185c
 7385 1807 15       		.uleb128 0x15
 7386 1808 620B0000 		.4byte	.LASF175
 7387 180c 01       		.byte	0x1
 7388 180d 300F     		.2byte	0xf30
 7389 180f 42040000 		.4byte	0x442
 7390 1813 68100000 		.4byte	.LLST108
 7391 1817 16       		.uleb128 0x16
 7392 1818 030F0000 		.4byte	.LASF78
 7393 181c 01       		.byte	0x1
 7394 181d 320F     		.2byte	0xf32
 7395 181f F30C0000 		.4byte	0xcf3
 7396 1823 D6100000 		.4byte	.LLST109
 7397 1827 16       		.uleb128 0x16
 7398 1828 070C0000 		.4byte	.LASF77
 7399 182c 01       		.byte	0x1
 7400 182d 330F     		.2byte	0xf33
 7401 182f 1A010000 		.4byte	0x11a
 7402 1833 44110000 		.4byte	.LLST110
 7403 1837 1D       		.uleb128 0x1d
 7404 1838 20000000 		.4byte	.LVL351
 7405 183c 831F0000 		.4byte	0x1f83
 7406 1840 4B180000 		.4byte	0x184b
 7407 1844 1A       		.uleb128 0x1a
 7408 1845 01       		.uleb128 0x1
 7409 1846 50       		.byte	0x50
 7410 1847 02       		.uleb128 0x2
 7411 1848 75       		.byte	0x75
 7412 1849 00       		.sleb128 0
 7413 184a 00       		.byte	0
 7414 184b 19       		.uleb128 0x19
 7415 184c 48000000 		.4byte	.LVL352
 7416 1850 611F0000 		.4byte	0x1f61
 7417 1854 1A       		.uleb128 0x1a
 7418 1855 01       		.uleb128 0x1
 7419 1856 51       		.byte	0x51
 7420 1857 02       		.uleb128 0x2
 7421 1858 75       		.byte	0x75
 7422 1859 00       		.sleb128 0
 7423 185a 00       		.byte	0
 7424 185b 00       		.byte	0
 7425 185c 22       		.uleb128 0x22
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 231


 7426 185d 42040000 		.4byte	.LASF178
 7427 1861 01       		.byte	0x1
 7428 1862 800F     		.2byte	0xf80
 7429 1864 00000000 		.4byte	.LFB77
 7430 1868 78000000 		.4byte	.LFE77-.LFB77
 7431 186c 01       		.uleb128 0x1
 7432 186d 9C       		.byte	0x9c
 7433 186e F4180000 		.4byte	0x18f4
 7434 1872 15       		.uleb128 0x15
 7435 1873 620B0000 		.4byte	.LASF175
 7436 1877 01       		.byte	0x1
 7437 1878 800F     		.2byte	0xf80
 7438 187a 42040000 		.4byte	0x442
 7439 187e 7B110000 		.4byte	.LLST111
 7440 1882 15       		.uleb128 0x15
 7441 1883 780A0000 		.4byte	.LASF179
 7442 1887 01       		.byte	0x1
 7443 1888 800F     		.2byte	0xf80
 7444 188a 25010000 		.4byte	0x125
 7445 188e A7110000 		.4byte	.LLST112
 7446 1892 16       		.uleb128 0x16
 7447 1893 030F0000 		.4byte	.LASF78
 7448 1897 01       		.byte	0x1
 7449 1898 820F     		.2byte	0xf82
 7450 189a F30C0000 		.4byte	0xcf3
 7451 189e C8110000 		.4byte	.LLST113
 7452 18a2 16       		.uleb128 0x16
 7453 18a3 BA0D0000 		.4byte	.LASF117
 7454 18a7 01       		.byte	0x1
 7455 18a8 830F     		.2byte	0xf83
 7456 18aa 25010000 		.4byte	0x125
 7457 18ae F4110000 		.4byte	.LLST114
 7458 18b2 16       		.uleb128 0x16
 7459 18b3 290A0000 		.4byte	.LASF180
 7460 18b7 01       		.byte	0x1
 7461 18b8 830F     		.2byte	0xf83
 7462 18ba 25010000 		.4byte	0x125
 7463 18be 07120000 		.4byte	.LLST115
 7464 18c2 25       		.uleb128 0x25
 7465 18c3 A9050000 		.4byte	.LASF181
 7466 18c7 01       		.byte	0x1
 7467 18c8 840F     		.2byte	0xf84
 7468 18ca F4180000 		.4byte	0x18f4
 7469 18ce 01       		.byte	0x1
 7470 18cf 1D       		.uleb128 0x1d
 7471 18d0 4C000000 		.4byte	.LVL368
 7472 18d4 831F0000 		.4byte	0x1f83
 7473 18d8 E3180000 		.4byte	0x18e3
 7474 18dc 1A       		.uleb128 0x1a
 7475 18dd 01       		.uleb128 0x1
 7476 18de 50       		.byte	0x50
 7477 18df 02       		.uleb128 0x2
 7478 18e0 75       		.byte	0x75
 7479 18e1 00       		.sleb128 0
 7480 18e2 00       		.byte	0
 7481 18e3 19       		.uleb128 0x19
 7482 18e4 6C000000 		.4byte	.LVL369
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 232


 7483 18e8 611F0000 		.4byte	0x1f61
 7484 18ec 1A       		.uleb128 0x1a
 7485 18ed 01       		.uleb128 0x1
 7486 18ee 51       		.byte	0x51
 7487 18ef 02       		.uleb128 0x2
 7488 18f0 75       		.byte	0x75
 7489 18f1 00       		.sleb128 0
 7490 18f2 00       		.byte	0
 7491 18f3 00       		.byte	0
 7492 18f4 07       		.uleb128 0x7
 7493 18f5 25010000 		.4byte	0x125
 7494 18f9 20       		.uleb128 0x20
 7495 18fa 6D090000 		.4byte	.LASF182
 7496 18fe 01       		.byte	0x1
 7497 18ff 1B11     		.2byte	0x111b
 7498 1901 30010000 		.4byte	0x130
 7499 1905 00000000 		.4byte	.LFB78
 7500 1909 18000000 		.4byte	.LFE78-.LFB78
 7501 190d 01       		.uleb128 0x1
 7502 190e 9C       		.byte	0x9c
 7503 190f 22190000 		.4byte	0x1922
 7504 1913 23       		.uleb128 0x23
 7505 1914 B3020000 		.4byte	.LASF110
 7506 1918 01       		.byte	0x1
 7507 1919 1D11     		.2byte	0x111d
 7508 191b 30010000 		.4byte	0x130
 7509 191f 01       		.uleb128 0x1
 7510 1920 50       		.byte	0x50
 7511 1921 00       		.byte	0
 7512 1922 26       		.uleb128 0x26
 7513 1923 79060000 		.4byte	.LASF184
 7514 1927 01       		.byte	0x1
 7515 1928 2B11     		.2byte	0x112b
 7516 192a A5000000 		.4byte	0xa5
 7517 192e 00000000 		.4byte	.LFB79
 7518 1932 1C000000 		.4byte	.LFE79-.LFB79
 7519 1936 01       		.uleb128 0x1
 7520 1937 9C       		.byte	0x9c
 7521 1938 20       		.uleb128 0x20
 7522 1939 7D070000 		.4byte	.LASF185
 7523 193d 01       		.byte	0x1
 7524 193e 3C11     		.2byte	0x113c
 7525 1940 D5000000 		.4byte	0xd5
 7526 1944 00000000 		.4byte	.LFB80
 7527 1948 6C000000 		.4byte	.LFE80-.LFB80
 7528 194c 01       		.uleb128 0x1
 7529 194d 9C       		.byte	0x9c
 7530 194e C9190000 		.4byte	0x19c9
 7531 1952 15       		.uleb128 0x15
 7532 1953 70030000 		.4byte	.LASF186
 7533 1957 01       		.byte	0x1
 7534 1958 3C11     		.2byte	0x113c
 7535 195a 1A010000 		.4byte	0x11a
 7536 195e 32120000 		.4byte	.LLST116
 7537 1962 15       		.uleb128 0x15
 7538 1963 D60D0000 		.4byte	.LASF99
 7539 1967 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 233


 7540 1968 3C11     		.2byte	0x113c
 7541 196a 30010000 		.4byte	0x130
 7542 196e 5E120000 		.4byte	.LLST117
 7543 1972 16       		.uleb128 0x16
 7544 1973 9B0F0000 		.4byte	.LASF187
 7545 1977 01       		.byte	0x1
 7546 1978 3E11     		.2byte	0x113e
 7547 197a D5000000 		.4byte	0xd5
 7548 197e 8A120000 		.4byte	.LLST118
 7549 1982 18       		.uleb128 0x18
 7550 1983 0A000000 		.4byte	.LVL373
 7551 1987 561F0000 		.4byte	0x1f56
 7552 198b 1D       		.uleb128 0x1d
 7553 198c 28000000 		.4byte	.LVL374
 7554 1990 E1070000 		.4byte	0x7e1
 7555 1994 A4190000 		.4byte	0x19a4
 7556 1998 1A       		.uleb128 0x1a
 7557 1999 01       		.uleb128 0x1
 7558 199a 50       		.byte	0x50
 7559 199b 02       		.uleb128 0x2
 7560 199c 74       		.byte	0x74
 7561 199d 00       		.sleb128 0
 7562 199e 1A       		.uleb128 0x1a
 7563 199f 01       		.uleb128 0x1
 7564 19a0 51       		.byte	0x51
 7565 19a1 01       		.uleb128 0x1
 7566 19a2 31       		.byte	0x31
 7567 19a3 00       		.byte	0
 7568 19a4 18       		.uleb128 0x18
 7569 19a5 2C000000 		.4byte	.LVL375
 7570 19a9 781F0000 		.4byte	0x1f78
 7571 19ad 18       		.uleb128 0x18
 7572 19ae 30000000 		.4byte	.LVL376
 7573 19b2 6D1F0000 		.4byte	0x1f6d
 7574 19b6 18       		.uleb128 0x18
 7575 19b7 34000000 		.4byte	.LVL377
 7576 19bb 561F0000 		.4byte	0x1f56
 7577 19bf 18       		.uleb128 0x18
 7578 19c0 62000000 		.4byte	.LVL379
 7579 19c4 6D1F0000 		.4byte	0x1f6d
 7580 19c8 00       		.byte	0
 7581 19c9 20       		.uleb128 0x20
 7582 19ca 32070000 		.4byte	.LASF188
 7583 19ce 01       		.byte	0x1
 7584 19cf 8011     		.2byte	0x1180
 7585 19d1 1A010000 		.4byte	0x11a
 7586 19d5 00000000 		.4byte	.LFB81
 7587 19d9 80000000 		.4byte	.LFE81-.LFB81
 7588 19dd 01       		.uleb128 0x1
 7589 19de 9C       		.byte	0x9c
 7590 19df 7A1A0000 		.4byte	0x1a7a
 7591 19e3 15       		.uleb128 0x15
 7592 19e4 EC030000 		.4byte	.LASF189
 7593 19e8 01       		.byte	0x1
 7594 19e9 8011     		.2byte	0x1180
 7595 19eb D5000000 		.4byte	0xd5
 7596 19ef A8120000 		.4byte	.LLST119
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 234


 7597 19f3 15       		.uleb128 0x15
 7598 19f4 B4000000 		.4byte	.LASF190
 7599 19f8 01       		.byte	0x1
 7600 19f9 8011     		.2byte	0x1180
 7601 19fb D5000000 		.4byte	0xd5
 7602 19ff D4120000 		.4byte	.LLST120
 7603 1a03 15       		.uleb128 0x15
 7604 1a04 F20B0000 		.4byte	.LASF191
 7605 1a08 01       		.byte	0x1
 7606 1a09 8011     		.2byte	0x1180
 7607 1a0b 7A1A0000 		.4byte	0x1a7a
 7608 1a0f 00130000 		.4byte	.LLST121
 7609 1a13 15       		.uleb128 0x15
 7610 1a14 D60D0000 		.4byte	.LASF99
 7611 1a18 01       		.byte	0x1
 7612 1a19 8011     		.2byte	0x1180
 7613 1a1b 30010000 		.4byte	0x130
 7614 1a1f 2C130000 		.4byte	.LLST122
 7615 1a23 16       		.uleb128 0x16
 7616 1a24 070C0000 		.4byte	.LASF77
 7617 1a28 01       		.byte	0x1
 7618 1a29 8211     		.2byte	0x1182
 7619 1a2b 1A010000 		.4byte	0x11a
 7620 1a2f 71130000 		.4byte	.LLST123
 7621 1a33 18       		.uleb128 0x18
 7622 1a34 0E000000 		.4byte	.LVL383
 7623 1a38 561F0000 		.4byte	0x1f56
 7624 1a3c 1D       		.uleb128 0x1d
 7625 1a3d 36000000 		.4byte	.LVL384
 7626 1a41 E1070000 		.4byte	0x7e1
 7627 1a45 551A0000 		.4byte	0x1a55
 7628 1a49 1A       		.uleb128 0x1a
 7629 1a4a 01       		.uleb128 0x1
 7630 1a4b 50       		.byte	0x50
 7631 1a4c 02       		.uleb128 0x2
 7632 1a4d 74       		.byte	0x74
 7633 1a4e 00       		.sleb128 0
 7634 1a4f 1A       		.uleb128 0x1a
 7635 1a50 01       		.uleb128 0x1
 7636 1a51 51       		.byte	0x51
 7637 1a52 01       		.uleb128 0x1
 7638 1a53 31       		.byte	0x31
 7639 1a54 00       		.byte	0
 7640 1a55 18       		.uleb128 0x18
 7641 1a56 3A000000 		.4byte	.LVL385
 7642 1a5a 781F0000 		.4byte	0x1f78
 7643 1a5e 18       		.uleb128 0x18
 7644 1a5f 3E000000 		.4byte	.LVL386
 7645 1a63 6D1F0000 		.4byte	0x1f6d
 7646 1a67 18       		.uleb128 0x18
 7647 1a68 42000000 		.4byte	.LVL387
 7648 1a6c 561F0000 		.4byte	0x1f56
 7649 1a70 18       		.uleb128 0x18
 7650 1a71 78000000 		.4byte	.LVL392
 7651 1a75 6D1F0000 		.4byte	0x1f6d
 7652 1a79 00       		.byte	0
 7653 1a7a 06       		.uleb128 0x6
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 235


 7654 1a7b 04       		.byte	0x4
 7655 1a7c D5000000 		.4byte	0xd5
 7656 1a80 20       		.uleb128 0x20
 7657 1a81 3B030000 		.4byte	.LASF192
 7658 1a85 01       		.byte	0x1
 7659 1a86 D011     		.2byte	0x11d0
 7660 1a88 1A010000 		.4byte	0x11a
 7661 1a8c 00000000 		.4byte	.LFB82
 7662 1a90 AC000000 		.4byte	.LFE82-.LFB82
 7663 1a94 01       		.uleb128 0x1
 7664 1a95 9C       		.byte	0x9c
 7665 1a96 4E1B0000 		.4byte	0x1b4e
 7666 1a9a 15       		.uleb128 0x15
 7667 1a9b DC090000 		.4byte	.LASF193
 7668 1a9f 01       		.byte	0x1
 7669 1aa0 D011     		.2byte	0x11d0
 7670 1aa2 2E020000 		.4byte	0x22e
 7671 1aa6 9B130000 		.4byte	.LLST124
 7672 1aaa 15       		.uleb128 0x15
 7673 1aab 860B0000 		.4byte	.LASF194
 7674 1aaf 01       		.byte	0x1
 7675 1ab0 D011     		.2byte	0x11d0
 7676 1ab2 D5000000 		.4byte	0xd5
 7677 1ab6 C7130000 		.4byte	.LLST125
 7678 1aba 15       		.uleb128 0x15
 7679 1abb 65090000 		.4byte	.LASF195
 7680 1abf 01       		.byte	0x1
 7681 1ac0 D011     		.2byte	0x11d0
 7682 1ac2 A0020000 		.4byte	0x2a0
 7683 1ac6 6E140000 		.4byte	.LLST126
 7684 1aca 15       		.uleb128 0x15
 7685 1acb C7080000 		.4byte	.LASF196
 7686 1acf 01       		.byte	0x1
 7687 1ad0 D011     		.2byte	0x11d0
 7688 1ad2 7A1A0000 		.4byte	0x1a7a
 7689 1ad6 8F140000 		.4byte	.LLST127
 7690 1ada 16       		.uleb128 0x16
 7691 1adb 030F0000 		.4byte	.LASF78
 7692 1adf 01       		.byte	0x1
 7693 1ae0 D211     		.2byte	0x11d2
 7694 1ae2 C4040000 		.4byte	0x4c4
 7695 1ae6 BB140000 		.4byte	.LLST128
 7696 1aea 16       		.uleb128 0x16
 7697 1aeb 070C0000 		.4byte	.LASF77
 7698 1aef 01       		.byte	0x1
 7699 1af0 D311     		.2byte	0x11d3
 7700 1af2 1A010000 		.4byte	0x11a
 7701 1af6 E7140000 		.4byte	.LLST129
 7702 1afa 16       		.uleb128 0x16
 7703 1afb F8010000 		.4byte	.LASF197
 7704 1aff 01       		.byte	0x1
 7705 1b00 D411     		.2byte	0x11d4
 7706 1b02 BF000000 		.4byte	0xbf
 7707 1b06 11150000 		.4byte	.LLST130
 7708 1b0a 18       		.uleb128 0x18
 7709 1b0b 0E000000 		.4byte	.LVL399
 7710 1b0f 561F0000 		.4byte	0x1f56
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 236


 7711 1b13 1D       		.uleb128 0x1d
 7712 1b14 6C000000 		.4byte	.LVL412
 7713 1b18 831F0000 		.4byte	0x1f83
 7714 1b1c 271B0000 		.4byte	0x1b27
 7715 1b20 1A       		.uleb128 0x1a
 7716 1b21 01       		.uleb128 0x1
 7717 1b22 50       		.byte	0x50
 7718 1b23 02       		.uleb128 0x2
 7719 1b24 76       		.byte	0x76
 7720 1b25 00       		.sleb128 0
 7721 1b26 00       		.byte	0
 7722 1b27 1D       		.uleb128 0x1d
 7723 1b28 8C000000 		.4byte	.LVL413
 7724 1b2c 611F0000 		.4byte	0x1f61
 7725 1b30 3B1B0000 		.4byte	0x1b3b
 7726 1b34 1A       		.uleb128 0x1a
 7727 1b35 01       		.uleb128 0x1
 7728 1b36 51       		.byte	0x51
 7729 1b37 02       		.uleb128 0x2
 7730 1b38 76       		.byte	0x76
 7731 1b39 00       		.sleb128 0
 7732 1b3a 00       		.byte	0
 7733 1b3b 18       		.uleb128 0x18
 7734 1b3c 9C000000 		.4byte	.LVL414
 7735 1b40 781F0000 		.4byte	0x1f78
 7736 1b44 18       		.uleb128 0x18
 7737 1b45 A0000000 		.4byte	.LVL415
 7738 1b49 6D1F0000 		.4byte	0x1f6d
 7739 1b4d 00       		.byte	0
 7740 1b4e 20       		.uleb128 0x20
 7741 1b4f 23020000 		.4byte	.LASF198
 7742 1b53 01       		.byte	0x1
 7743 1b54 3A12     		.2byte	0x123a
 7744 1b56 1A010000 		.4byte	0x11a
 7745 1b5a 00000000 		.4byte	.LFB83
 7746 1b5e E0000000 		.4byte	.LFE83-.LFB83
 7747 1b62 01       		.uleb128 0x1
 7748 1b63 9C       		.byte	0x9c
 7749 1b64 571C0000 		.4byte	0x1c57
 7750 1b68 15       		.uleb128 0x15
 7751 1b69 DC090000 		.4byte	.LASF193
 7752 1b6d 01       		.byte	0x1
 7753 1b6e 3A12     		.2byte	0x123a
 7754 1b70 2E020000 		.4byte	0x22e
 7755 1b74 24150000 		.4byte	.LLST131
 7756 1b78 15       		.uleb128 0x15
 7757 1b79 860B0000 		.4byte	.LASF194
 7758 1b7d 01       		.byte	0x1
 7759 1b7e 3A12     		.2byte	0x123a
 7760 1b80 D5000000 		.4byte	0xd5
 7761 1b84 50150000 		.4byte	.LLST132
 7762 1b88 15       		.uleb128 0x15
 7763 1b89 65090000 		.4byte	.LASF195
 7764 1b8d 01       		.byte	0x1
 7765 1b8e 3A12     		.2byte	0x123a
 7766 1b90 A0020000 		.4byte	0x2a0
 7767 1b94 F7150000 		.4byte	.LLST133
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 237


 7768 1b98 15       		.uleb128 0x15
 7769 1b99 C7080000 		.4byte	.LASF196
 7770 1b9d 01       		.byte	0x1
 7771 1b9e 3A12     		.2byte	0x123a
 7772 1ba0 7A1A0000 		.4byte	0x1a7a
 7773 1ba4 18160000 		.4byte	.LLST134
 7774 1ba8 1B       		.uleb128 0x1b
 7775 1ba9 F4000000 		.4byte	.LASF199
 7776 1bad 01       		.byte	0x1
 7777 1bae 3A12     		.2byte	0x123a
 7778 1bb0 571C0000 		.4byte	0x1c57
 7779 1bb4 02       		.uleb128 0x2
 7780 1bb5 91       		.byte	0x91
 7781 1bb6 00       		.sleb128 0
 7782 1bb7 16       		.uleb128 0x16
 7783 1bb8 030F0000 		.4byte	.LASF78
 7784 1bbc 01       		.byte	0x1
 7785 1bbd 3C12     		.2byte	0x123c
 7786 1bbf C4040000 		.4byte	0x4c4
 7787 1bc3 44160000 		.4byte	.LLST135
 7788 1bc7 16       		.uleb128 0x16
 7789 1bc8 F8010000 		.4byte	.LASF197
 7790 1bcc 01       		.byte	0x1
 7791 1bcd 3D12     		.2byte	0x123d
 7792 1bcf BF000000 		.4byte	0xbf
 7793 1bd3 70160000 		.4byte	.LLST136
 7794 1bd7 16       		.uleb128 0x16
 7795 1bd8 070C0000 		.4byte	.LASF77
 7796 1bdc 01       		.byte	0x1
 7797 1bdd 3E12     		.2byte	0x123e
 7798 1bdf 1A010000 		.4byte	0x11a
 7799 1be3 83160000 		.4byte	.LLST137
 7800 1be7 16       		.uleb128 0x16
 7801 1be8 DA020000 		.4byte	.LASF122
 7802 1bec 01       		.byte	0x1
 7803 1bed 3F12     		.2byte	0x123f
 7804 1bef 25010000 		.4byte	0x125
 7805 1bf3 AD160000 		.4byte	.LLST138
 7806 1bf7 18       		.uleb128 0x18
 7807 1bf8 10000000 		.4byte	.LVL421
 7808 1bfc A61F0000 		.4byte	0x1fa6
 7809 1c00 1D       		.uleb128 0x1d
 7810 1c01 78000000 		.4byte	.LVL437
 7811 1c05 831F0000 		.4byte	0x1f83
 7812 1c09 141C0000 		.4byte	0x1c14
 7813 1c0d 1A       		.uleb128 0x1a
 7814 1c0e 01       		.uleb128 0x1
 7815 1c0f 50       		.byte	0x50
 7816 1c10 02       		.uleb128 0x2
 7817 1c11 77       		.byte	0x77
 7818 1c12 00       		.sleb128 0
 7819 1c13 00       		.byte	0
 7820 1c14 1D       		.uleb128 0x1d
 7821 1c15 98000000 		.4byte	.LVL438
 7822 1c19 611F0000 		.4byte	0x1f61
 7823 1c1d 281C0000 		.4byte	0x1c28
 7824 1c21 1A       		.uleb128 0x1a
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 238


 7825 1c22 01       		.uleb128 0x1
 7826 1c23 51       		.byte	0x51
 7827 1c24 02       		.uleb128 0x2
 7828 1c25 77       		.byte	0x77
 7829 1c26 00       		.sleb128 0
 7830 1c27 00       		.byte	0
 7831 1c28 1D       		.uleb128 0x1d
 7832 1c29 A6000000 		.4byte	.LVL441
 7833 1c2d 611F0000 		.4byte	0x1f61
 7834 1c31 451C0000 		.4byte	0x1c45
 7835 1c35 1A       		.uleb128 0x1a
 7836 1c36 01       		.uleb128 0x1
 7837 1c37 50       		.byte	0x50
 7838 1c38 05       		.uleb128 0x5
 7839 1c39 03       		.byte	0x3
 7840 1c3a 14000000 		.4byte	.LANCHOR0+20
 7841 1c3e 1A       		.uleb128 0x1a
 7842 1c3f 01       		.uleb128 0x1
 7843 1c40 51       		.byte	0x51
 7844 1c41 02       		.uleb128 0x2
 7845 1c42 74       		.byte	0x74
 7846 1c43 18       		.sleb128 24
 7847 1c44 00       		.byte	0
 7848 1c45 19       		.uleb128 0x19
 7849 1c46 CC000000 		.4byte	.LVL442
 7850 1c4a B11F0000 		.4byte	0x1fb1
 7851 1c4e 1A       		.uleb128 0x1a
 7852 1c4f 01       		.uleb128 0x1
 7853 1c50 50       		.byte	0x50
 7854 1c51 03       		.uleb128 0x3
 7855 1c52 91       		.byte	0x91
 7856 1c53 64       		.sleb128 -28
 7857 1c54 06       		.byte	0x6
 7858 1c55 00       		.byte	0
 7859 1c56 00       		.byte	0
 7860 1c57 06       		.uleb128 0x6
 7861 1c58 04       		.byte	0x4
 7862 1c59 1A010000 		.4byte	0x11a
 7863 1c5d 22       		.uleb128 0x22
 7864 1c5e 010B0000 		.4byte	.LASF200
 7865 1c62 01       		.byte	0x1
 7866 1c63 B612     		.2byte	0x12b6
 7867 1c65 00000000 		.4byte	.LFB84
 7868 1c69 8C000000 		.4byte	.LFE84-.LFB84
 7869 1c6d 01       		.uleb128 0x1
 7870 1c6e 9C       		.byte	0x9c
 7871 1c6f 221D0000 		.4byte	0x1d22
 7872 1c73 15       		.uleb128 0x15
 7873 1c74 DC090000 		.4byte	.LASF193
 7874 1c78 01       		.byte	0x1
 7875 1c79 B612     		.2byte	0x12b6
 7876 1c7b 2E020000 		.4byte	0x22e
 7877 1c7f E3160000 		.4byte	.LLST139
 7878 1c83 15       		.uleb128 0x15
 7879 1c84 F4000000 		.4byte	.LASF199
 7880 1c88 01       		.byte	0x1
 7881 1c89 B612     		.2byte	0x12b6
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 239


 7882 1c8b 571C0000 		.4byte	0x1c57
 7883 1c8f 0F170000 		.4byte	.LLST140
 7884 1c93 16       		.uleb128 0x16
 7885 1c94 030F0000 		.4byte	.LASF78
 7886 1c98 01       		.byte	0x1
 7887 1c99 B812     		.2byte	0x12b8
 7888 1c9b C4040000 		.4byte	0x4c4
 7889 1c9f 3B170000 		.4byte	.LLST141
 7890 1ca3 16       		.uleb128 0x16
 7891 1ca4 F8010000 		.4byte	.LASF197
 7892 1ca8 01       		.byte	0x1
 7893 1ca9 B912     		.2byte	0x12b9
 7894 1cab BF000000 		.4byte	0xbf
 7895 1caf 67170000 		.4byte	.LLST142
 7896 1cb3 16       		.uleb128 0x16
 7897 1cb4 DA020000 		.4byte	.LASF122
 7898 1cb8 01       		.byte	0x1
 7899 1cb9 BA12     		.2byte	0x12ba
 7900 1cbb 25010000 		.4byte	0x125
 7901 1cbf 85170000 		.4byte	.LLST143
 7902 1cc3 18       		.uleb128 0x18
 7903 1cc4 0A000000 		.4byte	.LVL448
 7904 1cc8 A61F0000 		.4byte	0x1fa6
 7905 1ccc 1D       		.uleb128 0x1d
 7906 1ccd 2E000000 		.4byte	.LVL452
 7907 1cd1 831F0000 		.4byte	0x1f83
 7908 1cd5 E01C0000 		.4byte	0x1ce0
 7909 1cd9 1A       		.uleb128 0x1a
 7910 1cda 01       		.uleb128 0x1
 7911 1cdb 50       		.byte	0x50
 7912 1cdc 02       		.uleb128 0x2
 7913 1cdd 77       		.byte	0x77
 7914 1cde 00       		.sleb128 0
 7915 1cdf 00       		.byte	0
 7916 1ce0 1D       		.uleb128 0x1d
 7917 1ce1 4E000000 		.4byte	.LVL453
 7918 1ce5 611F0000 		.4byte	0x1f61
 7919 1ce9 F41C0000 		.4byte	0x1cf4
 7920 1ced 1A       		.uleb128 0x1a
 7921 1cee 01       		.uleb128 0x1
 7922 1cef 51       		.byte	0x51
 7923 1cf0 02       		.uleb128 0x2
 7924 1cf1 77       		.byte	0x77
 7925 1cf2 00       		.sleb128 0
 7926 1cf3 00       		.byte	0
 7927 1cf4 1D       		.uleb128 0x1d
 7928 1cf5 5C000000 		.4byte	.LVL456
 7929 1cf9 611F0000 		.4byte	0x1f61
 7930 1cfd 111D0000 		.4byte	0x1d11
 7931 1d01 1A       		.uleb128 0x1a
 7932 1d02 01       		.uleb128 0x1
 7933 1d03 50       		.byte	0x50
 7934 1d04 05       		.uleb128 0x5
 7935 1d05 03       		.byte	0x3
 7936 1d06 14000000 		.4byte	.LANCHOR0+20
 7937 1d0a 1A       		.uleb128 0x1a
 7938 1d0b 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 240


 7939 1d0c 51       		.byte	0x51
 7940 1d0d 02       		.uleb128 0x2
 7941 1d0e 74       		.byte	0x74
 7942 1d0f 18       		.sleb128 24
 7943 1d10 00       		.byte	0
 7944 1d11 19       		.uleb128 0x19
 7945 1d12 7E000000 		.4byte	.LVL457
 7946 1d16 B11F0000 		.4byte	0x1fb1
 7947 1d1a 1A       		.uleb128 0x1a
 7948 1d1b 01       		.uleb128 0x1
 7949 1d1c 50       		.byte	0x50
 7950 1d1d 02       		.uleb128 0x2
 7951 1d1e 75       		.byte	0x75
 7952 1d1f 00       		.sleb128 0
 7953 1d20 00       		.byte	0
 7954 1d21 00       		.byte	0
 7955 1d22 20       		.uleb128 0x20
 7956 1d23 3E0D0000 		.4byte	.LASF201
 7957 1d27 01       		.byte	0x1
 7958 1d28 0F13     		.2byte	0x130f
 7959 1d2a 1A010000 		.4byte	0x11a
 7960 1d2e 00000000 		.4byte	.LFB85
 7961 1d32 30000000 		.4byte	.LFE85-.LFB85
 7962 1d36 01       		.uleb128 0x1
 7963 1d37 9C       		.byte	0x9c
 7964 1d38 7F1D0000 		.4byte	0x1d7f
 7965 1d3c 15       		.uleb128 0x15
 7966 1d3d EA090000 		.4byte	.LASF81
 7967 1d41 01       		.byte	0x1
 7968 1d42 0F13     		.2byte	0x130f
 7969 1d44 2E020000 		.4byte	0x22e
 7970 1d48 B9170000 		.4byte	.LLST144
 7971 1d4c 16       		.uleb128 0x16
 7972 1d4d 030F0000 		.4byte	.LASF78
 7973 1d51 01       		.byte	0x1
 7974 1d52 1113     		.2byte	0x1311
 7975 1d54 C4040000 		.4byte	0x4c4
 7976 1d58 CC170000 		.4byte	.LLST145
 7977 1d5c 16       		.uleb128 0x16
 7978 1d5d 070C0000 		.4byte	.LASF77
 7979 1d61 01       		.byte	0x1
 7980 1d62 1213     		.2byte	0x1312
 7981 1d64 1A010000 		.4byte	0x11a
 7982 1d68 EA170000 		.4byte	.LLST146
 7983 1d6c 18       		.uleb128 0x18
 7984 1d6d 0E000000 		.4byte	.LVL463
 7985 1d71 561F0000 		.4byte	0x1f56
 7986 1d75 18       		.uleb128 0x18
 7987 1d76 26000000 		.4byte	.LVL468
 7988 1d7a 6D1F0000 		.4byte	0x1f6d
 7989 1d7e 00       		.byte	0
 7990 1d7f 0B       		.uleb128 0xb
 7991 1d80 23020000 		.4byte	0x223
 7992 1d84 8F1D0000 		.4byte	0x1d8f
 7993 1d88 0C       		.uleb128 0xc
 7994 1d89 9E000000 		.4byte	0x9e
 7995 1d8d 04       		.byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 241


 7996 1d8e 00       		.byte	0
 7997 1d8f 23       		.uleb128 0x23
 7998 1d90 9C010000 		.4byte	.LASF202
 7999 1d94 01       		.byte	0x1
 8000 1d95 5F01     		.2byte	0x15f
 8001 1d97 7F1D0000 		.4byte	0x1d7f
 8002 1d9b 05       		.uleb128 0x5
 8003 1d9c 03       		.byte	0x3
 8004 1d9d 30000000 		.4byte	pxReadyTasksLists
 8005 1da1 23       		.uleb128 0x23
 8006 1da2 4A020000 		.4byte	.LASF203
 8007 1da6 01       		.byte	0x1
 8008 1da7 6001     		.2byte	0x160
 8009 1da9 23020000 		.4byte	0x223
 8010 1dad 05       		.uleb128 0x5
 8011 1dae 03       		.byte	0x3
 8012 1daf 94000000 		.4byte	xDelayedTaskList1
 8013 1db3 23       		.uleb128 0x23
 8014 1db4 5C020000 		.4byte	.LASF204
 8015 1db8 01       		.byte	0x1
 8016 1db9 6101     		.2byte	0x161
 8017 1dbb 23020000 		.4byte	0x223
 8018 1dbf 05       		.uleb128 0x5
 8019 1dc0 03       		.byte	0x3
 8020 1dc1 A8000000 		.4byte	xDelayedTaskList2
 8021 1dc5 23       		.uleb128 0x23
 8022 1dc6 180B0000 		.4byte	.LASF205
 8023 1dca 01       		.byte	0x1
 8024 1dcb 6201     		.2byte	0x162
 8025 1dcd D71D0000 		.4byte	0x1dd7
 8026 1dd1 05       		.uleb128 0x5
 8027 1dd2 03       		.byte	0x3
 8028 1dd3 28000000 		.4byte	pxDelayedTaskList
 8029 1dd7 08       		.uleb128 0x8
 8030 1dd8 DB0A0000 		.4byte	0xadb
 8031 1ddc 23       		.uleb128 0x23
 8032 1ddd 3E060000 		.4byte	.LASF206
 8033 1de1 01       		.byte	0x1
 8034 1de2 6301     		.2byte	0x163
 8035 1de4 D71D0000 		.4byte	0x1dd7
 8036 1de8 05       		.uleb128 0x5
 8037 1de9 03       		.byte	0x3
 8038 1dea D0000000 		.4byte	pxOverflowDelayedTaskList
 8039 1dee 23       		.uleb128 0x23
 8040 1def 01040000 		.4byte	.LASF207
 8041 1df3 01       		.byte	0x1
 8042 1df4 6401     		.2byte	0x164
 8043 1df6 23020000 		.4byte	0x223
 8044 1dfa 05       		.uleb128 0x5
 8045 1dfb 03       		.byte	0x3
 8046 1dfc 14000000 		.4byte	xPendingReadyList
 8047 1e00 23       		.uleb128 0x23
 8048 1e01 1E040000 		.4byte	.LASF208
 8049 1e05 01       		.byte	0x1
 8050 1e06 6801     		.2byte	0x168
 8051 1e08 23020000 		.4byte	0x223
 8052 1e0c 05       		.uleb128 0x5
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 242


 8053 1e0d 03       		.byte	0x3
 8054 1e0e BC000000 		.4byte	xTasksWaitingTermination
 8055 1e12 23       		.uleb128 0x23
 8056 1e13 74010000 		.4byte	.LASF209
 8057 1e17 01       		.byte	0x1
 8058 1e18 6901     		.2byte	0x169
 8059 1e1a 18020000 		.4byte	0x218
 8060 1e1e 05       		.uleb128 0x5
 8061 1e1f 03       		.byte	0x3
 8062 1e20 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8063 1e24 23       		.uleb128 0x23
 8064 1e25 05060000 		.4byte	.LASF210
 8065 1e29 01       		.byte	0x1
 8066 1e2a 6F01     		.2byte	0x16f
 8067 1e2c 23020000 		.4byte	0x223
 8068 1e30 05       		.uleb128 0x5
 8069 1e31 03       		.byte	0x3
 8070 1e32 00000000 		.4byte	xSuspendedTaskList
 8071 1e36 23       		.uleb128 0x23
 8072 1e37 A30E0000 		.4byte	.LASF211
 8073 1e3b 01       		.byte	0x1
 8074 1e3c 7401     		.2byte	0x174
 8075 1e3e 18020000 		.4byte	0x218
 8076 1e42 05       		.uleb128 0x5
 8077 1e43 03       		.byte	0x3
 8078 1e44 D4000000 		.4byte	uxCurrentNumberOfTasks
 8079 1e48 23       		.uleb128 0x23
 8080 1e49 2D080000 		.4byte	.LASF212
 8081 1e4d 01       		.byte	0x1
 8082 1e4e 7501     		.2byte	0x175
 8083 1e50 5A1E0000 		.4byte	0x1e5a
 8084 1e54 05       		.uleb128 0x5
 8085 1e55 03       		.byte	0x3
 8086 1e56 EC000000 		.4byte	xTickCount
 8087 1e5a 08       		.uleb128 0x8
 8088 1e5b 30010000 		.4byte	0x130
 8089 1e5f 23       		.uleb128 0x23
 8090 1e60 18010000 		.4byte	.LASF213
 8091 1e64 01       		.byte	0x1
 8092 1e65 7601     		.2byte	0x176
 8093 1e67 18020000 		.4byte	0x218
 8094 1e6b 05       		.uleb128 0x5
 8095 1e6c 03       		.byte	0x3
 8096 1e6d E4000000 		.4byte	uxTopReadyPriority
 8097 1e71 23       		.uleb128 0x23
 8098 1e72 44010000 		.4byte	.LASF214
 8099 1e76 01       		.byte	0x1
 8100 1e77 7701     		.2byte	0x177
 8101 1e79 831E0000 		.4byte	0x1e83
 8102 1e7d 05       		.uleb128 0x5
 8103 1e7e 03       		.byte	0x3
 8104 1e7f DC000000 		.4byte	xSchedulerRunning
 8105 1e83 08       		.uleb128 0x8
 8106 1e84 1A010000 		.4byte	0x11a
 8107 1e88 23       		.uleb128 0x23
 8108 1e89 290C0000 		.4byte	.LASF215
 8109 1e8d 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 243


 8110 1e8e 7801     		.2byte	0x178
 8111 1e90 18020000 		.4byte	0x218
 8112 1e94 05       		.uleb128 0x5
 8113 1e95 03       		.byte	0x3
 8114 1e96 FC000000 		.4byte	uxPendedTicks
 8115 1e9a 23       		.uleb128 0x23
 8116 1e9b BA0F0000 		.4byte	.LASF216
 8117 1e9f 01       		.byte	0x1
 8118 1ea0 7901     		.2byte	0x179
 8119 1ea2 831E0000 		.4byte	0x1e83
 8120 1ea6 05       		.uleb128 0x5
 8121 1ea7 03       		.byte	0x3
 8122 1ea8 00010000 		.4byte	xYieldPending
 8123 1eac 23       		.uleb128 0x23
 8124 1ead 4C0A0000 		.4byte	.LASF217
 8125 1eb1 01       		.byte	0x1
 8126 1eb2 7A01     		.2byte	0x17a
 8127 1eb4 831E0000 		.4byte	0x1e83
 8128 1eb8 05       		.uleb128 0x5
 8129 1eb9 03       		.byte	0x3
 8130 1eba F8000000 		.4byte	xNumOfOverflows
 8131 1ebe 23       		.uleb128 0x23
 8132 1ebf 4B090000 		.4byte	.LASF218
 8133 1ec3 01       		.byte	0x1
 8134 1ec4 7B01     		.2byte	0x17b
 8135 1ec6 25010000 		.4byte	0x125
 8136 1eca 05       		.uleb128 0x5
 8137 1ecb 03       		.byte	0x3
 8138 1ecc E0000000 		.4byte	uxTaskNumber
 8139 1ed0 23       		.uleb128 0x23
 8140 1ed1 02080000 		.4byte	.LASF219
 8141 1ed5 01       		.byte	0x1
 8142 1ed6 7C01     		.2byte	0x17c
 8143 1ed8 5A1E0000 		.4byte	0x1e5a
 8144 1edc 05       		.uleb128 0x5
 8145 1edd 03       		.byte	0x3
 8146 1ede 2C000000 		.4byte	xNextTaskUnblockTime
 8147 1ee2 23       		.uleb128 0x23
 8148 1ee3 680A0000 		.4byte	.LASF220
 8149 1ee7 01       		.byte	0x1
 8150 1ee8 7D01     		.2byte	0x17d
 8151 1eea 2E020000 		.4byte	0x22e
 8152 1eee 05       		.uleb128 0x5
 8153 1eef 03       		.byte	0x3
 8154 1ef0 F4000000 		.4byte	xIdleTaskHandle
 8155 1ef4 23       		.uleb128 0x23
 8156 1ef5 100F0000 		.4byte	.LASF221
 8157 1ef9 01       		.byte	0x1
 8158 1efa 8701     		.2byte	0x187
 8159 1efc 18020000 		.4byte	0x218
 8160 1f00 05       		.uleb128 0x5
 8161 1f01 03       		.byte	0x3
 8162 1f02 F0000000 		.4byte	uxSchedulerSuspended
 8163 1f06 29       		.uleb128 0x29
 8164 1f07 960E0000 		.4byte	.LASF242
 8165 1f0b 01       		.byte	0x1
 8166 1f0c 5C01     		.2byte	0x15c
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 244


 8167 1f0e 181F0000 		.4byte	0x1f18
 8168 1f12 05       		.uleb128 0x5
 8169 1f13 03       		.byte	0x3
 8170 1f14 00000000 		.4byte	pxCurrentTCB
 8171 1f18 08       		.uleb128 0x8
 8172 1f19 C4040000 		.4byte	0x4c4
 8173 1f1d 2A       		.uleb128 0x2a
 8174 1f1e C40B0000 		.4byte	.LASF222
 8175 1f22 C40B0000 		.4byte	.LASF222
 8176 1f26 09       		.byte	0x9
 8177 1f27 83       		.byte	0x83
 8178 1f28 2A       		.uleb128 0x2a
 8179 1f29 E4080000 		.4byte	.LASF223
 8180 1f2d E4080000 		.4byte	.LASF223
 8181 1f31 0A       		.byte	0xa
 8182 1f32 19       		.byte	0x19
 8183 1f33 2B       		.uleb128 0x2b
 8184 1f34 BD0A0000 		.4byte	.LASF224
 8185 1f38 BD0A0000 		.4byte	.LASF224
 8186 1f3c 07       		.byte	0x7
 8187 1f3d 6401     		.2byte	0x164
 8188 1f3f 2A       		.uleb128 0x2a
 8189 1f40 17080000 		.4byte	.LASF225
 8190 1f44 17080000 		.4byte	.LASF225
 8191 1f48 09       		.byte	0x9
 8192 1f49 67       		.byte	0x67
 8193 1f4a 2B       		.uleb128 0x2b
 8194 1f4b 540D0000 		.4byte	.LASF226
 8195 1f4f 540D0000 		.4byte	.LASF226
 8196 1f53 07       		.byte	0x7
 8197 1f54 5901     		.2byte	0x159
 8198 1f56 2A       		.uleb128 0x2a
 8199 1f57 7D020000 		.4byte	.LASF227
 8200 1f5b 7D020000 		.4byte	.LASF227
 8201 1f5f 06       		.byte	0x6
 8202 1f60 5B       		.byte	0x5b
 8203 1f61 2B       		.uleb128 0x2b
 8204 1f62 F6050000 		.4byte	.LASF228
 8205 1f66 F6050000 		.4byte	.LASF228
 8206 1f6a 07       		.byte	0x7
 8207 1f6b 8601     		.2byte	0x186
 8208 1f6d 2A       		.uleb128 0x2a
 8209 1f6e 1B000000 		.4byte	.LASF229
 8210 1f72 1B000000 		.4byte	.LASF229
 8211 1f76 06       		.byte	0x6
 8212 1f77 5C       		.byte	0x5c
 8213 1f78 2A       		.uleb128 0x2a
 8214 1f79 6F000000 		.4byte	.LASF230
 8215 1f7d 6F000000 		.4byte	.LASF230
 8216 1f81 06       		.byte	0x6
 8217 1f82 51       		.byte	0x51
 8218 1f83 2B       		.uleb128 0x2b
 8219 1f84 1F030000 		.4byte	.LASF231
 8220 1f88 1F030000 		.4byte	.LASF231
 8221 1f8c 07       		.byte	0x7
 8222 1f8d 9501     		.2byte	0x195
 8223 1f8f 2B       		.uleb128 0x2b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 245


 8224 1f90 720D0000 		.4byte	.LASF232
 8225 1f94 720D0000 		.4byte	.LASF232
 8226 1f98 07       		.byte	0x7
 8227 1f99 7101     		.2byte	0x171
 8228 1f9b 2A       		.uleb128 0x2a
 8229 1f9c 82040000 		.4byte	.LASF233
 8230 1fa0 82040000 		.4byte	.LASF233
 8231 1fa4 09       		.byte	0x9
 8232 1fa5 82       		.byte	0x82
 8233 1fa6 2A       		.uleb128 0x2a
 8234 1fa7 98090000 		.4byte	.LASF234
 8235 1fab 98090000 		.4byte	.LASF234
 8236 1faf 06       		.byte	0x6
 8237 1fb0 5D       		.byte	0x5d
 8238 1fb1 2A       		.uleb128 0x2a
 8239 1fb2 0E0E0000 		.4byte	.LASF235
 8240 1fb6 0E0E0000 		.4byte	.LASF235
 8241 1fba 06       		.byte	0x6
 8242 1fbb 5E       		.byte	0x5e
 8243 1fbc 2A       		.uleb128 0x2a
 8244 1fbd 2D000000 		.4byte	.LASF236
 8245 1fc1 2D000000 		.4byte	.LASF236
 8246 1fc5 09       		.byte	0x9
 8247 1fc6 8C       		.byte	0x8c
 8248 1fc7 2A       		.uleb128 0x2a
 8249 1fc8 B20B0000 		.4byte	.LASF237
 8250 1fcc B20B0000 		.4byte	.LASF237
 8251 1fd0 09       		.byte	0x9
 8252 1fd1 93       		.byte	0x93
 8253 1fd2 2B       		.uleb128 0x2b
 8254 1fd3 950A0000 		.4byte	.LASF238
 8255 1fd7 950A0000 		.4byte	.LASF238
 8256 1fdb 01       		.byte	0x1
 8257 1fdc 9701     		.2byte	0x197
 8258 1fde 00       		.byte	0
 8259              		.section	.debug_abbrev,"",%progbits
 8260              	.Ldebug_abbrev0:
 8261 0000 01       		.uleb128 0x1
 8262 0001 11       		.uleb128 0x11
 8263 0002 01       		.byte	0x1
 8264 0003 25       		.uleb128 0x25
 8265 0004 0E       		.uleb128 0xe
 8266 0005 13       		.uleb128 0x13
 8267 0006 0B       		.uleb128 0xb
 8268 0007 03       		.uleb128 0x3
 8269 0008 0E       		.uleb128 0xe
 8270 0009 1B       		.uleb128 0x1b
 8271 000a 0E       		.uleb128 0xe
 8272 000b 55       		.uleb128 0x55
 8273 000c 17       		.uleb128 0x17
 8274 000d 11       		.uleb128 0x11
 8275 000e 01       		.uleb128 0x1
 8276 000f 10       		.uleb128 0x10
 8277 0010 17       		.uleb128 0x17
 8278 0011 00       		.byte	0
 8279 0012 00       		.byte	0
 8280 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 246


 8281 0014 16       		.uleb128 0x16
 8282 0015 00       		.byte	0
 8283 0016 03       		.uleb128 0x3
 8284 0017 0E       		.uleb128 0xe
 8285 0018 3A       		.uleb128 0x3a
 8286 0019 0B       		.uleb128 0xb
 8287 001a 3B       		.uleb128 0x3b
 8288 001b 0B       		.uleb128 0xb
 8289 001c 49       		.uleb128 0x49
 8290 001d 13       		.uleb128 0x13
 8291 001e 00       		.byte	0
 8292 001f 00       		.byte	0
 8293 0020 03       		.uleb128 0x3
 8294 0021 24       		.uleb128 0x24
 8295 0022 00       		.byte	0
 8296 0023 0B       		.uleb128 0xb
 8297 0024 0B       		.uleb128 0xb
 8298 0025 3E       		.uleb128 0x3e
 8299 0026 0B       		.uleb128 0xb
 8300 0027 03       		.uleb128 0x3
 8301 0028 0E       		.uleb128 0xe
 8302 0029 00       		.byte	0
 8303 002a 00       		.byte	0
 8304 002b 04       		.uleb128 0x4
 8305 002c 24       		.uleb128 0x24
 8306 002d 00       		.byte	0
 8307 002e 0B       		.uleb128 0xb
 8308 002f 0B       		.uleb128 0xb
 8309 0030 3E       		.uleb128 0x3e
 8310 0031 0B       		.uleb128 0xb
 8311 0032 03       		.uleb128 0x3
 8312 0033 08       		.uleb128 0x8
 8313 0034 00       		.byte	0
 8314 0035 00       		.byte	0
 8315 0036 05       		.uleb128 0x5
 8316 0037 0F       		.uleb128 0xf
 8317 0038 00       		.byte	0
 8318 0039 0B       		.uleb128 0xb
 8319 003a 0B       		.uleb128 0xb
 8320 003b 00       		.byte	0
 8321 003c 00       		.byte	0
 8322 003d 06       		.uleb128 0x6
 8323 003e 0F       		.uleb128 0xf
 8324 003f 00       		.byte	0
 8325 0040 0B       		.uleb128 0xb
 8326 0041 0B       		.uleb128 0xb
 8327 0042 49       		.uleb128 0x49
 8328 0043 13       		.uleb128 0x13
 8329 0044 00       		.byte	0
 8330 0045 00       		.byte	0
 8331 0046 07       		.uleb128 0x7
 8332 0047 26       		.uleb128 0x26
 8333 0048 00       		.byte	0
 8334 0049 49       		.uleb128 0x49
 8335 004a 13       		.uleb128 0x13
 8336 004b 00       		.byte	0
 8337 004c 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 247


 8338 004d 08       		.uleb128 0x8
 8339 004e 35       		.uleb128 0x35
 8340 004f 00       		.byte	0
 8341 0050 49       		.uleb128 0x49
 8342 0051 13       		.uleb128 0x13
 8343 0052 00       		.byte	0
 8344 0053 00       		.byte	0
 8345 0054 09       		.uleb128 0x9
 8346 0055 15       		.uleb128 0x15
 8347 0056 01       		.byte	0x1
 8348 0057 27       		.uleb128 0x27
 8349 0058 19       		.uleb128 0x19
 8350 0059 01       		.uleb128 0x1
 8351 005a 13       		.uleb128 0x13
 8352 005b 00       		.byte	0
 8353 005c 00       		.byte	0
 8354 005d 0A       		.uleb128 0xa
 8355 005e 05       		.uleb128 0x5
 8356 005f 00       		.byte	0
 8357 0060 49       		.uleb128 0x49
 8358 0061 13       		.uleb128 0x13
 8359 0062 00       		.byte	0
 8360 0063 00       		.byte	0
 8361 0064 0B       		.uleb128 0xb
 8362 0065 01       		.uleb128 0x1
 8363 0066 01       		.byte	0x1
 8364 0067 49       		.uleb128 0x49
 8365 0068 13       		.uleb128 0x13
 8366 0069 01       		.uleb128 0x1
 8367 006a 13       		.uleb128 0x13
 8368 006b 00       		.byte	0
 8369 006c 00       		.byte	0
 8370 006d 0C       		.uleb128 0xc
 8371 006e 21       		.uleb128 0x21
 8372 006f 00       		.byte	0
 8373 0070 49       		.uleb128 0x49
 8374 0071 13       		.uleb128 0x13
 8375 0072 2F       		.uleb128 0x2f
 8376 0073 0B       		.uleb128 0xb
 8377 0074 00       		.byte	0
 8378 0075 00       		.byte	0
 8379 0076 0D       		.uleb128 0xd
 8380 0077 13       		.uleb128 0x13
 8381 0078 01       		.byte	0x1
 8382 0079 03       		.uleb128 0x3
 8383 007a 0E       		.uleb128 0xe
 8384 007b 0B       		.uleb128 0xb
 8385 007c 0B       		.uleb128 0xb
 8386 007d 3A       		.uleb128 0x3a
 8387 007e 0B       		.uleb128 0xb
 8388 007f 3B       		.uleb128 0x3b
 8389 0080 0B       		.uleb128 0xb
 8390 0081 01       		.uleb128 0x1
 8391 0082 13       		.uleb128 0x13
 8392 0083 00       		.byte	0
 8393 0084 00       		.byte	0
 8394 0085 0E       		.uleb128 0xe
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 248


 8395 0086 0D       		.uleb128 0xd
 8396 0087 00       		.byte	0
 8397 0088 03       		.uleb128 0x3
 8398 0089 0E       		.uleb128 0xe
 8399 008a 3A       		.uleb128 0x3a
 8400 008b 0B       		.uleb128 0xb
 8401 008c 3B       		.uleb128 0x3b
 8402 008d 0B       		.uleb128 0xb
 8403 008e 49       		.uleb128 0x49
 8404 008f 13       		.uleb128 0x13
 8405 0090 38       		.uleb128 0x38
 8406 0091 0B       		.uleb128 0xb
 8407 0092 00       		.byte	0
 8408 0093 00       		.byte	0
 8409 0094 0F       		.uleb128 0xf
 8410 0095 04       		.uleb128 0x4
 8411 0096 01       		.byte	0x1
 8412 0097 0B       		.uleb128 0xb
 8413 0098 0B       		.uleb128 0xb
 8414 0099 49       		.uleb128 0x49
 8415 009a 13       		.uleb128 0x13
 8416 009b 3A       		.uleb128 0x3a
 8417 009c 0B       		.uleb128 0xb
 8418 009d 3B       		.uleb128 0x3b
 8419 009e 0B       		.uleb128 0xb
 8420 009f 01       		.uleb128 0x1
 8421 00a0 13       		.uleb128 0x13
 8422 00a1 00       		.byte	0
 8423 00a2 00       		.byte	0
 8424 00a3 10       		.uleb128 0x10
 8425 00a4 28       		.uleb128 0x28
 8426 00a5 00       		.byte	0
 8427 00a6 03       		.uleb128 0x3
 8428 00a7 0E       		.uleb128 0xe
 8429 00a8 1C       		.uleb128 0x1c
 8430 00a9 0B       		.uleb128 0xb
 8431 00aa 00       		.byte	0
 8432 00ab 00       		.byte	0
 8433 00ac 11       		.uleb128 0x11
 8434 00ad 13       		.uleb128 0x13
 8435 00ae 01       		.byte	0x1
 8436 00af 03       		.uleb128 0x3
 8437 00b0 0E       		.uleb128 0xe
 8438 00b1 0B       		.uleb128 0xb
 8439 00b2 0B       		.uleb128 0xb
 8440 00b3 3A       		.uleb128 0x3a
 8441 00b4 0B       		.uleb128 0xb
 8442 00b5 3B       		.uleb128 0x3b
 8443 00b6 05       		.uleb128 0x5
 8444 00b7 01       		.uleb128 0x1
 8445 00b8 13       		.uleb128 0x13
 8446 00b9 00       		.byte	0
 8447 00ba 00       		.byte	0
 8448 00bb 12       		.uleb128 0x12
 8449 00bc 0D       		.uleb128 0xd
 8450 00bd 00       		.byte	0
 8451 00be 03       		.uleb128 0x3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 249


 8452 00bf 0E       		.uleb128 0xe
 8453 00c0 3A       		.uleb128 0x3a
 8454 00c1 0B       		.uleb128 0xb
 8455 00c2 3B       		.uleb128 0x3b
 8456 00c3 05       		.uleb128 0x5
 8457 00c4 49       		.uleb128 0x49
 8458 00c5 13       		.uleb128 0x13
 8459 00c6 38       		.uleb128 0x38
 8460 00c7 0B       		.uleb128 0xb
 8461 00c8 00       		.byte	0
 8462 00c9 00       		.byte	0
 8463 00ca 13       		.uleb128 0x13
 8464 00cb 16       		.uleb128 0x16
 8465 00cc 00       		.byte	0
 8466 00cd 03       		.uleb128 0x3
 8467 00ce 0E       		.uleb128 0xe
 8468 00cf 3A       		.uleb128 0x3a
 8469 00d0 0B       		.uleb128 0xb
 8470 00d1 3B       		.uleb128 0x3b
 8471 00d2 05       		.uleb128 0x5
 8472 00d3 49       		.uleb128 0x49
 8473 00d4 13       		.uleb128 0x13
 8474 00d5 00       		.byte	0
 8475 00d6 00       		.byte	0
 8476 00d7 14       		.uleb128 0x14
 8477 00d8 2E       		.uleb128 0x2e
 8478 00d9 01       		.byte	0x1
 8479 00da 03       		.uleb128 0x3
 8480 00db 0E       		.uleb128 0xe
 8481 00dc 3A       		.uleb128 0x3a
 8482 00dd 0B       		.uleb128 0xb
 8483 00de 3B       		.uleb128 0x3b
 8484 00df 05       		.uleb128 0x5
 8485 00e0 27       		.uleb128 0x27
 8486 00e1 19       		.uleb128 0x19
 8487 00e2 49       		.uleb128 0x49
 8488 00e3 13       		.uleb128 0x13
 8489 00e4 11       		.uleb128 0x11
 8490 00e5 01       		.uleb128 0x1
 8491 00e6 12       		.uleb128 0x12
 8492 00e7 06       		.uleb128 0x6
 8493 00e8 40       		.uleb128 0x40
 8494 00e9 18       		.uleb128 0x18
 8495 00ea 9742     		.uleb128 0x2117
 8496 00ec 19       		.uleb128 0x19
 8497 00ed 01       		.uleb128 0x1
 8498 00ee 13       		.uleb128 0x13
 8499 00ef 00       		.byte	0
 8500 00f0 00       		.byte	0
 8501 00f1 15       		.uleb128 0x15
 8502 00f2 05       		.uleb128 0x5
 8503 00f3 00       		.byte	0
 8504 00f4 03       		.uleb128 0x3
 8505 00f5 0E       		.uleb128 0xe
 8506 00f6 3A       		.uleb128 0x3a
 8507 00f7 0B       		.uleb128 0xb
 8508 00f8 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 250


 8509 00f9 05       		.uleb128 0x5
 8510 00fa 49       		.uleb128 0x49
 8511 00fb 13       		.uleb128 0x13
 8512 00fc 02       		.uleb128 0x2
 8513 00fd 17       		.uleb128 0x17
 8514 00fe 00       		.byte	0
 8515 00ff 00       		.byte	0
 8516 0100 16       		.uleb128 0x16
 8517 0101 34       		.uleb128 0x34
 8518 0102 00       		.byte	0
 8519 0103 03       		.uleb128 0x3
 8520 0104 0E       		.uleb128 0xe
 8521 0105 3A       		.uleb128 0x3a
 8522 0106 0B       		.uleb128 0xb
 8523 0107 3B       		.uleb128 0x3b
 8524 0108 05       		.uleb128 0x5
 8525 0109 49       		.uleb128 0x49
 8526 010a 13       		.uleb128 0x13
 8527 010b 02       		.uleb128 0x2
 8528 010c 17       		.uleb128 0x17
 8529 010d 00       		.byte	0
 8530 010e 00       		.byte	0
 8531 010f 17       		.uleb128 0x17
 8532 0110 2E       		.uleb128 0x2e
 8533 0111 01       		.byte	0x1
 8534 0112 03       		.uleb128 0x3
 8535 0113 0E       		.uleb128 0xe
 8536 0114 3A       		.uleb128 0x3a
 8537 0115 0B       		.uleb128 0xb
 8538 0116 3B       		.uleb128 0x3b
 8539 0117 05       		.uleb128 0x5
 8540 0118 27       		.uleb128 0x27
 8541 0119 19       		.uleb128 0x19
 8542 011a 11       		.uleb128 0x11
 8543 011b 01       		.uleb128 0x1
 8544 011c 12       		.uleb128 0x12
 8545 011d 06       		.uleb128 0x6
 8546 011e 40       		.uleb128 0x40
 8547 011f 18       		.uleb128 0x18
 8548 0120 9742     		.uleb128 0x2117
 8549 0122 19       		.uleb128 0x19
 8550 0123 01       		.uleb128 0x1
 8551 0124 13       		.uleb128 0x13
 8552 0125 00       		.byte	0
 8553 0126 00       		.byte	0
 8554 0127 18       		.uleb128 0x18
 8555 0128 898201   		.uleb128 0x4109
 8556 012b 00       		.byte	0
 8557 012c 11       		.uleb128 0x11
 8558 012d 01       		.uleb128 0x1
 8559 012e 31       		.uleb128 0x31
 8560 012f 13       		.uleb128 0x13
 8561 0130 00       		.byte	0
 8562 0131 00       		.byte	0
 8563 0132 19       		.uleb128 0x19
 8564 0133 898201   		.uleb128 0x4109
 8565 0136 01       		.byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 251


 8566 0137 11       		.uleb128 0x11
 8567 0138 01       		.uleb128 0x1
 8568 0139 31       		.uleb128 0x31
 8569 013a 13       		.uleb128 0x13
 8570 013b 00       		.byte	0
 8571 013c 00       		.byte	0
 8572 013d 1A       		.uleb128 0x1a
 8573 013e 8A8201   		.uleb128 0x410a
 8574 0141 00       		.byte	0
 8575 0142 02       		.uleb128 0x2
 8576 0143 18       		.uleb128 0x18
 8577 0144 9142     		.uleb128 0x2111
 8578 0146 18       		.uleb128 0x18
 8579 0147 00       		.byte	0
 8580 0148 00       		.byte	0
 8581 0149 1B       		.uleb128 0x1b
 8582 014a 05       		.uleb128 0x5
 8583 014b 00       		.byte	0
 8584 014c 03       		.uleb128 0x3
 8585 014d 0E       		.uleb128 0xe
 8586 014e 3A       		.uleb128 0x3a
 8587 014f 0B       		.uleb128 0xb
 8588 0150 3B       		.uleb128 0x3b
 8589 0151 05       		.uleb128 0x5
 8590 0152 49       		.uleb128 0x49
 8591 0153 13       		.uleb128 0x13
 8592 0154 02       		.uleb128 0x2
 8593 0155 18       		.uleb128 0x18
 8594 0156 00       		.byte	0
 8595 0157 00       		.byte	0
 8596 0158 1C       		.uleb128 0x1c
 8597 0159 34       		.uleb128 0x34
 8598 015a 00       		.byte	0
 8599 015b 03       		.uleb128 0x3
 8600 015c 08       		.uleb128 0x8
 8601 015d 3A       		.uleb128 0x3a
 8602 015e 0B       		.uleb128 0xb
 8603 015f 3B       		.uleb128 0x3b
 8604 0160 05       		.uleb128 0x5
 8605 0161 49       		.uleb128 0x49
 8606 0162 13       		.uleb128 0x13
 8607 0163 02       		.uleb128 0x2
 8608 0164 17       		.uleb128 0x17
 8609 0165 00       		.byte	0
 8610 0166 00       		.byte	0
 8611 0167 1D       		.uleb128 0x1d
 8612 0168 898201   		.uleb128 0x4109
 8613 016b 01       		.byte	0x1
 8614 016c 11       		.uleb128 0x11
 8615 016d 01       		.uleb128 0x1
 8616 016e 31       		.uleb128 0x31
 8617 016f 13       		.uleb128 0x13
 8618 0170 01       		.uleb128 0x1
 8619 0171 13       		.uleb128 0x13
 8620 0172 00       		.byte	0
 8621 0173 00       		.byte	0
 8622 0174 1E       		.uleb128 0x1e
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 252


 8623 0175 0B       		.uleb128 0xb
 8624 0176 01       		.byte	0x1
 8625 0177 11       		.uleb128 0x11
 8626 0178 01       		.uleb128 0x1
 8627 0179 12       		.uleb128 0x12
 8628 017a 06       		.uleb128 0x6
 8629 017b 00       		.byte	0
 8630 017c 00       		.byte	0
 8631 017d 1F       		.uleb128 0x1f
 8632 017e 2E       		.uleb128 0x2e
 8633 017f 01       		.byte	0x1
 8634 0180 03       		.uleb128 0x3
 8635 0181 0E       		.uleb128 0xe
 8636 0182 3A       		.uleb128 0x3a
 8637 0183 0B       		.uleb128 0xb
 8638 0184 3B       		.uleb128 0x3b
 8639 0185 05       		.uleb128 0x5
 8640 0186 27       		.uleb128 0x27
 8641 0187 19       		.uleb128 0x19
 8642 0188 8701     		.uleb128 0x87
 8643 018a 19       		.uleb128 0x19
 8644 018b 11       		.uleb128 0x11
 8645 018c 01       		.uleb128 0x1
 8646 018d 12       		.uleb128 0x12
 8647 018e 06       		.uleb128 0x6
 8648 018f 40       		.uleb128 0x40
 8649 0190 18       		.uleb128 0x18
 8650 0191 9742     		.uleb128 0x2117
 8651 0193 19       		.uleb128 0x19
 8652 0194 01       		.uleb128 0x1
 8653 0195 13       		.uleb128 0x13
 8654 0196 00       		.byte	0
 8655 0197 00       		.byte	0
 8656 0198 20       		.uleb128 0x20
 8657 0199 2E       		.uleb128 0x2e
 8658 019a 01       		.byte	0x1
 8659 019b 3F       		.uleb128 0x3f
 8660 019c 19       		.uleb128 0x19
 8661 019d 03       		.uleb128 0x3
 8662 019e 0E       		.uleb128 0xe
 8663 019f 3A       		.uleb128 0x3a
 8664 01a0 0B       		.uleb128 0xb
 8665 01a1 3B       		.uleb128 0x3b
 8666 01a2 05       		.uleb128 0x5
 8667 01a3 27       		.uleb128 0x27
 8668 01a4 19       		.uleb128 0x19
 8669 01a5 49       		.uleb128 0x49
 8670 01a6 13       		.uleb128 0x13
 8671 01a7 11       		.uleb128 0x11
 8672 01a8 01       		.uleb128 0x1
 8673 01a9 12       		.uleb128 0x12
 8674 01aa 06       		.uleb128 0x6
 8675 01ab 40       		.uleb128 0x40
 8676 01ac 18       		.uleb128 0x18
 8677 01ad 9742     		.uleb128 0x2117
 8678 01af 19       		.uleb128 0x19
 8679 01b0 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 253


 8680 01b1 13       		.uleb128 0x13
 8681 01b2 00       		.byte	0
 8682 01b3 00       		.byte	0
 8683 01b4 21       		.uleb128 0x21
 8684 01b5 0B       		.uleb128 0xb
 8685 01b6 01       		.byte	0x1
 8686 01b7 11       		.uleb128 0x11
 8687 01b8 01       		.uleb128 0x1
 8688 01b9 12       		.uleb128 0x12
 8689 01ba 06       		.uleb128 0x6
 8690 01bb 01       		.uleb128 0x1
 8691 01bc 13       		.uleb128 0x13
 8692 01bd 00       		.byte	0
 8693 01be 00       		.byte	0
 8694 01bf 22       		.uleb128 0x22
 8695 01c0 2E       		.uleb128 0x2e
 8696 01c1 01       		.byte	0x1
 8697 01c2 3F       		.uleb128 0x3f
 8698 01c3 19       		.uleb128 0x19
 8699 01c4 03       		.uleb128 0x3
 8700 01c5 0E       		.uleb128 0xe
 8701 01c6 3A       		.uleb128 0x3a
 8702 01c7 0B       		.uleb128 0xb
 8703 01c8 3B       		.uleb128 0x3b
 8704 01c9 05       		.uleb128 0x5
 8705 01ca 27       		.uleb128 0x27
 8706 01cb 19       		.uleb128 0x19
 8707 01cc 11       		.uleb128 0x11
 8708 01cd 01       		.uleb128 0x1
 8709 01ce 12       		.uleb128 0x12
 8710 01cf 06       		.uleb128 0x6
 8711 01d0 40       		.uleb128 0x40
 8712 01d1 18       		.uleb128 0x18
 8713 01d2 9742     		.uleb128 0x2117
 8714 01d4 19       		.uleb128 0x19
 8715 01d5 01       		.uleb128 0x1
 8716 01d6 13       		.uleb128 0x13
 8717 01d7 00       		.byte	0
 8718 01d8 00       		.byte	0
 8719 01d9 23       		.uleb128 0x23
 8720 01da 34       		.uleb128 0x34
 8721 01db 00       		.byte	0
 8722 01dc 03       		.uleb128 0x3
 8723 01dd 0E       		.uleb128 0xe
 8724 01de 3A       		.uleb128 0x3a
 8725 01df 0B       		.uleb128 0xb
 8726 01e0 3B       		.uleb128 0x3b
 8727 01e1 05       		.uleb128 0x5
 8728 01e2 49       		.uleb128 0x49
 8729 01e3 13       		.uleb128 0x13
 8730 01e4 02       		.uleb128 0x2
 8731 01e5 18       		.uleb128 0x18
 8732 01e6 00       		.byte	0
 8733 01e7 00       		.byte	0
 8734 01e8 24       		.uleb128 0x24
 8735 01e9 2E       		.uleb128 0x2e
 8736 01ea 00       		.byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 254


 8737 01eb 3F       		.uleb128 0x3f
 8738 01ec 19       		.uleb128 0x19
 8739 01ed 03       		.uleb128 0x3
 8740 01ee 0E       		.uleb128 0xe
 8741 01ef 3A       		.uleb128 0x3a
 8742 01f0 0B       		.uleb128 0xb
 8743 01f1 3B       		.uleb128 0x3b
 8744 01f2 05       		.uleb128 0x5
 8745 01f3 27       		.uleb128 0x27
 8746 01f4 19       		.uleb128 0x19
 8747 01f5 11       		.uleb128 0x11
 8748 01f6 01       		.uleb128 0x1
 8749 01f7 12       		.uleb128 0x12
 8750 01f8 06       		.uleb128 0x6
 8751 01f9 40       		.uleb128 0x40
 8752 01fa 18       		.uleb128 0x18
 8753 01fb 9742     		.uleb128 0x2117
 8754 01fd 19       		.uleb128 0x19
 8755 01fe 00       		.byte	0
 8756 01ff 00       		.byte	0
 8757 0200 25       		.uleb128 0x25
 8758 0201 34       		.uleb128 0x34
 8759 0202 00       		.byte	0
 8760 0203 03       		.uleb128 0x3
 8761 0204 0E       		.uleb128 0xe
 8762 0205 3A       		.uleb128 0x3a
 8763 0206 0B       		.uleb128 0xb
 8764 0207 3B       		.uleb128 0x3b
 8765 0208 05       		.uleb128 0x5
 8766 0209 49       		.uleb128 0x49
 8767 020a 13       		.uleb128 0x13
 8768 020b 1C       		.uleb128 0x1c
 8769 020c 0B       		.uleb128 0xb
 8770 020d 00       		.byte	0
 8771 020e 00       		.byte	0
 8772 020f 26       		.uleb128 0x26
 8773 0210 2E       		.uleb128 0x2e
 8774 0211 00       		.byte	0
 8775 0212 3F       		.uleb128 0x3f
 8776 0213 19       		.uleb128 0x19
 8777 0214 03       		.uleb128 0x3
 8778 0215 0E       		.uleb128 0xe
 8779 0216 3A       		.uleb128 0x3a
 8780 0217 0B       		.uleb128 0xb
 8781 0218 3B       		.uleb128 0x3b
 8782 0219 05       		.uleb128 0x5
 8783 021a 27       		.uleb128 0x27
 8784 021b 19       		.uleb128 0x19
 8785 021c 49       		.uleb128 0x49
 8786 021d 13       		.uleb128 0x13
 8787 021e 11       		.uleb128 0x11
 8788 021f 01       		.uleb128 0x1
 8789 0220 12       		.uleb128 0x12
 8790 0221 06       		.uleb128 0x6
 8791 0222 40       		.uleb128 0x40
 8792 0223 18       		.uleb128 0x18
 8793 0224 9742     		.uleb128 0x2117
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 255


 8794 0226 19       		.uleb128 0x19
 8795 0227 00       		.byte	0
 8796 0228 00       		.byte	0
 8797 0229 27       		.uleb128 0x27
 8798 022a 0B       		.uleb128 0xb
 8799 022b 01       		.byte	0x1
 8800 022c 55       		.uleb128 0x55
 8801 022d 17       		.uleb128 0x17
 8802 022e 00       		.byte	0
 8803 022f 00       		.byte	0
 8804 0230 28       		.uleb128 0x28
 8805 0231 0B       		.uleb128 0xb
 8806 0232 01       		.byte	0x1
 8807 0233 55       		.uleb128 0x55
 8808 0234 17       		.uleb128 0x17
 8809 0235 01       		.uleb128 0x1
 8810 0236 13       		.uleb128 0x13
 8811 0237 00       		.byte	0
 8812 0238 00       		.byte	0
 8813 0239 29       		.uleb128 0x29
 8814 023a 34       		.uleb128 0x34
 8815 023b 00       		.byte	0
 8816 023c 03       		.uleb128 0x3
 8817 023d 0E       		.uleb128 0xe
 8818 023e 3A       		.uleb128 0x3a
 8819 023f 0B       		.uleb128 0xb
 8820 0240 3B       		.uleb128 0x3b
 8821 0241 05       		.uleb128 0x5
 8822 0242 49       		.uleb128 0x49
 8823 0243 13       		.uleb128 0x13
 8824 0244 3F       		.uleb128 0x3f
 8825 0245 19       		.uleb128 0x19
 8826 0246 02       		.uleb128 0x2
 8827 0247 18       		.uleb128 0x18
 8828 0248 00       		.byte	0
 8829 0249 00       		.byte	0
 8830 024a 2A       		.uleb128 0x2a
 8831 024b 2E       		.uleb128 0x2e
 8832 024c 00       		.byte	0
 8833 024d 3F       		.uleb128 0x3f
 8834 024e 19       		.uleb128 0x19
 8835 024f 3C       		.uleb128 0x3c
 8836 0250 19       		.uleb128 0x19
 8837 0251 6E       		.uleb128 0x6e
 8838 0252 0E       		.uleb128 0xe
 8839 0253 03       		.uleb128 0x3
 8840 0254 0E       		.uleb128 0xe
 8841 0255 3A       		.uleb128 0x3a
 8842 0256 0B       		.uleb128 0xb
 8843 0257 3B       		.uleb128 0x3b
 8844 0258 0B       		.uleb128 0xb
 8845 0259 00       		.byte	0
 8846 025a 00       		.byte	0
 8847 025b 2B       		.uleb128 0x2b
 8848 025c 2E       		.uleb128 0x2e
 8849 025d 00       		.byte	0
 8850 025e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 256


 8851 025f 19       		.uleb128 0x19
 8852 0260 3C       		.uleb128 0x3c
 8853 0261 19       		.uleb128 0x19
 8854 0262 6E       		.uleb128 0x6e
 8855 0263 0E       		.uleb128 0xe
 8856 0264 03       		.uleb128 0x3
 8857 0265 0E       		.uleb128 0xe
 8858 0266 3A       		.uleb128 0x3a
 8859 0267 0B       		.uleb128 0xb
 8860 0268 3B       		.uleb128 0x3b
 8861 0269 05       		.uleb128 0x5
 8862 026a 00       		.byte	0
 8863 026b 00       		.byte	0
 8864 026c 00       		.byte	0
 8865              		.section	.debug_loc,"",%progbits
 8866              	.Ldebug_loc0:
 8867              	.LLST0:
 8868 0000 00000000 		.4byte	.LVL0
 8869 0004 28000000 		.4byte	.LVL1
 8870 0008 0100     		.2byte	0x1
 8871 000a 50       		.byte	0x50
 8872 000b 28000000 		.4byte	.LVL1
 8873 000f 2A000000 		.4byte	.LVL2
 8874 0013 0400     		.2byte	0x4
 8875 0015 F3       		.byte	0xf3
 8876 0016 01       		.uleb128 0x1
 8877 0017 50       		.byte	0x50
 8878 0018 9F       		.byte	0x9f
 8879 0019 2A000000 		.4byte	.LVL2
 8880 001d 2C000000 		.4byte	.LVL3
 8881 0021 0100     		.2byte	0x1
 8882 0023 50       		.byte	0x50
 8883 0024 2C000000 		.4byte	.LVL3
 8884 0028 2E000000 		.4byte	.LVL4
 8885 002c 0400     		.2byte	0x4
 8886 002e F3       		.byte	0xf3
 8887 002f 01       		.uleb128 0x1
 8888 0030 50       		.byte	0x50
 8889 0031 9F       		.byte	0x9f
 8890 0032 2E000000 		.4byte	.LVL4
 8891 0036 30000000 		.4byte	.LVL5
 8892 003a 0100     		.2byte	0x1
 8893 003c 50       		.byte	0x50
 8894 003d 30000000 		.4byte	.LVL5
 8895 0041 32000000 		.4byte	.LVL6
 8896 0045 0400     		.2byte	0x4
 8897 0047 F3       		.byte	0xf3
 8898 0048 01       		.uleb128 0x1
 8899 0049 50       		.byte	0x50
 8900 004a 9F       		.byte	0x9f
 8901 004b 32000000 		.4byte	.LVL6
 8902 004f 34000000 		.4byte	.LVL7
 8903 0053 0100     		.2byte	0x1
 8904 0055 50       		.byte	0x50
 8905 0056 34000000 		.4byte	.LVL7
 8906 005a 3C000000 		.4byte	.LFE43
 8907 005e 0400     		.2byte	0x4
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 257


 8908 0060 F3       		.byte	0xf3
 8909 0061 01       		.uleb128 0x1
 8910 0062 50       		.byte	0x50
 8911 0063 9F       		.byte	0x9f
 8912 0064 00000000 		.4byte	0
 8913 0068 00000000 		.4byte	0
 8914              	.LLST1:
 8915 006c 00000000 		.4byte	.LVL0
 8916 0070 34000000 		.4byte	.LVL7
 8917 0074 0200     		.2byte	0x2
 8918 0076 30       		.byte	0x30
 8919 0077 9F       		.byte	0x9f
 8920 0078 34000000 		.4byte	.LVL7
 8921 007c 3C000000 		.4byte	.LFE43
 8922 0080 0100     		.2byte	0x1
 8923 0082 50       		.byte	0x50
 8924 0083 00000000 		.4byte	0
 8925 0087 00000000 		.4byte	0
 8926              	.LLST2:
 8927 008b 00000000 		.4byte	.LVL0
 8928 008f 28000000 		.4byte	.LVL1
 8929 0093 0100     		.2byte	0x1
 8930 0095 50       		.byte	0x50
 8931 0096 28000000 		.4byte	.LVL1
 8932 009a 2A000000 		.4byte	.LVL2
 8933 009e 0400     		.2byte	0x4
 8934 00a0 F3       		.byte	0xf3
 8935 00a1 01       		.uleb128 0x1
 8936 00a2 50       		.byte	0x50
 8937 00a3 9F       		.byte	0x9f
 8938 00a4 2A000000 		.4byte	.LVL2
 8939 00a8 2C000000 		.4byte	.LVL3
 8940 00ac 0100     		.2byte	0x1
 8941 00ae 50       		.byte	0x50
 8942 00af 2C000000 		.4byte	.LVL3
 8943 00b3 2E000000 		.4byte	.LVL4
 8944 00b7 0400     		.2byte	0x4
 8945 00b9 F3       		.byte	0xf3
 8946 00ba 01       		.uleb128 0x1
 8947 00bb 50       		.byte	0x50
 8948 00bc 9F       		.byte	0x9f
 8949 00bd 2E000000 		.4byte	.LVL4
 8950 00c1 30000000 		.4byte	.LVL5
 8951 00c5 0100     		.2byte	0x1
 8952 00c7 50       		.byte	0x50
 8953 00c8 30000000 		.4byte	.LVL5
 8954 00cc 32000000 		.4byte	.LVL6
 8955 00d0 0400     		.2byte	0x4
 8956 00d2 F3       		.byte	0xf3
 8957 00d3 01       		.uleb128 0x1
 8958 00d4 50       		.byte	0x50
 8959 00d5 9F       		.byte	0x9f
 8960 00d6 32000000 		.4byte	.LVL6
 8961 00da 34000000 		.4byte	.LVL7
 8962 00de 0100     		.2byte	0x1
 8963 00e0 50       		.byte	0x50
 8964 00e1 34000000 		.4byte	.LVL7
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 258


 8965 00e5 3C000000 		.4byte	.LFE43
 8966 00e9 0400     		.2byte	0x4
 8967 00eb F3       		.byte	0xf3
 8968 00ec 01       		.uleb128 0x1
 8969 00ed 50       		.byte	0x50
 8970 00ee 9F       		.byte	0x9f
 8971 00ef 00000000 		.4byte	0
 8972 00f3 00000000 		.4byte	0
 8973              	.LLST3:
 8974 00f7 00000000 		.4byte	.LVL8
 8975 00fb 06000000 		.4byte	.LVL10
 8976 00ff 0100     		.2byte	0x1
 8977 0101 50       		.byte	0x50
 8978 0102 06000000 		.4byte	.LVL10
 8979 0106 12000000 		.4byte	.LVL13
 8980 010a 0100     		.2byte	0x1
 8981 010c 50       		.byte	0x50
 8982 010d 00000000 		.4byte	0
 8983 0111 00000000 		.4byte	0
 8984              	.LLST4:
 8985 0115 00000000 		.4byte	.LVL8
 8986 0119 04000000 		.4byte	.LVL9
 8987 011d 0200     		.2byte	0x2
 8988 011f 30       		.byte	0x30
 8989 0120 9F       		.byte	0x9f
 8990 0121 04000000 		.4byte	.LVL9
 8991 0125 14000000 		.4byte	.LFE69
 8992 0129 0100     		.2byte	0x1
 8993 012b 53       		.byte	0x53
 8994 012c 00000000 		.4byte	0
 8995 0130 00000000 		.4byte	0
 8996              	.LLST5:
 8997 0134 26000000 		.4byte	.LVL14
 8998 0138 28000000 		.4byte	.LVL15
 8999 013c 0100     		.2byte	0x1
 9000 013e 52       		.byte	0x52
 9001 013f 00000000 		.4byte	0
 9002 0143 00000000 		.4byte	0
 9003              	.LLST6:
 9004 0147 00000000 		.4byte	.LVL16
 9005 014b 06000000 		.4byte	.LVL17
 9006 014f 0100     		.2byte	0x1
 9007 0151 50       		.byte	0x50
 9008 0152 06000000 		.4byte	.LVL17
 9009 0156 10000000 		.4byte	.LVL20
 9010 015a 0100     		.2byte	0x1
 9011 015c 54       		.byte	0x54
 9012 015d 10000000 		.4byte	.LVL20
 9013 0161 12000000 		.4byte	.LFE71
 9014 0165 0400     		.2byte	0x4
 9015 0167 F3       		.byte	0xf3
 9016 0168 01       		.uleb128 0x1
 9017 0169 50       		.byte	0x50
 9018 016a 9F       		.byte	0x9f
 9019 016b 00000000 		.4byte	0
 9020 016f 00000000 		.4byte	0
 9021              	.LLST7:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 259


 9022 0173 00000000 		.4byte	.LVL21
 9023 0177 16000000 		.4byte	.LVL24
 9024 017b 0100     		.2byte	0x1
 9025 017d 50       		.byte	0x50
 9026 017e 16000000 		.4byte	.LVL24
 9027 0182 A6000000 		.4byte	.LVL42
 9028 0186 0200     		.2byte	0x2
 9029 0188 7D       		.byte	0x7d
 9030 0189 00       		.sleb128 0
 9031 018a A6000000 		.4byte	.LVL42
 9032 018e AC000000 		.4byte	.LFE33
 9033 0192 0200     		.2byte	0x2
 9034 0194 91       		.byte	0x91
 9035 0195 60       		.sleb128 -32
 9036 0196 00000000 		.4byte	0
 9037 019a 00000000 		.4byte	0
 9038              	.LLST8:
 9039 019e 00000000 		.4byte	.LVL21
 9040 01a2 14000000 		.4byte	.LVL23
 9041 01a6 0100     		.2byte	0x1
 9042 01a8 51       		.byte	0x51
 9043 01a9 14000000 		.4byte	.LVL23
 9044 01ad A6000000 		.4byte	.LVL43
 9045 01b1 0100     		.2byte	0x1
 9046 01b3 55       		.byte	0x55
 9047 01b4 A6000000 		.4byte	.LVL43
 9048 01b8 AC000000 		.4byte	.LFE33
 9049 01bc 0400     		.2byte	0x4
 9050 01be F3       		.byte	0xf3
 9051 01bf 01       		.uleb128 0x1
 9052 01c0 51       		.byte	0x51
 9053 01c1 9F       		.byte	0x9f
 9054 01c2 00000000 		.4byte	0
 9055 01c6 00000000 		.4byte	0
 9056              	.LLST9:
 9057 01ca 00000000 		.4byte	.LVL21
 9058 01ce 12000000 		.4byte	.LVL22
 9059 01d2 0100     		.2byte	0x1
 9060 01d4 52       		.byte	0x52
 9061 01d5 12000000 		.4byte	.LVL22
 9062 01d9 2C000000 		.4byte	.LVL28
 9063 01dd 0100     		.2byte	0x1
 9064 01df 57       		.byte	0x57
 9065 01e0 2C000000 		.4byte	.LVL28
 9066 01e4 AC000000 		.4byte	.LFE33
 9067 01e8 0400     		.2byte	0x4
 9068 01ea F3       		.byte	0xf3
 9069 01eb 01       		.uleb128 0x1
 9070 01ec 52       		.byte	0x52
 9071 01ed 9F       		.byte	0x9f
 9072 01ee 00000000 		.4byte	0
 9073 01f2 00000000 		.4byte	0
 9074              	.LLST10:
 9075 01f6 00000000 		.4byte	.LVL21
 9076 01fa 19000000 		.4byte	.LVL25-1
 9077 01fe 0100     		.2byte	0x1
 9078 0200 53       		.byte	0x53
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 260


 9079 0201 19000000 		.4byte	.LVL25-1
 9080 0205 AC000000 		.4byte	.LFE33
 9081 0209 0200     		.2byte	0x2
 9082 020b 91       		.byte	0x91
 9083 020c 64       		.sleb128 -28
 9084 020d 00000000 		.4byte	0
 9085 0211 00000000 		.4byte	0
 9086              	.LLST11:
 9087 0215 00000000 		.4byte	.LVL21
 9088 0219 52000000 		.4byte	.LVL33
 9089 021d 0200     		.2byte	0x2
 9090 021f 91       		.byte	0x91
 9091 0220 00       		.sleb128 0
 9092 0221 52000000 		.4byte	.LVL33
 9093 0225 6E000000 		.4byte	.LVL36
 9094 0229 0100     		.2byte	0x1
 9095 022b 54       		.byte	0x54
 9096 022c 00000000 		.4byte	0
 9097 0230 00000000 		.4byte	0
 9098              	.LLST12:
 9099 0234 26000000 		.4byte	.LVL26
 9100 0238 2A000000 		.4byte	.LVL27
 9101 023c 0100     		.2byte	0x1
 9102 023e 53       		.byte	0x53
 9103 023f 2A000000 		.4byte	.LVL27
 9104 0243 2C000000 		.4byte	.LVL28
 9105 0247 0C00     		.2byte	0xc
 9106 0249 77       		.byte	0x77
 9107 024a FFFFFFFF 		.sleb128 1073741823
 9107      03
 9108 024f 32       		.byte	0x32
 9109 0250 24       		.byte	0x24
 9110 0251 7C       		.byte	0x7c
 9111 0252 00       		.sleb128 0
 9112 0253 22       		.byte	0x22
 9113 0254 9F       		.byte	0x9f
 9114 0255 2C000000 		.4byte	.LVL28
 9115 0259 2E000000 		.4byte	.LVL29
 9116 025d 0100     		.2byte	0x1
 9117 025f 53       		.byte	0x53
 9118 0260 2E000000 		.4byte	.LVL29
 9119 0264 A6000000 		.4byte	.LVL44
 9120 0268 0100     		.2byte	0x1
 9121 026a 57       		.byte	0x57
 9122 026b 00000000 		.4byte	0
 9123 026f 00000000 		.4byte	0
 9124              	.LLST13:
 9125 0273 2C000000 		.4byte	.LVL28
 9126 0277 30000000 		.4byte	.LVL30
 9127 027b 0200     		.2byte	0x2
 9128 027d 30       		.byte	0x30
 9129 027e 9F       		.byte	0x9f
 9130 027f 30000000 		.4byte	.LVL30
 9131 0283 4A000000 		.4byte	.LVL32
 9132 0287 0100     		.2byte	0x1
 9133 0289 53       		.byte	0x53
 9134 028a 72000000 		.4byte	.LVL37
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 261


 9135 028e 76000000 		.4byte	.LVL38
 9136 0292 0200     		.2byte	0x2
 9137 0294 30       		.byte	0x30
 9138 0295 9F       		.byte	0x9f
 9139 0296 76000000 		.4byte	.LVL38
 9140 029a 8E000000 		.4byte	.LVL40
 9141 029e 0100     		.2byte	0x1
 9142 02a0 52       		.byte	0x52
 9143 02a1 00000000 		.4byte	0
 9144 02a5 00000000 		.4byte	0
 9145              	.LLST14:
 9146 02a9 02000000 		.4byte	.LVL45
 9147 02ad 06000000 		.4byte	.LVL46
 9148 02b1 0200     		.2byte	0x2
 9149 02b3 30       		.byte	0x30
 9150 02b4 9F       		.byte	0x9f
 9151 02b5 06000000 		.4byte	.LVL46
 9152 02b9 1E000000 		.4byte	.LVL49
 9153 02bd 0100     		.2byte	0x1
 9154 02bf 54       		.byte	0x54
 9155 02c0 00000000 		.4byte	0
 9156 02c4 00000000 		.4byte	0
 9157              	.LLST15:
 9158 02c8 00000000 		.4byte	.LVL55
 9159 02cc 07000000 		.4byte	.LVL56-1
 9160 02d0 0100     		.2byte	0x1
 9161 02d2 50       		.byte	0x50
 9162 02d3 07000000 		.4byte	.LVL56-1
 9163 02d7 80000000 		.4byte	.LVL61
 9164 02db 0100     		.2byte	0x1
 9165 02dd 54       		.byte	0x54
 9166 02de 80000000 		.4byte	.LVL61
 9167 02e2 8C000000 		.4byte	.LFE34
 9168 02e6 0400     		.2byte	0x4
 9169 02e8 F3       		.byte	0xf3
 9170 02e9 01       		.uleb128 0x1
 9171 02ea 50       		.byte	0x50
 9172 02eb 9F       		.byte	0x9f
 9173 02ec 00000000 		.4byte	0
 9174 02f0 00000000 		.4byte	0
 9175              	.LLST16:
 9176 02f4 0E000000 		.4byte	.LVL63
 9177 02f8 2A000000 		.4byte	.LVL66
 9178 02fc 0100     		.2byte	0x1
 9179 02fe 55       		.byte	0x55
 9180 02ff 00000000 		.4byte	0
 9181 0303 00000000 		.4byte	0
 9182              	.LLST17:
 9183 0307 00000000 		.4byte	.LVL67
 9184 030b 02000000 		.4byte	.LVL68
 9185 030f 0100     		.2byte	0x1
 9186 0311 50       		.byte	0x50
 9187 0312 02000000 		.4byte	.LVL68
 9188 0316 08000000 		.4byte	.LFE64
 9189 031a 0400     		.2byte	0x4
 9190 031c F3       		.byte	0xf3
 9191 031d 01       		.uleb128 0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 262


 9192 031e 50       		.byte	0x50
 9193 031f 9F       		.byte	0x9f
 9194 0320 00000000 		.4byte	0
 9195 0324 00000000 		.4byte	0
 9196              	.LLST18:
 9197 0328 00000000 		.4byte	.LVL70
 9198 032c 0C000000 		.4byte	.LVL72
 9199 0330 0100     		.2byte	0x1
 9200 0332 50       		.byte	0x50
 9201 0333 0C000000 		.4byte	.LVL72
 9202 0337 2A000000 		.4byte	.LVL75
 9203 033b 0100     		.2byte	0x1
 9204 033d 54       		.byte	0x54
 9205 033e 2A000000 		.4byte	.LVL75
 9206 0342 64000000 		.4byte	.LFE86
 9207 0346 0400     		.2byte	0x4
 9208 0348 F3       		.byte	0xf3
 9209 0349 01       		.uleb128 0x1
 9210 034a 50       		.byte	0x50
 9211 034b 9F       		.byte	0x9f
 9212 034c 00000000 		.4byte	0
 9213 0350 00000000 		.4byte	0
 9214              	.LLST19:
 9215 0354 00000000 		.4byte	.LVL70
 9216 0358 11000000 		.4byte	.LVL73-1
 9217 035c 0100     		.2byte	0x1
 9218 035e 51       		.byte	0x51
 9219 035f 11000000 		.4byte	.LVL73-1
 9220 0363 44000000 		.4byte	.LVL77
 9221 0367 0100     		.2byte	0x1
 9222 0369 55       		.byte	0x55
 9223 036a 44000000 		.4byte	.LVL77
 9224 036e 64000000 		.4byte	.LFE86
 9225 0372 0400     		.2byte	0x4
 9226 0374 F3       		.byte	0xf3
 9227 0375 01       		.uleb128 0x1
 9228 0376 51       		.byte	0x51
 9229 0377 9F       		.byte	0x9f
 9230 0378 00000000 		.4byte	0
 9231 037c 00000000 		.4byte	0
 9232              	.LLST20:
 9233 0380 2A000000 		.4byte	.LVL75
 9234 0384 5A000000 		.4byte	.LVL79
 9235 0388 0100     		.2byte	0x1
 9236 038a 54       		.byte	0x54
 9237 038b 00000000 		.4byte	0
 9238 038f 00000000 		.4byte	0
 9239              	.LLST21:
 9240 0393 0A000000 		.4byte	.LVL71
 9241 0397 5A000000 		.4byte	.LVL80
 9242 039b 0100     		.2byte	0x1
 9243 039d 56       		.byte	0x56
 9244 039e 00000000 		.4byte	0
 9245 03a2 00000000 		.4byte	0
 9246              	.LLST22:
 9247 03a6 00000000 		.4byte	.LVL81
 9248 03aa 0E000000 		.4byte	.LVL82
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 263


 9249 03ae 0100     		.2byte	0x1
 9250 03b0 50       		.byte	0x50
 9251 03b1 0E000000 		.4byte	.LVL82
 9252 03b5 5E000000 		.4byte	.LFE32
 9253 03b9 0200     		.2byte	0x2
 9254 03bb 91       		.byte	0x91
 9255 03bc 60       		.sleb128 -32
 9256 03bd 00000000 		.4byte	0
 9257 03c1 00000000 		.4byte	0
 9258              	.LLST23:
 9259 03c5 00000000 		.4byte	.LVL81
 9260 03c9 11000000 		.4byte	.LVL83-1
 9261 03cd 0100     		.2byte	0x1
 9262 03cf 51       		.byte	0x51
 9263 03d0 11000000 		.4byte	.LVL83-1
 9264 03d4 5E000000 		.4byte	.LFE32
 9265 03d8 0200     		.2byte	0x2
 9266 03da 91       		.byte	0x91
 9267 03db 64       		.sleb128 -28
 9268 03dc 00000000 		.4byte	0
 9269 03e0 00000000 		.4byte	0
 9270              	.LLST24:
 9271 03e4 00000000 		.4byte	.LVL81
 9272 03e8 11000000 		.4byte	.LVL83-1
 9273 03ec 0100     		.2byte	0x1
 9274 03ee 52       		.byte	0x52
 9275 03ef 11000000 		.4byte	.LVL83-1
 9276 03f3 5E000000 		.4byte	.LFE32
 9277 03f7 0400     		.2byte	0x4
 9278 03f9 F3       		.byte	0xf3
 9279 03fa 01       		.uleb128 0x1
 9280 03fb 52       		.byte	0x52
 9281 03fc 9F       		.byte	0x9f
 9282 03fd 00000000 		.4byte	0
 9283 0401 00000000 		.4byte	0
 9284              	.LLST25:
 9285 0405 00000000 		.4byte	.LVL81
 9286 0409 11000000 		.4byte	.LVL83-1
 9287 040d 0100     		.2byte	0x1
 9288 040f 53       		.byte	0x53
 9289 0410 11000000 		.4byte	.LVL83-1
 9290 0414 5C000000 		.4byte	.LVL98
 9291 0418 0100     		.2byte	0x1
 9292 041a 57       		.byte	0x57
 9293 041b 5C000000 		.4byte	.LVL98
 9294 041f 5E000000 		.4byte	.LFE32
 9295 0423 0400     		.2byte	0x4
 9296 0425 F3       		.byte	0xf3
 9297 0426 01       		.uleb128 0x1
 9298 0427 53       		.byte	0x53
 9299 0428 9F       		.byte	0x9f
 9300 0429 00000000 		.4byte	0
 9301 042d 00000000 		.4byte	0
 9302              	.LLST26:
 9303 0431 1E000000 		.4byte	.LVL87
 9304 0435 26000000 		.4byte	.LVL88
 9305 0439 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 264


 9306 043b 50       		.byte	0x50
 9307 043c 26000000 		.4byte	.LVL88
 9308 0440 2C000000 		.4byte	.LVL90
 9309 0444 0100     		.2byte	0x1
 9310 0446 55       		.byte	0x55
 9311 0447 2E000000 		.4byte	.LVL91
 9312 044b 5C000000 		.4byte	.LVL96
 9313 044f 0100     		.2byte	0x1
 9314 0451 55       		.byte	0x55
 9315 0452 00000000 		.4byte	0
 9316 0456 00000000 		.4byte	0
 9317              	.LLST27:
 9318 045a 52000000 		.4byte	.LVL93
 9319 045e 56000000 		.4byte	.LVL94
 9320 0462 0200     		.2byte	0x2
 9321 0464 31       		.byte	0x31
 9322 0465 9F       		.byte	0x9f
 9323 0466 5A000000 		.4byte	.LVL95
 9324 046a 5E000000 		.4byte	.LFE32
 9325 046e 0100     		.2byte	0x1
 9326 0470 50       		.byte	0x50
 9327 0471 00000000 		.4byte	0
 9328 0475 00000000 		.4byte	0
 9329              	.LLST28:
 9330 0479 14000000 		.4byte	.LVL84
 9331 047d 18000000 		.4byte	.LVL85
 9332 0481 0100     		.2byte	0x1
 9333 0483 50       		.byte	0x50
 9334 0484 18000000 		.4byte	.LVL85
 9335 0488 2C000000 		.4byte	.LVL90
 9336 048c 0100     		.2byte	0x1
 9337 048e 56       		.byte	0x56
 9338 048f 2C000000 		.4byte	.LVL90
 9339 0493 2E000000 		.4byte	.LVL91
 9340 0497 0100     		.2byte	0x1
 9341 0499 50       		.byte	0x50
 9342 049a 2E000000 		.4byte	.LVL91
 9343 049e 5C000000 		.4byte	.LVL97
 9344 04a2 0100     		.2byte	0x1
 9345 04a4 56       		.byte	0x56
 9346 04a5 00000000 		.4byte	0
 9347 04a9 00000000 		.4byte	0
 9348              	.LLST29:
 9349 04ad 00000000 		.4byte	.LVL99
 9350 04b1 07000000 		.4byte	.LVL100-1
 9351 04b5 0100     		.2byte	0x1
 9352 04b7 50       		.byte	0x50
 9353 04b8 07000000 		.4byte	.LVL100-1
 9354 04bc 10000000 		.4byte	.LVL101
 9355 04c0 0100     		.2byte	0x1
 9356 04c2 54       		.byte	0x54
 9357 04c3 00000000 		.4byte	0
 9358 04c7 00000000 		.4byte	0
 9359              	.LLST30:
 9360 04cb 10000000 		.4byte	.LVL101
 9361 04cf 72000000 		.4byte	.LVL109
 9362 04d3 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 265


 9363 04d5 54       		.byte	0x54
 9364 04d6 72000000 		.4byte	.LVL109
 9365 04da 72000000 		.4byte	.LVL110
 9366 04de 0300     		.2byte	0x3
 9367 04e0 75       		.byte	0x75
 9368 04e1 7C       		.sleb128 -4
 9369 04e2 9F       		.byte	0x9f
 9370 04e3 00000000 		.4byte	0
 9371 04e7 00000000 		.4byte	0
 9372              	.LLST31:
 9373 04eb 00000000 		.4byte	.LVL111
 9374 04ef 0F000000 		.4byte	.LVL113-1
 9375 04f3 0100     		.2byte	0x1
 9376 04f5 50       		.byte	0x50
 9377 04f6 0F000000 		.4byte	.LVL113-1
 9378 04fa 46000000 		.4byte	.LVL116
 9379 04fe 0100     		.2byte	0x1
 9380 0500 55       		.byte	0x55
 9381 0501 46000000 		.4byte	.LVL116
 9382 0505 48000000 		.4byte	.LVL117
 9383 0509 0100     		.2byte	0x1
 9384 050b 50       		.byte	0x50
 9385 050c 48000000 		.4byte	.LVL117
 9386 0510 5C000000 		.4byte	.LVL120
 9387 0514 0100     		.2byte	0x1
 9388 0516 55       		.byte	0x55
 9389 0517 5C000000 		.4byte	.LVL120
 9390 051b 68000000 		.4byte	.LFE38
 9391 051f 0400     		.2byte	0x4
 9392 0521 F3       		.byte	0xf3
 9393 0522 01       		.uleb128 0x1
 9394 0523 50       		.byte	0x50
 9395 0524 9F       		.byte	0x9f
 9396 0525 00000000 		.4byte	0
 9397 0529 00000000 		.4byte	0
 9398              	.LLST32:
 9399 052d 12000000 		.4byte	.LVL114
 9400 0531 46000000 		.4byte	.LVL116
 9401 0535 0100     		.2byte	0x1
 9402 0537 54       		.byte	0x54
 9403 0538 4A000000 		.4byte	.LVL118
 9404 053c 5C000000 		.4byte	.LVL119
 9405 0540 0100     		.2byte	0x1
 9406 0542 54       		.byte	0x54
 9407 0543 00000000 		.4byte	0
 9408 0547 00000000 		.4byte	0
 9409              	.LLST33:
 9410 054b 04000000 		.4byte	.LVL112
 9411 054f 0F000000 		.4byte	.LVL113-1
 9412 0553 0100     		.2byte	0x1
 9413 0555 50       		.byte	0x50
 9414 0556 0F000000 		.4byte	.LVL113-1
 9415 055a 46000000 		.4byte	.LVL116
 9416 055e 0100     		.2byte	0x1
 9417 0560 55       		.byte	0x55
 9418 0561 46000000 		.4byte	.LVL116
 9419 0565 48000000 		.4byte	.LVL117
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 266


 9420 0569 0100     		.2byte	0x1
 9421 056b 50       		.byte	0x50
 9422 056c 48000000 		.4byte	.LVL117
 9423 0570 5C000000 		.4byte	.LVL120
 9424 0574 0100     		.2byte	0x1
 9425 0576 55       		.byte	0x55
 9426 0577 5C000000 		.4byte	.LVL120
 9427 057b 68000000 		.4byte	.LFE38
 9428 057f 0400     		.2byte	0x4
 9429 0581 F3       		.byte	0xf3
 9430 0582 01       		.uleb128 0x1
 9431 0583 50       		.byte	0x50
 9432 0584 9F       		.byte	0x9f
 9433 0585 00000000 		.4byte	0
 9434 0589 00000000 		.4byte	0
 9435              	.LLST34:
 9436 058d 00000000 		.4byte	.LVL121
 9437 0591 07000000 		.4byte	.LVL122-1
 9438 0595 0100     		.2byte	0x1
 9439 0597 50       		.byte	0x50
 9440 0598 07000000 		.4byte	.LVL122-1
 9441 059c 10000000 		.4byte	.LVL123
 9442 05a0 0100     		.2byte	0x1
 9443 05a2 54       		.byte	0x54
 9444 05a3 00000000 		.4byte	0
 9445 05a7 00000000 		.4byte	0
 9446              	.LLST35:
 9447 05ab 10000000 		.4byte	.LVL123
 9448 05af 12000000 		.4byte	.LVL124
 9449 05b3 0100     		.2byte	0x1
 9450 05b5 54       		.byte	0x54
 9451 05b6 00000000 		.4byte	0
 9452 05ba 00000000 		.4byte	0
 9453              	.LLST36:
 9454 05be 12000000 		.4byte	.LVL124
 9455 05c2 18000000 		.4byte	.LVL126
 9456 05c6 0100     		.2byte	0x1
 9457 05c8 54       		.byte	0x54
 9458 05c9 18000000 		.4byte	.LVL126
 9459 05cd 20000000 		.4byte	.LFE39
 9460 05d1 0100     		.2byte	0x1
 9461 05d3 50       		.byte	0x50
 9462 05d4 00000000 		.4byte	0
 9463 05d8 00000000 		.4byte	0
 9464              	.LLST37:
 9465 05dc 00000000 		.4byte	.LVL127
 9466 05e0 07000000 		.4byte	.LVL128-1
 9467 05e4 0100     		.2byte	0x1
 9468 05e6 50       		.byte	0x50
 9469 05e7 07000000 		.4byte	.LVL128-1
 9470 05eb 10000000 		.4byte	.LVL129
 9471 05ef 0100     		.2byte	0x1
 9472 05f1 54       		.byte	0x54
 9473 05f2 00000000 		.4byte	0
 9474 05f6 00000000 		.4byte	0
 9475              	.LLST38:
 9476 05fa 10000000 		.4byte	.LVL129
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 267


 9477 05fe 12000000 		.4byte	.LVL130
 9478 0602 0100     		.2byte	0x1
 9479 0604 54       		.byte	0x54
 9480 0605 00000000 		.4byte	0
 9481 0609 00000000 		.4byte	0
 9482              	.LLST39:
 9483 060d 12000000 		.4byte	.LVL130
 9484 0611 18000000 		.4byte	.LVL132
 9485 0615 0100     		.2byte	0x1
 9486 0617 54       		.byte	0x54
 9487 0618 18000000 		.4byte	.LVL132
 9488 061c 20000000 		.4byte	.LFE40
 9489 0620 0100     		.2byte	0x1
 9490 0622 50       		.byte	0x50
 9491 0623 00000000 		.4byte	0
 9492 0627 00000000 		.4byte	0
 9493              	.LLST40:
 9494 062b 08000000 		.4byte	.LVL128
 9495 062f 15000000 		.4byte	.LVL131-1
 9496 0633 0100     		.2byte	0x1
 9497 0635 50       		.byte	0x50
 9498 0636 00000000 		.4byte	0
 9499 063a 00000000 		.4byte	0
 9500              	.LLST41:
 9501 063e 00000000 		.4byte	.LVL133
 9502 0642 0F000000 		.4byte	.LVL136-1
 9503 0646 0100     		.2byte	0x1
 9504 0648 50       		.byte	0x50
 9505 0649 0F000000 		.4byte	.LVL136-1
 9506 064d 18000000 		.4byte	.LVL137
 9507 0651 0100     		.2byte	0x1
 9508 0653 54       		.byte	0x54
 9509 0654 00000000 		.4byte	0
 9510 0658 00000000 		.4byte	0
 9511              	.LLST42:
 9512 065c 00000000 		.4byte	.LVL133
 9513 0660 0C000000 		.4byte	.LVL135
 9514 0664 0100     		.2byte	0x1
 9515 0666 51       		.byte	0x51
 9516 0667 0C000000 		.4byte	.LVL135
 9517 066b 60000000 		.4byte	.LVL142
 9518 066f 0100     		.2byte	0x1
 9519 0671 55       		.byte	0x55
 9520 0672 60000000 		.4byte	.LVL142
 9521 0676 85000000 		.4byte	.LVL144-1
 9522 067a 0300     		.2byte	0x3
 9523 067c 74       		.byte	0x74
 9524 067d C400     		.sleb128 68
 9525 067f 00000000 		.4byte	0
 9526 0683 00000000 		.4byte	0
 9527              	.LLST43:
 9528 0687 18000000 		.4byte	.LVL137
 9529 068b B2000000 		.4byte	.LVL148
 9530 068f 0100     		.2byte	0x1
 9531 0691 54       		.byte	0x54
 9532 0692 00000000 		.4byte	0
 9533 0696 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 268


 9534              	.LLST44:
 9535 069a 1A000000 		.4byte	.LVL138
 9536 069e 58000000 		.4byte	.LVL141
 9537 06a2 0100     		.2byte	0x1
 9538 06a4 52       		.byte	0x52
 9539 06a5 00000000 		.4byte	0
 9540 06a9 00000000 		.4byte	0
 9541              	.LLST45:
 9542 06ad 4E000000 		.4byte	.LVL140
 9543 06b1 66000000 		.4byte	.LVL143
 9544 06b5 0100     		.2byte	0x1
 9545 06b7 53       		.byte	0x53
 9546 06b8 00000000 		.4byte	0
 9547 06bc 00000000 		.4byte	0
 9548              	.LLST46:
 9549 06c0 06000000 		.4byte	.LVL134
 9550 06c4 4C000000 		.4byte	.LVL139
 9551 06c8 0200     		.2byte	0x2
 9552 06ca 30       		.byte	0x30
 9553 06cb 9F       		.byte	0x9f
 9554 06cc 4C000000 		.4byte	.LVL139
 9555 06d0 AE000000 		.4byte	.LVL146
 9556 06d4 0100     		.2byte	0x1
 9557 06d6 56       		.byte	0x56
 9558 06d7 00000000 		.4byte	0
 9559 06db 00000000 		.4byte	0
 9560              	.LLST47:
 9561 06df 00000000 		.4byte	.LVL149
 9562 06e3 11000000 		.4byte	.LVL151-1
 9563 06e7 0100     		.2byte	0x1
 9564 06e9 50       		.byte	0x50
 9565 06ea 11000000 		.4byte	.LVL151-1
 9566 06ee 58000000 		.4byte	.LVL157
 9567 06f2 0100     		.2byte	0x1
 9568 06f4 54       		.byte	0x54
 9569 06f5 58000000 		.4byte	.LVL157
 9570 06f9 64000000 		.4byte	.LFE44
 9571 06fd 0400     		.2byte	0x4
 9572 06ff F3       		.byte	0xf3
 9573 0700 01       		.uleb128 0x1
 9574 0701 50       		.byte	0x50
 9575 0702 9F       		.byte	0x9f
 9576 0703 00000000 		.4byte	0
 9577 0707 00000000 		.4byte	0
 9578              	.LLST48:
 9579 070b 04000000 		.4byte	.LVL150
 9580 070f 11000000 		.4byte	.LVL151-1
 9581 0713 0100     		.2byte	0x1
 9582 0715 50       		.byte	0x50
 9583 0716 11000000 		.4byte	.LVL151-1
 9584 071a 58000000 		.4byte	.LVL157
 9585 071e 0100     		.2byte	0x1
 9586 0720 54       		.byte	0x54
 9587 0721 58000000 		.4byte	.LVL157
 9588 0725 64000000 		.4byte	.LFE44
 9589 0729 0400     		.2byte	0x4
 9590 072b F3       		.byte	0xf3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 269


 9591 072c 01       		.uleb128 0x1
 9592 072d 50       		.byte	0x50
 9593 072e 9F       		.byte	0x9f
 9594 072f 00000000 		.4byte	0
 9595 0733 00000000 		.4byte	0
 9596              	.LLST49:
 9597 0737 00000000 		.4byte	.LVL158
 9598 073b 07000000 		.4byte	.LVL160-1
 9599 073f 0100     		.2byte	0x1
 9600 0741 50       		.byte	0x50
 9601 0742 07000000 		.4byte	.LVL160-1
 9602 0746 72000000 		.4byte	.LVL171
 9603 074a 0100     		.2byte	0x1
 9604 074c 54       		.byte	0x54
 9605 074d 72000000 		.4byte	.LVL171
 9606 0751 7C000000 		.4byte	.LFE45
 9607 0755 0400     		.2byte	0x4
 9608 0757 F3       		.byte	0xf3
 9609 0758 01       		.uleb128 0x1
 9610 0759 50       		.byte	0x50
 9611 075a 9F       		.byte	0x9f
 9612 075b 00000000 		.4byte	0
 9613 075f 00000000 		.4byte	0
 9614              	.LLST50:
 9615 0763 04000000 		.4byte	.LVL159
 9616 0767 2E000000 		.4byte	.LVL164
 9617 076b 0200     		.2byte	0x2
 9618 076d 30       		.byte	0x30
 9619 076e 9F       		.byte	0x9f
 9620 076f 2E000000 		.4byte	.LVL164
 9621 0773 58000000 		.4byte	.LVL167
 9622 0777 0100     		.2byte	0x1
 9623 0779 56       		.byte	0x56
 9624 077a 58000000 		.4byte	.LVL167
 9625 077e 6A000000 		.4byte	.LVL169
 9626 0782 0200     		.2byte	0x2
 9627 0784 30       		.byte	0x30
 9628 0785 9F       		.byte	0x9f
 9629 0786 6A000000 		.4byte	.LVL169
 9630 078a 72000000 		.4byte	.LVL173
 9631 078e 0100     		.2byte	0x1
 9632 0790 56       		.byte	0x56
 9633 0791 72000000 		.4byte	.LVL173
 9634 0795 7C000000 		.4byte	.LFE45
 9635 0799 0100     		.2byte	0x1
 9636 079b 50       		.byte	0x50
 9637 079c 00000000 		.4byte	0
 9638 07a0 00000000 		.4byte	0
 9639              	.LLST51:
 9640 07a4 04000000 		.4byte	.LVL159
 9641 07a8 07000000 		.4byte	.LVL160-1
 9642 07ac 0100     		.2byte	0x1
 9643 07ae 50       		.byte	0x50
 9644 07af 07000000 		.4byte	.LVL160-1
 9645 07b3 72000000 		.4byte	.LVL171
 9646 07b7 0100     		.2byte	0x1
 9647 07b9 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 270


 9648 07ba 72000000 		.4byte	.LVL171
 9649 07be 7C000000 		.4byte	.LFE45
 9650 07c2 0400     		.2byte	0x4
 9651 07c4 F3       		.byte	0xf3
 9652 07c5 01       		.uleb128 0x1
 9653 07c6 50       		.byte	0x50
 9654 07c7 9F       		.byte	0x9f
 9655 07c8 00000000 		.4byte	0
 9656 07cc 00000000 		.4byte	0
 9657              	.LLST52:
 9658 07d0 0A000000 		.4byte	.LVL161
 9659 07d4 0C000000 		.4byte	.LVL162
 9660 07d8 0100     		.2byte	0x1
 9661 07da 50       		.byte	0x50
 9662 07db 0C000000 		.4byte	.LVL162
 9663 07df 72000000 		.4byte	.LVL172
 9664 07e3 0100     		.2byte	0x1
 9665 07e5 55       		.byte	0x55
 9666 07e6 00000000 		.4byte	0
 9667 07ea 00000000 		.4byte	0
 9668              	.LLST53:
 9669 07ee 18000000 		.4byte	.LVL174
 9670 07f2 33000000 		.4byte	.LVL175-1
 9671 07f6 0100     		.2byte	0x1
 9672 07f8 50       		.byte	0x50
 9673 07f9 00000000 		.4byte	0
 9674 07fd 00000000 		.4byte	0
 9675              	.LLST54:
 9676 0801 00000000 		.4byte	.LVL180
 9677 0805 08000000 		.4byte	.LVL181
 9678 0809 0100     		.2byte	0x1
 9679 080b 50       		.byte	0x50
 9680 080c 00000000 		.4byte	0
 9681 0810 00000000 		.4byte	0
 9682              	.LLST55:
 9683 0814 08000000 		.4byte	.LVL181
 9684 0818 0A000000 		.4byte	.LVL182
 9685 081c 0100     		.2byte	0x1
 9686 081e 50       		.byte	0x50
 9687 081f 0A000000 		.4byte	.LVL182
 9688 0823 10000000 		.4byte	.LFE53
 9689 0827 0300     		.2byte	0x3
 9690 0829 70       		.byte	0x70
 9691 082a 4C       		.sleb128 -52
 9692 082b 9F       		.byte	0x9f
 9693 082c 00000000 		.4byte	0
 9694 0830 00000000 		.4byte	0
 9695              	.LLST56:
 9696 0834 36000000 		.4byte	.LVL187
 9697 0838 3A000000 		.4byte	.LVL189
 9698 083c 0100     		.2byte	0x1
 9699 083e 56       		.byte	0x56
 9700 083f 62000000 		.4byte	.LVL191
 9701 0843 B2000000 		.4byte	.LVL196
 9702 0847 0100     		.2byte	0x1
 9703 0849 56       		.byte	0x56
 9704 084a 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 271


 9705 084e 00000000 		.4byte	0
 9706              	.LLST57:
 9707 0852 64000000 		.4byte	.LVL192
 9708 0856 75000000 		.4byte	.LVL193-1
 9709 085a 0100     		.2byte	0x1
 9710 085c 53       		.byte	0x53
 9711 085d 00000000 		.4byte	0
 9712 0861 00000000 		.4byte	0
 9713              	.LLST58:
 9714 0865 02000000 		.4byte	.LVL183
 9715 0869 36000000 		.4byte	.LVL187
 9716 086d 0200     		.2byte	0x2
 9717 086f 30       		.byte	0x30
 9718 0870 9F       		.byte	0x9f
 9719 0871 36000000 		.4byte	.LVL187
 9720 0875 38000000 		.4byte	.LVL188
 9721 0879 0100     		.2byte	0x1
 9722 087b 55       		.byte	0x55
 9723 087c 3A000000 		.4byte	.LVL189
 9724 0880 3C000000 		.4byte	.LVL190
 9725 0884 0200     		.2byte	0x2
 9726 0886 30       		.byte	0x30
 9727 0887 9F       		.byte	0x9f
 9728 0888 3C000000 		.4byte	.LVL190
 9729 088c B2000000 		.4byte	.LVL196
 9730 0890 0100     		.2byte	0x1
 9731 0892 55       		.byte	0x55
 9732 0893 B2000000 		.4byte	.LVL196
 9733 0897 BC000000 		.4byte	.LVL197
 9734 089b 0200     		.2byte	0x2
 9735 089d 30       		.byte	0x30
 9736 089e 9F       		.byte	0x9f
 9737 089f BC000000 		.4byte	.LVL197
 9738 08a3 C8000000 		.4byte	.LVL199
 9739 08a7 0100     		.2byte	0x1
 9740 08a9 55       		.byte	0x55
 9741 08aa C8000000 		.4byte	.LVL199
 9742 08ae D8000000 		.4byte	.LFE54
 9743 08b2 0100     		.2byte	0x1
 9744 08b4 50       		.byte	0x50
 9745 08b5 00000000 		.4byte	0
 9746 08b9 00000000 		.4byte	0
 9747              	.LLST59:
 9748 08bd 10000000 		.4byte	.LVL184
 9749 08c1 B2000000 		.4byte	.LVL196
 9750 08c5 0100     		.2byte	0x1
 9751 08c7 57       		.byte	0x57
 9752 08c8 00000000 		.4byte	0
 9753 08cc 00000000 		.4byte	0
 9754              	.LLST60:
 9755 08d0 1A000000 		.4byte	.LVL185
 9756 08d4 29000000 		.4byte	.LVL186-1
 9757 08d8 0100     		.2byte	0x1
 9758 08da 51       		.byte	0x51
 9759 08db 00000000 		.4byte	0
 9760 08df 00000000 		.4byte	0
 9761              	.LLST61:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 272


 9762 08e3 02000000 		.4byte	.LVL200
 9763 08e7 20000000 		.4byte	.LVL202
 9764 08eb 0200     		.2byte	0x2
 9765 08ed 30       		.byte	0x30
 9766 08ee 9F       		.byte	0x9f
 9767 08ef 20000000 		.4byte	.LVL202
 9768 08f3 6A000000 		.4byte	.LVL207
 9769 08f7 0100     		.2byte	0x1
 9770 08f9 54       		.byte	0x54
 9771 08fa 6A000000 		.4byte	.LVL207
 9772 08fe 6C000000 		.4byte	.LVL208
 9773 0902 0200     		.2byte	0x2
 9774 0904 30       		.byte	0x30
 9775 0905 9F       		.byte	0x9f
 9776 0906 6C000000 		.4byte	.LVL208
 9777 090a 80000000 		.4byte	.LVL210
 9778 090e 0100     		.2byte	0x1
 9779 0910 54       		.byte	0x54
 9780 0911 AE000000 		.4byte	.LVL216
 9781 0915 B2000000 		.4byte	.LVL217
 9782 0919 0200     		.2byte	0x2
 9783 091b 30       		.byte	0x30
 9784 091c 9F       		.byte	0x9f
 9785 091d 00000000 		.4byte	0
 9786 0921 00000000 		.4byte	0
 9787              	.LLST62:
 9788 0925 02000000 		.4byte	.LVL200
 9789 0929 A6000000 		.4byte	.LVL213
 9790 092d 0200     		.2byte	0x2
 9791 092f 30       		.byte	0x30
 9792 0930 9F       		.byte	0x9f
 9793 0931 A6000000 		.4byte	.LVL213
 9794 0935 AE000000 		.4byte	.LVL216
 9795 0939 0200     		.2byte	0x2
 9796 093b 31       		.byte	0x31
 9797 093c 9F       		.byte	0x9f
 9798 093d AE000000 		.4byte	.LVL216
 9799 0941 B4000000 		.4byte	.LVL218
 9800 0945 0200     		.2byte	0x2
 9801 0947 30       		.byte	0x30
 9802 0948 9F       		.byte	0x9f
 9803 0949 B4000000 		.4byte	.LVL218
 9804 094d BA000000 		.4byte	.LVL220
 9805 0951 0100     		.2byte	0x1
 9806 0953 54       		.byte	0x54
 9807 0954 BA000000 		.4byte	.LVL220
 9808 0958 C8000000 		.4byte	.LFE49
 9809 095c 0100     		.2byte	0x1
 9810 095e 50       		.byte	0x50
 9811 095f 00000000 		.4byte	0
 9812 0963 00000000 		.4byte	0
 9813              	.LLST63:
 9814 0967 80000000 		.4byte	.LVL210
 9815 096b AC000000 		.4byte	.LVL215
 9816 096f 0100     		.2byte	0x1
 9817 0971 54       		.byte	0x54
 9818 0972 B2000000 		.4byte	.LVL217
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 273


 9819 0976 B4000000 		.4byte	.LVL218
 9820 097a 0100     		.2byte	0x1
 9821 097c 54       		.byte	0x54
 9822 097d 00000000 		.4byte	0
 9823 0981 00000000 		.4byte	0
 9824              	.LLST64:
 9825 0985 00000000 		.4byte	.LVL221
 9826 0989 09000000 		.4byte	.LVL223-1
 9827 098d 0100     		.2byte	0x1
 9828 098f 50       		.byte	0x50
 9829 0990 09000000 		.4byte	.LVL223-1
 9830 0994 56000000 		.4byte	.LVL233
 9831 0998 0100     		.2byte	0x1
 9832 099a 55       		.byte	0x55
 9833 099b 56000000 		.4byte	.LVL233
 9834 099f 5C000000 		.4byte	.LFE36
 9835 09a3 0400     		.2byte	0x4
 9836 09a5 F3       		.byte	0xf3
 9837 09a6 01       		.uleb128 0x1
 9838 09a7 50       		.byte	0x50
 9839 09a8 9F       		.byte	0x9f
 9840 09a9 00000000 		.4byte	0
 9841 09ad 00000000 		.4byte	0
 9842              	.LLST65:
 9843 09b1 00000000 		.4byte	.LVL221
 9844 09b5 09000000 		.4byte	.LVL223-1
 9845 09b9 0100     		.2byte	0x1
 9846 09bb 51       		.byte	0x51
 9847 09bc 09000000 		.4byte	.LVL223-1
 9848 09c0 56000000 		.4byte	.LVL232
 9849 09c4 0100     		.2byte	0x1
 9850 09c6 54       		.byte	0x54
 9851 09c7 56000000 		.4byte	.LVL232
 9852 09cb 5C000000 		.4byte	.LFE36
 9853 09cf 0400     		.2byte	0x4
 9854 09d1 F3       		.byte	0xf3
 9855 09d2 01       		.uleb128 0x1
 9856 09d3 51       		.byte	0x51
 9857 09d4 9F       		.byte	0x9f
 9858 09d5 00000000 		.4byte	0
 9859 09d9 00000000 		.4byte	0
 9860              	.LLST66:
 9861 09dd 12000000 		.4byte	.LVL225
 9862 09e1 46000000 		.4byte	.LVL228
 9863 09e5 0100     		.2byte	0x1
 9864 09e7 51       		.byte	0x51
 9865 09e8 46000000 		.4byte	.LVL228
 9866 09ec 49000000 		.4byte	.LVL229-1
 9867 09f0 0200     		.2byte	0x2
 9868 09f2 75       		.byte	0x75
 9869 09f3 00       		.sleb128 0
 9870 09f4 00000000 		.4byte	0
 9871 09f8 00000000 		.4byte	0
 9872              	.LLST67:
 9873 09fc 4E000000 		.4byte	.LVL230
 9874 0a00 55000000 		.4byte	.LVL231-1
 9875 0a04 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 274


 9876 0a06 50       		.byte	0x50
 9877 0a07 00000000 		.4byte	0
 9878 0a0b 00000000 		.4byte	0
 9879              	.LLST68:
 9880 0a0f 06000000 		.4byte	.LVL222
 9881 0a13 3C000000 		.4byte	.LVL226
 9882 0a17 0200     		.2byte	0x2
 9883 0a19 30       		.byte	0x30
 9884 0a1a 9F       		.byte	0x9f
 9885 0a1b 3C000000 		.4byte	.LVL226
 9886 0a1f 49000000 		.4byte	.LVL229-1
 9887 0a23 0100     		.2byte	0x1
 9888 0a25 53       		.byte	0x53
 9889 0a26 00000000 		.4byte	0
 9890 0a2a 00000000 		.4byte	0
 9891              	.LLST69:
 9892 0a2e 0E000000 		.4byte	.LVL224
 9893 0a32 44000000 		.4byte	.LVL227
 9894 0a36 0100     		.2byte	0x1
 9895 0a38 50       		.byte	0x50
 9896 0a39 00000000 		.4byte	0
 9897 0a3d 00000000 		.4byte	0
 9898              	.LLST70:
 9899 0a41 00000000 		.4byte	.LVL234
 9900 0a45 09000000 		.4byte	.LVL236-1
 9901 0a49 0100     		.2byte	0x1
 9902 0a4b 50       		.byte	0x50
 9903 0a4c 09000000 		.4byte	.LVL236-1
 9904 0a50 18000000 		.4byte	.LVL239
 9905 0a54 0100     		.2byte	0x1
 9906 0a56 54       		.byte	0x54
 9907 0a57 18000000 		.4byte	.LVL239
 9908 0a5b 1A000000 		.4byte	.LVL240
 9909 0a5f 0100     		.2byte	0x1
 9910 0a61 50       		.byte	0x50
 9911 0a62 1A000000 		.4byte	.LVL240
 9912 0a66 22000000 		.4byte	.LVL242
 9913 0a6a 0100     		.2byte	0x1
 9914 0a6c 54       		.byte	0x54
 9915 0a6d 22000000 		.4byte	.LVL242
 9916 0a71 24000000 		.4byte	.LFE37
 9917 0a75 0400     		.2byte	0x4
 9918 0a77 F3       		.byte	0xf3
 9919 0a78 01       		.uleb128 0x1
 9920 0a79 50       		.byte	0x50
 9921 0a7a 9F       		.byte	0x9f
 9922 0a7b 00000000 		.4byte	0
 9923 0a7f 00000000 		.4byte	0
 9924              	.LLST71:
 9925 0a83 04000000 		.4byte	.LVL235
 9926 0a87 16000000 		.4byte	.LVL238
 9927 0a8b 0200     		.2byte	0x2
 9928 0a8d 30       		.byte	0x30
 9929 0a8e 9F       		.byte	0x9f
 9930 0a8f 16000000 		.4byte	.LVL238
 9931 0a93 18000000 		.4byte	.LVL239
 9932 0a97 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 275


 9933 0a99 50       		.byte	0x50
 9934 0a9a 18000000 		.4byte	.LVL239
 9935 0a9e 1A000000 		.4byte	.LVL240
 9936 0aa2 0200     		.2byte	0x2
 9937 0aa4 30       		.byte	0x30
 9938 0aa5 9F       		.byte	0x9f
 9939 0aa6 1A000000 		.4byte	.LVL240
 9940 0aaa 21000000 		.4byte	.LVL241-1
 9941 0aae 0100     		.2byte	0x1
 9942 0ab0 50       		.byte	0x50
 9943 0ab1 00000000 		.4byte	0
 9944 0ab5 00000000 		.4byte	0
 9945              	.LLST72:
 9946 0ab9 1E000000 		.4byte	.LVL243
 9947 0abd 36000000 		.4byte	.LVL244
 9948 0ac1 0100     		.2byte	0x1
 9949 0ac3 53       		.byte	0x53
 9950 0ac4 00000000 		.4byte	0
 9951 0ac8 00000000 		.4byte	0
 9952              	.LLST73:
 9953 0acc 1E000000 		.4byte	.LVL243
 9954 0ad0 A0000000 		.4byte	.LVL249
 9955 0ad4 0600     		.2byte	0x6
 9956 0ad6 9E       		.byte	0x9e
 9957 0ad7 04       		.uleb128 0x4
 9958 0ad8 A5A5A5A5 		.4byte	0xa5a5a5a5
 9959 0adc 00000000 		.4byte	0
 9960 0ae0 00000000 		.4byte	0
 9961              	.LLST74:
 9962 0ae4 4A000000 		.4byte	.LVL246
 9963 0ae8 A0000000 		.4byte	.LVL249
 9964 0aec 0100     		.2byte	0x1
 9965 0aee 53       		.byte	0x53
 9966 0aef 00000000 		.4byte	0
 9967 0af3 00000000 		.4byte	0
 9968              	.LLST75:
 9969 0af7 5E000000 		.4byte	.LVL248
 9970 0afb A0000000 		.4byte	.LVL249
 9971 0aff 0B00     		.2byte	0xb
 9972 0b01 73       		.byte	0x73
 9973 0b02 00       		.sleb128 0
 9974 0b03 44       		.byte	0x44
 9975 0b04 1E       		.byte	0x1e
 9976 0b05 03       		.byte	0x3
 9977 0b06 30000000 		.4byte	pxReadyTasksLists
 9978 0b0a 22       		.byte	0x22
 9979 0b0b 9F       		.byte	0x9f
 9980 0b0c 00000000 		.4byte	0
 9981 0b10 00000000 		.4byte	0
 9982              	.LLST76:
 9983 0b14 00000000 		.4byte	.LVL250
 9984 0b18 07000000 		.4byte	.LVL251-1
 9985 0b1c 0100     		.2byte	0x1
 9986 0b1e 50       		.byte	0x50
 9987 0b1f 07000000 		.4byte	.LVL251-1
 9988 0b23 10000000 		.4byte	.LVL252
 9989 0b27 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 276


 9990 0b29 54       		.byte	0x54
 9991 0b2a 00000000 		.4byte	0
 9992 0b2e 00000000 		.4byte	0
 9993              	.LLST77:
 9994 0b32 10000000 		.4byte	.LVL252
 9995 0b36 82000000 		.4byte	.LVL262
 9996 0b3a 0100     		.2byte	0x1
 9997 0b3c 54       		.byte	0x54
 9998 0b3d 82000000 		.4byte	.LVL262
 9999 0b41 82000000 		.4byte	.LVL263
 10000 0b45 0300     		.2byte	0x3
 10001 0b47 75       		.byte	0x75
 10002 0b48 7C       		.sleb128 -4
 10003 0b49 9F       		.byte	0x9f
 10004 0b4a 00000000 		.4byte	0
 10005 0b4e 00000000 		.4byte	0
 10006              	.LLST78:
 10007 0b52 00000000 		.4byte	.LVL264
 10008 0b56 0D000000 		.4byte	.LVL266-1
 10009 0b5a 0100     		.2byte	0x1
 10010 0b5c 50       		.byte	0x50
 10011 0b5d 0D000000 		.4byte	.LVL266-1
 10012 0b61 1C000000 		.4byte	.LFE56
 10013 0b65 0400     		.2byte	0x4
 10014 0b67 F3       		.byte	0xf3
 10015 0b68 01       		.uleb128 0x1
 10016 0b69 50       		.byte	0x50
 10017 0b6a 9F       		.byte	0x9f
 10018 0b6b 00000000 		.4byte	0
 10019 0b6f 00000000 		.4byte	0
 10020              	.LLST79:
 10021 0b73 00000000 		.4byte	.LVL264
 10022 0b77 08000000 		.4byte	.LVL265
 10023 0b7b 0100     		.2byte	0x1
 10024 0b7d 51       		.byte	0x51
 10025 0b7e 08000000 		.4byte	.LVL265
 10026 0b82 16000000 		.4byte	.LVL268
 10027 0b86 0100     		.2byte	0x1
 10028 0b88 54       		.byte	0x54
 10029 0b89 16000000 		.4byte	.LVL268
 10030 0b8d 1C000000 		.4byte	.LFE56
 10031 0b91 0400     		.2byte	0x4
 10032 0b93 F3       		.byte	0xf3
 10033 0b94 01       		.uleb128 0x1
 10034 0b95 51       		.byte	0x51
 10035 0b96 9F       		.byte	0x9f
 10036 0b97 00000000 		.4byte	0
 10037 0b9b 00000000 		.4byte	0
 10038              	.LLST80:
 10039 0b9f 00000000 		.4byte	.LVL269
 10040 0ba3 17000000 		.4byte	.LVL272-1
 10041 0ba7 0100     		.2byte	0x1
 10042 0ba9 50       		.byte	0x50
 10043 0baa 17000000 		.4byte	.LVL272-1
 10044 0bae 28000000 		.4byte	.LFE57
 10045 0bb2 0400     		.2byte	0x4
 10046 0bb4 F3       		.byte	0xf3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 277


 10047 0bb5 01       		.uleb128 0x1
 10048 0bb6 50       		.byte	0x50
 10049 0bb7 9F       		.byte	0x9f
 10050 0bb8 00000000 		.4byte	0
 10051 0bbc 00000000 		.4byte	0
 10052              	.LLST81:
 10053 0bc0 00000000 		.4byte	.LVL269
 10054 0bc4 0E000000 		.4byte	.LVL271
 10055 0bc8 0100     		.2byte	0x1
 10056 0bca 51       		.byte	0x51
 10057 0bcb 0E000000 		.4byte	.LVL271
 10058 0bcf 28000000 		.4byte	.LFE57
 10059 0bd3 0400     		.2byte	0x4
 10060 0bd5 F3       		.byte	0xf3
 10061 0bd6 01       		.uleb128 0x1
 10062 0bd7 51       		.byte	0x51
 10063 0bd8 9F       		.byte	0x9f
 10064 0bd9 00000000 		.4byte	0
 10065 0bdd 00000000 		.4byte	0
 10066              	.LLST82:
 10067 0be1 00000000 		.4byte	.LVL269
 10068 0be5 08000000 		.4byte	.LVL270
 10069 0be9 0100     		.2byte	0x1
 10070 0beb 52       		.byte	0x52
 10071 0bec 08000000 		.4byte	.LVL270
 10072 0bf0 20000000 		.4byte	.LVL274
 10073 0bf4 0100     		.2byte	0x1
 10074 0bf6 54       		.byte	0x54
 10075 0bf7 20000000 		.4byte	.LVL274
 10076 0bfb 28000000 		.4byte	.LFE57
 10077 0bff 0400     		.2byte	0x4
 10078 0c01 F3       		.byte	0xf3
 10079 0c02 01       		.uleb128 0x1
 10080 0c03 52       		.byte	0x52
 10081 0c04 9F       		.byte	0x9f
 10082 0c05 00000000 		.4byte	0
 10083 0c09 00000000 		.4byte	0
 10084              	.LLST83:
 10085 0c0d 00000000 		.4byte	.LVL275
 10086 0c11 0C000000 		.4byte	.LVL277
 10087 0c15 0100     		.2byte	0x1
 10088 0c17 50       		.byte	0x50
 10089 0c18 0C000000 		.4byte	.LVL277
 10090 0c1c 74000000 		.4byte	.LFE58
 10091 0c20 0400     		.2byte	0x4
 10092 0c22 F3       		.byte	0xf3
 10093 0c23 01       		.uleb128 0x1
 10094 0c24 50       		.byte	0x50
 10095 0c25 9F       		.byte	0x9f
 10096 0c26 00000000 		.4byte	0
 10097 0c2a 00000000 		.4byte	0
 10098              	.LLST84:
 10099 0c2e 06000000 		.4byte	.LVL276
 10100 0c32 64000000 		.4byte	.LVL285
 10101 0c36 0100     		.2byte	0x1
 10102 0c38 54       		.byte	0x54
 10103 0c39 00000000 		.4byte	0
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 278


 10104 0c3d 00000000 		.4byte	0
 10105              	.LLST85:
 10106 0c41 58000000 		.4byte	.LVL282
 10107 0c45 62000000 		.4byte	.LVL283
 10108 0c49 0200     		.2byte	0x2
 10109 0c4b 31       		.byte	0x31
 10110 0c4c 9F       		.byte	0x9f
 10111 0c4d 64000000 		.4byte	.LVL284
 10112 0c51 74000000 		.4byte	.LFE58
 10113 0c55 0100     		.2byte	0x1
 10114 0c57 50       		.byte	0x50
 10115 0c58 00000000 		.4byte	0
 10116 0c5c 00000000 		.4byte	0
 10117              	.LLST86:
 10118 0c60 00000000 		.4byte	.LVL286
 10119 0c64 0F000000 		.4byte	.LVL289-1
 10120 0c68 0100     		.2byte	0x1
 10121 0c6a 50       		.byte	0x50
 10122 0c6b 0F000000 		.4byte	.LVL289-1
 10123 0c6f 58000000 		.4byte	.LFE59
 10124 0c73 0400     		.2byte	0x4
 10125 0c75 F3       		.byte	0xf3
 10126 0c76 01       		.uleb128 0x1
 10127 0c77 50       		.byte	0x50
 10128 0c78 9F       		.byte	0x9f
 10129 0c79 00000000 		.4byte	0
 10130 0c7d 00000000 		.4byte	0
 10131              	.LLST87:
 10132 0c81 00000000 		.4byte	.LVL286
 10133 0c85 08000000 		.4byte	.LVL287
 10134 0c89 0100     		.2byte	0x1
 10135 0c8b 51       		.byte	0x51
 10136 0c8c 08000000 		.4byte	.LVL287
 10137 0c90 58000000 		.4byte	.LFE59
 10138 0c94 0400     		.2byte	0x4
 10139 0c96 F3       		.byte	0xf3
 10140 0c97 01       		.uleb128 0x1
 10141 0c98 51       		.byte	0x51
 10142 0c99 9F       		.byte	0x9f
 10143 0c9a 00000000 		.4byte	0
 10144 0c9e 00000000 		.4byte	0
 10145              	.LLST88:
 10146 0ca2 0C000000 		.4byte	.LVL288
 10147 0ca6 4A000000 		.4byte	.LVL292
 10148 0caa 0100     		.2byte	0x1
 10149 0cac 55       		.byte	0x55
 10150 0cad 00000000 		.4byte	0
 10151 0cb1 00000000 		.4byte	0
 10152              	.LLST89:
 10153 0cb5 00000000 		.4byte	.LVL293
 10154 0cb9 07000000 		.4byte	.LVL294-1
 10155 0cbd 0100     		.2byte	0x1
 10156 0cbf 50       		.byte	0x50
 10157 0cc0 07000000 		.4byte	.LVL294-1
 10158 0cc4 16000000 		.4byte	.LVL296
 10159 0cc8 0100     		.2byte	0x1
 10160 0cca 54       		.byte	0x54
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 279


 10161 0ccb 16000000 		.4byte	.LVL296
 10162 0ccf 1C000000 		.4byte	.LFE60
 10163 0cd3 0400     		.2byte	0x4
 10164 0cd5 F3       		.byte	0xf3
 10165 0cd6 01       		.uleb128 0x1
 10166 0cd7 50       		.byte	0x50
 10167 0cd8 9F       		.byte	0x9f
 10168 0cd9 00000000 		.4byte	0
 10169 0cdd 00000000 		.4byte	0
 10170              	.LLST90:
 10171 0ce1 00000000 		.4byte	.LVL298
 10172 0ce5 09000000 		.4byte	.LVL299-1
 10173 0ce9 0100     		.2byte	0x1
 10174 0ceb 50       		.byte	0x50
 10175 0cec 09000000 		.4byte	.LVL299-1
 10176 0cf0 36000000 		.4byte	.LVL304
 10177 0cf4 0100     		.2byte	0x1
 10178 0cf6 54       		.byte	0x54
 10179 0cf7 36000000 		.4byte	.LVL304
 10180 0cfb 38000000 		.4byte	.LVL305
 10181 0cff 0400     		.2byte	0x4
 10182 0d01 F3       		.byte	0xf3
 10183 0d02 01       		.uleb128 0x1
 10184 0d03 50       		.byte	0x50
 10185 0d04 9F       		.byte	0x9f
 10186 0d05 38000000 		.4byte	.LVL305
 10187 0d09 3E000000 		.4byte	.LVL307
 10188 0d0d 0100     		.2byte	0x1
 10189 0d0f 54       		.byte	0x54
 10190 0d10 3E000000 		.4byte	.LVL307
 10191 0d14 40000000 		.4byte	.LVL308
 10192 0d18 0400     		.2byte	0x4
 10193 0d1a F3       		.byte	0xf3
 10194 0d1b 01       		.uleb128 0x1
 10195 0d1c 50       		.byte	0x50
 10196 0d1d 9F       		.byte	0x9f
 10197 0d1e 40000000 		.4byte	.LVL308
 10198 0d22 42000000 		.4byte	.LVL309
 10199 0d26 0100     		.2byte	0x1
 10200 0d28 54       		.byte	0x54
 10201 0d29 42000000 		.4byte	.LVL309
 10202 0d2d 44000000 		.4byte	.LVL310
 10203 0d31 0400     		.2byte	0x4
 10204 0d33 F3       		.byte	0xf3
 10205 0d34 01       		.uleb128 0x1
 10206 0d35 50       		.byte	0x50
 10207 0d36 9F       		.byte	0x9f
 10208 0d37 44000000 		.4byte	.LVL310
 10209 0d3b 46000000 		.4byte	.LVL311
 10210 0d3f 0100     		.2byte	0x1
 10211 0d41 54       		.byte	0x54
 10212 0d42 46000000 		.4byte	.LVL311
 10213 0d46 54000000 		.4byte	.LFE62
 10214 0d4a 0400     		.2byte	0x4
 10215 0d4c F3       		.byte	0xf3
 10216 0d4d 01       		.uleb128 0x1
 10217 0d4e 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 280


 10218 0d4f 9F       		.byte	0x9f
 10219 0d50 00000000 		.4byte	0
 10220 0d54 00000000 		.4byte	0
 10221              	.LLST91:
 10222 0d58 00000000 		.4byte	.LVL298
 10223 0d5c 09000000 		.4byte	.LVL299-1
 10224 0d60 0100     		.2byte	0x1
 10225 0d62 51       		.byte	0x51
 10226 0d63 09000000 		.4byte	.LVL299-1
 10227 0d67 4C000000 		.4byte	.LVL314
 10228 0d6b 0100     		.2byte	0x1
 10229 0d6d 55       		.byte	0x55
 10230 0d6e 4C000000 		.4byte	.LVL314
 10231 0d72 54000000 		.4byte	.LFE62
 10232 0d76 0400     		.2byte	0x4
 10233 0d78 F3       		.byte	0xf3
 10234 0d79 01       		.uleb128 0x1
 10235 0d7a 51       		.byte	0x51
 10236 0d7b 9F       		.byte	0x9f
 10237 0d7c 00000000 		.4byte	0
 10238 0d80 00000000 		.4byte	0
 10239              	.LLST92:
 10240 0d84 34000000 		.4byte	.LVL303
 10241 0d88 38000000 		.4byte	.LVL305
 10242 0d8c 0200     		.2byte	0x2
 10243 0d8e 30       		.byte	0x30
 10244 0d8f 9F       		.byte	0x9f
 10245 0d90 3C000000 		.4byte	.LVL306
 10246 0d94 40000000 		.4byte	.LVL308
 10247 0d98 0200     		.2byte	0x2
 10248 0d9a 31       		.byte	0x31
 10249 0d9b 9F       		.byte	0x9f
 10250 0d9c 46000000 		.4byte	.LVL311
 10251 0da0 4C000000 		.4byte	.LVL313
 10252 0da4 0100     		.2byte	0x1
 10253 0da6 54       		.byte	0x54
 10254 0da7 4C000000 		.4byte	.LVL313
 10255 0dab 54000000 		.4byte	.LFE62
 10256 0daf 0100     		.2byte	0x1
 10257 0db1 50       		.byte	0x50
 10258 0db2 00000000 		.4byte	0
 10259 0db6 00000000 		.4byte	0
 10260              	.LLST93:
 10261 0dba 0E000000 		.4byte	.LVL300
 10262 0dbe 33000000 		.4byte	.LVL303-1
 10263 0dc2 0100     		.2byte	0x1
 10264 0dc4 51       		.byte	0x51
 10265 0dc5 38000000 		.4byte	.LVL305
 10266 0dc9 46000000 		.4byte	.LVL311
 10267 0dcd 0100     		.2byte	0x1
 10268 0dcf 51       		.byte	0x51
 10269 0dd0 00000000 		.4byte	0
 10270 0dd4 00000000 		.4byte	0
 10271              	.LLST94:
 10272 0dd8 12000000 		.4byte	.LVL301
 10273 0ddc 30000000 		.4byte	.LVL302
 10274 0de0 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 281


 10275 0de2 50       		.byte	0x50
 10276 0de3 30000000 		.4byte	.LVL302
 10277 0de7 33000000 		.4byte	.LVL303-1
 10278 0deb 0600     		.2byte	0x6
 10279 0ded 71       		.byte	0x71
 10280 0dee 00       		.sleb128 0
 10281 0def 72       		.byte	0x72
 10282 0df0 00       		.sleb128 0
 10283 0df1 1C       		.byte	0x1c
 10284 0df2 9F       		.byte	0x9f
 10285 0df3 38000000 		.4byte	.LVL305
 10286 0df7 46000000 		.4byte	.LVL311
 10287 0dfb 0100     		.2byte	0x1
 10288 0dfd 50       		.byte	0x50
 10289 0dfe 00000000 		.4byte	0
 10290 0e02 00000000 		.4byte	0
 10291              	.LLST95:
 10292 0e06 00000000 		.4byte	.LVL315
 10293 0e0a 0C000000 		.4byte	.LVL316
 10294 0e0e 0100     		.2byte	0x1
 10295 0e10 50       		.byte	0x50
 10296 0e11 00000000 		.4byte	0
 10297 0e15 00000000 		.4byte	0
 10298              	.LLST96:
 10299 0e19 00000000 		.4byte	.LVL315
 10300 0e1d 0E000000 		.4byte	.LVL317
 10301 0e21 0100     		.2byte	0x1
 10302 0e23 51       		.byte	0x51
 10303 0e24 0E000000 		.4byte	.LVL317
 10304 0e28 10000000 		.4byte	.LVL318
 10305 0e2c 0300     		.2byte	0x3
 10306 0e2e 71       		.byte	0x71
 10307 0e2f 6E       		.sleb128 -18
 10308 0e30 9F       		.byte	0x9f
 10309 0e31 10000000 		.4byte	.LVL318
 10310 0e35 1C000000 		.4byte	.LFE65
 10311 0e39 0400     		.2byte	0x4
 10312 0e3b F3       		.byte	0xf3
 10313 0e3c 01       		.uleb128 0x1
 10314 0e3d 51       		.byte	0x51
 10315 0e3e 9F       		.byte	0x9f
 10316 0e3f 00000000 		.4byte	0
 10317 0e43 00000000 		.4byte	0
 10318              	.LLST97:
 10319 0e47 0C000000 		.4byte	.LVL316
 10320 0e4b 12000000 		.4byte	.LVL319
 10321 0e4f 0100     		.2byte	0x1
 10322 0e51 50       		.byte	0x50
 10323 0e52 00000000 		.4byte	0
 10324 0e56 00000000 		.4byte	0
 10325              	.LLST98:
 10326 0e5a 00000000 		.4byte	.LVL320
 10327 0e5e 0C000000 		.4byte	.LVL321
 10328 0e62 0100     		.2byte	0x1
 10329 0e64 50       		.byte	0x50
 10330 0e65 16000000 		.4byte	.LVL326
 10331 0e69 18000000 		.4byte	.LVL327
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 282


 10332 0e6d 0100     		.2byte	0x1
 10333 0e6f 50       		.byte	0x50
 10334 0e70 00000000 		.4byte	0
 10335 0e74 00000000 		.4byte	0
 10336              	.LLST99:
 10337 0e78 00000000 		.4byte	.LVL320
 10338 0e7c 0E000000 		.4byte	.LVL322
 10339 0e80 0100     		.2byte	0x1
 10340 0e82 51       		.byte	0x51
 10341 0e83 0E000000 		.4byte	.LVL322
 10342 0e87 10000000 		.4byte	.LVL323
 10343 0e8b 0300     		.2byte	0x3
 10344 0e8d 71       		.byte	0x71
 10345 0e8e 6E       		.sleb128 -18
 10346 0e8f 9F       		.byte	0x9f
 10347 0e90 10000000 		.4byte	.LVL323
 10348 0e94 16000000 		.4byte	.LVL326
 10349 0e98 0400     		.2byte	0x4
 10350 0e9a F3       		.byte	0xf3
 10351 0e9b 01       		.uleb128 0x1
 10352 0e9c 51       		.byte	0x51
 10353 0e9d 9F       		.byte	0x9f
 10354 0e9e 16000000 		.4byte	.LVL326
 10355 0ea2 18000000 		.4byte	.LVL327
 10356 0ea6 0100     		.2byte	0x1
 10357 0ea8 51       		.byte	0x51
 10358 0ea9 18000000 		.4byte	.LVL327
 10359 0ead 20000000 		.4byte	.LFE66
 10360 0eb1 0400     		.2byte	0x4
 10361 0eb3 F3       		.byte	0xf3
 10362 0eb4 01       		.uleb128 0x1
 10363 0eb5 51       		.byte	0x51
 10364 0eb6 9F       		.byte	0x9f
 10365 0eb7 00000000 		.4byte	0
 10366 0ebb 00000000 		.4byte	0
 10367              	.LLST100:
 10368 0ebf 00000000 		.4byte	.LVL320
 10369 0ec3 14000000 		.4byte	.LVL325
 10370 0ec7 0200     		.2byte	0x2
 10371 0ec9 30       		.byte	0x30
 10372 0eca 9F       		.byte	0x9f
 10373 0ecb 14000000 		.4byte	.LVL325
 10374 0ecf 16000000 		.4byte	.LVL326
 10375 0ed3 0100     		.2byte	0x1
 10376 0ed5 50       		.byte	0x50
 10377 0ed6 16000000 		.4byte	.LVL326
 10378 0eda 18000000 		.4byte	.LVL327
 10379 0ede 0200     		.2byte	0x2
 10380 0ee0 30       		.byte	0x30
 10381 0ee1 9F       		.byte	0x9f
 10382 0ee2 18000000 		.4byte	.LVL327
 10383 0ee6 20000000 		.4byte	.LFE66
 10384 0eea 0100     		.2byte	0x1
 10385 0eec 50       		.byte	0x50
 10386 0eed 00000000 		.4byte	0
 10387 0ef1 00000000 		.4byte	0
 10388              	.LLST101:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 283


 10389 0ef5 0C000000 		.4byte	.LVL321
 10390 0ef9 12000000 		.4byte	.LVL324
 10391 0efd 0100     		.2byte	0x1
 10392 0eff 50       		.byte	0x50
 10393 0f00 00000000 		.4byte	0
 10394 0f04 00000000 		.4byte	0
 10395              	.LLST102:
 10396 0f08 00000000 		.4byte	.LVL328
 10397 0f0c 0A000000 		.4byte	.LVL329
 10398 0f10 0100     		.2byte	0x1
 10399 0f12 50       		.byte	0x50
 10400 0f13 00000000 		.4byte	0
 10401 0f17 00000000 		.4byte	0
 10402              	.LLST103:
 10403 0f1b 0A000000 		.4byte	.LVL329
 10404 0f1f 0C000000 		.4byte	.LVL330
 10405 0f23 0100     		.2byte	0x1
 10406 0f25 50       		.byte	0x50
 10407 0f26 00000000 		.4byte	0
 10408 0f2a 00000000 		.4byte	0
 10409              	.LLST104:
 10410 0f2e 0C000000 		.4byte	.LVL330
 10411 0f32 0F000000 		.4byte	.LVL331-1
 10412 0f36 0100     		.2byte	0x1
 10413 0f38 50       		.byte	0x50
 10414 0f39 00000000 		.4byte	0
 10415 0f3d 00000000 		.4byte	0
 10416              	.LLST105:
 10417 0f41 00000000 		.4byte	.LVL334
 10418 0f45 44000000 		.4byte	.LVL336
 10419 0f49 0100     		.2byte	0x1
 10420 0f4b 50       		.byte	0x50
 10421 0f4c 44000000 		.4byte	.LVL336
 10422 0f50 70000000 		.4byte	.LVL339
 10423 0f54 0100     		.2byte	0x1
 10424 0f56 54       		.byte	0x54
 10425 0f57 70000000 		.4byte	.LVL339
 10426 0f5b 7A000000 		.4byte	.LVL340
 10427 0f5f 0100     		.2byte	0x1
 10428 0f61 50       		.byte	0x50
 10429 0f62 7A000000 		.4byte	.LVL340
 10430 0f66 7C000000 		.4byte	.LVL341
 10431 0f6a 0100     		.2byte	0x1
 10432 0f6c 54       		.byte	0x54
 10433 0f6d 7C000000 		.4byte	.LVL341
 10434 0f71 8A000000 		.4byte	.LVL342
 10435 0f75 0100     		.2byte	0x1
 10436 0f77 50       		.byte	0x50
 10437 0f78 8A000000 		.4byte	.LVL342
 10438 0f7c 8C000000 		.4byte	.LVL343
 10439 0f80 0100     		.2byte	0x1
 10440 0f82 54       		.byte	0x54
 10441 0f83 8C000000 		.4byte	.LVL343
 10442 0f87 8E000000 		.4byte	.LVL344
 10443 0f8b 0100     		.2byte	0x1
 10444 0f8d 50       		.byte	0x50
 10445 0f8e 8E000000 		.4byte	.LVL344
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 284


 10446 0f92 90000000 		.4byte	.LVL345
 10447 0f96 0100     		.2byte	0x1
 10448 0f98 54       		.byte	0x54
 10449 0f99 90000000 		.4byte	.LVL345
 10450 0f9d 92000000 		.4byte	.LVL346
 10451 0fa1 0100     		.2byte	0x1
 10452 0fa3 50       		.byte	0x50
 10453 0fa4 92000000 		.4byte	.LVL346
 10454 0fa8 92000000 		.4byte	.LVL347
 10455 0fac 0100     		.2byte	0x1
 10456 0fae 54       		.byte	0x54
 10457 0faf 92000000 		.4byte	.LVL347
 10458 0fb3 9C000000 		.4byte	.LFE75
 10459 0fb7 0400     		.2byte	0x4
 10460 0fb9 F3       		.byte	0xf3
 10461 0fba 01       		.uleb128 0x1
 10462 0fbb 50       		.byte	0x50
 10463 0fbc 9F       		.byte	0x9f
 10464 0fbd 00000000 		.4byte	0
 10465 0fc1 00000000 		.4byte	0
 10466              	.LLST106:
 10467 0fc5 04000000 		.4byte	.LVL335
 10468 0fc9 44000000 		.4byte	.LVL336
 10469 0fcd 0100     		.2byte	0x1
 10470 0fcf 50       		.byte	0x50
 10471 0fd0 44000000 		.4byte	.LVL336
 10472 0fd4 70000000 		.4byte	.LVL339
 10473 0fd8 0100     		.2byte	0x1
 10474 0fda 54       		.byte	0x54
 10475 0fdb 70000000 		.4byte	.LVL339
 10476 0fdf 7A000000 		.4byte	.LVL340
 10477 0fe3 0100     		.2byte	0x1
 10478 0fe5 50       		.byte	0x50
 10479 0fe6 7A000000 		.4byte	.LVL340
 10480 0fea 7C000000 		.4byte	.LVL341
 10481 0fee 0100     		.2byte	0x1
 10482 0ff0 54       		.byte	0x54
 10483 0ff1 7C000000 		.4byte	.LVL341
 10484 0ff5 8A000000 		.4byte	.LVL342
 10485 0ff9 0100     		.2byte	0x1
 10486 0ffb 50       		.byte	0x50
 10487 0ffc 8A000000 		.4byte	.LVL342
 10488 1000 8C000000 		.4byte	.LVL343
 10489 1004 0100     		.2byte	0x1
 10490 1006 54       		.byte	0x54
 10491 1007 8C000000 		.4byte	.LVL343
 10492 100b 8E000000 		.4byte	.LVL344
 10493 100f 0100     		.2byte	0x1
 10494 1011 50       		.byte	0x50
 10495 1012 8E000000 		.4byte	.LVL344
 10496 1016 90000000 		.4byte	.LVL345
 10497 101a 0100     		.2byte	0x1
 10498 101c 54       		.byte	0x54
 10499 101d 90000000 		.4byte	.LVL345
 10500 1021 92000000 		.4byte	.LVL346
 10501 1025 0100     		.2byte	0x1
 10502 1027 50       		.byte	0x50
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 285


 10503 1028 92000000 		.4byte	.LVL346
 10504 102c 92000000 		.4byte	.LVL347
 10505 1030 0100     		.2byte	0x1
 10506 1032 54       		.byte	0x54
 10507 1033 92000000 		.4byte	.LVL347
 10508 1037 9C000000 		.4byte	.LFE75
 10509 103b 0400     		.2byte	0x4
 10510 103d F3       		.byte	0xf3
 10511 103e 01       		.uleb128 0x1
 10512 103f 50       		.byte	0x50
 10513 1040 9F       		.byte	0x9f
 10514 1041 00000000 		.4byte	0
 10515 1045 00000000 		.4byte	0
 10516              	.LLST107:
 10517 1049 04000000 		.4byte	.LVL335
 10518 104d 92000000 		.4byte	.LVL346
 10519 1051 0200     		.2byte	0x2
 10520 1053 30       		.byte	0x30
 10521 1054 9F       		.byte	0x9f
 10522 1055 92000000 		.4byte	.LVL346
 10523 1059 9C000000 		.4byte	.LFE75
 10524 105d 0100     		.2byte	0x1
 10525 105f 50       		.byte	0x50
 10526 1060 00000000 		.4byte	0
 10527 1064 00000000 		.4byte	0
 10528              	.LLST108:
 10529 1068 00000000 		.4byte	.LVL348
 10530 106c 1C000000 		.4byte	.LVL350
 10531 1070 0100     		.2byte	0x1
 10532 1072 50       		.byte	0x50
 10533 1073 1C000000 		.4byte	.LVL350
 10534 1077 4C000000 		.4byte	.LVL353
 10535 107b 0100     		.2byte	0x1
 10536 107d 54       		.byte	0x54
 10537 107e 4C000000 		.4byte	.LVL353
 10538 1082 4E000000 		.4byte	.LVL354
 10539 1086 0100     		.2byte	0x1
 10540 1088 50       		.byte	0x50
 10541 1089 4E000000 		.4byte	.LVL354
 10542 108d 50000000 		.4byte	.LVL355
 10543 1091 0100     		.2byte	0x1
 10544 1093 54       		.byte	0x54
 10545 1094 50000000 		.4byte	.LVL355
 10546 1098 52000000 		.4byte	.LVL356
 10547 109c 0100     		.2byte	0x1
 10548 109e 50       		.byte	0x50
 10549 109f 52000000 		.4byte	.LVL356
 10550 10a3 54000000 		.4byte	.LVL357
 10551 10a7 0100     		.2byte	0x1
 10552 10a9 54       		.byte	0x54
 10553 10aa 54000000 		.4byte	.LVL357
 10554 10ae 56000000 		.4byte	.LVL358
 10555 10b2 0100     		.2byte	0x1
 10556 10b4 50       		.byte	0x50
 10557 10b5 56000000 		.4byte	.LVL358
 10558 10b9 56000000 		.4byte	.LVL359
 10559 10bd 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 286


 10560 10bf 54       		.byte	0x54
 10561 10c0 56000000 		.4byte	.LVL359
 10562 10c4 60000000 		.4byte	.LFE76
 10563 10c8 0400     		.2byte	0x4
 10564 10ca F3       		.byte	0xf3
 10565 10cb 01       		.uleb128 0x1
 10566 10cc 50       		.byte	0x50
 10567 10cd 9F       		.byte	0x9f
 10568 10ce 00000000 		.4byte	0
 10569 10d2 00000000 		.4byte	0
 10570              	.LLST109:
 10571 10d6 04000000 		.4byte	.LVL349
 10572 10da 1C000000 		.4byte	.LVL350
 10573 10de 0100     		.2byte	0x1
 10574 10e0 50       		.byte	0x50
 10575 10e1 1C000000 		.4byte	.LVL350
 10576 10e5 4C000000 		.4byte	.LVL353
 10577 10e9 0100     		.2byte	0x1
 10578 10eb 54       		.byte	0x54
 10579 10ec 4C000000 		.4byte	.LVL353
 10580 10f0 4E000000 		.4byte	.LVL354
 10581 10f4 0100     		.2byte	0x1
 10582 10f6 50       		.byte	0x50
 10583 10f7 4E000000 		.4byte	.LVL354
 10584 10fb 50000000 		.4byte	.LVL355
 10585 10ff 0100     		.2byte	0x1
 10586 1101 54       		.byte	0x54
 10587 1102 50000000 		.4byte	.LVL355
 10588 1106 52000000 		.4byte	.LVL356
 10589 110a 0100     		.2byte	0x1
 10590 110c 50       		.byte	0x50
 10591 110d 52000000 		.4byte	.LVL356
 10592 1111 54000000 		.4byte	.LVL357
 10593 1115 0100     		.2byte	0x1
 10594 1117 54       		.byte	0x54
 10595 1118 54000000 		.4byte	.LVL357
 10596 111c 56000000 		.4byte	.LVL358
 10597 1120 0100     		.2byte	0x1
 10598 1122 50       		.byte	0x50
 10599 1123 56000000 		.4byte	.LVL358
 10600 1127 56000000 		.4byte	.LVL359
 10601 112b 0100     		.2byte	0x1
 10602 112d 54       		.byte	0x54
 10603 112e 56000000 		.4byte	.LVL359
 10604 1132 60000000 		.4byte	.LFE76
 10605 1136 0400     		.2byte	0x4
 10606 1138 F3       		.byte	0xf3
 10607 1139 01       		.uleb128 0x1
 10608 113a 50       		.byte	0x50
 10609 113b 9F       		.byte	0x9f
 10610 113c 00000000 		.4byte	0
 10611 1140 00000000 		.4byte	0
 10612              	.LLST110:
 10613 1144 04000000 		.4byte	.LVL349
 10614 1148 48000000 		.4byte	.LVL352
 10615 114c 0200     		.2byte	0x2
 10616 114e 30       		.byte	0x30
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 287


 10617 114f 9F       		.byte	0x9f
 10618 1150 48000000 		.4byte	.LVL352
 10619 1154 4C000000 		.4byte	.LVL353
 10620 1158 0200     		.2byte	0x2
 10621 115a 31       		.byte	0x31
 10622 115b 9F       		.byte	0x9f
 10623 115c 4C000000 		.4byte	.LVL353
 10624 1160 56000000 		.4byte	.LVL358
 10625 1164 0200     		.2byte	0x2
 10626 1166 30       		.byte	0x30
 10627 1167 9F       		.byte	0x9f
 10628 1168 56000000 		.4byte	.LVL358
 10629 116c 60000000 		.4byte	.LFE76
 10630 1170 0100     		.2byte	0x1
 10631 1172 50       		.byte	0x50
 10632 1173 00000000 		.4byte	0
 10633 1177 00000000 		.4byte	0
 10634              	.LLST111:
 10635 117b 00000000 		.4byte	.LVL360
 10636 117f 48000000 		.4byte	.LVL367
 10637 1183 0100     		.2byte	0x1
 10638 1185 50       		.byte	0x50
 10639 1186 48000000 		.4byte	.LVL367
 10640 118a 6C000000 		.4byte	.LVL370
 10641 118e 0100     		.2byte	0x1
 10642 1190 54       		.byte	0x54
 10643 1191 6C000000 		.4byte	.LVL370
 10644 1195 78000000 		.4byte	.LFE77
 10645 1199 0400     		.2byte	0x4
 10646 119b F3       		.byte	0xf3
 10647 119c 01       		.uleb128 0x1
 10648 119d 50       		.byte	0x50
 10649 119e 9F       		.byte	0x9f
 10650 119f 00000000 		.4byte	0
 10651 11a3 00000000 		.4byte	0
 10652              	.LLST112:
 10653 11a7 00000000 		.4byte	.LVL360
 10654 11ab 16000000 		.4byte	.LVL363
 10655 11af 0100     		.2byte	0x1
 10656 11b1 51       		.byte	0x51
 10657 11b2 16000000 		.4byte	.LVL363
 10658 11b6 78000000 		.4byte	.LFE77
 10659 11ba 0400     		.2byte	0x4
 10660 11bc F3       		.byte	0xf3
 10661 11bd 01       		.uleb128 0x1
 10662 11be 51       		.byte	0x51
 10663 11bf 9F       		.byte	0x9f
 10664 11c0 00000000 		.4byte	0
 10665 11c4 00000000 		.4byte	0
 10666              	.LLST113:
 10667 11c8 04000000 		.4byte	.LVL361
 10668 11cc 48000000 		.4byte	.LVL367
 10669 11d0 0100     		.2byte	0x1
 10670 11d2 50       		.byte	0x50
 10671 11d3 48000000 		.4byte	.LVL367
 10672 11d7 6C000000 		.4byte	.LVL370
 10673 11db 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 288


 10674 11dd 54       		.byte	0x54
 10675 11de 6C000000 		.4byte	.LVL370
 10676 11e2 78000000 		.4byte	.LFE77
 10677 11e6 0400     		.2byte	0x4
 10678 11e8 F3       		.byte	0xf3
 10679 11e9 01       		.uleb128 0x1
 10680 11ea 50       		.byte	0x50
 10681 11eb 9F       		.byte	0x9f
 10682 11ec 00000000 		.4byte	0
 10683 11f0 00000000 		.4byte	0
 10684              	.LLST114:
 10685 11f4 1A000000 		.4byte	.LVL364
 10686 11f8 2C000000 		.4byte	.LVL366
 10687 11fc 0100     		.2byte	0x1
 10688 11fe 52       		.byte	0x52
 10689 11ff 00000000 		.4byte	0
 10690 1203 00000000 		.4byte	0
 10691              	.LLST115:
 10692 1207 0E000000 		.4byte	.LVL362
 10693 120b 26000000 		.4byte	.LVL365
 10694 120f 0100     		.2byte	0x1
 10695 1211 53       		.byte	0x53
 10696 1212 26000000 		.4byte	.LVL365
 10697 1216 48000000 		.4byte	.LVL367
 10698 121a 0200     		.2byte	0x2
 10699 121c 70       		.byte	0x70
 10700 121d 2C       		.sleb128 44
 10701 121e 48000000 		.4byte	.LVL367
 10702 1222 4B000000 		.4byte	.LVL368-1
 10703 1226 0200     		.2byte	0x2
 10704 1228 74       		.byte	0x74
 10705 1229 2C       		.sleb128 44
 10706 122a 00000000 		.4byte	0
 10707 122e 00000000 		.4byte	0
 10708              	.LLST116:
 10709 1232 00000000 		.4byte	.LVL372
 10710 1236 09000000 		.4byte	.LVL373-1
 10711 123a 0100     		.2byte	0x1
 10712 123c 50       		.byte	0x50
 10713 123d 09000000 		.4byte	.LVL373-1
 10714 1241 64000000 		.4byte	.LVL381
 10715 1245 0100     		.2byte	0x1
 10716 1247 55       		.byte	0x55
 10717 1248 64000000 		.4byte	.LVL381
 10718 124c 6C000000 		.4byte	.LFE80
 10719 1250 0400     		.2byte	0x4
 10720 1252 F3       		.byte	0xf3
 10721 1253 01       		.uleb128 0x1
 10722 1254 50       		.byte	0x50
 10723 1255 9F       		.byte	0x9f
 10724 1256 00000000 		.4byte	0
 10725 125a 00000000 		.4byte	0
 10726              	.LLST117:
 10727 125e 00000000 		.4byte	.LVL372
 10728 1262 09000000 		.4byte	.LVL373-1
 10729 1266 0100     		.2byte	0x1
 10730 1268 51       		.byte	0x51
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 289


 10731 1269 09000000 		.4byte	.LVL373-1
 10732 126d 3A000000 		.4byte	.LVL378
 10733 1271 0100     		.2byte	0x1
 10734 1273 54       		.byte	0x54
 10735 1274 3A000000 		.4byte	.LVL378
 10736 1278 6C000000 		.4byte	.LFE80
 10737 127c 0400     		.2byte	0x4
 10738 127e F3       		.byte	0xf3
 10739 127f 01       		.uleb128 0x1
 10740 1280 51       		.byte	0x51
 10741 1281 9F       		.byte	0x9f
 10742 1282 00000000 		.4byte	0
 10743 1286 00000000 		.4byte	0
 10744              	.LLST118:
 10745 128a 3A000000 		.4byte	.LVL378
 10746 128e 64000000 		.4byte	.LVL380
 10747 1292 0100     		.2byte	0x1
 10748 1294 54       		.byte	0x54
 10749 1295 64000000 		.4byte	.LVL380
 10750 1299 6C000000 		.4byte	.LFE80
 10751 129d 0100     		.2byte	0x1
 10752 129f 50       		.byte	0x50
 10753 12a0 00000000 		.4byte	0
 10754 12a4 00000000 		.4byte	0
 10755              	.LLST119:
 10756 12a8 00000000 		.4byte	.LVL382
 10757 12ac 0D000000 		.4byte	.LVL383-1
 10758 12b0 0100     		.2byte	0x1
 10759 12b2 50       		.byte	0x50
 10760 12b3 0D000000 		.4byte	.LVL383-1
 10761 12b7 7A000000 		.4byte	.LVL395
 10762 12bb 0100     		.2byte	0x1
 10763 12bd 56       		.byte	0x56
 10764 12be 7A000000 		.4byte	.LVL395
 10765 12c2 80000000 		.4byte	.LFE81
 10766 12c6 0400     		.2byte	0x4
 10767 12c8 F3       		.byte	0xf3
 10768 12c9 01       		.uleb128 0x1
 10769 12ca 50       		.byte	0x50
 10770 12cb 9F       		.byte	0x9f
 10771 12cc 00000000 		.4byte	0
 10772 12d0 00000000 		.4byte	0
 10773              	.LLST120:
 10774 12d4 00000000 		.4byte	.LVL382
 10775 12d8 0D000000 		.4byte	.LVL383-1
 10776 12dc 0100     		.2byte	0x1
 10777 12de 51       		.byte	0x51
 10778 12df 0D000000 		.4byte	.LVL383-1
 10779 12e3 7A000000 		.4byte	.LVL394
 10780 12e7 0100     		.2byte	0x1
 10781 12e9 55       		.byte	0x55
 10782 12ea 7A000000 		.4byte	.LVL394
 10783 12ee 80000000 		.4byte	.LFE81
 10784 12f2 0400     		.2byte	0x4
 10785 12f4 F3       		.byte	0xf3
 10786 12f5 01       		.uleb128 0x1
 10787 12f6 51       		.byte	0x51
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 290


 10788 12f7 9F       		.byte	0x9f
 10789 12f8 00000000 		.4byte	0
 10790 12fc 00000000 		.4byte	0
 10791              	.LLST121:
 10792 1300 00000000 		.4byte	.LVL382
 10793 1304 0D000000 		.4byte	.LVL383-1
 10794 1308 0100     		.2byte	0x1
 10795 130a 52       		.byte	0x52
 10796 130b 0D000000 		.4byte	.LVL383-1
 10797 130f 7A000000 		.4byte	.LVL396
 10798 1313 0100     		.2byte	0x1
 10799 1315 57       		.byte	0x57
 10800 1316 7A000000 		.4byte	.LVL396
 10801 131a 80000000 		.4byte	.LFE81
 10802 131e 0400     		.2byte	0x4
 10803 1320 F3       		.byte	0xf3
 10804 1321 01       		.uleb128 0x1
 10805 1322 52       		.byte	0x52
 10806 1323 9F       		.byte	0x9f
 10807 1324 00000000 		.4byte	0
 10808 1328 00000000 		.4byte	0
 10809              	.LLST122:
 10810 132c 00000000 		.4byte	.LVL382
 10811 1330 0D000000 		.4byte	.LVL383-1
 10812 1334 0100     		.2byte	0x1
 10813 1336 53       		.byte	0x53
 10814 1337 0D000000 		.4byte	.LVL383-1
 10815 133b 66000000 		.4byte	.LVL389
 10816 133f 0100     		.2byte	0x1
 10817 1341 54       		.byte	0x54
 10818 1342 66000000 		.4byte	.LVL389
 10819 1346 68000000 		.4byte	.LVL390
 10820 134a 0400     		.2byte	0x4
 10821 134c F3       		.byte	0xf3
 10822 134d 01       		.uleb128 0x1
 10823 134e 53       		.byte	0x53
 10824 134f 9F       		.byte	0x9f
 10825 1350 68000000 		.4byte	.LVL390
 10826 1354 6A000000 		.4byte	.LVL391
 10827 1358 0100     		.2byte	0x1
 10828 135a 54       		.byte	0x54
 10829 135b 6A000000 		.4byte	.LVL391
 10830 135f 80000000 		.4byte	.LFE81
 10831 1363 0400     		.2byte	0x4
 10832 1365 F3       		.byte	0xf3
 10833 1366 01       		.uleb128 0x1
 10834 1367 53       		.byte	0x53
 10835 1368 9F       		.byte	0x9f
 10836 1369 00000000 		.4byte	0
 10837 136d 00000000 		.4byte	0
 10838              	.LLST123:
 10839 1371 64000000 		.4byte	.LVL388
 10840 1375 68000000 		.4byte	.LVL390
 10841 1379 0200     		.2byte	0x2
 10842 137b 31       		.byte	0x31
 10843 137c 9F       		.byte	0x9f
 10844 137d 6A000000 		.4byte	.LVL391
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 291


 10845 1381 7A000000 		.4byte	.LVL393
 10846 1385 0100     		.2byte	0x1
 10847 1387 54       		.byte	0x54
 10848 1388 7A000000 		.4byte	.LVL393
 10849 138c 80000000 		.4byte	.LFE81
 10850 1390 0100     		.2byte	0x1
 10851 1392 50       		.byte	0x50
 10852 1393 00000000 		.4byte	0
 10853 1397 00000000 		.4byte	0
 10854              	.LLST124:
 10855 139b 00000000 		.4byte	.LVL397
 10856 139f 0D000000 		.4byte	.LVL399-1
 10857 13a3 0100     		.2byte	0x1
 10858 13a5 50       		.byte	0x50
 10859 13a6 0D000000 		.4byte	.LVL399-1
 10860 13aa A2000000 		.4byte	.LVL416
 10861 13ae 0100     		.2byte	0x1
 10862 13b0 54       		.byte	0x54
 10863 13b1 A2000000 		.4byte	.LVL416
 10864 13b5 AC000000 		.4byte	.LFE82
 10865 13b9 0400     		.2byte	0x4
 10866 13bb F3       		.byte	0xf3
 10867 13bc 01       		.uleb128 0x1
 10868 13bd 50       		.byte	0x50
 10869 13be 9F       		.byte	0x9f
 10870 13bf 00000000 		.4byte	0
 10871 13c3 00000000 		.4byte	0
 10872              	.LLST125:
 10873 13c7 00000000 		.4byte	.LVL397
 10874 13cb 0D000000 		.4byte	.LVL399-1
 10875 13cf 0100     		.2byte	0x1
 10876 13d1 51       		.byte	0x51
 10877 13d2 0D000000 		.4byte	.LVL399-1
 10878 13d6 3A000000 		.4byte	.LVL401
 10879 13da 0100     		.2byte	0x1
 10880 13dc 55       		.byte	0x55
 10881 13dd 3A000000 		.4byte	.LVL401
 10882 13e1 40000000 		.4byte	.LVL402
 10883 13e5 0400     		.2byte	0x4
 10884 13e7 F3       		.byte	0xf3
 10885 13e8 01       		.uleb128 0x1
 10886 13e9 51       		.byte	0x51
 10887 13ea 9F       		.byte	0x9f
 10888 13eb 40000000 		.4byte	.LVL402
 10889 13ef 48000000 		.4byte	.LVL403
 10890 13f3 0100     		.2byte	0x1
 10891 13f5 55       		.byte	0x55
 10892 13f6 48000000 		.4byte	.LVL403
 10893 13fa 4A000000 		.4byte	.LVL404
 10894 13fe 0400     		.2byte	0x4
 10895 1400 F3       		.byte	0xf3
 10896 1401 01       		.uleb128 0x1
 10897 1402 51       		.byte	0x51
 10898 1403 9F       		.byte	0x9f
 10899 1404 4A000000 		.4byte	.LVL404
 10900 1408 4E000000 		.4byte	.LVL405
 10901 140c 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 292


 10902 140e 55       		.byte	0x55
 10903 140f 4E000000 		.4byte	.LVL405
 10904 1413 50000000 		.4byte	.LVL406
 10905 1417 0300     		.2byte	0x3
 10906 1419 74       		.byte	0x74
 10907 141a E000     		.sleb128 96
 10908 141c 50000000 		.4byte	.LVL406
 10909 1420 58000000 		.4byte	.LVL407
 10910 1424 0100     		.2byte	0x1
 10911 1426 55       		.byte	0x55
 10912 1427 58000000 		.4byte	.LVL407
 10913 142b 5A000000 		.4byte	.LVL408
 10914 142f 0300     		.2byte	0x3
 10915 1431 74       		.byte	0x74
 10916 1432 E000     		.sleb128 96
 10917 1434 5A000000 		.4byte	.LVL408
 10918 1438 5C000000 		.4byte	.LVL409
 10919 143c 0100     		.2byte	0x1
 10920 143e 55       		.byte	0x55
 10921 143f 5C000000 		.4byte	.LVL409
 10922 1443 5E000000 		.4byte	.LVL410
 10923 1447 0400     		.2byte	0x4
 10924 1449 F3       		.byte	0xf3
 10925 144a 01       		.uleb128 0x1
 10926 144b 51       		.byte	0x51
 10927 144c 9F       		.byte	0x9f
 10928 144d 5E000000 		.4byte	.LVL410
 10929 1451 60000000 		.4byte	.LVL411
 10930 1455 0100     		.2byte	0x1
 10931 1457 55       		.byte	0x55
 10932 1458 60000000 		.4byte	.LVL411
 10933 145c AC000000 		.4byte	.LFE82
 10934 1460 0400     		.2byte	0x4
 10935 1462 F3       		.byte	0xf3
 10936 1463 01       		.uleb128 0x1
 10937 1464 51       		.byte	0x51
 10938 1465 9F       		.byte	0x9f
 10939 1466 00000000 		.4byte	0
 10940 146a 00000000 		.4byte	0
 10941              	.LLST126:
 10942 146e 00000000 		.4byte	.LVL397
 10943 1472 0D000000 		.4byte	.LVL399-1
 10944 1476 0100     		.2byte	0x1
 10945 1478 52       		.byte	0x52
 10946 1479 0D000000 		.4byte	.LVL399-1
 10947 147d AC000000 		.4byte	.LFE82
 10948 1481 0400     		.2byte	0x4
 10949 1483 F3       		.byte	0xf3
 10950 1484 01       		.uleb128 0x1
 10951 1485 52       		.byte	0x52
 10952 1486 9F       		.byte	0x9f
 10953 1487 00000000 		.4byte	0
 10954 148b 00000000 		.4byte	0
 10955              	.LLST127:
 10956 148f 00000000 		.4byte	.LVL397
 10957 1493 0D000000 		.4byte	.LVL399-1
 10958 1497 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 293


 10959 1499 53       		.byte	0x53
 10960 149a 0D000000 		.4byte	.LVL399-1
 10961 149e A2000000 		.4byte	.LVL418
 10962 14a2 0100     		.2byte	0x1
 10963 14a4 57       		.byte	0x57
 10964 14a5 A2000000 		.4byte	.LVL418
 10965 14a9 AC000000 		.4byte	.LFE82
 10966 14ad 0400     		.2byte	0x4
 10967 14af F3       		.byte	0xf3
 10968 14b0 01       		.uleb128 0x1
 10969 14b1 53       		.byte	0x53
 10970 14b2 9F       		.byte	0x9f
 10971 14b3 00000000 		.4byte	0
 10972 14b7 00000000 		.4byte	0
 10973              	.LLST128:
 10974 14bb 0A000000 		.4byte	.LVL398
 10975 14bf 0D000000 		.4byte	.LVL399-1
 10976 14c3 0100     		.2byte	0x1
 10977 14c5 50       		.byte	0x50
 10978 14c6 0D000000 		.4byte	.LVL399-1
 10979 14ca A2000000 		.4byte	.LVL416
 10980 14ce 0100     		.2byte	0x1
 10981 14d0 54       		.byte	0x54
 10982 14d1 A2000000 		.4byte	.LVL416
 10983 14d5 AC000000 		.4byte	.LFE82
 10984 14d9 0400     		.2byte	0x4
 10985 14db F3       		.byte	0xf3
 10986 14dc 01       		.uleb128 0x1
 10987 14dd 50       		.byte	0x50
 10988 14de 9F       		.byte	0x9f
 10989 14df 00000000 		.4byte	0
 10990 14e3 00000000 		.4byte	0
 10991              	.LLST129:
 10992 14e7 0A000000 		.4byte	.LVL398
 10993 14eb 60000000 		.4byte	.LVL411
 10994 14ef 0200     		.2byte	0x2
 10995 14f1 31       		.byte	0x31
 10996 14f2 9F       		.byte	0x9f
 10997 14f3 60000000 		.4byte	.LVL411
 10998 14f7 A2000000 		.4byte	.LVL417
 10999 14fb 0100     		.2byte	0x1
 11000 14fd 55       		.byte	0x55
 11001 14fe A2000000 		.4byte	.LVL417
 11002 1502 AC000000 		.4byte	.LFE82
 11003 1506 0100     		.2byte	0x1
 11004 1508 50       		.byte	0x50
 11005 1509 00000000 		.4byte	0
 11006 150d 00000000 		.4byte	0
 11007              	.LLST130:
 11008 1511 1C000000 		.4byte	.LVL400
 11009 1515 6B000000 		.4byte	.LVL412-1
 11010 1519 0100     		.2byte	0x1
 11011 151b 53       		.byte	0x53
 11012 151c 00000000 		.4byte	0
 11013 1520 00000000 		.4byte	0
 11014              	.LLST131:
 11015 1524 00000000 		.4byte	.LVL419
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 294


 11016 1528 0F000000 		.4byte	.LVL421-1
 11017 152c 0100     		.2byte	0x1
 11018 152e 50       		.byte	0x50
 11019 152f 0F000000 		.4byte	.LVL421-1
 11020 1533 D0000000 		.4byte	.LVL443
 11021 1537 0100     		.2byte	0x1
 11022 1539 54       		.byte	0x54
 11023 153a D0000000 		.4byte	.LVL443
 11024 153e E0000000 		.4byte	.LFE83
 11025 1542 0400     		.2byte	0x4
 11026 1544 F3       		.byte	0xf3
 11027 1545 01       		.uleb128 0x1
 11028 1546 50       		.byte	0x50
 11029 1547 9F       		.byte	0x9f
 11030 1548 00000000 		.4byte	0
 11031 154c 00000000 		.4byte	0
 11032              	.LLST132:
 11033 1550 00000000 		.4byte	.LVL419
 11034 1554 0F000000 		.4byte	.LVL421-1
 11035 1558 0100     		.2byte	0x1
 11036 155a 51       		.byte	0x51
 11037 155b 0F000000 		.4byte	.LVL421-1
 11038 155f 3E000000 		.4byte	.LVL424
 11039 1563 0100     		.2byte	0x1
 11040 1565 56       		.byte	0x56
 11041 1566 3E000000 		.4byte	.LVL424
 11042 156a 44000000 		.4byte	.LVL425
 11043 156e 0400     		.2byte	0x4
 11044 1570 F3       		.byte	0xf3
 11045 1571 01       		.uleb128 0x1
 11046 1572 51       		.byte	0x51
 11047 1573 9F       		.byte	0x9f
 11048 1574 44000000 		.4byte	.LVL425
 11049 1578 4C000000 		.4byte	.LVL426
 11050 157c 0100     		.2byte	0x1
 11051 157e 56       		.byte	0x56
 11052 157f 4C000000 		.4byte	.LVL426
 11053 1583 4E000000 		.4byte	.LVL427
 11054 1587 0400     		.2byte	0x4
 11055 1589 F3       		.byte	0xf3
 11056 158a 01       		.uleb128 0x1
 11057 158b 51       		.byte	0x51
 11058 158c 9F       		.byte	0x9f
 11059 158d 4E000000 		.4byte	.LVL427
 11060 1591 52000000 		.4byte	.LVL428
 11061 1595 0100     		.2byte	0x1
 11062 1597 56       		.byte	0x56
 11063 1598 52000000 		.4byte	.LVL428
 11064 159c 54000000 		.4byte	.LVL429
 11065 15a0 0300     		.2byte	0x3
 11066 15a2 74       		.byte	0x74
 11067 15a3 E000     		.sleb128 96
 11068 15a5 54000000 		.4byte	.LVL429
 11069 15a9 5C000000 		.4byte	.LVL430
 11070 15ad 0100     		.2byte	0x1
 11071 15af 56       		.byte	0x56
 11072 15b0 5C000000 		.4byte	.LVL430
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 295


 11073 15b4 5E000000 		.4byte	.LVL431
 11074 15b8 0300     		.2byte	0x3
 11075 15ba 74       		.byte	0x74
 11076 15bb E000     		.sleb128 96
 11077 15bd 5E000000 		.4byte	.LVL431
 11078 15c1 60000000 		.4byte	.LVL432
 11079 15c5 0100     		.2byte	0x1
 11080 15c7 56       		.byte	0x56
 11081 15c8 60000000 		.4byte	.LVL432
 11082 15cc 62000000 		.4byte	.LVL433
 11083 15d0 0400     		.2byte	0x4
 11084 15d2 F3       		.byte	0xf3
 11085 15d3 01       		.uleb128 0x1
 11086 15d4 51       		.byte	0x51
 11087 15d5 9F       		.byte	0x9f
 11088 15d6 62000000 		.4byte	.LVL433
 11089 15da 64000000 		.4byte	.LVL434
 11090 15de 0100     		.2byte	0x1
 11091 15e0 56       		.byte	0x56
 11092 15e1 64000000 		.4byte	.LVL434
 11093 15e5 E0000000 		.4byte	.LFE83
 11094 15e9 0400     		.2byte	0x4
 11095 15eb F3       		.byte	0xf3
 11096 15ec 01       		.uleb128 0x1
 11097 15ed 51       		.byte	0x51
 11098 15ee 9F       		.byte	0x9f
 11099 15ef 00000000 		.4byte	0
 11100 15f3 00000000 		.4byte	0
 11101              	.LLST133:
 11102 15f7 00000000 		.4byte	.LVL419
 11103 15fb 0F000000 		.4byte	.LVL421-1
 11104 15ff 0100     		.2byte	0x1
 11105 1601 52       		.byte	0x52
 11106 1602 0F000000 		.4byte	.LVL421-1
 11107 1606 E0000000 		.4byte	.LFE83
 11108 160a 0400     		.2byte	0x4
 11109 160c F3       		.byte	0xf3
 11110 160d 01       		.uleb128 0x1
 11111 160e 52       		.byte	0x52
 11112 160f 9F       		.byte	0x9f
 11113 1610 00000000 		.4byte	0
 11114 1614 00000000 		.4byte	0
 11115              	.LLST134:
 11116 1618 00000000 		.4byte	.LVL419
 11117 161c 0F000000 		.4byte	.LVL421-1
 11118 1620 0100     		.2byte	0x1
 11119 1622 53       		.byte	0x53
 11120 1623 0F000000 		.4byte	.LVL421-1
 11121 1627 D0000000 		.4byte	.LVL444
 11122 162b 0100     		.2byte	0x1
 11123 162d 55       		.byte	0x55
 11124 162e D0000000 		.4byte	.LVL444
 11125 1632 E0000000 		.4byte	.LFE83
 11126 1636 0400     		.2byte	0x4
 11127 1638 F3       		.byte	0xf3
 11128 1639 01       		.uleb128 0x1
 11129 163a 53       		.byte	0x53
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 296


 11130 163b 9F       		.byte	0x9f
 11131 163c 00000000 		.4byte	0
 11132 1640 00000000 		.4byte	0
 11133              	.LLST135:
 11134 1644 0C000000 		.4byte	.LVL420
 11135 1648 0F000000 		.4byte	.LVL421-1
 11136 164c 0100     		.2byte	0x1
 11137 164e 50       		.byte	0x50
 11138 164f 0F000000 		.4byte	.LVL421-1
 11139 1653 D0000000 		.4byte	.LVL443
 11140 1657 0100     		.2byte	0x1
 11141 1659 54       		.byte	0x54
 11142 165a D0000000 		.4byte	.LVL443
 11143 165e E0000000 		.4byte	.LFE83
 11144 1662 0400     		.2byte	0x4
 11145 1664 F3       		.byte	0xf3
 11146 1665 01       		.uleb128 0x1
 11147 1666 50       		.byte	0x50
 11148 1667 9F       		.byte	0x9f
 11149 1668 00000000 		.4byte	0
 11150 166c 00000000 		.4byte	0
 11151              	.LLST136:
 11152 1670 20000000 		.4byte	.LVL423
 11153 1674 6A000000 		.4byte	.LVL435
 11154 1678 0100     		.2byte	0x1
 11155 167a 53       		.byte	0x53
 11156 167b 00000000 		.4byte	0
 11157 167f 00000000 		.4byte	0
 11158              	.LLST137:
 11159 1683 0C000000 		.4byte	.LVL420
 11160 1687 64000000 		.4byte	.LVL434
 11161 168b 0200     		.2byte	0x2
 11162 168d 31       		.byte	0x31
 11163 168e 9F       		.byte	0x9f
 11164 168f 64000000 		.4byte	.LVL434
 11165 1693 D0000000 		.4byte	.LVL445
 11166 1697 0100     		.2byte	0x1
 11167 1699 56       		.byte	0x56
 11168 169a D0000000 		.4byte	.LVL445
 11169 169e E0000000 		.4byte	.LFE83
 11170 16a2 0100     		.2byte	0x1
 11171 16a4 50       		.byte	0x50
 11172 16a5 00000000 		.4byte	0
 11173 16a9 00000000 		.4byte	0
 11174              	.LLST138:
 11175 16ad 12000000 		.4byte	.LVL422
 11176 16b1 74000000 		.4byte	.LVL436
 11177 16b5 0100     		.2byte	0x1
 11178 16b7 50       		.byte	0x50
 11179 16b8 74000000 		.4byte	.LVL436
 11180 16bc 9A000000 		.4byte	.LVL439
 11181 16c0 0200     		.2byte	0x2
 11182 16c2 91       		.byte	0x91
 11183 16c3 64       		.sleb128 -28
 11184 16c4 9A000000 		.4byte	.LVL439
 11185 16c8 A0000000 		.4byte	.LVL440
 11186 16cc 0100     		.2byte	0x1
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 297


 11187 16ce 50       		.byte	0x50
 11188 16cf A0000000 		.4byte	.LVL440
 11189 16d3 E0000000 		.4byte	.LFE83
 11190 16d7 0200     		.2byte	0x2
 11191 16d9 91       		.byte	0x91
 11192 16da 64       		.sleb128 -28
 11193 16db 00000000 		.4byte	0
 11194 16df 00000000 		.4byte	0
 11195              	.LLST139:
 11196 16e3 00000000 		.4byte	.LVL446
 11197 16e7 09000000 		.4byte	.LVL448-1
 11198 16eb 0100     		.2byte	0x1
 11199 16ed 50       		.byte	0x50
 11200 16ee 09000000 		.4byte	.LVL448-1
 11201 16f2 7E000000 		.4byte	.LVL458
 11202 16f6 0100     		.2byte	0x1
 11203 16f8 54       		.byte	0x54
 11204 16f9 7E000000 		.4byte	.LVL458
 11205 16fd 8C000000 		.4byte	.LFE84
 11206 1701 0400     		.2byte	0x4
 11207 1703 F3       		.byte	0xf3
 11208 1704 01       		.uleb128 0x1
 11209 1705 50       		.byte	0x50
 11210 1706 9F       		.byte	0x9f
 11211 1707 00000000 		.4byte	0
 11212 170b 00000000 		.4byte	0
 11213              	.LLST140:
 11214 170f 00000000 		.4byte	.LVL446
 11215 1713 09000000 		.4byte	.LVL448-1
 11216 1717 0100     		.2byte	0x1
 11217 1719 51       		.byte	0x51
 11218 171a 09000000 		.4byte	.LVL448-1
 11219 171e 7E000000 		.4byte	.LVL460
 11220 1722 0100     		.2byte	0x1
 11221 1724 56       		.byte	0x56
 11222 1725 7E000000 		.4byte	.LVL460
 11223 1729 8C000000 		.4byte	.LFE84
 11224 172d 0400     		.2byte	0x4
 11225 172f F3       		.byte	0xf3
 11226 1730 01       		.uleb128 0x1
 11227 1731 51       		.byte	0x51
 11228 1732 9F       		.byte	0x9f
 11229 1733 00000000 		.4byte	0
 11230 1737 00000000 		.4byte	0
 11231              	.LLST141:
 11232 173b 06000000 		.4byte	.LVL447
 11233 173f 09000000 		.4byte	.LVL448-1
 11234 1743 0100     		.2byte	0x1
 11235 1745 50       		.byte	0x50
 11236 1746 09000000 		.4byte	.LVL448-1
 11237 174a 7E000000 		.4byte	.LVL458
 11238 174e 0100     		.2byte	0x1
 11239 1750 54       		.byte	0x54
 11240 1751 7E000000 		.4byte	.LVL458
 11241 1755 8C000000 		.4byte	.LFE84
 11242 1759 0400     		.2byte	0x4
 11243 175b F3       		.byte	0xf3
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 298


 11244 175c 01       		.uleb128 0x1
 11245 175d 50       		.byte	0x50
 11246 175e 9F       		.byte	0x9f
 11247 175f 00000000 		.4byte	0
 11248 1763 00000000 		.4byte	0
 11249              	.LLST142:
 11250 1767 10000000 		.4byte	.LVL450
 11251 176b 2D000000 		.4byte	.LVL452-1
 11252 176f 0100     		.2byte	0x1
 11253 1771 52       		.byte	0x52
 11254 1772 50000000 		.4byte	.LVL454
 11255 1776 5B000000 		.4byte	.LVL456-1
 11256 177a 0100     		.2byte	0x1
 11257 177c 52       		.byte	0x52
 11258 177d 00000000 		.4byte	0
 11259 1781 00000000 		.4byte	0
 11260              	.LLST143:
 11261 1785 0C000000 		.4byte	.LVL449
 11262 1789 2A000000 		.4byte	.LVL451
 11263 178d 0100     		.2byte	0x1
 11264 178f 50       		.byte	0x50
 11265 1790 2A000000 		.4byte	.LVL451
 11266 1794 50000000 		.4byte	.LVL454
 11267 1798 0100     		.2byte	0x1
 11268 179a 55       		.byte	0x55
 11269 179b 50000000 		.4byte	.LVL454
 11270 179f 56000000 		.4byte	.LVL455
 11271 17a3 0100     		.2byte	0x1
 11272 17a5 50       		.byte	0x50
 11273 17a6 56000000 		.4byte	.LVL455
 11274 17aa 7E000000 		.4byte	.LVL459
 11275 17ae 0100     		.2byte	0x1
 11276 17b0 55       		.byte	0x55
 11277 17b1 00000000 		.4byte	0
 11278 17b5 00000000 		.4byte	0
 11279              	.LLST144:
 11280 17b9 00000000 		.4byte	.LVL461
 11281 17bd 0A000000 		.4byte	.LVL462
 11282 17c1 0100     		.2byte	0x1
 11283 17c3 50       		.byte	0x50
 11284 17c4 00000000 		.4byte	0
 11285 17c8 00000000 		.4byte	0
 11286              	.LLST145:
 11287 17cc 0A000000 		.4byte	.LVL462
 11288 17d0 1E000000 		.4byte	.LVL465
 11289 17d4 0100     		.2byte	0x1
 11290 17d6 54       		.byte	0x54
 11291 17d7 20000000 		.4byte	.LVL466
 11292 17db 22000000 		.4byte	.LVL467
 11293 17df 0100     		.2byte	0x1
 11294 17e1 54       		.byte	0x54
 11295 17e2 00000000 		.4byte	0
 11296 17e6 00000000 		.4byte	0
 11297              	.LLST146:
 11298 17ea 1C000000 		.4byte	.LVL464
 11299 17ee 20000000 		.4byte	.LVL466
 11300 17f2 0200     		.2byte	0x2
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 299


 11301 17f4 31       		.byte	0x31
 11302 17f5 9F       		.byte	0x9f
 11303 17f6 22000000 		.4byte	.LVL467
 11304 17fa 28000000 		.4byte	.LVL469
 11305 17fe 0100     		.2byte	0x1
 11306 1800 54       		.byte	0x54
 11307 1801 28000000 		.4byte	.LVL469
 11308 1805 30000000 		.4byte	.LFE85
 11309 1809 0100     		.2byte	0x1
 11310 180b 50       		.byte	0x50
 11311 180c 00000000 		.4byte	0
 11312 1810 00000000 		.4byte	0
 11313              		.section	.debug_aranges,"",%progbits
 11314 0000 CC010000 		.4byte	0x1cc
 11315 0004 0200     		.2byte	0x2
 11316 0006 00000000 		.4byte	.Ldebug_info0
 11317 000a 04       		.byte	0x4
 11318 000b 00       		.byte	0
 11319 000c 0000     		.2byte	0
 11320 000e 0000     		.2byte	0
 11321 0010 00000000 		.4byte	.LFB43
 11322 0014 3C000000 		.4byte	.LFE43-.LFB43
 11323 0018 00000000 		.4byte	.LFB69
 11324 001c 14000000 		.4byte	.LFE69-.LFB69
 11325 0020 00000000 		.4byte	.LFB72
 11326 0024 30000000 		.4byte	.LFE72-.LFB72
 11327 0028 00000000 		.4byte	.LFB71
 11328 002c 12000000 		.4byte	.LFE71-.LFB71
 11329 0030 00000000 		.4byte	.LFB33
 11330 0034 AC000000 		.4byte	.LFE33-.LFB33
 11331 0038 00000000 		.4byte	.LFB67
 11332 003c 58000000 		.4byte	.LFE67-.LFB67
 11333 0040 00000000 		.4byte	.LFB34
 11334 0044 8C000000 		.4byte	.LFE34-.LFB34
 11335 0048 00000000 		.4byte	.LFB68
 11336 004c 38000000 		.4byte	.LFE68-.LFB68
 11337 0050 00000000 		.4byte	.LFB64
 11338 0054 08000000 		.4byte	.LFE64-.LFB64
 11339 0058 00000000 		.4byte	.LFB86
 11340 005c 64000000 		.4byte	.LFE86-.LFB86
 11341 0060 00000000 		.4byte	.LFB32
 11342 0064 5E000000 		.4byte	.LFE32-.LFB32
 11343 0068 00000000 		.4byte	.LFB35
 11344 006c 78000000 		.4byte	.LFE35-.LFB35
 11345 0070 00000000 		.4byte	.LFB38
 11346 0074 68000000 		.4byte	.LFE38-.LFB38
 11347 0078 00000000 		.4byte	.LFB39
 11348 007c 20000000 		.4byte	.LFE39-.LFB39
 11349 0080 00000000 		.4byte	.LFB40
 11350 0084 20000000 		.4byte	.LFE40-.LFB40
 11351 0088 00000000 		.4byte	.LFB41
 11352 008c BC000000 		.4byte	.LFE41-.LFB41
 11353 0090 00000000 		.4byte	.LFB44
 11354 0094 64000000 		.4byte	.LFE44-.LFB44
 11355 0098 00000000 		.4byte	.LFB45
 11356 009c 7C000000 		.4byte	.LFE45-.LFB45
 11357 00a0 00000000 		.4byte	.LFB46
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 300


 11358 00a4 48000000 		.4byte	.LFE46-.LFB46
 11359 00a8 00000000 		.4byte	.LFB47
 11360 00ac 14000000 		.4byte	.LFE47-.LFB47
 11361 00b0 00000000 		.4byte	.LFB48
 11362 00b4 10000000 		.4byte	.LFE48-.LFB48
 11363 00b8 00000000 		.4byte	.LFB50
 11364 00bc 0C000000 		.4byte	.LFE50-.LFB50
 11365 00c0 00000000 		.4byte	.LFB51
 11366 00c4 0C000000 		.4byte	.LFE51-.LFB51
 11367 00c8 00000000 		.4byte	.LFB52
 11368 00cc 0C000000 		.4byte	.LFE52-.LFB52
 11369 00d0 00000000 		.4byte	.LFB53
 11370 00d4 10000000 		.4byte	.LFE53-.LFB53
 11371 00d8 00000000 		.4byte	.LFB54
 11372 00dc D8000000 		.4byte	.LFE54-.LFB54
 11373 00e0 00000000 		.4byte	.LFB49
 11374 00e4 C8000000 		.4byte	.LFE49-.LFB49
 11375 00e8 00000000 		.4byte	.LFB36
 11376 00ec 5C000000 		.4byte	.LFE36-.LFB36
 11377 00f0 00000000 		.4byte	.LFB37
 11378 00f4 24000000 		.4byte	.LFE37-.LFB37
 11379 00f8 00000000 		.4byte	.LFB55
 11380 00fc B4000000 		.4byte	.LFE55-.LFB55
 11381 0100 00000000 		.4byte	.LFB42
 11382 0104 8C000000 		.4byte	.LFE42-.LFB42
 11383 0108 00000000 		.4byte	.LFB56
 11384 010c 1C000000 		.4byte	.LFE56-.LFB56
 11385 0110 00000000 		.4byte	.LFB57
 11386 0114 28000000 		.4byte	.LFE57-.LFB57
 11387 0118 00000000 		.4byte	.LFB58
 11388 011c 74000000 		.4byte	.LFE58-.LFB58
 11389 0120 00000000 		.4byte	.LFB59
 11390 0124 58000000 		.4byte	.LFE59-.LFB59
 11391 0128 00000000 		.4byte	.LFB60
 11392 012c 1C000000 		.4byte	.LFE60-.LFB60
 11393 0130 00000000 		.4byte	.LFB61
 11394 0134 10000000 		.4byte	.LFE61-.LFB61
 11395 0138 00000000 		.4byte	.LFB62
 11396 013c 54000000 		.4byte	.LFE62-.LFB62
 11397 0140 00000000 		.4byte	.LFB63
 11398 0144 0C000000 		.4byte	.LFE63-.LFB63
 11399 0148 00000000 		.4byte	.LFB65
 11400 014c 1C000000 		.4byte	.LFE65-.LFB65
 11401 0150 00000000 		.4byte	.LFB66
 11402 0154 20000000 		.4byte	.LFE66-.LFB66
 11403 0158 00000000 		.4byte	.LFB70
 11404 015c 18000000 		.4byte	.LFE70-.LFB70
 11405 0160 00000000 		.4byte	.LFB73
 11406 0164 0C000000 		.4byte	.LFE73-.LFB73
 11407 0168 00000000 		.4byte	.LFB74
 11408 016c 20000000 		.4byte	.LFE74-.LFB74
 11409 0170 00000000 		.4byte	.LFB75
 11410 0174 9C000000 		.4byte	.LFE75-.LFB75
 11411 0178 00000000 		.4byte	.LFB76
 11412 017c 60000000 		.4byte	.LFE76-.LFB76
 11413 0180 00000000 		.4byte	.LFB77
 11414 0184 78000000 		.4byte	.LFE77-.LFB77
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 301


 11415 0188 00000000 		.4byte	.LFB78
 11416 018c 18000000 		.4byte	.LFE78-.LFB78
 11417 0190 00000000 		.4byte	.LFB79
 11418 0194 1C000000 		.4byte	.LFE79-.LFB79
 11419 0198 00000000 		.4byte	.LFB80
 11420 019c 6C000000 		.4byte	.LFE80-.LFB80
 11421 01a0 00000000 		.4byte	.LFB81
 11422 01a4 80000000 		.4byte	.LFE81-.LFB81
 11423 01a8 00000000 		.4byte	.LFB82
 11424 01ac AC000000 		.4byte	.LFE82-.LFB82
 11425 01b0 00000000 		.4byte	.LFB83
 11426 01b4 E0000000 		.4byte	.LFE83-.LFB83
 11427 01b8 00000000 		.4byte	.LFB84
 11428 01bc 8C000000 		.4byte	.LFE84-.LFB84
 11429 01c0 00000000 		.4byte	.LFB85
 11430 01c4 30000000 		.4byte	.LFE85-.LFB85
 11431 01c8 00000000 		.4byte	0
 11432 01cc 00000000 		.4byte	0
 11433              		.section	.debug_ranges,"",%progbits
 11434              	.Ldebug_ranges0:
 11435 0000 0A000000 		.4byte	.LBB4
 11436 0004 32000000 		.4byte	.LBE4
 11437 0008 36000000 		.4byte	.LBB6
 11438 000c B2000000 		.4byte	.LBE6
 11439 0010 00000000 		.4byte	0
 11440 0014 00000000 		.4byte	0
 11441 0018 0A000000 		.4byte	.LBB8
 11442 001c 1E000000 		.4byte	.LBE8
 11443 0020 22000000 		.4byte	.LBB9
 11444 0024 2A000000 		.4byte	.LBE9
 11445 0028 32000000 		.4byte	.LBB10
 11446 002c 4A000000 		.4byte	.LBE10
 11447 0030 00000000 		.4byte	0
 11448 0034 00000000 		.4byte	0
 11449 0038 00000000 		.4byte	.LFB43
 11450 003c 3C000000 		.4byte	.LFE43
 11451 0040 00000000 		.4byte	.LFB69
 11452 0044 14000000 		.4byte	.LFE69
 11453 0048 00000000 		.4byte	.LFB72
 11454 004c 30000000 		.4byte	.LFE72
 11455 0050 00000000 		.4byte	.LFB71
 11456 0054 12000000 		.4byte	.LFE71
 11457 0058 00000000 		.4byte	.LFB33
 11458 005c AC000000 		.4byte	.LFE33
 11459 0060 00000000 		.4byte	.LFB67
 11460 0064 58000000 		.4byte	.LFE67
 11461 0068 00000000 		.4byte	.LFB34
 11462 006c 8C000000 		.4byte	.LFE34
 11463 0070 00000000 		.4byte	.LFB68
 11464 0074 38000000 		.4byte	.LFE68
 11465 0078 00000000 		.4byte	.LFB64
 11466 007c 08000000 		.4byte	.LFE64
 11467 0080 00000000 		.4byte	.LFB86
 11468 0084 64000000 		.4byte	.LFE86
 11469 0088 00000000 		.4byte	.LFB32
 11470 008c 5E000000 		.4byte	.LFE32
 11471 0090 00000000 		.4byte	.LFB35
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 302


 11472 0094 78000000 		.4byte	.LFE35
 11473 0098 00000000 		.4byte	.LFB38
 11474 009c 68000000 		.4byte	.LFE38
 11475 00a0 00000000 		.4byte	.LFB39
 11476 00a4 20000000 		.4byte	.LFE39
 11477 00a8 00000000 		.4byte	.LFB40
 11478 00ac 20000000 		.4byte	.LFE40
 11479 00b0 00000000 		.4byte	.LFB41
 11480 00b4 BC000000 		.4byte	.LFE41
 11481 00b8 00000000 		.4byte	.LFB44
 11482 00bc 64000000 		.4byte	.LFE44
 11483 00c0 00000000 		.4byte	.LFB45
 11484 00c4 7C000000 		.4byte	.LFE45
 11485 00c8 00000000 		.4byte	.LFB46
 11486 00cc 48000000 		.4byte	.LFE46
 11487 00d0 00000000 		.4byte	.LFB47
 11488 00d4 14000000 		.4byte	.LFE47
 11489 00d8 00000000 		.4byte	.LFB48
 11490 00dc 10000000 		.4byte	.LFE48
 11491 00e0 00000000 		.4byte	.LFB50
 11492 00e4 0C000000 		.4byte	.LFE50
 11493 00e8 00000000 		.4byte	.LFB51
 11494 00ec 0C000000 		.4byte	.LFE51
 11495 00f0 00000000 		.4byte	.LFB52
 11496 00f4 0C000000 		.4byte	.LFE52
 11497 00f8 00000000 		.4byte	.LFB53
 11498 00fc 10000000 		.4byte	.LFE53
 11499 0100 00000000 		.4byte	.LFB54
 11500 0104 D8000000 		.4byte	.LFE54
 11501 0108 00000000 		.4byte	.LFB49
 11502 010c C8000000 		.4byte	.LFE49
 11503 0110 00000000 		.4byte	.LFB36
 11504 0114 5C000000 		.4byte	.LFE36
 11505 0118 00000000 		.4byte	.LFB37
 11506 011c 24000000 		.4byte	.LFE37
 11507 0120 00000000 		.4byte	.LFB55
 11508 0124 B4000000 		.4byte	.LFE55
 11509 0128 00000000 		.4byte	.LFB42
 11510 012c 8C000000 		.4byte	.LFE42
 11511 0130 00000000 		.4byte	.LFB56
 11512 0134 1C000000 		.4byte	.LFE56
 11513 0138 00000000 		.4byte	.LFB57
 11514 013c 28000000 		.4byte	.LFE57
 11515 0140 00000000 		.4byte	.LFB58
 11516 0144 74000000 		.4byte	.LFE58
 11517 0148 00000000 		.4byte	.LFB59
 11518 014c 58000000 		.4byte	.LFE59
 11519 0150 00000000 		.4byte	.LFB60
 11520 0154 1C000000 		.4byte	.LFE60
 11521 0158 00000000 		.4byte	.LFB61
 11522 015c 10000000 		.4byte	.LFE61
 11523 0160 00000000 		.4byte	.LFB62
 11524 0164 54000000 		.4byte	.LFE62
 11525 0168 00000000 		.4byte	.LFB63
 11526 016c 0C000000 		.4byte	.LFE63
 11527 0170 00000000 		.4byte	.LFB65
 11528 0174 1C000000 		.4byte	.LFE65
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 303


 11529 0178 00000000 		.4byte	.LFB66
 11530 017c 20000000 		.4byte	.LFE66
 11531 0180 00000000 		.4byte	.LFB70
 11532 0184 18000000 		.4byte	.LFE70
 11533 0188 00000000 		.4byte	.LFB73
 11534 018c 0C000000 		.4byte	.LFE73
 11535 0190 00000000 		.4byte	.LFB74
 11536 0194 20000000 		.4byte	.LFE74
 11537 0198 00000000 		.4byte	.LFB75
 11538 019c 9C000000 		.4byte	.LFE75
 11539 01a0 00000000 		.4byte	.LFB76
 11540 01a4 60000000 		.4byte	.LFE76
 11541 01a8 00000000 		.4byte	.LFB77
 11542 01ac 78000000 		.4byte	.LFE77
 11543 01b0 00000000 		.4byte	.LFB78
 11544 01b4 18000000 		.4byte	.LFE78
 11545 01b8 00000000 		.4byte	.LFB79
 11546 01bc 1C000000 		.4byte	.LFE79
 11547 01c0 00000000 		.4byte	.LFB80
 11548 01c4 6C000000 		.4byte	.LFE80
 11549 01c8 00000000 		.4byte	.LFB81
 11550 01cc 80000000 		.4byte	.LFE81
 11551 01d0 00000000 		.4byte	.LFB82
 11552 01d4 AC000000 		.4byte	.LFE82
 11553 01d8 00000000 		.4byte	.LFB83
 11554 01dc E0000000 		.4byte	.LFE83
 11555 01e0 00000000 		.4byte	.LFB84
 11556 01e4 8C000000 		.4byte	.LFE84
 11557 01e8 00000000 		.4byte	.LFB85
 11558 01ec 30000000 		.4byte	.LFE85
 11559 01f0 00000000 		.4byte	0
 11560 01f4 00000000 		.4byte	0
 11561              		.section	.debug_line,"",%progbits
 11562              	.Ldebug_line0:
 11563 0000 8F0B0000 		.section	.debug_str,"MS",%progbits,1
 11563      02009702 
 11563      00000201 
 11563      FB0E0D00 
 11563      01010101 
 11564              	.LASF69:
 11565 0000 70635461 		.ascii	"pcTaskName\000"
 11565      736B4E61 
 11565      6D6500
 11566              	.LASF36:
 11567 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 11567      6D626572 
 11567      4F664974 
 11567      656D7300 
 11568              	.LASF229:
 11569 001b 76506F72 		.ascii	"vPortExitCritical\000"
 11569      74457869 
 11569      74437269 
 11569      74696361 
 11569      6C00
 11570              	.LASF236:
 11571 002d 78506F72 		.ascii	"xPortStartScheduler\000"
 11571      74537461 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 304


 11571      72745363 
 11571      68656475 
 11571      6C657200 
 11572              	.LASF67:
 11573 0041 75785072 		.ascii	"uxPriority\000"
 11573      696F7269 
 11573      747900
 11574              	.LASF146:
 11575 004c 7078436F 		.ascii	"pxConstList\000"
 11575      6E73744C 
 11575      69737400 
 11576              	.LASF108:
 11577 0058 70785374 		.ascii	"pxStateList\000"
 11577      6174654C 
 11577      69737400 
 11578              	.LASF44:
 11579 0064 65537573 		.ascii	"eSuspended\000"
 11579      70656E64 
 11579      656400
 11580              	.LASF230:
 11581 006f 76506F72 		.ascii	"vPortYield\000"
 11581      74596965 
 11581      6C6400
 11582              	.LASF46:
 11583 007a 65496E76 		.ascii	"eInvalid\000"
 11583      616C6964 
 11583      00
 11584              	.LASF135:
 11585 0083 75785065 		.ascii	"uxPendedCounts\000"
 11585      6E646564 
 11585      436F756E 
 11585      747300
 11586              	.LASF164:
 11587 0092 76546173 		.ascii	"vTaskSetThreadLocalStoragePointer\000"
 11587      6B536574 
 11587      54687265 
 11587      61644C6F 
 11587      63616C53 
 11588              	.LASF190:
 11589 00b4 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 11589      7473546F 
 11589      436C6561 
 11589      724F6E45 
 11589      78697400 
 11590              	.LASF86:
 11591 00c8 70727649 		.ascii	"prvInitialiseNewTask\000"
 11591      6E697469 
 11591      616C6973 
 11591      654E6577 
 11591      5461736B 
 11592              	.LASF173:
 11593 00dd 78546173 		.ascii	"xTaskGetSchedulerState\000"
 11593      6B476574 
 11593      53636865 
 11593      64756C65 
 11593      72537461 
 11594              	.LASF199:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 305


 11595 00f4 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11595      67686572 
 11595      5072696F 
 11595      72697479 
 11595      5461736B 
 11596              	.LASF48:
 11597 010e 654E6F41 		.ascii	"eNoAction\000"
 11597      6374696F 
 11597      6E00
 11598              	.LASF213:
 11599 0118 7578546F 		.ascii	"uxTopReadyPriority\000"
 11599      70526561 
 11599      64795072 
 11599      696F7269 
 11599      747900
 11600              	.LASF0:
 11601 012b 756E7369 		.ascii	"unsigned int\000"
 11601      676E6564 
 11601      20696E74 
 11601      00
 11602              	.LASF150:
 11603 0138 70784576 		.ascii	"pxEventList\000"
 11603      656E744C 
 11603      69737400 
 11604              	.LASF214:
 11605 0144 78536368 		.ascii	"xSchedulerRunning\000"
 11605      6564756C 
 11605      65725275 
 11605      6E6E696E 
 11605      6700
 11606              	.LASF37:
 11607 0156 7078496E 		.ascii	"pxIndex\000"
 11607      64657800 
 11608              	.LASF22:
 11609 015e 53746163 		.ascii	"StackType_t\000"
 11609      6B547970 
 11609      655F7400 
 11610              	.LASF54:
 11611 016a 7854494D 		.ascii	"xTIME_OUT\000"
 11611      455F4F55 
 11611      5400
 11612              	.LASF209:
 11613 0174 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 11613      6C657465 
 11613      64546173 
 11613      6B735761 
 11613      6974696E 
 11614              	.LASF32:
 11615 0191 784C4953 		.ascii	"xLIST_ITEM\000"
 11615      545F4954 
 11615      454D00
 11616              	.LASF202:
 11617 019c 70785265 		.ascii	"pxReadyTasksLists\000"
 11617      61647954 
 11617      61736B73 
 11617      4C697374 
 11617      7300
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 306


 11618              	.LASF241:
 11619 01ae 433A5C55 		.ascii	"C:\\Users\\Xwx47\\Documents\\Creator\\FreeRTOS_49-4"
 11619      73657273 
 11619      5C587778 
 11619      34375C44 
 11619      6F63756D 
 11620 01dc 3278785C 		.ascii	"2xx\\Blinky_FreeRTOS10.cydsn\000"
 11620      426C696E 
 11620      6B795F46 
 11620      72656552 
 11620      544F5331 
 11621              	.LASF197:
 11622 01f8 75634F72 		.ascii	"ucOriginalNotifyState\000"
 11622      6967696E 
 11622      616C4E6F 
 11622      74696679 
 11622      53746174 
 11623              	.LASF156:
 11624 020e 76546173 		.ascii	"vTaskSetTimeOutState\000"
 11624      6B536574 
 11624      54696D65 
 11624      4F757453 
 11624      74617465 
 11625              	.LASF198:
 11626 0223 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 11626      6B47656E 
 11626      65726963 
 11626      4E6F7469 
 11626      66794672 
 11627              	.LASF82:
 11628 023d 70756353 		.ascii	"pucStackByte\000"
 11628      7461636B 
 11628      42797465 
 11628      00
 11629              	.LASF203:
 11630 024a 7844656C 		.ascii	"xDelayedTaskList1\000"
 11630      61796564 
 11630      5461736B 
 11630      4C697374 
 11630      3100
 11631              	.LASF204:
 11632 025c 7844656C 		.ascii	"xDelayedTaskList2\000"
 11632      61796564 
 11632      5461736B 
 11632      4C697374 
 11632      3200
 11633              	.LASF55:
 11634 026e 784F7665 		.ascii	"xOverflowCount\000"
 11634      72666C6F 
 11634      77436F75 
 11634      6E7400
 11635              	.LASF227:
 11636 027d 76506F72 		.ascii	"vPortEnterCritical\000"
 11636      74456E74 
 11636      65724372 
 11636      69746963 
 11636      616C00
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 307


 11637              	.LASF61:
 11638 0290 756C5061 		.ascii	"ulParameters\000"
 11638      72616D65 
 11638      74657273 
 11638      00
 11639              	.LASF107:
 11640 029d 65526574 		.ascii	"eReturn\000"
 11640      75726E00 
 11641              	.LASF120:
 11642 02a5 78546173 		.ascii	"xTaskToResume\000"
 11642      6B546F52 
 11642      6573756D 
 11642      6500
 11643              	.LASF110:
 11644 02b3 75785265 		.ascii	"uxReturn\000"
 11644      7475726E 
 11644      00
 11645              	.LASF183:
 11646 02bc 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11646      736B4765 
 11646      744E756D 
 11646      6265724F 
 11646      66546173 
 11647              	.LASF75:
 11648 02d3 74736B54 		.ascii	"tskTCB\000"
 11648      434200
 11649              	.LASF122:
 11650 02da 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11650      76656449 
 11650      6E746572 
 11650      72757074 
 11650      53746174 
 11651              	.LASF18:
 11652 02f1 75696E74 		.ascii	"uint32_t\000"
 11652      33325F74 
 11652      00
 11653              	.LASF79:
 11654 02fa 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 11654      61736B49 
 11654      73546173 
 11654      6B537573 
 11654      70656E64 
 11655              	.LASF74:
 11656 0311 75634E6F 		.ascii	"ucNotifyState\000"
 11656      74696679 
 11656      53746174 
 11656      6500
 11657              	.LASF231:
 11658 031f 75784C69 		.ascii	"uxListRemove\000"
 11658      73745265 
 11658      6D6F7665 
 11658      00
 11659              	.LASF118:
 11660 032c 78596965 		.ascii	"xYieldRequired\000"
 11660      6C645265 
 11660      71756972 
 11660      656400
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 308


 11661              	.LASF192:
 11662 033b 78546173 		.ascii	"xTaskGenericNotify\000"
 11662      6B47656E 
 11662      65726963 
 11662      4E6F7469 
 11662      667900
 11663              	.LASF19:
 11664 034e 666C6F61 		.ascii	"float\000"
 11664      7400
 11665              	.LASF153:
 11666 0354 7078556E 		.ascii	"pxUnblockedTCB\000"
 11666      626C6F63 
 11666      6B656454 
 11666      434200
 11667              	.LASF103:
 11668 0363 75735374 		.ascii	"usStackDepth\000"
 11668      61636B44 
 11668      65707468 
 11668      00
 11669              	.LASF186:
 11670 0370 78436C65 		.ascii	"xClearCountOnExit\000"
 11670      6172436F 
 11670      756E744F 
 11670      6E457869 
 11670      7400
 11671              	.LASF161:
 11672 0382 78456C61 		.ascii	"xElapsedTime\000"
 11672      70736564 
 11672      54696D65 
 11672      00
 11673              	.LASF51:
 11674 038f 65536574 		.ascii	"eSetValueWithOverwrite\000"
 11674      56616C75 
 11674      65576974 
 11674      684F7665 
 11674      72777269 
 11675              	.LASF13:
 11676 03a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 11676      206C6F6E 
 11676      6720756E 
 11676      7369676E 
 11676      65642069 
 11677              	.LASF127:
 11678 03bd 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11678      6B476574 
 11678      5469636B 
 11678      436F756E 
 11678      7446726F 
 11679              	.LASF112:
 11680 03d6 75785361 		.ascii	"uxSavedInterruptState\000"
 11680      76656449 
 11680      6E746572 
 11680      72757074 
 11680      53746174 
 11681              	.LASF189:
 11682 03ec 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 11682      7473546F 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 309


 11682      436C6561 
 11682      724F6E45 
 11682      6E747279 
 11683              	.LASF207:
 11684 0401 7850656E 		.ascii	"xPendingReadyList\000"
 11684      64696E67 
 11684      52656164 
 11684      794C6973 
 11684      7400
 11685              	.LASF28:
 11686 0413 70785072 		.ascii	"pxPrevious\000"
 11686      6576696F 
 11686      757300
 11687              	.LASF208:
 11688 041e 78546173 		.ascii	"xTasksWaitingTermination\000"
 11688      6B735761 
 11688      6974696E 
 11688      67546572 
 11688      6D696E61 
 11689              	.LASF8:
 11690 0437 5F5F7569 		.ascii	"__uint16_t\000"
 11690      6E743136 
 11690      5F7400
 11691              	.LASF178:
 11692 0442 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11692      6B507269 
 11692      6F726974 
 11692      79446973 
 11692      696E6865 
 11693              	.LASF169:
 11694 0466 70765265 		.ascii	"pvReturn\000"
 11694      7475726E 
 11694      00
 11695              	.LASF121:
 11696 046f 78546173 		.ascii	"xTaskResumeFromISR\000"
 11696      6B526573 
 11696      756D6546 
 11696      726F6D49 
 11696      535200
 11697              	.LASF233:
 11698 0482 7076506F 		.ascii	"pvPortMalloc\000"
 11698      72744D61 
 11698      6C6C6F63 
 11698      00
 11699              	.LASF162:
 11700 048f 76546173 		.ascii	"vTaskSuspendAll\000"
 11700      6B537573 
 11700      70656E64 
 11700      416C6C00 
 11701              	.LASF170:
 11702 049f 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 11702      736B4765 
 11702      74537461 
 11702      636B4869 
 11702      67685761 
 11703              	.LASF130:
 11704 04bb 78546173 		.ascii	"xTaskIncrementTick\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 310


 11704      6B496E63 
 11704      72656D65 
 11704      6E745469 
 11704      636B00
 11705              	.LASF72:
 11706 04ce 70765468 		.ascii	"pvThreadLocalStoragePointers\000"
 11706      72656164 
 11706      4C6F6361 
 11706      6C53746F 
 11706      72616765 
 11707              	.LASF239:
 11708 04eb 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 11708      43313120 
 11708      352E342E 
 11708      31203230 
 11708      31363036 
 11709 051e 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 11709      20726576 
 11709      6973696F 
 11709      6E203233 
 11709      37373135 
 11710 0551 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 11710      66756E63 
 11710      74696F6E 
 11710      2D736563 
 11710      74696F6E 
 11711              	.LASF53:
 11712 0579 654E6F74 		.ascii	"eNotifyAction\000"
 11712      69667941 
 11712      6374696F 
 11712      6E00
 11713              	.LASF4:
 11714 0587 73697A65 		.ascii	"size_t\000"
 11714      5F7400
 11715              	.LASF50:
 11716 058e 65496E63 		.ascii	"eIncrement\000"
 11716      72656D65 
 11716      6E7400
 11717              	.LASF33:
 11718 0599 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11718      495F4C49 
 11718      53545F49 
 11718      54454D00 
 11719              	.LASF181:
 11720 05a9 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 11720      6C794F6E 
 11720      654D7574 
 11720      65784865 
 11720      6C6400
 11721              	.LASF35:
 11722 05bc 784C4953 		.ascii	"xLIST\000"
 11722      5400
 11723              	.LASF124:
 11724 05c2 76546173 		.ascii	"vTaskEndScheduler\000"
 11724      6B456E64 
 11724      53636865 
 11724      64756C65 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 311


 11724      7200
 11725              	.LASF109:
 11726 05d4 75785461 		.ascii	"uxTaskPriorityGet\000"
 11726      736B5072 
 11726      696F7269 
 11726      74794765 
 11726      7400
 11727              	.LASF102:
 11728 05e6 78436F6E 		.ascii	"xConstTickCount\000"
 11728      73745469 
 11728      636B436F 
 11728      756E7400 
 11729              	.LASF228:
 11730 05f6 764C6973 		.ascii	"vListInsertEnd\000"
 11730      74496E73 
 11730      65727445 
 11730      6E6400
 11731              	.LASF210:
 11732 0605 78537573 		.ascii	"xSuspendedTaskList\000"
 11732      70656E64 
 11732      65645461 
 11732      736B4C69 
 11732      737400
 11733              	.LASF88:
 11734 0618 70634E61 		.ascii	"pcName\000"
 11734      6D6500
 11735              	.LASF165:
 11736 061f 78546173 		.ascii	"xTaskToSet\000"
 11736      6B546F53 
 11736      657400
 11737              	.LASF63:
 11738 062a 74736B54 		.ascii	"tskTaskControlBlock\000"
 11738      61736B43 
 11738      6F6E7472 
 11738      6F6C426C 
 11738      6F636B00 
 11739              	.LASF206:
 11740 063e 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 11740      6572666C 
 11740      6F774465 
 11740      6C617965 
 11740      64546173 
 11741              	.LASF149:
 11742 0658 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11742      6B506C61 
 11742      63654F6E 
 11742      4576656E 
 11742      744C6973 
 11743              	.LASF140:
 11744 066e 76546173 		.ascii	"vTaskDelay\000"
 11744      6B44656C 
 11744      617900
 11745              	.LASF184:
 11746 0679 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11746      736B496E 
 11746      6372656D 
 11746      656E744D 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 312


 11746      75746578 
 11747              	.LASF73:
 11748 0697 756C4E6F 		.ascii	"ulNotifiedValue\000"
 11748      74696669 
 11748      65645661 
 11748      6C756500 
 11749              	.LASF154:
 11750 06a7 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 11750      6B52656D 
 11750      6F766546 
 11750      726F6D55 
 11750      6E6F7264 
 11751              	.LASF71:
 11752 06c9 75784D75 		.ascii	"uxMutexesHeld\000"
 11752      74657865 
 11752      7348656C 
 11752      6400
 11753              	.LASF177:
 11754 06d7 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11754      6B507269 
 11754      6F726974 
 11754      79446973 
 11754      696E6865 
 11755              	.LASF152:
 11756 06ef 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11756      6B52656D 
 11756      6F766546 
 11756      726F6D45 
 11756      76656E74 
 11757              	.LASF15:
 11758 0708 63686172 		.ascii	"char\000"
 11758      00
 11759              	.LASF31:
 11760 070d 4C697374 		.ascii	"ListItem_t\000"
 11760      4974656D 
 11760      5F7400
 11761              	.LASF52:
 11762 0718 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 11762      56616C75 
 11762      65576974 
 11762      686F7574 
 11762      4F766572 
 11763              	.LASF188:
 11764 0732 78546173 		.ascii	"xTaskNotifyWait\000"
 11764      6B4E6F74 
 11764      69667957 
 11764      61697400 
 11765              	.LASF24:
 11766 0742 55426173 		.ascii	"UBaseType_t\000"
 11766      65547970 
 11766      655F7400 
 11767              	.LASF89:
 11768 074e 756C5374 		.ascii	"ulStackDepth\000"
 11768      61636B44 
 11768      65707468 
 11768      00
 11769              	.LASF139:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 313


 11770 075b 7853686F 		.ascii	"xShouldDelay\000"
 11770      756C6444 
 11770      656C6179 
 11770      00
 11771              	.LASF97:
 11772 0768 70727649 		.ascii	"prvIdleTask\000"
 11772      646C6554 
 11772      61736B00 
 11773              	.LASF38:
 11774 0774 784C6973 		.ascii	"xListEnd\000"
 11774      74456E64 
 11774      00
 11775              	.LASF185:
 11776 077d 756C5461 		.ascii	"ulTaskNotifyTake\000"
 11776      736B4E6F 
 11776      74696679 
 11776      54616B65 
 11776      00
 11777              	.LASF34:
 11778 078e 4D696E69 		.ascii	"MiniListItem_t\000"
 11778      4C697374 
 11778      4974656D 
 11778      5F7400
 11779              	.LASF105:
 11780 079d 78546173 		.ascii	"xTaskCreate\000"
 11780      6B437265 
 11780      61746500 
 11781              	.LASF95:
 11782 07a9 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 11782      64644E65 
 11782      77546173 
 11782      6B546F52 
 11782      65616479 
 11783              	.LASF16:
 11784 07c2 75696E74 		.ascii	"uint8_t\000"
 11784      385F7400 
 11785              	.LASF42:
 11786 07ca 65526561 		.ascii	"eReady\000"
 11786      647900
 11787              	.LASF106:
 11788 07d1 65546173 		.ascii	"eTaskGetState\000"
 11788      6B476574 
 11788      53746174 
 11788      6500
 11789              	.LASF92:
 11790 07df 70784E65 		.ascii	"pxNewTCB\000"
 11790      77544342 
 11790      00
 11791              	.LASF87:
 11792 07e8 70785461 		.ascii	"pxTaskCode\000"
 11792      736B436F 
 11792      646500
 11793              	.LASF62:
 11794 07f3 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11794      72795265 
 11794      67696F6E 
 11794      5F7400
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 314


 11795              	.LASF219:
 11796 0802 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 11796      74546173 
 11796      6B556E62 
 11796      6C6F636B 
 11796      54696D65 
 11797              	.LASF225:
 11798 0817 7078506F 		.ascii	"pxPortInitialiseStack\000"
 11798      7274496E 
 11798      69746961 
 11798      6C697365 
 11798      53746163 
 11799              	.LASF212:
 11800 082d 78546963 		.ascii	"xTickCount\000"
 11800      6B436F75 
 11800      6E7400
 11801              	.LASF1:
 11802 0838 6C6F6E67 		.ascii	"long long int\000"
 11802      206C6F6E 
 11802      6720696E 
 11802      7400
 11803              	.LASF45:
 11804 0846 6544656C 		.ascii	"eDeleted\000"
 11804      65746564 
 11804      00
 11805              	.LASF60:
 11806 084f 756C4C65 		.ascii	"ulLengthInBytes\000"
 11806      6E677468 
 11806      496E4279 
 11806      74657300 
 11807              	.LASF23:
 11808 085f 42617365 		.ascii	"BaseType_t\000"
 11808      54797065 
 11808      5F7400
 11809              	.LASF144:
 11810 086a 756C4368 		.ascii	"ulCheckValue\000"
 11810      65636B56 
 11810      616C7565 
 11810      00
 11811              	.LASF84:
 11812 0877 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 11812      65736574 
 11812      4E657874 
 11812      5461736B 
 11812      556E626C 
 11813              	.LASF56:
 11814 0893 7854696D 		.ascii	"xTimeOnEntering\000"
 11814      654F6E45 
 11814      6E746572 
 11814      696E6700 
 11815              	.LASF115:
 11816 08a3 75784E65 		.ascii	"uxNewPriority\000"
 11816      77507269 
 11816      6F726974 
 11816      7900
 11817              	.LASF21:
 11818 08b1 5461736B 		.ascii	"TaskFunction_t\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 315


 11818      46756E63 
 11818      74696F6E 
 11818      5F7400
 11819              	.LASF27:
 11820 08c0 70784E65 		.ascii	"pxNext\000"
 11820      787400
 11821              	.LASF196:
 11822 08c7 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 11822      72657669 
 11822      6F75734E 
 11822      6F746966 
 11822      69636174 
 11823              	.LASF223:
 11824 08e4 6D656D73 		.ascii	"memset\000"
 11824      657400
 11825              	.LASF157:
 11826 08eb 70785469 		.ascii	"pxTimeOut\000"
 11826      6D654F75 
 11826      7400
 11827              	.LASF141:
 11828 08f5 78546963 		.ascii	"xTicksToDelay\000"
 11828      6B73546F 
 11828      44656C61 
 11828      7900
 11829              	.LASF111:
 11830 0903 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 11830      736B5072 
 11830      696F7269 
 11830      74794765 
 11830      7446726F 
 11831              	.LASF83:
 11832 091c 756C436F 		.ascii	"ulCount\000"
 11832      756E7400 
 11833              	.LASF57:
 11834 0924 54696D65 		.ascii	"TimeOut_t\000"
 11834      4F75745F 
 11834      7400
 11835              	.LASF158:
 11836 092e 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11836      6B496E74 
 11836      65726E61 
 11836      6C536574 
 11836      54696D65 
 11837              	.LASF218:
 11838 094b 75785461 		.ascii	"uxTaskNumber\000"
 11838      736B4E75 
 11838      6D626572 
 11838      00
 11839              	.LASF40:
 11840 0958 5461736B 		.ascii	"TaskHandle_t\000"
 11840      48616E64 
 11840      6C655F74 
 11840      00
 11841              	.LASF195:
 11842 0965 65416374 		.ascii	"eAction\000"
 11842      696F6E00 
 11843              	.LASF182:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 316


 11844 096d 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 11844      736B5265 
 11844      73657445 
 11844      76656E74 
 11844      4974656D 
 11845              	.LASF114:
 11846 0987 76546173 		.ascii	"vTaskPrioritySet\000"
 11846      6B507269 
 11846      6F726974 
 11846      79536574 
 11846      00
 11847              	.LASF234:
 11848 0998 756C5365 		.ascii	"ulSetInterruptMaskFromISR\000"
 11848      74496E74 
 11848      65727275 
 11848      70744D61 
 11848      736B4672 
 11849              	.LASF47:
 11850 09b2 65546173 		.ascii	"eTaskState\000"
 11850      6B537461 
 11850      746500
 11851              	.LASF39:
 11852 09bd 4C697374 		.ascii	"List_t\000"
 11852      5F7400
 11853              	.LASF129:
 11854 09c4 78546173 		.ascii	"xTaskToQuery\000"
 11854      6B546F51 
 11854      75657279 
 11854      00
 11855              	.LASF25:
 11856 09d1 5469636B 		.ascii	"TickType_t\000"
 11856      54797065 
 11856      5F7400
 11857              	.LASF193:
 11858 09dc 78546173 		.ascii	"xTaskToNotify\000"
 11858      6B546F4E 
 11858      6F746966 
 11858      7900
 11859              	.LASF81:
 11860 09ea 78546173 		.ascii	"xTask\000"
 11860      6B00
 11861              	.LASF49:
 11862 09f0 65536574 		.ascii	"eSetBits\000"
 11862      42697473 
 11862      00
 11863              	.LASF2:
 11864 09f9 6C6F6E67 		.ascii	"long double\000"
 11864      20646F75 
 11864      626C6500 
 11865              	.LASF58:
 11866 0a05 784D454D 		.ascii	"xMEMORY_REGION\000"
 11866      4F52595F 
 11866      52454749 
 11866      4F4E00
 11867              	.LASF17:
 11868 0a14 75696E74 		.ascii	"uint16_t\000"
 11868      31365F74 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 317


 11868      00
 11869              	.LASF113:
 11870 0a1d 76546173 		.ascii	"vTaskDelete\000"
 11870      6B44656C 
 11870      65746500 
 11871              	.LASF180:
 11872 0a29 75785072 		.ascii	"uxPriorityToUse\000"
 11872      696F7269 
 11872      7479546F 
 11872      55736500 
 11873              	.LASF142:
 11874 0a39 76546173 		.ascii	"vTaskSwitchContext\000"
 11874      6B537769 
 11874      74636843 
 11874      6F6E7465 
 11874      787400
 11875              	.LASF217:
 11876 0a4c 784E756D 		.ascii	"xNumOfOverflows\000"
 11876      4F664F76 
 11876      6572666C 
 11876      6F777300 
 11877              	.LASF30:
 11878 0a5c 7076436F 		.ascii	"pvContainer\000"
 11878      6E746169 
 11878      6E657200 
 11879              	.LASF220:
 11880 0a68 7849646C 		.ascii	"xIdleTaskHandle\000"
 11880      65546173 
 11880      6B48616E 
 11880      646C6500 
 11881              	.LASF179:
 11882 0a78 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 11882      67686573 
 11882      74507269 
 11882      6F726974 
 11882      79576169 
 11883              	.LASF238:
 11884 0a95 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 11884      6C696361 
 11884      74696F6E 
 11884      53746163 
 11884      6B4F7665 
 11885              	.LASF7:
 11886 0ab3 73686F72 		.ascii	"short int\000"
 11886      7420696E 
 11886      7400
 11887              	.LASF224:
 11888 0abd 764C6973 		.ascii	"vListInitialiseItem\000"
 11888      74496E69 
 11888      7469616C 
 11888      69736549 
 11888      74656D00 
 11889              	.LASF90:
 11890 0ad1 70765061 		.ascii	"pvParameters\000"
 11890      72616D65 
 11890      74657273 
 11890      00
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 318


 11891              	.LASF26:
 11892 0ade 78497465 		.ascii	"xItemValue\000"
 11892      6D56616C 
 11892      756500
 11893              	.LASF10:
 11894 0ae9 6C6F6E67 		.ascii	"long int\000"
 11894      20696E74 
 11894      00
 11895              	.LASF133:
 11896 0af2 78546173 		.ascii	"xTaskResumeAll\000"
 11896      6B526573 
 11896      756D6541 
 11896      6C6C00
 11897              	.LASF200:
 11898 0b01 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 11898      6B4E6F74 
 11898      69667947 
 11898      69766546 
 11898      726F6D49 
 11899              	.LASF205:
 11900 0b18 70784465 		.ascii	"pxDelayedTaskList\000"
 11900      6C617965 
 11900      64546173 
 11900      6B4C6973 
 11900      7400
 11901              	.LASF125:
 11902 0b2a 78546173 		.ascii	"xTaskGetTickCount\000"
 11902      6B476574 
 11902      5469636B 
 11902      436F756E 
 11902      7400
 11903              	.LASF240:
 11904 0b3c 2E2E5C46 		.ascii	"..\\FreeRTOS10\\tasks.c\000"
 11904      72656552 
 11904      544F5331 
 11904      305C7461 
 11904      736B732E 
 11905              	.LASF131:
 11906 0b52 78537769 		.ascii	"xSwitchRequired\000"
 11906      74636852 
 11906      65717569 
 11906      72656400 
 11907              	.LASF175:
 11908 0b62 70784D75 		.ascii	"pxMutexHolder\000"
 11908      74657848 
 11908      6F6C6465 
 11908      7200
 11909              	.LASF68:
 11910 0b70 70785374 		.ascii	"pxStack\000"
 11910      61636B00 
 11911              	.LASF104:
 11912 0b78 78546173 		.ascii	"xTaskToDelete\000"
 11912      6B546F44 
 11912      656C6574 
 11912      6500
 11913              	.LASF194:
 11914 0b86 756C5661 		.ascii	"ulValue\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 319


 11914      6C756500 
 11915              	.LASF148:
 11916 0b8e 78546173 		.ascii	"xTaskToSuspend\000"
 11916      6B546F53 
 11916      75737065 
 11916      6E6400
 11917              	.LASF159:
 11918 0b9d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11918      6B436865 
 11918      636B466F 
 11918      7254696D 
 11918      654F7574 
 11919              	.LASF237:
 11920 0bb2 76506F72 		.ascii	"vPortEndScheduler\000"
 11920      74456E64 
 11920      53636865 
 11920      64756C65 
 11920      7200
 11921              	.LASF222:
 11922 0bc4 76506F72 		.ascii	"vPortFree\000"
 11922      74467265 
 11922      6500
 11923              	.LASF137:
 11924 0bce 70785072 		.ascii	"pxPreviousWakeTime\000"
 11924      6576696F 
 11924      75735761 
 11924      6B655469 
 11924      6D6500
 11925              	.LASF5:
 11926 0be1 5F5F7569 		.ascii	"__uint8_t\000"
 11926      6E74385F 
 11926      7400
 11927              	.LASF166:
 11928 0beb 78496E64 		.ascii	"xIndex\000"
 11928      657800
 11929              	.LASF191:
 11930 0bf2 70756C4E 		.ascii	"pulNotificationValue\000"
 11930      6F746966 
 11930      69636174 
 11930      696F6E56 
 11930      616C7565 
 11931              	.LASF77:
 11932 0c07 78526574 		.ascii	"xReturn\000"
 11932      75726E00 
 11933              	.LASF14:
 11934 0c0f 73697A65 		.ascii	"sizetype\000"
 11934      74797065 
 11934      00
 11935              	.LASF163:
 11936 0c18 76546173 		.ascii	"vTaskMissedYield\000"
 11936      6B4D6973 
 11936      73656459 
 11936      69656C64 
 11936      00
 11937              	.LASF215:
 11938 0c29 75785065 		.ascii	"uxPendedTicks\000"
 11938      6E646564 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 320


 11938      5469636B 
 11938      7300
 11939              	.LASF12:
 11940 0c37 6C6F6E67 		.ascii	"long unsigned int\000"
 11940      20756E73 
 11940      69676E65 
 11940      6420696E 
 11940      7400
 11941              	.LASF174:
 11942 0c49 78546173 		.ascii	"xTaskPriorityInherit\000"
 11942      6B507269 
 11942      6F726974 
 11942      79496E68 
 11942      65726974 
 11943              	.LASF171:
 11944 0c5e 70756345 		.ascii	"pucEndOfStack\000"
 11944      6E644F66 
 11944      53746163 
 11944      6B00
 11945              	.LASF176:
 11946 0c6c 70784D75 		.ascii	"pxMutexHolderTCB\000"
 11946      74657848 
 11946      6F6C6465 
 11946      72544342 
 11946      00
 11947              	.LASF128:
 11948 0c7d 70635461 		.ascii	"pcTaskGetName\000"
 11948      736B4765 
 11948      744E616D 
 11948      6500
 11949              	.LASF126:
 11950 0c8b 78546963 		.ascii	"xTicks\000"
 11950      6B7300
 11951              	.LASF123:
 11952 0c92 76546173 		.ascii	"vTaskStartScheduler\000"
 11952      6B537461 
 11952      72745363 
 11952      68656475 
 11952      6C657200 
 11953              	.LASF100:
 11954 0ca6 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 11954      426C6F63 
 11954      6B496E64 
 11954      6566696E 
 11954      6974656C 
 11955              	.LASF41:
 11956 0cbc 6552756E 		.ascii	"eRunning\000"
 11956      6E696E67 
 11956      00
 11957              	.LASF143:
 11958 0cc5 70756C53 		.ascii	"pulStack\000"
 11958      7461636B 
 11958      00
 11959              	.LASF168:
 11960 0cce 70765461 		.ascii	"pvTaskGetThreadLocalStoragePointer\000"
 11960      736B4765 
 11960      74546872 
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 321


 11960      6561644C 
 11960      6F63616C 
 11961              	.LASF59:
 11962 0cf1 70764261 		.ascii	"pvBaseAddress\000"
 11962      73654164 
 11962      64726573 
 11962      7300
 11963              	.LASF132:
 11964 0cff 70785465 		.ascii	"pxTemp\000"
 11964      6D7000
 11965              	.LASF6:
 11966 0d06 756E7369 		.ascii	"unsigned char\000"
 11966      676E6564 
 11966      20636861 
 11966      7200
 11967              	.LASF151:
 11968 0d14 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11968      6B506C61 
 11968      63654F6E 
 11968      556E6F72 
 11968      64657265 
 11969              	.LASF11:
 11970 0d33 5F5F7569 		.ascii	"__uint32_t\000"
 11970      6E743332 
 11970      5F7400
 11971              	.LASF201:
 11972 0d3e 78546173 		.ascii	"xTaskNotifyStateClear\000"
 11972      6B4E6F74 
 11972      69667953 
 11972      74617465 
 11972      436C6561 
 11973              	.LASF226:
 11974 0d54 764C6973 		.ascii	"vListInitialise\000"
 11974      74496E69 
 11974      7469616C 
 11974      69736500 
 11975              	.LASF160:
 11976 0d64 70785469 		.ascii	"pxTicksToWait\000"
 11976      636B7354 
 11976      6F576169 
 11976      7400
 11977              	.LASF232:
 11978 0d72 764C6973 		.ascii	"vListInsert\000"
 11978      74496E73 
 11978      65727400 
 11979              	.LASF145:
 11980 0d7e 7578546F 		.ascii	"uxTopPriority\000"
 11980      70507269 
 11980      6F726974 
 11980      7900
 11981              	.LASF70:
 11982 0d8c 75784261 		.ascii	"uxBasePriority\000"
 11982      73655072 
 11982      696F7269 
 11982      747900
 11983              	.LASF136:
 11984 0d9b 76546173 		.ascii	"vTaskDelayUntil\000"
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 322


 11984      6B44656C 
 11984      6179556E 
 11984      74696C00 
 11985              	.LASF66:
 11986 0dab 78457665 		.ascii	"xEventListItem\000"
 11986      6E744C69 
 11986      73744974 
 11986      656D00
 11987              	.LASF117:
 11988 0dba 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 11988      696F7269 
 11988      74795573 
 11988      65644F6E 
 11988      456E7472 
 11989              	.LASF76:
 11990 0dd0 5443425F 		.ascii	"TCB_t\000"
 11990      7400
 11991              	.LASF99:
 11992 0dd6 78546963 		.ascii	"xTicksToWait\000"
 11992      6B73546F 
 11992      57616974 
 11992      00
 11993              	.LASF29:
 11994 0de3 70764F77 		.ascii	"pvOwner\000"
 11994      6E657200 
 11995              	.LASF85:
 11996 0deb 70727644 		.ascii	"prvDeleteTCB\000"
 11996      656C6574 
 11996      65544342 
 11996      00
 11997              	.LASF43:
 11998 0df8 65426C6F 		.ascii	"eBlocked\000"
 11998      636B6564 
 11998      00
 11999              	.LASF147:
 12000 0e01 76546173 		.ascii	"vTaskSuspend\000"
 12000      6B537573 
 12000      70656E64 
 12000      00
 12001              	.LASF235:
 12002 0e0e 76436C65 		.ascii	"vClearInterruptMaskFromISR\000"
 12002      6172496E 
 12002      74657272 
 12002      7570744D 
 12002      61736B46 
 12003              	.LASF134:
 12004 0e29 78416C72 		.ascii	"xAlreadyYielded\000"
 12004      65616479 
 12004      5969656C 
 12004      64656400 
 12005              	.LASF172:
 12006 0e39 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 12006      6B476574 
 12006      43757272 
 12006      656E7454 
 12006      61736B48 
 12007              	.LASF80:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 323


 12008 0e53 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 12008      61736B43 
 12008      6865636B 
 12008      46726565 
 12008      53746163 
 12009              	.LASF93:
 12010 0e6e 78526567 		.ascii	"xRegions\000"
 12010      696F6E73 
 12010      00
 12011              	.LASF98:
 12012 0e77 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 12012      64644375 
 12012      7272656E 
 12012      74546173 
 12012      6B546F44 
 12013              	.LASF242:
 12014 0e96 70784375 		.ascii	"pxCurrentTCB\000"
 12014      7272656E 
 12014      74544342 
 12014      00
 12015              	.LASF211:
 12016 0ea3 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12016      7272656E 
 12016      744E756D 
 12016      6265724F 
 12016      66546173 
 12017              	.LASF138:
 12018 0eba 7854696D 		.ascii	"xTimeIncrement\000"
 12018      65496E63 
 12018      72656D65 
 12018      6E7400
 12019              	.LASF3:
 12020 0ec9 7369676E 		.ascii	"signed char\000"
 12020      65642063 
 12020      68617200 
 12021              	.LASF9:
 12022 0ed5 73686F72 		.ascii	"short unsigned int\000"
 12022      7420756E 
 12022      7369676E 
 12022      65642069 
 12022      6E7400
 12023              	.LASF101:
 12024 0ee8 7854696D 		.ascii	"xTimeToWake\000"
 12024      65546F57 
 12024      616B6500 
 12025              	.LASF65:
 12026 0ef4 78537461 		.ascii	"xStateListItem\000"
 12026      74654C69 
 12026      73744974 
 12026      656D00
 12027              	.LASF78:
 12028 0f03 70785443 		.ascii	"pxTCB\000"
 12028      4200
 12029              	.LASF20:
 12030 0f09 646F7562 		.ascii	"double\000"
 12030      6C6500
 12031              	.LASF221:
ARM GAS  C:\Users\Xwx47\AppData\Local\Temp\ccggyZvw.s 			page 324


 12032 0f10 75785363 		.ascii	"uxSchedulerSuspended\000"
 12032      68656475 
 12032      6C657253 
 12032      75737065 
 12032      6E646564 
 12033              	.LASF64:
 12034 0f25 7078546F 		.ascii	"pxTopOfStack\000"
 12034      704F6653 
 12034      7461636B 
 12034      00
 12035              	.LASF119:
 12036 0f32 76546173 		.ascii	"vTaskResume\000"
 12036      6B526573 
 12036      756D6500 
 12037              	.LASF94:
 12038 0f3e 70727649 		.ascii	"prvInitialiseTaskLists\000"
 12038      6E697469 
 12038      616C6973 
 12038      65546173 
 12038      6B4C6973 
 12039              	.LASF155:
 12040 0f55 70784576 		.ascii	"pxEventListItem\000"
 12040      656E744C 
 12040      69737449 
 12040      74656D00 
 12041              	.LASF167:
 12042 0f65 70765661 		.ascii	"pvValue\000"
 12042      6C756500 
 12043              	.LASF91:
 12044 0f6d 70784372 		.ascii	"pxCreatedTask\000"
 12044      65617465 
 12044      64546173 
 12044      6B00
 12045              	.LASF96:
 12046 0f7b 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 12046      6865636B 
 12046      5461736B 
 12046      73576169 
 12046      74696E67 
 12047              	.LASF187:
 12048 0f9b 756C5265 		.ascii	"ulReturn\000"
 12048      7475726E 
 12048      00
 12049              	.LASF116:
 12050 0fa4 75784375 		.ascii	"uxCurrentBasePriority\000"
 12050      7272656E 
 12050      74426173 
 12050      65507269 
 12050      6F726974 
 12051              	.LASF216:
 12052 0fba 78596965 		.ascii	"xYieldPending\000"
 12052      6C645065 
 12052      6E64696E 
 12052      6700
 12053              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
